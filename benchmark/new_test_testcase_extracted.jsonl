{"name": "p02936 AtCoder Beginner Contest 138 - Ki", "description": "Constraints\n\n* 2 <= N <= 2 * 10^5\n* 1 <= Q <= 2 * 10^5\n* 1 <= a_i < b_i <= N\n* 1 <= p_j <= N\n* 1 <= x_j <= 10^4\n* The given graph is a tree.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN Q\na_1 b_1\n:\na_{N-1} b_{N-1}\np_1 x_1\n:\np_Q x_Q", "testcase": ["2 1\n1 2\n1 100", "3 2\n1 2\n2 3\n1 500\n3 600", "4 1\n1 2\n2 3\n3 4\n4 50", "5 3\n1 2\n2 3\n3 4\n4 5\n1 10\n2 20\n3 30", "6 2\n1 2\n2 3\n3 4\n4 5\n5 6\n5 500\n6 600", "7 3\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n2 70\n5 80\n7 90", "8 2\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n3 300\n8 800", "5 1\n2 3\n3 4\n4 5\n1 2\n2 99", "5 2\n1 3\n3 4\n2 3\n5 4\n1 100\n2 200", "10 5\n2 1\n3 1\n4 2\n5 2\n6 3\n7 3\n8 4\n9 4\n10 5\n1 500\n3 30\n5 50\n7 70\n10 100", "15 7\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n2 20\n4 40\n6 60\n8 80\n10 100\n12 120\n14 140", "20 10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n1 5\n2 10\n3 15\n4 20\n5 25\n6 30\n7 35\n8 40\n9 45\n10 50", "11 3\n1 2\n2 3\n1 5\n5 6\n3 4\n5 7\n7 8\n7 11\n8 9\n9 10\n2 200\n7 700\n10 1000", "12 4\n1 2\n1 3\n2 4\n2 5\n3 6\n6 7\n5 8\n4 9\n9 10\n10 11\n11 12\n3 300\n5 500\n7 700\n9 900", "13 2\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n6 666\n13 1313", "14 7\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n1 100\n2 200\n3 300\n4 400\n5 500\n6 600\n7 700", "16 5\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n1 111\n3 333\n5 555\n7 777\n9 999", "17 8\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n2 222\n4 444\n6 666\n8 888\n10 1010\n12 1212\n14 1414\n16 1616", "18 6\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n3 33\n6 66\n9 99\n12 1212\n15 1515\n18 1818", "19 8\n1 2\n2 3\n1 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n2 200\n5 500\n8 800\n11 1100\n14 1400\n17 1700", "20 5\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n4 4444\n9 999\n14 1414\n19 1919", "6 1\n1 2\n1 3\n2 4\n3 5\n3 6\n2 77", "6 2\n1 2\n1 3\n2 4\n3 5\n3 6\n4 444\n6 666", "7 3\n1 2\n1 3\n2 4\n3 5\n3 6\n2 7\n4 111\n5 222\n7 444", "8 4\n1 2\n1 3\n2 4\n3 5\n3 6\n2 7\n4 8\n5 111\n6 333\n8 777", "9 5\n1 2\n1 3\n2 4\n3 5\n3 6\n2 7\n4 8\n5 9\n2 111\n4 222\n6 333\n8 444\n9 555", "10 2\n1 2\n2 3\n1 4\n4 5\n5 6\n6 7\n5 8\n8 9\n9 10\n7 777\n10 1000", "11 3\n1 2\n2 3\n1 4\n4 5\n5 6\n6 7\n5 8\n8 9\n9 10\n10 11\n4 444\n8 888\n11 1111", "12 2\n1 2\n2 3\n1 4\n4 5\n5 6\n6 7\n5 8\n8 9\n9 10\n10 11\n11 12\n9 999\n12 1212", "13 6\n1 2\n2 3\n1 4\n4 5\n5 6\n6 7\n5 8\n8 9\n9 10\n10 11\n11 12\n12 13\n3 333\n6 666\n9 999\n12 1212", "14 1\n1 2\n2 3\n1 4\n4 5\n5 6\n6 7\n5 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n7 777", "15 4\n1 2\n2 3\n1 4\n4 5\n5 6\n6 7\n5 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n4 444\n9 999\n11 1111\n15 1515"]}
{"name": "p02696 AtCoder Beginner Contest 165 - Floor Function", "description": "Constraints\n\n* 1 <= A <= 10^{6}\n* 1 <= B <= 10^{12}\n* 1 <= N <= 10^{12}\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B N", "testcase": ["1 1000000000000 1000000000000", "1000000 1000000 500000000000", "234 456789012345 789012345678", "999999 789456123789 123789456123", "100000 999999999999 1000000000000", "2 10 100", "10 100000000000 999999999999", "123456 789012345678 987654321123", "1 1 1", "1 2 2", "345 678901 234567890", "67890 1234567890 987654321", "10 20 30", "100 200 300", "1000 2000 3000", "10000 20000 30000", "100000 200000 300000", "999998 999999999999 1000000000000", "123 123456 123456789", "987654 1234567 9876543210", "555555 987654321987 123456789123", "654321 987654321012 101234567890", "111111 222222222222 333333333333", "999999 111111111111 222222222222", "333333 444444444444 555555555555", "777777 888888888888 999999999999", "222222 333333333333 444444444444", "888888 777777777777 666666666666", "444444 555555555555 777777777777", "1000000 1000000000 100000000000"]}
{"name": "p03013 AtCoder Beginner Contest 129 - Typical Stairs", "description": "Constraints\n\n* 1 <= N <= 10^5\n* 0 <= M <= N-1\n* 1 <= a_1 < a_2 < ... < a_M <= N-1\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\na_1\na_2\n.\n.\n.\na_M", "testcase": ["3 0\n", "4 1\n1\n", "5 2\n1\n2\n", "6 2\n1\n3\n", "7 3\n1\n3\n5\n", "8 2\n1\n6\n", "9 3\n1\n2\n4\n", "10 0\n", "11 1\n4\n", "12 3\n1\n5\n7\n", "13 4\n1\n4\n6\n9\n", "14 3\n1\n6\n11\n", "15 4\n2\n5\n9\n13\n", "16 1\n3\n", "17 2\n8\n15\n", "18 3\n2\n7\n13\n", "19 3\n3\n8\n14\n", "20 0\n", "21 1\n12\n", "22 2\n20\n21\n", "23 3\n3\n12\n18\n", "24 4\n2\n5\n15\n19\n", "25 2\n1\n10\n", "26 3\n7\n13\n18\n", "27 4\n1\n7\n16\n22\n", "28 3\n12\n23\n27\n", "29 2\n5\n19\n", "30 0\n", "31 1\n2\n", "32 3\n2\n8\n22\n"]}
{"name": "p02953 AtCoder Beginner Contest 136 - Build Stairs", "description": "Constraints\n\n* All values in input are integers.\n* 1 <= N <= 10^5\n* 1 <= H_i <= 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nH_1 H_2 ... H_N", "testcase": ["1\n1000000000", "2\n1 1000000000", "3\n500000000 500000000 500000000", "4\n1 2 3 4", "5\n1 1 1 1 1", "6\n999999999 1000000000 999999999 1000000000 999999999 1000000000", "7\n1000000000 999999999 1000000000 999999999 1000000000 999999999 1000000000", "8\n100 200 300 400 500 600 700 800", "9\n1 1 2 2 3 3 4 4 5", "10\n100000000 200000000 300000000 400000000 500000000 600000000 700000000 800000000 900000000 1000000000", "10\n10 20 30 40 50 60 70 80 90 100", "10\n1000000000 900000000 800000000 700000000 600000000 500000000 400000000 300000000 200000000 100000000", "11\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000", "12\n2 4 6 8 10 12 14 16 18 20 22 24", "13\n999999999 999999999 999999999 999999999 999999999 999999999 999999999 999999999 999999999 999999999 999999999 999999999 999999999", "14\n1000000000 999999999 999999998 999999997 999999996 999999995 999999994 999999993 999999992 999999991 999999990 999999989 999999988 999999987", "15\n1 100000000 200000000 300000000 400000000 500000000 600000000 700000000 800000000 900000000 1000000000 999999999 999999998 999999997 999999996", "16\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16", "17\n1 100000000 200000000 300000000 400000000 500000000 600000000 700000000 800000000 900000000 1000000000 900000000 800000000 700000000 600000000 500000000 400000000", "18\n1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000", "19\n123456789 234567891 345678912 456789123 567891234 678912345 789123456 891234567 912345678 123456789 234567891 345678912 456789123 567891234 678912345 789123456 891234567 912345678 123456789", "20\n50 60 70 80 90 100 110 120 130 140 150 160 170 180 190 200 210 220 230 240", "21\n5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95 100 105", "22\n1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11 11 12", "23\n10000000 20000000 30000000 40000000 50000000 60000000 70000000 80000000 90000000 100000000 110000000 120000000 130000000 140000000 150000000 160000000 170000000 180000000 190000000 200000000 210000000 220000000 230000000", "24\n10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 24", "25\n123 245 367 489 510 632 754 876 998 111 233 355 477 599 611 733 855 977 199 211 333 455 577 699 821", "26\n500000000 500000000 500000000 500000000 500000000 500000000 500000000 500000000 500000000 500000000 500000000 500000000 500000000 500000000 500000000 500000000 500000000 500000000 500000000 500000000 500000000 500000000 500000000 500000000 500000000 500000000", "27\n100 200 300 100 200 300 100 200 300 100 200 300 100 200 300 100 200 300 100 200 300 100 200 300 100", "28\n1000000000 20000000 30000000 40000000 500000000 60000000 70000000 80000000 900000000 100000000 110000000 120000000 130000000 140000000 150000000 160000000 170000000 180000000 190000000 200000000 210000000 22000000 23000000 24000000 250000000 26000000 27000000 28000000", "29\n1000000000 900000000 800000000 700000000 600000000 500000000 400000000 300000000 200000000 100000000 1000000000 900000000 800000000 700000000 600000000 500000000 400000000 300000000 200000000 100000000 1000000000 900000000 800000000 700000000 600000000 500000000 400000000 300000000 200000000", "30\n999999999 999999998 999999997 999999996 999999995 999999994 999999993 999999992 999999991 999999990 999999989 999999988 999999987 999999986 999999985 999999984 999999983 999999982 999999981 999999980 999999979 999999978 999999977 999999976 999999975 999999974 999999973 999999972 999999971"]}
{"name": "791_A. Bear and Big Brother", "description": "Input\n\nThe only line of the input contains two integers a and b (1 <= a <= b <= 10) --- the weight of Limak and the weight of Bob respectively.", "testcase": ["1 1", "1 2", "1 3", "1 4", "1 5", "1 6", "1 7", "1 8", "1 9", "1 10", "2 2", "2 3", "2 4", "2 5", "2 6", "2 7", "2 8", "2 9", "2 10", "3 3", "3 4", "3 5", "3 6", "3 7", "3 8", "3 9", "3 10", "4 4", "4 5", "4 6"]}
{"name": "p02891 AtCoder Grand Contest 039 - Connection and Disconnection", "description": "Constraints\n\n* 1 <= |S| <= 100\n* S consists of lowercase English letters.\n* 1 <= K <= 10^9\n* K is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS\nK", "testcase": ["a\n1", "abc\n1000000000", "xyz\n999999999", "pqrstuvw\n10", "k\n123456789", "zyxwvutsrqponmlkjihgfedcba\n100", "a\n1000000000", "bcdefghijklmnopqrstuvwxyz\n10", "mnopqrstuvwx\n234567890", "abcdefghij\n987654321", "klmnopqrst\n111111111", "uvwxyz\n222222222", "nopqrstuvwxyzabcde\n333333333", "fghijklmnopqrs\n444444444", "tuvwxyzabcdefghi\n555555555", "jklmnopqrstuvwx\n666666666", "yzabcdefghijk\n777777777", "lmnopqrstuvwxz\n888888888", "cdefghijklmn\n999999999", "opqrstuvwxyza\n987654321", "bcdefghijklmno\n123456789", "pqrstuvwxyzabcdefgh\n100000000", "ijklmnopqrstuv\n200000000", "wxyzabcdefghij\n300000000", "klmnopqrstuvwx\n400000000", "yzabcdefghijkl\n500000000", "mnopqrstuvwxyz\n600000000", "cdefghijklmnopqrst\n700000000", "uvwxabcdefghijklmnopqrs\n800000000", "tuvwxyza\n900000000"]}
{"name": "p02693 AtCoder Beginner Contest 165 - We Love Golf", "description": "Constraints\n\n* All values in input are integers.\n* 1 <= A <= B <= 1000\n* 1 <= K <= 1000\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nK\nA B", "testcase": ["2\n1 10", "5\n20 100", "25\n250 750", "100\n100 1000", "10\n1 10", "15\n5 20", "8\n8 80", "33\n100 300", "7\n1 7", "500\n500 1000", "9\n9 18", "4\n4 4", "50\n50 500", "3\n3 999", "1\n1 1000", "45\n45 450", "999\n1 999", "250\n250 1000", "1000\n1 1000", "6\n6 60", "32\n64 128", "300\n300 600", "22\n22 220", "11\n11 110", "16\n32 64", "2\n1 100", "100\n200 1000", "999\n999 1000", "500\n750 1000", "333\n666 999"]}
{"name": "p02718 AtCoder Beginner Contest 161 - Popular Vote", "description": "Constraints\n\n* 1 <= M <= N <= 100\n* 1 <= A_i <= 1000\n* A_i are distinct.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nA_1 ... A_N", "testcase": ["2 1\n1 1000", "10 5\n16 82 35 64 112 3 9 71 24 67", "3 3\n200 456 999", "100 50\n1000 999 998 997 996 995 994 993 992 991 990 989 988 987 986 985 984 983 982 981 980 979 978 977 976 975 974 973 972 971 970 969 968 967 966 965 964 963 962 961 960 959 958 957 956 955 954 953 952 951 950 949 948 947", "4 2\n8 27 64 125", "20 10\n15 47 58 395 71 13 24 56 78 910 33 46 59 72 89 123 234 345 456 567", "7 4\n102 202 302 402 502 602 702", "50 25\n16 32 48 64 80 96 112 128 144 160 176 192 208 224 240 256 272 288 304 320 336 352 368 384 400 416 432 448 464 480 496 512 528 544 560 576 592 608 624 640 656 672 688 704 720 736 752", "5 1\n1 2 3 4 5", "6 2\n10 20 30 40 50 60", "30 15\n100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71", "8 8\n8 7 6 5 4 3 2 1", "22 11\n103 215 327 439 551 663 775 887 999 111 223 335 447 559 671 783 895 106 218 330 442 554", "12 6\n45 46 47 48 49 50 51 52 53 54 55 56", "14 7\n7 77 777 217 437 657 877 197 417 637 857 177 397 617", "33 17\n473 283 153 36 812 926 370 25 438 697 150 602 346 97 418 204 949 621 802 491 295 52 786 929 616 53 318 167 803 750 913 104 379", "17 9\n231 105 674 834 961 542 285 193 643 478 21 742 349 978 456 501 899", "11 5\n876 324 592 389 167 945 403 721 558 214 80", "60 30\n879 218 557 896 335 74 513 952 391 830 269 708 147 586 25 464 903 372 811 240 689 118 567 16 445 874 303 732 191 610 89 488 917 346 775 204 667 96 545 4 423 852 281 710 169 648 37 526 925 384 793 252", "18 9\n634 912 375 804 201 591 22 409 796 364 867 435 78 471 864 258 645 33", "23 12\n591 888 279 670 61 348 823 413 2 181 560 123 684 295 706 317 928 539 150 760 371 892 483", "31 16\n749 326 803 380 857 434 911 488 965 542 19 596 73 650 127 704 181 758 235 812 289 866 343 920 397 974 451 28 505 82 559", "19 10\n224 875 526 177 828 479 130 781 432 83 734 385 36 687 338 939 890 441 992", "40 20\n957 523 89 655 221 787 353 919 485 51 717 273 849 405 981 537 103 669 235 801 367 933 499 65 729 295 861 427 993 559 121", "35 18\n832 398 964 530 96 658 224 786 352 914 480 48 712 278 942 506 70 734 300 868 434 2 766 332 900 466 34 698 264 926 492 58 720 286 854", "16 8\n913 279 823 189 733 99 643 9 553 463 373 283 183 93 3 993", "21 11\n792 348 904 460 16 628 184 796 352 908 464 20 632 188 800 356 912 468 24 636 192", "28 14\n945 501 57 713 269 881 437 995 551 103 759 325 17 693 259 865 431 37 709 275 887 443 101 755 311 969 525 159", "26 13\n585 141 747 303 909 465 21 683 249 845 407 9 671 237 833 399 965 531 97 689 255 851 413 15 677 243", "32 16\n630 186 742 298 854 410 966 522 78 634 190 746 302 858 414 970 526 82 638 194 750 306 862 418 974 530 86 642 198 754 310 866", "24 12\n678 234 840 396 2 558 114 720 276 882 438 994 550 106 712 268 874 430 986 542 98 704 260 866", "34 17\n532 88 674 230 816 372 958 514 44 630 186 772 328 914 470 16 562 118 714 270 856 412 998 554 66 678 222 830 374 972 516 58 620 174", "27 14\n375 931 487 43 599 155 711 267 823 379 935 491 47 603 159 715 271 827 383 939 495 51 607 163 719 275 831"]}
{"name": "443_A. Anton and Letters", "description": "Input\n\nThe first and the single line contains the set of letters. The length of the line doesn't exceed 1000. It is guaranteed that the line starts from an opening curved bracket and ends with a closing curved bracket. Between them, small English letters are listed, separated by a comma. Each comma is followed by a space.", "testcase": ["(a, b, c, d, e, f, g)", "(a, b, c)", "(x, y, z)", "(i, j, k, l, m, n, o, p)", "(q, r, s, t, u, v, w)", "(a)", "(b, c, d, e, f, g, h, i, j, k)", "(l, m, n, o, p, q, r, s, t, u)", "(v, w, x, y, z)", "(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z)", "(a, b, c, d, e, f, g, h, i)", "(j, k, l, m, n, o, p, q, r, s)", "(t, u, v, w, x, y, z)", "(a, c, e, g, i, k, m)", "(b, d, f, h, j, l, n, p)", "(o, q, s, u, w, y)", "(a, b, x, y)", "(c, d, v, z)", "(e, f, s, q)", "(g, h, p, o)", "(i, j, n, m)", "(k, l, r, t)", "(u, v, w, x, y, z)", "(a, e, i, o, u)", "(b, c, d, f, g, h, j, k, l, m, n, p, q, r, s, t, v, w, x, y, z)", "(l, a, e, i, o, u, t, s, r, q, p, n, m, k, j, h, g, f, d, c, b, w, v, x, z, y)", "(m, n, b, c, d, e, f, g, h, i, j, k, l, a, o, p, q, r, s, t, u, v, w, x, y, z)", "(o, p, q, r, s, t, a, b, c, d, e, f, g, h, i, j, k, l, m, n, u, v, w, x, y, z)", "(u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t)", "(z, y, x, w, v, u, t, s, r, q, p, o, n, m, l, k, j, i, h, g, f, e, d, c, b, a)"]}
{"name": "p03324 AtCoder Beginner Contest 100 - Ringo's Favorite Numbers", "description": "Constraints\n\n* D is 0, 1 or 2.\n* N is an integer between 1 and 100 (inclusive).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nD N", "testcase": ["0 1", "1 20", "2 35", "0 2", "1 50", "2 65", "0 3", "1 75", "2 80", "0 4", "1 90", "2 95", "0 5", "1 30", "2 40", "0 10", "1 60", "2 70", "0 15", "1 55", "2 85", "0 25", "1 45", "2 100", "0 99", "1 66", "2 77", "0 33", "1 88", "2 22"]}
{"name": "p02862 AtCoder Beginner Contest 145 - Knight", "description": "Constraints\n\n* 1 <= X <= 10^6\n* 1 <= Y <= 10^6\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX Y", "testcase": ["1 1", "100000 500000", "500000 100000", "999999 999999", "123456 654321", "234567 765432", "345678 876543", "456789 987654", "100001 100001", "200002 200002", "300003 300003", "400004 400004", "500005 500005", "600006 600006", "700007 700007", "800008 800008", "900009 900009", "950000 950000", "12345 54321", "23456 65432", "1000000 1", "1 1000000", "555555 555555", "404040 404040", "101010 101010", "202020 202020", "303030 303030", "404040 404040", "505050 505050", "606060 606060"]}
{"name": "p03854 AtCoder Beginner Contest 049 - Daydream", "description": "Constraints\n\n* 1<=|S|<=10^5\n* S consists of lowercase English letters.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nS", "testcase": ["a", "b", "z", "y", "e", "kx", "hq", "mn", "bc", "fg", "abcdefghij", "klmnopqrst", "uvwxyzabcd", "efghijklmn", "opqrstuvwx", "randomletters", "justsomewords", "computerscience", "artificialintel", "machinelearning", "neuralnetworks", "algorithmicprob", "easytestcase", "mediumtestcase", "longtestcasexyz", "onechar", "twochars", "twentycharactrs", "thirtycharactrsx", "xyzabcdefghijklmnopqrstuvw"]}
{"name": "469_A. I Wanna Be the Guy", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 100). \n\nThe next line contains an integer p (0 <= p <= n) at first, then follows p distinct integers a1, a2, ..., ap (1 <= ai <= n). These integers denote the indices of levels Little X can pass. The next line contains the levels Little Y can pass in the same format. It's assumed that levels are numbered from 1 to n.", "testcase": ["1\n0\n0", "2\n1 1\n1 2", "3\n2 1 3\n2 2 3", "4\n0\n4 1 2 3 4", "5\n3 1 3 5\n2 2 4", "6\n4 2 3 5 6\n2 4 6", "7\n7 1 2 3 4 5 6 7\n0", "8\n4 1 3 6 8\n4 2 4 5 7", "9\n5 1 3 5 7 9\n4 2 4 6 8", "10\n0\n10 1 2 3 4 5 6 7 8 9 10", "11\n5 2 4 5 6 8\n6 1 3 7 9 10 11", "12\n6 1 4 7 8 10 12\n6 2 3 5 6 9 11", "13\n0\n13 1 2 3 4 5 6 7 8 9 10 11 12 13", "14\n7 1 3 5 7 9 11 13\n7 2 4 6 8 10 12 14", "15\n8 1 2 4 5 7 8 10 11\n7 3 6 9 12 13 14 15", "16\n0\n16 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16", "17\n4 3 5 11 17\n13 1 2 4 6 7 8 9 10 12 13 14 15 16", "18\n9 1 2 3 4 5 6 7 8 9\n9 10 11 12 13 14 15 16 17 18", "19\n6 7 9 11 14 17 19\n13 1 2 3 4 5 6 8 10 12 13 15 16 18", "20\n10 2 4 6 8 10 12 14 16 18 20\n10 1 3 5 7 9 11 13 15 17 19", "21\n7 3 6 9 12 15 18 21\n14 1 2 4 5 7 8 10 11 13 14 16 17 19 20", "22\n0\n22 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22", "23\n11 1 3 5 7 9 11 13 15 17 19 21 23\n12 2 4 6 8 10 12 14 16 18 20 22", "24\n12 2 4 6 8 10 12 14 16 18 20 22 24\n12 1 3 5 7 9 11 13 15 17 19 21 23", "25\n0\n25 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25", "26\n13 1 2 3 4 5 6 7 8 9 10 11 12 13\n13 14 15 16 17 18 19 20 21 22 23 24 25 26", "27\n14 1 3 5 7 9 11 13 15 17 19 21 23 25 27\n13 2 4 6 8 10 12 14 16 18 20 22 24 26", "28\n0\n28 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28", "29\n14 2 4 6 8 10 12 14 16 18 20 22 24 26 28\n15 1 3 5 7 9 11 13 15 17 19 21 23 25 27 29", "30\n15 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\n15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30"]}
{"name": "p03221 AtCoder Beginner Contest 113 - ID", "description": "Constraints\n\n* 1 <= N <= 10^5\n* 1 <= M <= 10^5\n* 1 <= P_i <= N\n* 1 <= Y_i <= 10^9\n* Y_i are all different.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nP_1 Y_1\n:\nP_M Y_M", "testcase": ["1 1\n1 1000000000", "2 1\n1 500000000", "2 2\n1 999999999\n2 888888888", "3 3\n1 500\n2 300\n3 200", "4 2\n1 10\n4 20", "5 5\n1 1\n2 2\n3 3\n4 4\n5 5", "6 3\n6 1000\n3 2000\n1 3000", "7 4\n1 123456789\n7 987654321\n3 111111111\n4 222222222", "8 6\n2 10\n3 20\n5 30\n8 40\n1 50\n4 60", "9 9\n1 900\n2 800\n3 700\n4 600\n5 500\n6 400\n7 300\n8 200\n9 100", "10 5\n10 1\n9 2\n8 3\n7 4\n6 5", "10 10\n1 100000000\n2 90000000\n3 80000000\n4 70000000\n5 60000000\n6 50000000\n7 40000000\n8 30000000\n9 20000000\n10 10000000", "11 7\n1 2147483647\n2 1000\n3 2000\n11 7000\n7 3000\n8 4000\n5 5000", "12 12\n1 10\n2 20\n3 30\n4 40\n5 50\n6 60\n7 70\n8 80\n9 90\n10 100\n11 110\n12 120", "13 3\n1 999\n5 888\n13 777", "14 6\n14 456789\n6 345678\n7 234567\n1 999999\n4 876543\n2 123456", "15 15\n1 15\n2 14\n3 13\n4 12\n5 11\n6 10\n7 9\n8 8\n9 7\n10 6\n11 5\n12 4\n13 3\n14 2\n15 1", "16 4\n8 16\n16 15\n4 14\n12 13", "17 8\n1 17\n5 33\n9 49\n13 65\n2 81\n6 97\n10 113\n14 129", "18 9\n18 999999999\n9 888888888\n17 777777777\n8 666666666\n16 555555555\n7 444444444\n15 333333333\n6 222222222\n14 111111111", "19 10\n10 100000000\n1 200000000\n11 300000000\n2 400000000\n12 500000000\n3 600000000\n13 700000000\n4 800000000\n14 900000000\n5 99999999", "20 5\n20 12345\n10 23456\n15 34567\n5 45678\n1 56789", "21 7\n3 654321\n6 543210\n9 432109\n12 321098\n15 210987\n18 109876\n21 98765", "22 11\n22 1000000000\n11 900000000\n20 800000000\n9 700000000\n18 600000000\n7 500000000\n16 400000000\n5 300000000\n14 200000000\n3 100000000\n12 99999999", "23 2\n23 23\n1 42", "24 12\n2 500\n4 1000\n6 1500\n8 2000\n10 2500\n12 3000\n14 3500\n16 4000\n18 4500\n20 5000\n22 5500\n24 6000", "25 3\n7 800\n1 700\n19 900", "26 13\n1 10000\n3 20000\n5 30000\n7 40000\n9 50000\n11 60000\n13 70000\n15 80000\n17 90000\n19 100000\n21 110000\n23 120000\n25 130000", "27 3\n1 111\n9 222\n18 333", "28 4\n28 1234\n1 5678\n14 2468\n27 13579", "29 5\n2 987\n5 654\n11 321\n22 432\n29 543", "30 30\n1 1000000000\n2 999999999\n3 999999998\n4 999999997\n5 999999996\n6 999999995\n7 999999994\n8 999999993\n9 999999992\n10 999999991\n11 999999990\n12 999999989\n13 999999988\n14 999999987\n15 999999986\n16 999999985\n17 999999984\n18 999999983\n19 999999982\n20 999999981\n21 999999980\n22 999999979\n23 999999978\n24 999999977\n25 999999976\n26 999999975\n27 999999974\n28 999999973\n29 999999972\n30 999999971"]}
{"name": "p03309 AtCoder Beginner Contest 102 - Linear Approximation", "description": "Constraints\n\n* 1 <= N <= 2 * 10^5\n* 1 <= A_i <= 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 A_2 ... A_N", "testcase": ["2\n1 2", "3\n4 5 6", "1\n1", "5\n10 10 10 10 10", "4\n100000000 100000000 100000000 100000000", "6\n1 2 3 4 5 6", "7\n1 3 5 7 9 11 13", "8\n2 4 6 8 10 12 14 16", "10\n9876541 1237894 4561237 1289047 9078564 3948576 9387214 4827391 2739485 9482736", "2\n999999999 1000000000", "4\n13 17 19 23", "20\n935 803 746 422 701 506 524 105 281 838 689 727 781 929 192 947 678 632 715 142", "15\n19 18 17 16 15 14 13 12 11 10 9 8 7 6 5", "11\n237 101 765 320 890 456 123 789 321 654 987", "3\n234 678 912", "9\n1761283 8127482 3812741 8127412 3184271 4173821 9812743 3812743 1832748", "6\n8 6 7 5 3 0", "3\n100 200 300", "19\n20 40 60 80 100 120 140 160 180 200 220 240 260 280 300 320 340 360 380", "4\n438 627 824 156", "7\n881 703 593 421 359 279 183", "12\n2 3 5 7 11 13 17 19 23 29 31 37", "5\n400000000 500000000 600000000 700000000 800000000", "8\n10000000 20000000 30000000 40000000 50000000 60000000 70000000 80000000", "6\n948576 384756 283475 756384 564738 947563", "14\n600 800 700 900 500 400 200 300 100 1000 1100 1200 1300 1400", "4\n444444444 555555555 666666666 777777777", "7\n23 35 46 57 68 79 81", "9\n383 477 295 53 76 389 77 45 26", "10\n1 2 3 4 5 6 7 8 9 10"]}
{"name": "148_A. Insomnia cure", "description": "Input\n\nInput data contains integer numbers k, l, m, n and d, each number in a separate line (1 <= k, l, m, n <= 10, 1 <= d <= 10^5).", "testcase": ["1\n2\n3\n4\n10000", "2\n3\n4\n5\n50000", "1\n1\n1\n1\n99999", "5\n6\n7\n8\n12345", "3\n4\n5\n6\n23456", "2\n2\n2\n2\n10000", "10\n9\n8\n7\n34567", "4\n3\n2\n1\n54321", "6\n5\n4\n3\n60000", "7\n8\n9\n10\n76543", "1\n2\n2\n1\n20000", "3\n3\n3\n3\n30000", "8\n6\n4\n2\n40000", "9\n7\n5\n3\n50000", "10\n10\n10\n10\n10000", "1\n3\n5\n7\n35000", "2\n4\n6\n8\n45000", "3\n6\n9\n3\n55000", "4\n8\n3\n7\n65000", "5\n10\n2\n9\n75000", "1\n1\n2\n2\n85000", "2\n2\n3\n3\n95000", "3\n3\n4\n4\n23456", "4\n4\n5\n5\n34567", "5\n5\n6\n6\n45678", "6\n6\n7\n7\n56789", "7\n7\n8\n8\n67890", "8\n8\n9\n9\n78901", "9\n9\n10\n10\n89012", "10\n1\n10\n1\n100000"]}
{"name": "1353_B. Two Arrays And Swaps", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 200) --- the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains two integers n and k (1 <= n <= 30; 0 <= k <= n) --- the number of elements in a and b and the maximum number of moves you can do. The second line of the test case contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 30), where a_i is the i-th element of a. The third line of the test case contains n integers b_1, b_2, ..., b_n (1 <= b_i <= 30), where b_i is the i-th element of b.", "testcase": ["1\n2 1\n1 2\n3 4", "1\n3 2\n5 6 7\n8 9 10", "1\n4 0\n10 20 15 30\n25 15 20 10", "1\n5 3\n4 1 3 2 5\n5 4 3 2 1", "1\n6 4\n6 11 2 8 15 9\n1 3 14 7 12 2", "1\n7 5\n9 5 3 8 2 10 4\n1 4 6 3 7 9 5", "1\n8 7\n16 3 10 8 4 20 13 6\n12 14 7 2 15 1 16 3", "1\n9 1\n8 7 6 5 4 3 2 1 9\n9 8 7 6 5 4 3 2 1", "1\n10 6\n1 2 3 4 5 6 7 8 9 10\n11 12 13 14 15 16 17 18 19 20", "1\n2 0\n21 22\n30 29", "1\n3 3\n7 6 5\n4 5 6", "1\n4 2\n8 10 11 12\n12 10 9 8", "1\n5 1\n5 10 15 20 25\n1 3 5 7 9", "1\n6 0\n6 5 4 3 2 1\n1 2 3 4 5 6", "1\n7 2\n14 1 3 5 9 11 6\n8 10 7 2 13 12 4", "1\n8 4\n10 11 12 13 14 15 16 17\n18 19 20 21 22 23 24 25", "1\n9 0\n20 2 4 6 8 10 12 14 16\n1 3 5 7 9 11 13 15 17", "1\n10 7\n3 6 9 12 15 18 21 24 27 30\n26 23 20 17 14 11 8 5 2 1", "1\n5 5\n29 28 26 25 22\n2 5 7 8 10", "1\n4 1\n18 17 16 15\n15 16 17 18", "1\n3 2\n14 13 12\n11 10 9", "1\n2 1\n3 2\n1 4", "1\n6 1\n22 24 25 23 21 20\n19 18 17 16 15 14", "1\n7 3\n4 3 7 1 2 6 5\n8 5 2 9 3 7 6", "1\n8 0\n8 7 6 5 4 3 2 1\n1 2 3 4 5 6 7 8", "1\n9 9\n27 25 23 21 19 17 15 13 11\n12 14 16 18 20 22 24 26 28", "1\n10 5\n1 2 3 4 5 6 7 8 9 10\n10 9 8 7 6 5 4 3 2 1", "1\n9 4\n23 26 25 19 20 18 21 24 22\n21 20 18 19 17 16 22 23 25", "1\n5 2\n2 4 6 8 10\n1 3 5 7 9", "1\n6 3\n1 3 2 6 4 5\n5 6 4 3 2 1"]}
{"name": "492_B. Vanya and Lanterns", "description": "Input\n\nThe first line contains two integers n, l (1 <= n <= 1000, 1 <= l <= 10^9) --- the number of lanterns and the length of the street respectively. \n\nThe next line contains n integers ai (0 <= ai <= l). Multiple lanterns can be located at the same point. The lanterns may be located at the ends of the street.", "testcase": "{\n    \"testcases\": [\n        \"2 10\\n0 10\",\n        \"3 100\\n0 50 100\",\n        \"4 500\\n0 150 300 500\",\n        \"5 1000\\n0 200 400 600 1000\",\n        \"6 10000\\n0 2000 4000 6000 8000 10000\",\n        \"1 200\\n0\",\n        \"2 300\\n0 300\",\n        \"8 123456789\\n0 12345678 24691356 37037034 49382712 61728390 74074068 86419746\",\n        \"2 500000000\\n0 500000000\",\n        \"10 1000000000\\n0 100000000 200000000 300000000 400000000 500000000 600000000 700000000 800000000 900000000\",\n        \"3 50\\n0 25 50\",\n        \"4 100\\n0 33 66 100\",\n        \"5 200\\n0 40 80 120 160\",\n        \"6 300\\n0 50 100 150 200 250\",\n        \"7 400\\n0 57 114 171 228 285 342\",\n        \"8 800\\n0 100 200 300 400 500 600 700\",\n        \"9 900\\n0 100 200 300 400 500 600 700 800\",\n        \"10 250\\n0 25 50 75 100 125 150 175 200\",\n        \"11 350\\n0 31 62 93 124 155 186 217 248 279\",\n        \"12 450\\n0 37 75 112 150 187 225 262 300 337\",\n        \"13 550\\n0 42 84 126 168 210 252 294 336 378\",\n        \"14 650\\n0 46 93 139 185 232 278 324 370 416\",\n        \"15 750\\n0 50 100 150 200 250 300 350 400 450\",\n        \"16 850\\n0 53 106 159 212 265 318 371 424 477\",\n        \"17 950\\n0 55 111 166 222 277 333 388 444 499\",\n        \"18 1050\\n0 58 116 175 233 291 350 408 466 525\",\n        \"19 1150\\n0 60 121 181 242 302 363 423 484 544\",\n        \"20 1250\\n0 62 125 187 250 312 375 437 500 562\",\n        \"21 1350\\n0 64 128 192 256 320 384 448 512 576\",\n        \"30 10000\\n0 333 666 999 1332 1665 1998 2331 2664 2997 3330 3663 3996 4329 4662 4995 5328 5661 5994 6327 6660 6993 7326 7659 7992 8325 8658 8991 9324 9657\"\n    ]\n}"}
{"name": "p03076 AtCoder Beginner Contest 123 - Five Dishes", "description": "Constraints\n\n* A, B, C, D and E are integers between 1 and 123 (inclusive).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA\nB\nC\nD\nE", "testcase": ["1\n1\n1\n1\n1", "2\n3\n5\n7\n11", "13\n17\n19\n23\n29", "31\n37\n41\n43\n47", "53\n59\n61\n67\n71", "73\n79\n83\n89\n97", "101\n103\n107\n109\n113", "123\n122\n121\n120\n119", "118\n117\n116\n115\n114", "99\n98\n97\n96\n95", "94\n93\n92\n91\n90", "89\n88\n87\n86\n85", "84\n83\n82\n81\n80", "79\n78\n77\n76\n75", "74\n73\n72\n71\n70", "69\n68\n67\n66\n65", "64\n63\n62\n61\n60", "59\n58\n57\n56\n55", "54\n53\n52\n51\n50", "49\n48\n47\n46\n45", "44\n43\n42\n41\n40", "39\n38\n37\n36\n35", "34\n33\n32\n31\n30", "29\n28\n27\n26\n25", "24\n23\n22\n21\n20", "19\n18\n17\n16\n15", "14\n13\n12\n11\n10", "9\n8\n7\n6\n5", "4\n3\n2\n1\n123", "122\n121\n120\n119\n118"]}
{"name": "p02612 AtCoder Beginner Contest 173 - Payment", "description": "Constraints\n\n* 1 <= N <= 10000\n* N is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "testcase": ["1", "2", "3", "4", "5", "10", "20", "50", "100", "200", "500", "1000", "1500", "2000", "2500", "3000", "3500", "4000", "4500", "5000", "5500", "6000", "6500", "7000", "7500", "8000", "8500", "9000", "9500", "10000"]}
{"name": "p03137 AtCoder Beginner Contest 117 - Streamline", "description": "Constraints\n\n* All values in input are integers.\n* 1 <= N <= 10^5\n* 1 <= M <= 10^5\n* -10^5 <= X_i <= 10^5\n* X_1, X_2, ..., X_M are all different.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nX_1 X_2 ... X_M", "testcase": ["1 1\n0", "10 5\n-1 0 1 99 100", "100000 10\n-100000 -99999 -50000 0 50000 99998 99999 100000", "3 3\n-100 0 100", "100000 5\n-10000 -5000 0 5000 10000", "20 4\n-1000 -100 100 1000", "99999 5\n-99998 -50000 -10 10 99997", "17 8\n-10 -20 -30 40 50 -60 70 80", "12345 6\n12340 12341 12342 12343 12344 -12345", "2 2\n-2 2", "50 9\n-10000 -5000 -2500 0 2500 5001 10002 12345 23456", "33333 5\n-33330 -33331 33332 33333 33334", "100000 100000\n", "85000 2\n-85000 85000", "74238 4\n-27182 -19823 12679 74237", "1024 10\n-1023 -512 0 511 1023 -1 -11 11 100 999", "34567 5\n-20000 0 1000 20000 34566", "40000 6\n-39999 -39998 39997 39998 39999 40000", "25 5\n-10 -5 5 10 24", "9999 10\n-9990 -9000 -8000 -7000 -6000 -500 -400 -300 -200 -100", "55555 8\n-50000 -25000 0 25000 50000 51000 52000 53000", "716 12\n-715 -350 0 350 710 -100 -200 200 400 500 -300 600", "9876 4\n-4000 0 4000 9875", "67890 20\n-60000 -50000 -40000 -30000 -20000 -10000 0 10000 20000 30000 40000 50000 60000 61000 62000 63000 64000 65000 -65000 -64000", "42 5\n-40 -20 0 20 41", "65321 3\n-65320 0 65320", "99998 2\n-99997 99996", "31415 7\n-31414 -15707 0 15708 31414 20000 -20000", "27182 5\n-13591 0 13591 27181 -27182", "19876 6\n-19875 -15000 0 15000 19875 19876"]}
{"name": "510_A. Fox And Snake", "description": "Input\n\nThe only line contains two integers: n and m (3 <= n, m <= 50). \n\nn is an odd number.", "testcase": ["3 3", "5 4", "7 10", "9 12", "11 14", "13 20", "15 18", "17 22", "19 24", "21 26", "23 30", "25 32", "27 33", "29 34", "31 35", "33 36", "35 40", "37 42", "39 44", "41 46", "43 48", "45 50", "47 5", "49 6", "3 7", "5 8", "7 9", "9 11", "11 13", "13 15"]}
{"name": "p03032 AtCoder Beginner Contest 128 - equeue", "description": "Constraints\n\n* All values in input are integers.\n* 1 <= N <= 50\n* 1 <= K <= 100\n* -10^7 <= V_i <= 10^7\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nV_1 V_2 ... V_N", "testcase": ["2 5\n-100 10000", "3 10\n-5000000 6000000 -7000000", "1 1\n0", "50 100\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50", "10 20\n10000000 -10000000 5000000 -5000000 1 -1 0 123456 654321 -987654", "4 4\n-1 0 1 -2", "6 12\n10000 -10000 20000 -20000 30000 -30000", "7 50\n1000000 2000000 -3000000 -4000000 5000000 -6000000 7000000", "8 8\n0 0 0 0 0 0 0 0", "5 15\n12345 -12345 67890 -67890 23456", "9 30\n1111111 2222222 3333333 4444444 -5555555 -6666666 7777777 8888888 -9999999", "11 11\n-3333333 3333333 -6666666 6666666 -9999999 9999999 -2222222 2222222 -4444444 4444444 0", "13 25\n10000000 2000000 3000000 4000000 5000000 -6000000 -7000000 -8000000 -9000000 -10000000 1234567 -2345678 3456789", "14 14\n-100 150 -200 250 -300 350 -400 450 -500 550 -600 650 -700", "15 100\n1 -2 3 -4 5 -6 7 -8 9 -10 11 -12 13 -14 15", "16 16\n0 1 -1 2 -2 3 -3 4 -4 5 -5 6 -6 7 7", "17 85\n9999999 -9999998 9999997 -9999996 9999995 -9999994 9999993 -9999992 9999991 -9999990 9999989 -9999988 9999987 -9999986 9999985 -9999984 9999983", "18 18\n-4444444 4444444 -3333333 3333333 -2222222 2222222 -1111111 1111111 -555555 555555 -444444 444444 -333333 333333 -222222 222222 -111111", "19 75\n10000000 -10000000 0 5000000 -5000000 2500000 -2500000 1250000 -1250000 625000 -625000 312500 -312500 156250 -156250 78125 -78125 39062 -39062", "20 20\n-1 1 -2 2 -3 3 -4 4 -5 5 -6 6 -7 7 -8 8 -9 9 -10 10", "21 33\n21000000 -21000000 19000000 -19000000 17000000 -17000000 15000000 -15000000 13000000 -13000000 11000000 -11000000 9000000 -9000000 7000000 -7000000 5000000 -5000000 3000000 -3000000 1000000", "22 55\n22 -21 20 -19 18 -17 16 -15 14 -13 12 -11 10 -9 8 -7 6 -5 4 -3 2 -1", "23 23\n7000000 -7000000 6600000 -6600000 6200000 -6200000 5800000 -5800000 5400000 -5400000 5000000 -5000000 4600000 -4600000 4200000 -4200000 3800000 -3800000 3400000 -3400000 3000000", "24 100\n24000000 23000000 -22000000 -21000000 20000000 19000000 -18000000 -17000000 16000000 15000000 -14000000 -13000000 12000000 11000000 -10000000 -9000000 8000000 7000000 -6000000 -5000000", "25 50\n-10 10 -20 20 -30 30 -40 40 -50 50 -60 60 -70 70 -80 80 -90 90 -100 100 -110 110 -120 120 -130 130 -140 140 -150 150 -160 160", "26 26\n-10000000 -9000000 -8000000 -7000000 -6000000 -5000000 -4000000 -3000000 -2000000 -1000000 0 1000000 2000000 3000000 4000000 5000000 6000000 7000000 8000000 9000000 10000000", "27 75\n27000000 -26000000 25000000 -24000000 23000000 -22000000 21000000 -20000000 19000000 -18000000 17000000 -16000000 15000000", "28 28\n28000000 -27000000 26000000 -25000000 24000000 -23000000 22000000 -21000000", "29 100\n29000000 -28000000 27000000 -26000000 25000000 -24000000", "30 30\n10000000 -9000000 8000000 -7000000 6000000 -5000000 4000000 -3000000 2000000 -1000000 0", "31 31\n31000000 -30000000 29000000 -28000000 27000000 -26000000 25000000 -24000000 23000000 -22000000 21000000"]}
{"name": "p02973 AtCoder Beginner Contest 134 - Sequence Decomposing", "description": "Constraints\n\n* 1 <= N <= 10^5\n* 0 <= A_i <= 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1\n:\nA_N", "testcase": ["1\n0", "2\n1\n2", "3\n3\n1\n2", "4\n10\n20\n30\n40", "5\n1048576\n2097152\n4194304\n8388608\n16777216", "6\n1\n1\n1\n1\n1\n1", "10\n2\n4\n8\n16\n32\n64\n128\n256\n512\n1024", "7\n1000000000\n500000000\n100000000\n50000000\n10000000\n5000000\n1000000", "1\n999999999", "20\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100\n100", "8\n255\n0\n128\n0\n64\n0\n32\n0", "9\n1\n10\n100\n1000\n10000\n100000\n1000000\n10000000\n100000000", "11\n10\n20\n30\n40\n50\n60\n70\n80\n90\n100\n110", "12\n100000000\n90000000\n80000000\n70000000\n60000000\n50000000\n40000000\n30000000\n20000000\n10000000\n5000000\n1000000", "13\n0\n1\n0\n1\n0\n1\n0\n1\n0\n1\n0\n1\n0", "14\n5\n10\n20\n40\n80\n160\n320\n640\n1280\n2560\n5120\n10240\n20480\n40960", "15\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15", "16\n98765432\n87654321\n76543210\n65432109\n54321098\n43210987\n32109876\n21098765\n10987654\n9876543\n8765432\n7654321\n6543210\n5432109\n4321098\n3210987", "17\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0", "18\n999999999\n888888888\n777777777\n666666666\n555555555\n444444444\n333333333\n222222222\n111111111\n0\n999999999\n888888888\n777777777\n666666666\n555555555\n444444444\n333333333\n222222222", "19\n100000000\n10000000\n1000000\n100000\n10000\n1000\n100\n10\n1\n100\n1000\n10000\n100000\n1000000\n10000000\n100000000\n999999999\n123456789\n234567890", "20\n32768\n65536\n131072\n262144\n524288\n1048576\n2097152\n4194304\n8388608\n16777216\n33554432\n67108864\n134217728\n268435456\n536870912\n1073741824\n134217728\n67108864\n33554432\n16777216", "21\n2\n3\n5\n7\n11\n13\n17\n19\n23\n29\n31\n37\n41\n43\n47\n53\n59\n61\n67\n71\n73", "22\n1000000000\n900000000\n800000000\n700000000\n600000000\n500000000\n400000000\n300000000\n200000000\n100000000\n90000000\n80000000\n70000000\n60000000\n50000000\n40000000\n30000000\n20000000\n10000000\n9000000\n8000000\n7000000", "23\n1024\n2048\n4096\n8192\n16384\n32768\n65536\n131072\n262144\n524288\n1048576\n2097152\n4194304\n8388608\n16777216\n33554432\n67108864\n134217728\n268435456\n536870912\n1073741824\n1000000000\n512", "24\n5000000\n10000000\n15000000\n20000000\n25000000\n30000000\n35000000\n40000000\n45000000\n50000000\n55000000\n60000000\n65000000\n70000000\n75000000\n80000000\n85000000\n90000000\n95000000\n100000000\n105000000\n110000000\n115000000\n120000000", "25\n1\n2\n4\n8\n16\n32\n64\n128\n256\n512\n1024\n2048\n4096\n8192\n16384\n32768\n65536\n131072\n262144\n524288\n1048576\n2097152\n4194304\n8388608\n16777216", "26\n999999\n888888\n777777\n666666\n555555\n444444\n333333\n222222\n111111\n123456\n234567\n345678\n456789\n567890\n678901\n789012\n890123\n901234\n123456\n234567\n345678\n456789\n567890\n678901\n789012\n890123", "27\n100\n200\n300\n400\n500\n600\n700\n800\n900\n1000\n1100\n1200\n1300\n1400\n1500\n1600\n1700\n1800\n1900\n2000\n2100\n2200\n2300\n2400\n2500\n2600\n2700", "28\n42\n42\n42\n42\n42\n42\n42\n42\n42\n42\n42\n42\n42\n42\n42\n42\n42\n42\n42\n42\n42\n42\n42\n42\n42\n42\n42\n42", "29\n543210\n432109\n321098\n210987\n109876\n98765\n87654\n76543\n65432\n54321\n43210\n32109\n21098\n10987\n9876\n8765\n7654\n6543\n5432\n4321\n3210\n2109\n1098\n987\n876\n765\n654\n543\n432\n321", "30\n200000000\n400000000\n600000000\n800000000\n1000000000\n800000000\n600000000\n400000000\n200000000\n0\n200000000\n400000000\n600000000\n800000000\n1000000000\n800000000\n600000000\n400000000\n200000000\n0\n200000000\n400000000\n600000000\n800000000\n1000000000\n800000000\n600000000\n400000000\n200000000\n0"]}
{"name": "p02675 AtCoder Beginner Contest 168 - \u2234 (Therefore)", "description": "Constraints\n\n* N is a positive integer not exceeding 999.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "testcase": ["1", "999", "500", "255", "100", "200", "300", "400", "123", "321", "432", "531", "640", "750", "860", "912", "58", "69", "77", "85", "94", "145", "252", "359", "468", "576", "682", "791", "803", "899", "998"]}
{"name": "758_A. Holiday Of Equality", "description": "Input\n\nThe first line contains the integer n (1 <= n <= 100) --- the number of citizens in the kingdom.\n\nThe second line contains n integers a1, a2, ..., an, where ai (0 <= ai <= 10^6) --- the welfare of the i-th citizen.", "testcase": ["1\n0", "1\n1000000", "2\n500000 500000", "2\n0 1000000", "3\n123456 789012 345678", "3\n0 0 0", "4\n1 1 1 1", "4\n100000 500000 600000 300000", "5\n999999 999999 999999 999999 999999", "5\n0 0 0 0 1000000", "6\n500 600 700 800 900 1000", "6\n100000 200000 300000 400000 500000 600000", "7\n10 20 30 40 50 60 70", "7\n950000 940000 930000 920000 910000 900000 890000", "8\n0 0 0 0 0 0 0 1000000", "8\n123456 654321 789123 321789 456789 987654 123789 987321", "9\n10000 20000 30000 40000 50000 60000 70000 80000 90000", "9\n333333 111111 222222 444444 555555 666666 777777 888888 999999", "10\n250000 250000 250000 250000 250000 250000 250000 250000 250000 250000", "10\n1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000", "11\n404 808 1212 1616 2020 2424 2828 3232 3636 4040 4444", "11\n1 2 3 4 5 6 7 8 9 10 11", "12\n100000 150000 200000 250000 300000 350000 400000 450000 500000 550000 600000 650000", "12\n12345 23456 34567 45678 56789 67890 78901 89012 90123 1234 2345 3456", "13\n12321 12321 12321 12321 12321 12321 12321 12321 12321 12321 12321 12321 12321", "13\n123456 234561 345612 456123 561234 612345 123456 234561 345612 456123 561234 612345 123456", "14\n999998 999997 999996 999995 999994 999993 999992 999991 999990 999989 999988 999987 999986 999985", "14\n50000 100000 150000 200000 250000 300000 350000 400000 450000 500000 550000 600000 650000 700000", "15\n111111 222222 333333 444444 555555 666666 777777 888888 999999 111111 222222 333333 444444 555555 666666", "15\n987654 876543 765432 654321 543210 432109 321098 210987 109876 98765 87654 76543 65432 54321 43210"]}
{"name": "230_A. Dragons", "description": "Input\n\nThe first line contains two space-separated integers s and n (1 <= s <= 10^4, 1 <= n <= 10^3). Then n lines follow: the i-th line contains space-separated integers xi and yi (1 <= xi <= 10^4, 0 <= yi <= 10^4) --- the i-th dragon's strength and the bonus for defeating it.", "testcase": ["100 5\n1 100\n2 200\n3 300\n4 400\n5 500", "5000 3\n4500 150\n4700 300\n4900 500", "1 1\n1 0", "5678 2\n1234 100\n2345 200", "9999 10\n1000 0\n2000 0\n3000 1000\n4000 1000\n5000 1000\n6000 2000\n7000 2000\n8000 2000\n9000 3000\n10000 3000", "10 5\n3 10\n4 20\n2 30\n1 15\n5 25", "10000 7\n999 0\n1999 50\n2999 100\n3999 150\n4999 200\n5999 250\n6999 300", "250 4\n50 300\n75 200\n100 100\n200 0", "4444 4\n1111 111\n2222 222\n3333 333\n4444 444", "4321 5\n321 123\n432 234\n543 345\n654 456\n765 567", "1200 6\n200 10\n200 20\n300 30\n300 40\n400 50\n400 60", "10 5\n2 3\n3 4\n4 5\n5 6\n6 7", "4327 10\n789 50\n678 60\n567 70\n456 80\n345 90\n234 100\n123 110\n312 120\n213 130\n132 140", "3000 3\n1500 500\n1500 600\n1500 700", "584 2\n100 200\n200 100", "1599 8\n150 100\n200 200\n300 300\n400 400\n500 500\n600 600\n700 700\n800 800", "9876 10\n876 10\n765 20\n654 30\n543 40\n432 50\n321 60\n210 70\n109 80\n98 90\n87 100", "4510 5\n450 50\n900 100\n1350 150\n1800 200\n2250 250", "8000 4\n4000 0\n4000 0\n4000 1000\n4000 2000", "5555 3\n1110 555\n2220 444\n3330 333", "1234 4\n234 1\n345 2\n456 3\n567 4", "6205 1\n6205 5000", "2048 5\n1024 512\n204 128\n409 256\n819 64\n1638 32", "100 6\n10 10\n20 20\n30 30\n40 40\n50 50\n60 60", "300 2\n100 100\n200 200", "7645 4\n1234 567\n2345 678\n3456 789\n4567 890", "2400 1\n1200 600", "3500 3\n1500 1500\n1500 1500\n500 500", "8792 5\n2300 1000\n2300 1000\n2300 1000\n1892 792\n0 0", "1024 7\n128 64\n256 128\n512 256\n64 32\n32 16\n16 8\n8 4"]}
{"name": "1095_A. Repeating Cipher", "description": "Input\n\nThe first line contains integer n (1 <= n <= 55) --- the length of the encrypted string. The second line of the input contains t --- the result of encryption of some string s. It contains only lowercase Latin letters. The length of t is exactly n.\n\nIt is guaranteed that the answer to the test exists.", "testcase": [{"n": 5, "t": "abcde"}, {"n": 10, "t": "theproblem"}, {"n": 1, "t": "z"}, {"n": 20, "t": "encryptionprocess"}, {"n": 12, "t": "problemset"}, {"n": 26, "t": "abcdefghijklmnopqrstuvwxyz"}, {"n": 8, "t": "aabbccdd"}, {"n": 18, "t": "randomtextinput"}, {"n": 7, "t": "example"}, {"n": 55, "t": "maxlengthstringwithfiftyfivecharactersinput"}, {"n": 3, "t": "abc"}, {"n": 15, "t": "fifteenletters"}, {"n": 4, "t": "java"}, {"n": 23, "t": "thisisarathersample"}, {"n": 30, "t": "exactlythirtycharact"}, {"n": 9, "t": "ninechars"}, {"n": 50, "t": "quitealongstringwithfiftycharacterscheck"}, {"n": 14, "t": "fourteenlen"}, {"n": 11, "t": "primeinput"}, {"n": 6, "t": "strsix"}, {"n": 2, "t": "tw"}, {"n": 19, "t": "longdaylongstring"}, {"n": 24, "t": "twentyfourencryptin"}, {"n": 22, "t": "doubledeucesstring"}, {"n": 13, "t": "luckynumberth"}, {"n": 16, "t": "sixteencharacter"}, {"n": 17, "t": "primeagainseventeen"}, {"n": 33, "t": "thirtythreecharslongst"}, {"n": 27, "t": "twentysevenletteralf"}, {"n": 21, "t": "astringoftwentyonech"}]}
{"name": "1358_A. Park Lighting", "description": "Input\n\nThe first line contains a single integer t (1 <= t <= 10^4) --- the number of test cases in the input. Then t test cases follow.\n\nEach test case is a line containing two integers n, m (1 <= n, m <= 10^4) --- park sizes.", "testcase": ["1\n100 200", "2\n123 456\n789 1011", "2\n400 1500\n3000 4500", "2\n234 678\n1999 8888", "2\n5000 6000\n7000 8000", "3\n111 222\n333 444\n555 666", "3\n777 888\n999 1010\n2020 3030", "3\n4040 5050\n6060 7070\n8080 9090", "1\n345 543", "2\n678 876\n789 987", "2\n890 123\n999 321", "2\n1111 2222\n3333 4444", "2\n5555 6666\n7777 8888", "3\n1234 2345\n3456 4567\n5678 6789", "3\n7890 8901\n9012 1234\n2345 3456", "3\n4567 5678\n6789 7890\n8901 9012", "1\n112 221", "2\n334 443\n556 665", "2\n778 887\n990 909", "2\n1112 2221\n3334 4443", "2\n5556 6665\n7778 8887", "3\n1235 2356\n3467 4678\n5689 6890", "3\n7901 9013\n9123 1235\n2346 3467", "3\n4578 5789\n6790 7901\n8912 9123", "1\n113 331", "2\n335 553\n557 775", "2\n779 997\n991 119", "2\n1113 2223\n3335 4445", "2\n5557 6667\n7779 8889", "3\n1236 2367\n3478 4789\n5690 6901"]}
{"name": "p03472 AtCoder Beginner Contest 085 - Katana Thrower", "description": "Constraints\n\n* 1 <= N <= 10^5\n* 1 <= H <= 10^9\n* 1 <= a_i <= b_i <= 10^9\n* All input values are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN H\na_1 b_1\n:\na_N b_N", "testcase": ["1 500000000\n1 1000000000", "2 1000\n1 500\n10 1000", "3 100000\n10000 20000\n30000 40000\n50000 60000", "4 12345\n1 100\n20 300\n400 700\n800 12345", "5 999999999\n1 999999999\n2 999999999\n3 999999999\n4 999999999\n5 999999999", "10 500\n10 20\n30 40\n50 60\n70 80\n90 100\n110 120\n130 140\n150 160\n170 180\n190 200", "7 777777\n10 10\n20 20\n30 30\n40 40\n50 50\n60 60\n70 70", "8 888888\n100000 200000\n200000 300000\n300000 400000\n400000 500000\n500000 600000\n600000 700000\n700000 800000\n800000 900000", "9 10000\n100 200\n200 300\n300 400\n400 500\n500 600\n600 700\n700 800\n800 900\n900 1000", "10 234567\n1 2345\n1234 5678\n2345 6789\n3456 7890\n4567 8901\n5678 9012\n6789 10123\n7890 11234\n8901 12345\n9012 23456", "6 123456789\n100000000 200000000\n200000000 300000000\n300000000 400000000\n400000000 500000000\n500000000 600000000\n600000000 700000000", "11 1111111\n10000 100000\n100000 200000\n200000 300000\n300000 400000\n400000 500000\n500000 600000\n600000 700000\n700000 800000\n800000 900000\n900000 1000000\n1000000 1100000", "15 9999999\n1000000 2000000\n1500000 2500000\n2000000 3000000\n2500000 3500000\n3000000 4500000\n3500000 5500000\n4000000 6500000\n4500000 7500000\n5000000 8500000\n5500000 9500000\n6000000 10000000\n6500000 10500000\n7000000 11000000\n7500000 11500000\n8000000 12000000", "12 1\n1 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11", "13 777777777\n100000001 100000002\n100000003 100000004\n100000005 100000006\n100000007 100000008\n100000009 100000010\n100000011 100000012\n100000013 100000014\n100000015 100000016\n100000017 100000018\n100000019 100000020\n100000021 100000022\n100000023 100000024\n100000025 100000026", "14 76543210\n1234567 7654321\n2345678 8765432\n3456789 9876543\n4567890 10987654\n5678901 111098765\n6789012 121110987\n7890123 1312111098\n8901234 1413121110\n9012345 1514131211\n10123456 1615141312\n11123457 1716151413\n12123458 1817161514\n13123459 1918171615\n14123460 2019181716", "10 98765432\n10000000 20000000\n15000000 25000000\n20000000 30000000\n25000000 35000000\n30000000 45000000\n35000000 55000000\n40000000 65000000\n45000000 75000000\n50000000 85000000\n55000000 95000000", "16 123456\n1000 5000\n2000 6000\n3000 7000\n4000 8000\n5000 9000\n6000 10000\n7000 11000\n8000 12000\n9000 13000\n10000 14000\n11000 15000\n12000 16000\n13000 17000\n14000 18000\n15000 19000\n16000 20000", "17 123456789\n9876543 19876543\n8765432 18765432\n7654321 17654321\n6543210 16543210\n5432109 15432109\n4321098 14321098\n3210987 13210987\n2109876 12109876\n1098765 11098765\n987654 10987654\n876543 10876543\n765432 10765432\n654321 10654321\n543210 10543210\n432109 10432109\n321098 10321098", "18 1000000000\n123456789 234567890\n100000000 200000000\n200000000 300000000\n300000000 400000000\n400000000 500000000\n500000000 600000000\n600000000 700000000\n700000000 800000000\n800000000 900000000\n900000000 1000000000\n234567890 345678901\n345678901 456789012\n456789012 567890123\n567890123 678901234\n678901234 789012345\n789012345 890123456\n890123456 1000000000", "19 100\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19", "20 1234\n123 456\n234 567\n345 678\n456 789\n567 890\n678 901\n789 1000\n890 1100\n901 1200\n1000 1234\n110 220\n230 330\n340 440\n450 550\n560 660\n670 770\n780 880\n890 990\n900 1000", "21 1000000000\n1 100\n2 200\n3 300\n4 400\n5 500\n6 600\n7 700\n8 800\n9 900\n10 1000\n11 1100\n12 1200\n13 1300\n14 1400\n15 1500\n16 1600\n17 1700\n18 1800\n19 1900\n20 2000\n21 2100", "22 556789\n12345 67890\n23456 78901\n34567 89012\n45678 90123\n56789 12345\n67890 23456\n78901 34567\n89012 45678\n90123 56789\n12345 67890\n23456 78901\n34567 89012\n45678 90123\n56789 12345\n67890 23456\n78901 34567\n89012 45678\n90123 56789\n12345 67890\n23456 78901\n34567 89012\n45678 90123", "23 234567\n1234 5678\n2345 6789\n3456 7890\n4567 8901\n5678 9012\n6789 10123\n7890 11234\n8901 12345\n9012 13456\n10123 14567\n11234 15678\n12345 16789\n13456 17890\n14567 18901\n15678 19012\n16789 20123\n17890 21234\n18901 22345\n19012 23456\n20123 24567\n21234 25678\n22345 26789\n23456 27890", "24 876543210\n98765432 876543210\n87654321 765432109\n76543210 654321098\n65432109 543210987\n54321098 432109876\n43210987 321098765\n32109876 210987654\n21098765 109876543\n10987654 98765432\n9876543 87654321\n8765432 76543210\n7654321 65432109\n6543210 54321098\n5432109 43210987\n4321098 32109876\n3210987 21098765\n2109876 10987654\n1098765 9876543\n987654 8765432\n876543 7654321\n765432 6543210\n654321 5432109\n543210 4321098", "25 555555555\n12345678 123456789\n87654321 987654321\n23456789 234567890\n34567890 345678901\n45678901 456789012\n56789012 567890123\n67890123 678901234\n78901234 789012345\n89012345 890123456\n90123456 901234567\n123456789 1234567890\n987654321 9876543210\n234567890 2345678901\n345678901 3456789012\n456789012 4567890123\n567890123 5678901234\n678901234 6789012345\n789012345 7890123456\n890123456 8901234567\n901234567 9012345678\n1234567890 12345678901\n9876543210 98765432101\n2345678901 23456789012\n3456789012 34567890123\n4567890123 45678901234", "26 111111\n5 10\n11 20\n21 30\n31 40\n41 50\n51 60\n61 70\n71 80\n81 90\n91 100\n101 110\n111 120\n121 130\n131 140\n141 150\n151 160\n161 170\n171 180\n181 190\n191 200\n201 210\n211 220\n221 230\n231 240\n241 250\n251 260", "27 275000000\n50000000 100000000\n55000000 110000000\n60000000 120000000\n65000000 130000000\n70000000 140000000\n75000000 150000000\n80000000 160000000\n85000000 170000000\n90000000 180000000\n95000000 190000000\n100000000 200000000\n105000000 210000000\n110000000 220000000\n115000000 230000000\n120000000 240000000\n125000000 250000000\n130000000 260000000\n135000000 270000000\n140000000 280000000\n145000000 290000000\n150000000 300000000\n155000000 310000000\n160000000 320000000\n165000000 330000000\n170000000 340000000\n175000000 350000000\n180000000 360000000", "28 58585858\n290000 580000\n300000 600000\n310000 620000\n320000 640000\n330000 660000\n340000 680000\n350000 700000\n360000 720000\n370000 740000\n380000 760000\n390000 780000\n400000 800000\n410000 820000\n420000 840000\n430000 860000\n440000 880000\n450000 900000\n460000 920000\n470000 940000\n480000 960000\n490000 980000\n500000 1000000\n510000 1020000\n520000 1040000\n530000 1060000\n540000 1080000\n550000 1100000\n560000 1120000", "29 987654321\n111111111 222222222\n222222222 333333333\n333333333 444444444\n444444444 555555555\n555555555 666666666\n666666666 777777777\n777777777 888888888\n888888888 999999999\n999999999 1000000000\n100000000 200000000\n200000000 300000000\n300000000 400000000\n400000000 500000000\n500000000 600000000\n600000000 700000000\n700000000 800000000\n800000000 900000000\n900000000 1000000000\n1000000000 1111111110\n111111111 1222222220\n122222222 1333333330\n133333333 1444444440\n144444444 1555555550\n155555555 1666666660\n166666666 1777777770\n177777777 1888888880\n188888888 1999999990\n199999999 2000000000", "30 888888888\n123456 1234567\n234567 2345678\n345678 3456789\n456789 4567890\n567890 5678901\n678901 6789012\n789012 7890123\n890123 8901234\n901234 9012345\n101234 1012345\n111235 1112356\n121236 1212367\n131237 1312378\n141238 1412389\n151239 1512390\n161230 1612301\n171231 1712312\n181232 1812323\n191233 1912334\n201234 2012345\n211235 2112356\n221236 2212367\n231237 2312378\n241238 2412389\n251239 2512390\n261230 2612301\n271231 2712312\n281232 2812323\n291233 2912334\n301234 3012345"]}
{"name": "1352_C. K-th Not Divisible by n", "description": "Input\n\nThe first line contains an integer t (1 <= t <= 1000) --- the number of test cases in the input. Next, t test cases are given, one per line.\n\nEach test case is two positive integers n (2 <= n <= 10^9) and k (1 <= k <= 10^9).", "testcase": ["2 1", "5 2", "10 3", "100 10", "234 100", "564 232", "674 111", "999 500", "1000 1", "1000 999", "10000 2345", "100000 34567", "123456 78901", "234567 123456", "345678 234567", "456789 345678", "567890 456789", "678901 567890", "789012 678901", "890123 789012", "901234 890123", "912345 901234", "987654 876543", "765432 654321", "654321 543210", "543210 432109", "432109 321098", "321098 210987", "210987 109876", "109876 98765"]}
{"name": "1180_A. Alex and a Rhombus", "description": "Input\n\nThe first and only input line contains integer n (1 <= n <= 100) --- order of a rhombus whose numbers of cells should be computed.", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30"]}
{"name": "p02708 AtCoder Beginner Contest 163 - Sum of Large Numbers", "description": "Constraints\n\n* 1 <= N <= 2* 10^5\n* 1 <= K <= N+1\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K", "testcase": ["1 1", "1 2", "2 1", "2 2", "2 3", "10 5", "10 11", "100 50", "100 101", "2000 1000", "2000 2001", "50000 25000", "50000 50001", "100000 50000", "100000 100001", "150000 75000", "150000 150001", "200000 100000", "200000 200001", "3 2", "4 3", "5 3", "1000 500", "12345 5432", "54321 12345", "98765 123", "198765 6789", "123456 65432", "150000 149999", "200000 2"]}
{"name": "p02390 Watch", "description": "Constraints\n\n* $0 <= S <= 86400$\n\nInput\n\nAn integer $S$ is given in a line.", "testcase": [0, 1, 42, 3600, 86399, 86400, 12345, 23456, 34567, 45678, 56789, 67890, 78901, 89012, 54321, 65432, 11111, 22222, 33333, 44444, 55555, 66666, 77777, 88888, 99999, 10000, 20000, 30000, 40000, 50000]}
{"name": "1420_A. Cubes Sorting", "description": "Input\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1 <= t <= 1000), denoting the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains one positive integer n (2 <= n <= 5 * 10^4) --- number of cubes.\n\nThe second line contains n positive integers a_i (1 <= a_i <= 10^9) --- volumes of cubes.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5.", "testcase": ["2\n3\n1 2 3\n4\n4 5 6 7", "1\n5\n10 20 30 40 50", "3\n2\n7 8\n6\n11 22 33 44 55 66\n3\n100000000 999999999 500000000", "1\n10\n100 200 300 400 500 600 700 800 900 1000", "1\n7\n1 1 1 1 1 1 1", "4\n2\n2 3\n2\n4 5\n2\n6 7\n2\n8 9", "1\n8\n10 9 8 7 6 5 4 3", "2\n6\n12 23 34 45 56 67\n4\n99999999 88888888 77777777 66666666", "3\n2\n1 1000000000\n2\n500000000 500000000\n5\n1 2 3 4 5", "1\n9\n95 85 75 65 55 45 35 25 15", "1\n4\n123 456 789 101112", "2\n3\n102 103 104\n7\n201 202 203 204 205 206 207", "1\n5\n111 222 333 444 555", "1\n2\n999999999 1000000000", "2\n6\n11 12 13 14 15 16\n3\n21 22 23", "3\n4\n31 32 33 34\n4\n41 42 43 44\n4\n51 52 53 54", "1\n6\n999 888 777 666 555 444", "2\n5\n234 567 890 123 456\n5\n789 101 112 131 415", "3\n2\n10 100\n3\n1 2 3\n4\n5 5 5 5", "1\n7\n7000 8000 9000 10000 11000 12000 13000", "1\n10\n345 678 901 234 567 890 123 456 789 101", "2\n4\n987 654 321 102\n5\n103 104 105 106 107", "3\n3\n98765 43210 12345\n8\n1 2 3 4 5 6 7 8\n9\n9 8 7 6 5 4 3 2 1", "1\n4\n231 232 233 234", "1\n2\n123456789 987654321", "2\n3\n99999 88888 77777\n3\n66666 55555 44444", "1\n5\n13579 24680 12345 67890 10112", "2\n3\n54321 12345 67890\n2\n11111 22222", "3\n8\n1 2 3 4 5 6 7 8\n4\n44444 33333 22222 11111\n5\n98765 87654 76543 65432 54321", "1\n5\n100000 200000 300000 400000 500000"]}
{"name": "1436_A. Reorder", "description": "Input\n\nThe first line contains a single integer t --- the number of test cases (1 <= t <= 100). The test cases follow, each in two lines.\n\nThe first line of a test case contains two integers n and m (1 <= n <= 100, 0 <= m <= 10^6). The second line contains integers a_1, a_2, ..., a_n (0 <= a_i <= 10^6) --- the elements of the array.", "testcase": ["1\n1 0\n0", "1\n2 1\n0 1", "1\n3 1000000\n100000 500000 400000", "1\n5 30\n5 10 15 8 2", "1\n4 200000\n50000 50000 50000 50000", "1\n7 0\n0 0 0 0 0 0 0", "1\n10 1000\n100 100 100 100 100 100 100 100 100 100", "1\n3 500000\n250000 250000 0", "1\n6 800000\n200000 150000 100000 250000 50000 50000", "1\n2 1000000\n750000 250000", "1\n8 123456\n19283 17382 9283 18373 73892 3732 18293 1992", "1\n1 1000000\n999999", "1\n1 0\n0", "1\n5 12345\n1230 2345 3456 1234 234", "1\n6 654321\n54321 43210 54321 65432 54321 43210", "1\n4 432000\n108000 108000 108000 108000", "1\n3 111111\n37037 37037 37037", "1\n5 222222\n44444 44444 44444 44444 44444", "1\n8 500000\n62500 62500 62500 62500 62500 62500 62500 62500", "1\n2 123123\n61561 61562", "1\n4 50000\n12500 12500 12500 12500", "1\n7 9999\n1428 1428 1428 1427 1428 1428 1428", "1\n10 400000\n40000 40000 40000 40000 40000 40000 40000 40000 40000 40000", "1\n3 888888\n296296 296296 296296", "1\n6 65432\n10888 10888 10888 10888 10888 10888", "1\n1 1\n0", "1\n9 70000\n7777 7777 7777 7777 7777 7777 7777 7777 7777", "1\n5 55555\n11111 11111 11111 11111 11111", "1\n2 999999\n500000 499999", "1\n4 5000\n1250 1250 1250 1250"]}
{"name": "835_A. Key races", "description": "Input\n\nThe first line contains five integers s, v1, v2, t1, t2 (1 <= s, v1, v2, t1, t2 <= 1000) --- the number of characters in the text, the time of typing one character for the first participant, the time of typing one character for the the second participant, the ping of the first participant and the ping of the second participant.", "testcase": ["10 5 3 8 7", "50 2 4 6 3", "75 7 1 2 9", "100 3 5 4 10", "25 1 6 5 2", "60 4 2 9 8", "35 7 8 1 6", "45 5 4 3 9", "400 8 9 2 7", "200 2 6 10 3", "320 3 5 8 1", "250 9 3 7 4", "500 3 2 6 5", "125 6 4 10 2", "150 1 7 5 9", "222 8 2 4 11", "333 5 10 3 8", "444 7 1 9 6", "555 2 8 5 7", "666 6 3 11 4", "777 4 9 1 10", "888 9 5 7 2", "123 10 2 6 3", "234 8 4 5 9", "345 7 6 10 1", "456 5 7 3 8", "678 3 1 9 4", "789 2 10 8 5", "891 1 3 7 6", "912 4 5 2 10"]}
{"name": "1419_A. Digit Game", "description": "Input\n\nFirst line of input contains an integer t (1 <= t <= 100) --- the number of matches.\n\nThe first line of each match description contains an integer n (1 <= n <= 10^3) --- the number of digits of the generated number.\n\nThe second line of each match description contains an n-digit positive integer without leading zeros.", "testcase": ["1\n2\n12", "1\n3\n123", "1\n4\n1234", "1\n5\n12345", "1\n6\n123456", "1\n7\n1234567", "1\n3\n789", "1\n2\n34", "1\n1\n5", "1\n8\n87654321", "1\n4\n9090", "1\n2\n89", "1\n9\n123456789", "1\n6\n101112", "1\n5\n11011", "1\n7\n1230012", "1\n2\n47", "1\n8\n12341234", "1\n3\n999", "1\n4\n8008", "1\n5\n54321", "1\n6\n654321", "1\n4\n2020", "1\n3\n404", "1\n5\n10101", "1\n6\n100001", "1\n2\n11", "1\n3\n222", "1\n4\n3333", "1\n5\n44444"]}
{"name": "p03434 AtCoder Beginner Contest 088 - Card Game for Two", "description": "Constraints\n\n* N is an integer between 1 and 100 (inclusive).\n* a_i \\ (1 <= i <= N) is an integer between 1 and 100 (inclusive).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 a_2 a_3 ... a_N", "testcase": ["1\n1", "2\n1 2", "3\n4 5 6", "4\n10 20 30 40", "5\n8 16 24 32 40", "6\n9 18 27 36 45 54", "7\n7 14 21 28 35 42 49", "8\n100 90 80 70 60 50 40 30", "9\n33 66 99 26 53 79 12 45 78", "10\n1 1 1 1 1 1 1 1 1 1", "5\n100 100 100 100 100", "11\n11 22 33 44 55 66 77 88 99 10 20", "12\n12 24 36 48 60 72 84 96 12 24 36 48", "4\n4 8 12 16", "7\n70 71 72 73 74 75 76", "15\n15 30 45 60 75 90 15 30 45 60 75 90 15 30 45", "20\n5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95 100", "30\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30", "8\n8 16 24 32 40 48 56 64", "10\n10 20 30 40 50 60 70 80 90 100", "13\n13 26 39 52 65 78 91 13 26 39 52 65 78", "17\n17 34 51 68 85 17 34 51 68 85 17 34 51 68 85 17 34", "1\n100", "2\n99 98", "16\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16", "9\n9 18 27 36 45 54 63 72 81", "14\n7 14 21 28 35 42 49 56 63 70 77 84 91 98", "19\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19", "22\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22", "25\n4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80 84 88 92 96 100"]}
{"name": "1294_B. Collecting Packages", "description": "Input\n\nThe first line of the input contains an integer t (1 <= t <= 100) --- the number of test cases. Then test cases follow.\n\nThe first line of a test case contains one integer n (1 <= n <= 1000) --- the number of packages.\n\nThe next n lines contain descriptions of packages. The i-th package is given as two integers x_i and y_i (0 <= x_i, y_i <= 1000) --- the x-coordinate of the package and the y-coordinate of the package.\n\nIt is guaranteed that there are no two packages at the same point. It is also guaranteed that the point (0, 0) doesn't contain a package.\n\nThe sum of all values n over test cases in the test doesn't exceed 1000.", "testcase": ["1\n1\n100 200", "2\n2\n10 20\n30 40\n1\n0 1", "1\n5\n100 100\n200 200\n300 300\n400 400\n500 500", "1\n3\n2 5\n6 7\n1 9", "2\n3\n23 24\n25 26\n27 28\n2\n34 35\n12 45", "1\n4\n11 22\n33 44\n55 66\n77 88", "1\n6\n12 34\n56 78\n90 12\n34 56\n78 90\n12 34", "1\n7\n101 102\n103 104\n105 106\n107 108\n109 110\n111 112\n113 114", "1\n2\n123 234\n345 456", "1\n8\n111 222\n333 444\n555 666\n777 888\n999 111\n222 333\n444 555\n666 777", "1\n9\n12 21\n23 32\n34 43\n45 54\n56 65\n67 76\n78 87\n89 98\n91 10", "1\n10\n123 321\n234 432\n345 543\n456 654\n567 765\n678 876\n789 987\n891 198\n912 219\n101 110", "1\n5\n1 1\n2 2\n3 3\n4 4\n5 5", "1\n4\n20 30\n40 50\n60 70\n80 90", "1\n3\n111 111\n222 222\n333 333", "3\n2\n7 8\n8 9\n4\n10 10\n20 20\n30 30\n40 40\n3\n4 5\n5 6\n7 8", "1\n8\n100 101\n102 103\n104 105\n106 107\n108 109\n110 111\n112 113\n114 115", "2\n3\n321 123\n432 234\n543 345\n5\n123 123\n234 234\n345 345\n456 456\n567 567", "1\n7\n11 12\n22 23\n33 34\n44 45\n55 56\n66 67\n77 78", "1\n4\n1 10\n2 9\n8 7\n6 5", "1\n6\n18 27\n36 45\n54 63\n72 81\n90 99\n108 117", "1\n10\n1 2\n3 4\n5 6\n7 8\n9 0\n10 11\n12 13\n14 15\n16 17\n18 19", "1\n5\n95 96\n97 98\n99 100\n101 102\n103 104", "1\n3\n150 150\n250 250\n350 350", "2\n2\n30 30\n60 60\n4\n10 40\n20 80\n30 120\n40 160", "1\n4\n200 201\n202 203\n204 205\n206 207", "1\n5\n90 180\n180 270\n270 360\n360 450\n450 540", "1\n9\n2 4\n4 8\n8 16\n16 32\n32 64\n64 128\n128 256\n256 512\n512 1024", "1\n3\n333 333\n666 666\n999 999", "2\n4\n10 100\n100 1000\n1000 10000\n10000 100000\n1\n0 2", "1\n3\n555 555\n777 777\n999 999"]}
{"name": "p03994 CODE FESTIVAL 2016 qual A - Next Letter", "description": "Constraints\n\n* 1<=|s|<=10^5\n* All letters in s are lowercase English letters.\n* 1<=K<=10^9\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\ns\nK", "testcase": ["a\n1", "abc\n3", "xyz\n10", "programming\n99999", "testcase\n123456789", "unique\n7", "example\n42", "lowercase\n1000", "keyboard\n999", "challenge\n88888888", "generation\n2023", "specification\n7654321", "constraint\n654321", "inputformat\n987654", "randomized\n314159265", "algorithm\n271828182", "solution\n10000000", "problem\n99999000", "requirements\n100000", "minimum\n5000000", "maximum\n1000000000", "characters\n9999999", "english\n111111111", "letters\n222222222", "combinatorics\n333333333", "permutation\n444444444", "stringlength\n555555555", "lowerbounds\n666666666", "upperbounds\n777777777", "testcasegeneration\n888888888"]}
{"name": "119_A. Epic Game", "description": "Input\n\nThe only string contains space-separated integers a, b and n (1 <= a, b, n <= 100) --- the fixed numbers Simon and Antisimon have received correspondingly and the initial number of stones in the pile.", "testcase": ["1 1 1", "99 99 100", "1 2 100", "2 1 3", "10 20 30", "45 55 60", "23 34 45", "13 24 35", "17 19 20", "3 3 3", "5 10 15", "42 24 64", "20 5 50", "33 66 99", "9 6 12", "14 28 56", "20 20 20", "73 37 74", "11 22 33", "25 30 55", "50 75 100", "21 42 63", "44 88 99", "8 16 24", "12 6 18", "3 6 9", "27 54 81", "2 4 8", "66 33 99", "100 1 100"]}
{"name": "p02926 AtCoder Beginner Contest 139 - Engines", "description": "Constraints\n\n* 1 <= N <= 100\n* -1 \\ 000 \\ 000 <= x_i <= 1 \\ 000 \\ 000\n* -1 \\ 000 \\ 000 <= y_i <= 1 \\ 000 \\ 000\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nx_1 y_1\nx_2 y_2\n: :\nx_N y_N", "testcase": ["1\n0 0", "2\n1000000 1000000\n-1000000 -1000000", "3\n500000 500000\n-500000 -500000\n0 0", "4\n1000000 0\n0 1000000\n-1000000 0\n0 -1000000", "5\n1 1\n2 2\n3 3\n4 4\n5 5", "6\n-1 -1\n-2 -2\n-3 -3\n-4 -4\n-5 -5\n-6 -6", "7\n123456 654321\n234567 543210\n345678 432109\n456789 321098\n567890 210987\n678901 109876\n789012 -98765", "8\n10 10\n20 20\n30 30\n40 40\n50 50\n60 60\n70 70\n80 80", "9\n-10 -10\n-20 -20\n-30 -30\n-40 -40\n-50 -50\n-60 -60\n-70 -70\n-80 -80\n-90 -90", "10\n0 1000\n1000 0\n-1000 0\n0 -1000\n500 500\n-500 -500\n500 -500\n-500 500\n100 -100\n-100 100", "11\n1 0\n0 1\n-1 0\n0 -1\n2 0\n0 2\n-2 0\n0 -2\n3 0\n0 3\n3 3", "12\n100 -100\n200 -200\n-300 300\n400 -400\n-500 500\n600 -600\n-700 700\n800 -800\n-900 900\n1000 -1000\n1100 1100\n-1200 -1200", "13\n123 -321\n234 -432\n-345 543\n-456 654\n567 -765\n-678 876\n789 -987\n-890 98\n901 -109\n12 -21\n23 -32\n34 -43\n45 -54", "14\n42 42\n-42 -42\n42 -42\n-42 42\n84 84\n-84 -84\n84 -84\n-84 84\n126 126\n-126 -126\n126 -126\n-126 126\n168 168\n-168 -168", "15\n10000 20000\n-30000 40000\n50000 -60000\n70000 80000\n-90000 -10000\n11000 12000\n-13000 14000\n15000 -16000\n17000 18000\n-19000 20000\n21000 -22000\n23000 24000\n-25000 -26000\n27000 28000\n-29000 30000", "16\n-999999 999999\n999998 -999998\n999997 999997\n-999996 -999996\n999995 999995\n-999994 -999994\n999993 999993\n-999992 -999992\n999991 999991\n-999990 -999990\n999989 999989\n-999988 -999988\n999987 999987\n-999986 -999986\n999985 999985\n-999984 -999984", "17\n0 1000000\n1000000 500000\n-500000 500000\n300000 -300000\n-800000 -200000\n666666 333333\n-333333 -666666\n12345 67890\n-67890 -12345\n11111 22222\n-22222 -11111\n33333 44444\n-44444 -33333\n55555 66666\n-66666 -55555\n77777 88888\n-88888 -77777", "18\n1 -1\n-1 1\n2 -2\n-2 2\n3 -3\n-3 3\n4 -4\n-4 4\n5 -5\n-5 5\n6 -6\n-6 6\n7 -7\n-7 7\n8 -8\n-8 8\n9 -9\n-9 9", "19\n123 456\n789 123\n456 789\n123 -456\n-789 123\n-456 -789\n123 456\n789 123\n456 123\n123 789\n-123 -456\n789 -123\n-456 789\n123 -456\n-789 123\n456 -789\n123 456\n789 123\n456 789", "20\n0 0\n1000000 1000000\n-1000000 -1000000\n500000 500000\n-500000 -500000\n250000 250000\n-250000 -250000\n750000 750000\n-750000 -750000\n125000 125000\n-125000 -125000\n375000 375000\n-375000 -375000\n625000 625000\n-625000 -625000\n875000 875000\n-875000 -875000\n999999 1\n-1 -999999\n1 -1", "21\n0 999999\n999999 0\n-999999 0\n0 -999999\n500000 499999\n-499999 -500000\n500000 -499999\n-499999 500000\n250000 250001\n-250001 -250000\n750000 750001\n-750001 -750000\n125000 124999\n-124999 -125000\n375000 374999\n-374999 -375000\n625000 624999\n-624999 -625000\n875000 874999\n-874999 -875000\n999998 2", "22\n1000000 0\n0 1000000\n-1000000 0\n0 -1000000\n500000 500000\n-500000 -500000\n250000 250000\n-250000 -250000\n750000 750000\n-750000 -750000\n125000 125000\n-125000 -125000\n625000 625000\n-625000 -625000\n875000 875000\n-875000 -875000\n1000000 -1\n-1 1000000\n1 -1000000\n-1000000 1\n999997 3\n-3 -999997", "23\n0 0\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n9 9\n10 10\n-1 -1\n-2 -2\n-3 -3\n-4 -4\n-5 -5\n-6 -6\n-7 -7\n-8 -8\n-9 -9\n-10 -10\n1000000 -1000000\n-1000000 1000000", "24\n999999 -999999\n-999999 999999\n999998 -999998\n-999998 999998\n999997 -999997\n-999997 999997\n999996 -999996\n-999996 999996\n999995 -999995\n-999995 999995\n999994 -999994\n-999994 999994\n999993 -999993\n-999993 999993\n999992 -999992\n-999992 999992\n999991 -999991\n-999991 999991\n999990 -999990\n-999990 999990\n999989 -999989\n-999989 999989\n999988 -999988\n-999988 999988", "25\n0 1\n1 0\n-1 0\n0 -1\n2 3\n3 2\n-2 3\n3 -2\n-3 -2\n-2 -3\n4 5\n5 4\n-4 5\n5 -4\n-5 -4\n-4 -5\n6 7\n7 6\n-6 7\n7 -6\n-7 -6\n-6 -7\n8 9\n9 8\n-8 -9", "26\n10 20\n30 40\n50 60\n70 80\n90 100\n110 120\n130 140\n150 160\n170 180\n190 200\n210 220\n230 240\n250 260\n270 280\n290 300\n310 320\n330 340\n350 360\n370 380\n390 400\n410 420\n430 440\n450 460\n470 480\n490 500\n510 520", "27\n999999 -1\n-1 999999\n999998 -2\n-2 999998\n999997 -3\n-3 999997\n999996 -4\n-4 999996\n999995 -5\n-5 999995\n999994 -6\n-6 999994\n999993 -7\n-7 999993\n999992 -8\n-8 999992\n999991 -9\n-9 999991\n999990 -10\n-10 999990\n999989 -11\n-11 999989\n999988 -12\n-12 999988\n999987 -13\n-13 999987\n999986 -14", "28\n0 0\n1000000 1000000\n-1000000 -1000000\n500000 500000\n-500000 -500000\n250000 250000\n-250000 -250000\n750000 750000\n-750000 -750000\n125000 125000\n-125000 -125000\n375000 375000\n-375000 -375000\n625000 625000\n-625000 -625000\n875000 875000\n-875000 -875000\n999999 1\n-1 -999999\n1 -1\n2 -2\n-2 2\n3 -3\n-3 3\n4 -4\n-4 4\n5 -5\n-5 5", "29\n1 2\n3 4\n5 6\n7 8\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n29 30\n31 32\n33 34\n35 36\n37 38\n39 40\n41 42\n43 44\n45 46\n47 48\n49 50\n51 52\n53 54\n55 56\n57 58", "30\n999999 999999\n-999999 -999999\n999998 999998\n-999998 -999998\n999997 999997\n-999997 -999997\n999996 999996\n-999996 -999996\n999995 999995\n-999995 -999995\n999994 999994\n-999994 -999994\n999993 999993\n-999993 -999993\n999992 999992\n-999992 -999992\n999991 999991\n-999991 -999991\n999990 999990\n-999990 -999990\n1000000 -1000000\n-1000000 1000000\n1 -1\n-1 1\n2 -2\n-2 2\n3 -3\n-3 3\n4 -4\n-4 4"]}
{"name": "1430_B. Barrels", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 1000) --- the number of test cases.\n\nThe first line of each test case contains two integers n and k (1 <= k < n <= 2 * 10^5) --- the number of barrels and the number of pourings you can make.\n\nThe second line contains n integers a_1, a_2, ..., a_n (0 <= a_i <= 10^{9}), where a_i is the initial amount of water the i-th barrel has.\n\nIt's guaranteed that the total sum of n over test cases doesn't exceed 2 * 10^5.", "testcase": ["3 1\n10 2 7", "2 1\n1000000000 500000000", "5 2\n1 2 3 4 5", "10 3\n1 1 1 1 1 1 1 1 1 10", "4 1\n9 7 5 3", "6 2\n10 20 30 40 50 60", "7 3\n100 200 300 400 500 600 700", "8 1\n8 7 6 5 4 3 2 1", "9 4\n1 1 1 1 1 1 1 1 9", "11 5\n10 10 10 10 10 10 10 10 10 10 100", "4 2\n0 0 0 1000000000", "3 1\n10 20 30", "12 11\n1 2 3 4 5 6 7 8 9 10 11 12", "6 3\n123456 789012 345678 901234 567890 123456", "10 1\n10 9 8 7 6 5 4 3 2 1", "4 3\n987654321 123456789 987654321 123456789", "7 4\n1000 2000 3000 4000 5000 6000 7000", "9 2\n100 200 300 400 500 600 700 800 900", "5 1\n88888888 44444444 22222222 11111111 99999999", "8 7\n11 22 33 44 55 66 77 88", "15 14\n10 20 30 40 50 60 70 80 90 100 110 120 130 140 150", "4 1\n400000000 300000000 200000000 100000000", "6 4\n600000 500000 400000 300000 200000 100000", "13 1\n13 12 11 10 9 8 7 6 5 4 3 2 1", "7 1\n1 1 1 1 1 1 7", "10 9\n9 8 7 6 5 4 3 2 1 0", "14 2\n100000 200000 300000 400000 500000 600000 700000 800000 900000 1000000 1100000 1200000 1300000 1400000", "6 5\n5000 4000 3000 2000 1000 500", "7 6\n10000 20000 30000 40000 50000 60000 70000", "9 3\n999999999 888888888 777777777 666666666 555555555 444444444 333333333 222222222 111111111"]}
{"name": "p02811 AtCoder Beginner Contest 150 - 500 Yen Coins", "description": "Constraints\n\n* 1 <= K <= 100\n* 1 <= X <= 10^5\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nK X", "testcase": ["1 50000", "100 99999", "45 87654", "2 100", "99 12345", "50 50000", "75 75000", "20 20000", "30 30000", "10 10000", "15 15000", "55 55000", "60 60000", "80 80000", "90 90000", "25 25000", "35 35000", "40 40000", "65 65000", "70 70000", "85 85000", "95 95000", "5 5000", "100 100000", "100 500", "1 999", "3 3000", "6 6000", "9 9000", "12 12000"]}
{"name": "p03293 AtCoder Beginner Contest 103 - String Rotation", "description": "Constraints\n\n* 2 <= |S| <= 100\n* |S| = |T|\n* S and T consist of lowercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS\nT", "testcase": "{\"testcases\": [\"ab\\nba\", \n\"test\\ncase\", \n\"hello\\nollhe\", \n\"anagram\\nmanaagr\", \n\"binary\\nbrainy\", \n\"finder\\nfriend\", \n\"listen\\nsilent\", \n\"triangle\\nintegral\", \n\"debitcard\\nbadcredit\", \n\"earth\\nheart\", \n\"nightthing\\nthingnight\", \n\"rat\\nart\", \n\"stressed\\ndesserts\", \n\"evil\\nlive\", \n\"idle\\ndeli\", \n\"loop\\npool\", \n\"evil\\nvile\", \n\"god\\nlog\", \n\"clint\\ntilcn\", \n\"brag\\ngarb\", \n\"saved\\nvades\", \n\"at\\nta\", \n\"angel\\nglean\", \n\"teacher\\nhectare\", \n\"below\\nelbow\", \n\"pale\\nleap\", \n\"gallery\\nlargely\", \n\"action\\ncation\", \n\"one\\neo\", \n\"item\\ntime\"]}"}
{"name": "999_A. Mishka and Contest", "description": "Input\n\nThe first line of input contains two integers n and k (1 <= n, k <= 100) --- the number of problems in the contest and Mishka's problem-solving skill.\n\nThe second line of input contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 100), where a_i is the difficulty of the i-th problem. The problems are given in order from the leftmost to the rightmost in the list.", "testcase": ["1 1\n1", "2 5\n3 4", "3 10\n10 9 8", "4 4\n1 2 3 4", "5 15\n5 1 3 6 2", "6 20\n10 10 10 10 10 10", "7 7\n1 2 3 4 5 6 7", "8 30\n10 20 30 40 50 60 70 80", "9 9\n9 8 7 6 5 4 3 2 1", "10 50\n50 40 30 20 10 25 35 45 55 60", "11 11\n1 2 3 4 5 6 7 8 9 10 11", "12 60\n60 59 58 57 56 55 54 53 52 51 50 49", "13 13\n13 12 11 10 9 8 7 6 5 4 3 2 1", "14 70\n1 4 7 10 13 16 19 22 25 28 31 34 37 40", "15 15\n15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "16 80\n16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "17 17\n17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "18 90\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18", "19 19\n19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "20 100\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 20", "21 21\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42", "22 22\n22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "23 23\n3 6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 60 63 66 69", "24 24\n24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "25 25\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25", "26 26\n26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "27 27\n5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95 100 4 8 12 16 20 24 28", "28 28\n28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "29 29\n6 12 18 24 30 36 42 48 54 60 66 72 78 84 90 96 7 13 19 25 31 37 43 49 55 61 67 73 79", "30 30\n30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1"]}
{"name": "1114_A. Got Any Grapes?", "description": "Input\n\nThe first line contains three integers x, y and z (1 <= x, y, z <= 10^5) --- the number of grapes Andrew, Dmitry and Michal want to eat.\n\nThe second line contains three integers a, b, c (1 <= a, b, c <= 10^5) --- the number of green, purple and black grapes in the box.", "testcase": ["1 1 1\n1 1 1", "2 3 4\n9 8 7", "1000 2000 3000\n10000 20000 15000", "50000 50000 50000\n60000 60000 60000", "90000 100 10\n50000 40000 30000", "10 20 30\n40 50 60", "34 55 89\n144 233 377", "100 200 300\n123 456 789", "99999 88888 77777\n33333 44444 55555", "11111 22222 33333\n99999 88888 77777", "163 274 438\n1298 2710 3401", "541 632 723\n814 925 1016", "111 222 333\n444 555 666", "24680 13579 98765\n12345 56789 101112", "50505 60606 70707\n80808 90909 101010", "22222 33333 44444\n55555 66666 77777", "31415 92653 58979\n27182 81828 45904", "20000 40000 60000\n80000 70000 90000", "159 951 753\n8642 1538 4864", "97531 86420 75310\n19203 38460 48570", "12321 45654 78987\n98789 65456 32123", "4242 5656 6767\n7888 8999 9110", "3141 5926 5358\n9793 2384 6264", "21828 14526 26463\n38327 95028 84107", "8238 5162 3846\n46264 33832 79238", "3279 5002 8238\n16406 5302 5023", "162 271 296\n223 606 255", "1627 2718 2618\n1729 8282 4594", "19283 37563 84573\n23874 38567 67582", "8317 26180 72618\n98175 62712 79817"]}
{"name": "1393_A. Rainbow Dash, Fluttershy and Chess Coloring", "description": "Input\n\nThe first line contains a single integer T (1 <= T <= 100): the number of grids of the games. \n\nEach of the next T lines contains a single integer n (1 <= n <= 10^9): the size of the side of the grid of the game.", "testcase": ["1", "123456789", "1", "999999999", "1", "85739485", "1", "948573", "1", "987654321", "1", "12", "1", "4567", "1", "1000000000", "1", "823746839", "1", "2", "1", "746384741", "1", "98765", "1", "384756", "1", "435678", "1", "99", "1", "747839", "1", "145671", "1", "375869", "1", "576839", "1", "497583", "1", "467382", "1", "834756", "1", "345"]}
{"name": "1249_B1. Books Exchange (easy version)", "description": "Input\n\nThe first line of the input contains one integer q (1 <= q <= 200) --- the number of queries. Then q queries follow.\n\nThe first line of the query contains one integer n (1 <= n <= 200) --- the number of kids in the query. The second line of the query contains n integers p_1, p_2, ..., p_n (1 <= p_i <= n, all p_i are distinct, i.e. p is a permutation), where p_i is the kid which will get the book of the i-th kid.", "testcase": ["1\n3\n2 3 1", "1\n4\n4 3 2 1", "1\n5\n5 3 1 2 4", "1\n6\n1 2 3 4 6 5", "1\n7\n3 1 4 2 5 7 6", "1\n8\n2 1 4 3 6 5 8 7", "1\n9\n9 8 7 6 5 4 3 2 1", "1\n10\n1 2 3 4 5 6 7 8 10 9", "1\n11\n11 1 3 2 5 4 7 6 9 8 10", "1\n12\n6 5 4 3 2 1 12 11 10 9 8 7", "1\n13\n1 2 3 4 5 6 7 8 9 10 11 12 13", "1\n14\n14 1 2 3 5 6 4 7 9 8 11 10 12 13", "1\n15\n2 1 4 3 6 5 8 7 10 9 12 11 14 13 15", "1\n16\n8 7 6 5 4 3 2 1 16 15 14 13 12 11 10 9", "1\n17\n1 3 2 5 4 7 6 9 8 11 10 13 12 15 14 17 16", "1\n18\n2 1 4 3 6 5 8 7 10 9 12 11 14 13 16 15 18 17", "1\n19\n19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "1\n20\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 20 19", "1\n21\n21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "1\n22\n11 1 3 2 5 4 7 6 9 8 10 22 12 13 14 15 16 17 18 19 20 21", "1\n30\n15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16", "1\n23\n23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "1\n24\n1 3 2 4 6 5 7 8 10 9 11 12 14 13 15 16 18 17 19 20 22 21 24 23", "1\n25\n25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "1\n26\n26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "1\n27\n1 2 3 4 5 6 7 8 9 10 11 12 13 15 14 17 16 19 18 21 20 23 22 25 24 26 27", "1\n28\n28 26 24 22 20 18 16 14 12 10 8 6 4 2 1 3 5 7 9 11 13 15 17 19 21 23 25 27", "1\n29\n1 3 2 5 4 7 6 9 8 11 10 13 12 15 14 17 16 19 18 21 20 23 22 25 24 27 26 29 28", "1\n31\n31 29 27 25 23 21 19 17 15 13 11 9 7 5 3 1 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30", "1\n32\n16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17"]}
{"name": "1288_A. Deadline", "description": "Input\n\nThe first line contains a single integer T (1 <= T <= 50) --- the number of test cases.\n\nThe next T lines contain test cases -- one per line. Each line contains two integers n and d (1 <= n <= 10^9, 1 <= d <= 10^9) --- the number of days before the deadline and the number of days the program runs.", "testcase": ["1 2", "10 10", "100 200", "100000000 100000000", "999999999 1", "500000000 499999999", "3 1", "123456789 987654321", "42 42", "567890 123456", "234567 891011", "87654321 12345678", "345678 333333333", "100 300", "150000000 350000000", "111 222", "444 555", "777 888", "9999999 8888888", "66666666 77777777", "123 321", "456 654", "789 987", "234 567", "8910 1098", "654321 123456", "987654 456789", "369258147 258147369", "741852963 963852741", "159753 357951"]}
{"name": "p02594 AtCoder Beginner Contest 174 - Air Conditioner", "description": "Constraints\n\n* -40 <= X <= 40\n* X is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX", "testcase": ["0", "1", "-1", "20", "-20", "40", "-40", "15", "10", "-10", "19", "-19", "30", "-30", "25", "-25", "35", "-35", "5", "-5", "7", "-7", "38", "-38", "12", "-12", "22", "-22", "28", "-28"]}
{"name": "p03105 AtCoder Beginner Contest 120 - Favorite Sound", "description": "Constraints\n\n* All values in input are integers.\n* 1 <= A, B, C <= 100\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B C", "testcase": ["1 1 1", "2 3 4", "5 10 20", "8 15 30", "11 22 33", "100 100 100", "99 50 25", "3 6 9", "45 55 65", "67 34 13", "23 78 56", "89 67 45", "20 40 60", "35 35 35", "1 100 50", "88 77 66", "12 24 36", "59 41 83", "64 32 16", "91 82 73", "17 34 51", "14 28 42", "76 22 88", "27 54 81", "18 36 72", "100 1 1", "1 100 100", "3 3 3", "2 4 8", "50 50 50"]}
{"name": "1213_B. Bad Prices", "description": "Input\n\nThe first line contains an integer t (1 <= t <= 10000) --- the number of sets of input data in the test. Input data sets must be processed independently, one after another.\n\nEach input data set consists of two lines. The first line contains an integer n (1 <= n <= 150000) --- the number of days. The second line contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 10^6), where a_i is the price on the i-th day.\n\nIt is guaranteed that the sum of n over all data sets in the test does not exceed 150000.", "testcase": ["1\n5\n10 20 10 30 40", "2\n3\n100 200 150\n4\n10 10 10 10", "1\n10\n1 2 3 4 5 6 7 8 9 10", "1\n7\n10 30 20 25 20 30 40", "1\n6\n5 5 5 5 5 5", "1\n8\n20 10 15 25 30 10 5 20", "1\n4\n500000 500000 500000 500000", "1\n5\n1 100000 50000 100000 1", "3\n10\n54321 12345 54321 12345 54321 1 2 3 4 5\n2\n999999 100000\n6\n100000 200000 300000 400000 500000 600000", "1\n6\n1 1 1 1 1 1000000", "2\n4\n10000 20000 15000 5000\n3\n300 600 900", "1\n5\n40 30 20 10 5", "4\n3\n6 3 9\n2\n700000 700001\n7\n1 2 3 4 5 6 7\n5\n333333 333334 333335 333336 333337", "1\n10\n10 10 10 10 10 10 10 10 10 10", "1\n11\n100000 90000 80000 70000 60000 50000 40000 30000 20000 10000 5000", "1\n3\n1000 2000 1500", "1\n7\n1 2 2 3 4 5 6", "1\n9\n10 20 50 10 20 30 40 50 60", "1\n4\n250000 500000 750000 1000000", "1\n9\n9000 8000 7000 6000 5000 4000 3000 2000 1000", "3\n8\n80000 80000 80000 80000 80000 80000 80000 80000\n9\n1 2 4 8 16 32 64 128 256\n5\n5 10 15 20 25", "1\n10\n10 20 10 30 10 50 10 70 10 90", "1\n5\n8 16 24 32 40", "2\n4\n1001 2001 3001 4001\n6\n10 20 30 40 50 60", "1\n5\n300 600 900 1200 1500", "1\n7\n2000 4000 2000 6000 2000 8000 2000", "2\n9\n2 4 8 16 32 64 128 256 512\n9\n512 256 128 64 32 16 8 4 2", "1\n3\n10 100 1000", "1\n4\n123 234 345 456", "2\n8\n987654 123456 789123 321456 654789 987123 456789 123987\n5\n111111 222222 333333 444444 555555"]}
{"name": "p02628 AtCoder Beginner Contest 171 - Mix Juice", "description": "Constraints\n\n* 1 <= K <= N <= 1000\n* 1 <= p_i <= 1000\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\np_1 p_2 ... p_N", "testcase": ["N K\np_1 p_2 ... p_N", "2 1\n1 2", "3 2\n1 2 3", "4 2\n3 6 1 4", "5 3\n10 20 30 40 50", "6 1\n100 200 300 400 500 600", "7 3\n6 12 5 18 24 30 15", "8 2\n1 1 1 1 1 1 1 1", "9 4\n123 456 789 10 20 30 40 50 60", "8 5\n3 2 5 8 13 21 34 55", "10 6\n1 4 9 16 25 36 49 64 81 100", "20 10\n10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10", "15 5\n14 28 7 35 42 56 70 21 63 84 105 126 147 168 189", "9 8\n3 7 2 5 11 13 17 19 23", "11 3\n5 15 25 35 45 55 65 75 85 95 105", "12 1\n12 23 34 45 56 67 78 89 90 101 112 123", "30 15\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30", "100 50\n1000 999 998 997 996 995 994 993 992 991 990 989 988 987 986 985 984 983 982 981 980 979 978 977 976 975 974 973 972 971 970 969 968 967 966 965 964 963 962 961 960 959 958 957 956 955 954 953 952 951", "50 25\n50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "750 375\n1 2 3 ... 750", "200 100\n200 199 198 ... 3 2 1", "300 150\n1 1 1 ... 1", "250 125\n25 50 75 ... 6250", "400 200\n1000 1000 1000 ... 1000", "500 250\n500 499 498 ... 2 1", "600 300\n1 2 3 ... 600", "700 350\n700 699 698 ... 3 2 1", "800 400\n400 800 1200 ... 320000", "900 450\n1 4 9 ... 810000", "1000 500\n1000 1000 1000 ... 1000"]}
{"name": "1257_B. Magic Stick", "description": "Input\n\nThe first line contains single integer T (1 <= T <= 10^4) --- the number of test cases. Each test case consists of two lines.\n\nThe first line of each test case contains two integers x and y (1 <= x, y <= 10^9) --- the current number and the number that Petya wants to get.", "testcase": ["1\n2 1000000000", "1\n10 20", "1\n15 250", "1\n25 789456123", "1\n13 14", "1\n450 1000000000", "1\n999999999 1000000000", "1\n587 99987776", "1\n485 123456789", "1\n888888888 999999999", "1\n5 50", "1\n6 7", "1\n23 42", "1\n123 12345", "1\n55555 98989898", "1\n1 1000000000", "1\n42 99999958", "1\n375 123987", "1\n808080808 909090909", "1\n1 2", "1\n21 987654321", "1\n100000000 200000000", "1\n1492 1776", "1\n200 300", "1\n1 999999999", "1\n54321 987654", "1\n987654 1000000000", "1\n1000000000 1000000000", "1\n11 222", "1\n91 1234567"]}
{"name": "p02397 Swapping Two Numbers", "description": "Constraints\n\n* 0 <= x, y <= 10000\n* the number of datasets <= 3000\n\nInput\n\nThe input consists of multiple datasets. Each dataset consists of two integers x and y separated by a single space.\n\nThe input ends with two 0 (when both x and y are zero). Your program should not process for these terminal symbols.", "testcase": ["10 20", "0 40", "100 200", "345 678", "50 50", "987 123", "0 0", "500 500", "777 888", "1000 2000", "300 400", "1 9999", "10000 1", "9999 9999", "2222 3333", "0 9999", "8888 1111", "10000 10000", "4500 4500", "1122 3344", "5600 7800", "2323 7676", "100 100", "10000 0", "6200 3100", "3050 7090", "800 800", "4050 2025", "1234 5678", "0 10000"]}
{"name": "1144_B. Parity Alternated Deletions", "description": "Input\n\nThe first line of the input contains one integer n (1 <= n <= 2000) --- the number of elements of a.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (0 <= a_i <= 10^6), where a_i is the i-th element of a.", "testcase": ["1\n0", "2\n0 1000000", "5\n1 2 3 4 5", "3\n999998 999999 1000000", "4\n234 543 678 910", "6\n0 0 0 0 0 0", "10\n47 50 999999 234 457 123 852 999000 12 7", "7\n34567 23456 12345 45678 56789 67890 78901", "8\n432 234 123 543 654 765 876 987", "9\n123456 234567 345678 456789 567890 678901 789012 890123 901234", "11\n1000000 100000 10000 1000 100 10 1 0 10 100 1000", "13\n5 10 15 20 25 30 35 40 45 50 55 60 65", "12\n20 40 60 80 100 120 140 160 180 200 220 240", "14\n1 1 2 3 5 8 13 21 34 55 89 144 233 377", "10\n32767 16384 8192 4096 2048 1024 512 256 128 64", "2000\n"]}
{"name": "p02724 AtCoder Beginner Contest 160 - Golden Coins", "description": "Constraints\n\n* 0 <= X <= 10^9\n* X is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX", "testcase": ["0", "1", "42", "999999999", "500000000", "2147483647", "1000000000", "2", "123456789", "987654321", "543210", "100000", "99999", "899999999", "345678", "234567", "7654321", "99999998", "87654321", "101010101", "404040404", "303030303", "202020202", "707070707", "808080808", "909090909", "111111", "222222", "333333", "444444"]}
{"name": "p03592 CODE FESTIVAL 2017 qual A - fLIP", "description": "Constraints\n\n* 1 <= N,M <= 1000\n* 0 <= K <= NM\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M K", "testcase": ["1 1 0", "1 1 1", "2 2 0", "2 2 1", "2 2 2", "2 2 3", "2 2 4", "10 10 20", "10 10 100", "100 100 500", "100 100 10000", "3 7 4", "3 7 21", "17 24 198", "17 24 0", "5 5 10", "5 5 25", "8 9 72", "25 40 600", "25 40 0", "13 13 169", "13 13 100", "70 70 3500", "70 70 0", "100 100 0", "100 100 5000", "100 100 9999", "99 97 9409", "40 25 800", "40 25 1000"]}
{"name": "1230_B. Ania and Minimizing", "description": "Input\n\nThe first line contains two integers n and k (1 <= n <= 200 000, 0 <= k <= n) --- the number of digits in the decimal representation of S and the maximum allowed number of changed digits.\n\nThe second line contains the integer S. It's guaranteed that S has exactly n digits and doesn't contain any leading zeroes.", "testcase": ["1 0\n2", "2 0\n10", "2 1\n99", "3 0\n123", "3 1\n456", "4 2\n7890", "5 5\n12345", "6 0\n987654", "6 1\n101010", "7 3\n1212121", "8 4\n87654321", "9 0\n123456789", "10 10\n1029384756", "11 5\n11223344556", "12 6\n123123123123", "13 2\n4564564564564", "14 7\n78978978978978", "15 0\n111222333444555", "16 8\n9998887776665554", "17 1\n1000100010001000100", "18 0\n20002000200020002000", "19 10\n123451234512345123451", "20 20\n9876598765987659876598", "21 10\n111111111122222222223", "22 11\n2222222223311111111111", "23 5\n1010101010101010101010101", "25 7\n12345123451234512345123452", "30 15\n987659876598765987659876598765123", "50 25\n11111111112222222222333333333344444444445555555555", "200 100\n1000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001"]}
{"name": "p02417 Counting Characters", "description": "Constraints\n\n* The number of characters in the sentence < 1200\n\nInput\n\nA sentence in English is given in several lines.", "testcase": ["The quick brown fox jumps over the lazy dog.", "Once upon a time, there was a kingdom far, far away.", "Lorem ipsum dolor sit amet, consectetur adipiscing elit.", "To be or not to be, that is the question.", "All that glitters is not gold.", "It was the best of times, it was the worst of times.", "Call me Ishmael.", "A journey of a thousand miles begins with a single step.", "You can't judge a book by its cover.", "Elementary, my dear Watson.", "The rain in Spain stays mainly in the plain.", "I think, therefore I am.", "That's one small step for man, one giant leap for mankind.", "Et tu, Brute?", "Houston, we have a problem.", "It's not what you look at that matters, it's what you see.", "In a hole in the ground there lived a hobbit.", "The only thing we have to fear is fear itself.", "It was a bright cold day in April, and the clocks were striking thirteen.", "I have a dream that one day this nation will rise up and live out the true meaning of its creed.", "You shall not pass!", "To define is to limit.", "Whatever you are, be a good one.", "So we beat on, boats against the current, borne back ceaselessly into the past.", "In every walk with nature, one receives far more than he seeks.", "Life is what happens to us while we are making other plans.", "Adventure is out there.", "Have courage and be kind.", "Happiness can be found, even in the darkest of times, if one only remembers to turn on the light.", "The world is a book, and those who do not travel read only a page."]}
{"name": "598_A. Tricky Sum", "description": "Input\n\nThe first line of the input contains a single integer t (1 <= t <= 100) --- the number of values of n to be processed.\n\nEach of next t lines contains a single integer n (1 <= n <= 10^9).", "testcase": ["1", "100", "2147483647", "999999999", "54321", "58732", "100000000", "81728", "207401", "1048576", "9090909", "487327", "87654321", "7654321", "1024", "231", "48576", "99991", "32767", "8388608", "195", "400000000", "666666", "88888888", "123456789", "43219876", "10", "408967", "3456789", "28765432", "729"]}
{"name": "p03219 AtCoder Beginner Contest 113 - Discount Fare", "description": "Constraints\n\n* 1 <= X,Y <= 100\n* Y is an even number.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX Y", "testcase": ["1 2", "3 4", "5 6", "7 8", "9 10", "11 12", "13 14", "15 16", "17 18", "19 20", "21 22", "23 24", "25 26", "27 28", "29 30", "31 32", "33 34", "35 36", "37 38", "39 40", "41 42", "43 44", "45 46", "47 48", "49 50", "51 52", "53 54", "55 56", "57 58", "59 60"]}
{"name": "p03327 AtCoder Beginner Contest 099 - ABD", "description": "Constraints\n\n* 1 <= N <= 1998\n* N is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "testcase": ["1", "2", "3", "10", "50", "100", "150", "200", "250", "300", "400", "500", "600", "700", "800", "900", "1000", "1100", "1200", "1300", "1400", "1500", "1600", "1700", "1800", "1900", "1950", "1980", "1990", "1998"]}
{"name": "p03761 AtCoder Beginner Contest 058 - Dubious Document", "description": "Constraints\n\n* 1 <= n <= 50\n* 1 <= |S_i| <= 50 for every i = 1, ..., n.\n* S_i consists of lowercase English letters (`a` - `z`) for every i = 1, ..., n.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nn\nS_1\n...\nS_n", "testcase": ["3\nabc\ndef\nghi", "1\na", "2\nabcd\nefgh", "4\na\nb\nc\nd", "5\napple\nbanana\ncherry\ndate\nelderberry", "6\nx\ny\nz\naa\nbb\ncc", "7\nalpha\nbeta\ngamma\ndelta\nepsilon\nzeta\neta", "8\njanuary\nfebruary\nmarch\napril\nmay\njune\njuly\naugust", "9\none\ntwo\nthree\nfour\nfive\nsix\nseven\neight\nnine", "10\nred\norange\nyellow\ngreen\nblue\nindigo\nviolet\npink\nbrown\nblack", "11\nsunday\nmonday\ntuesday\nwednesday\nthursday\nfriday\nsaturday\njan\feb\nmar\napr", "12\npiano\nguitar\nviolin\ndrums\nflute\nclarinet\ntrumpet\ntuba\ncello\nharp\nsax\nhorn", "13\nsun\nmoon\nmars\nearth\nvenus\njupiter\nsaturn\nuranus\nneptune\npluto\nmercury\nvenus\nsaturn", "14\nhydrogen\nhelium\nlithium\nberyllium\nboron\ncarbon\nnitrogen\noxygen\nfluorine\nneon\nsodium\nmagnesium\naluminum\nsilicon", "15\nant\nbee\ncat\ndog\nelephant\nfish\ngorilla\nhorse\niguana\njaguar\nkangaroo\nlemur\nmonkey\nnewt\noctopus", "16\nhello\nworld\nthis\nis\na\ntest\ncase\nwith\nsixteen\nlines\nin\nthe\ninput\nfor\nvalidation\npurpose", "17\ndough\nsauce\ncheese\npepperoni\nmushrooms\nonions\npeppers\nsausage\nbacon\nham\npineapple\nolives\ntomatoes\nspinach\ngarlic\njalapenos\nanchovies", "18\nlorem\nipsum\ndolor\nsit\namet\nconsectetur\nadipiscing\nelit\nsed\ndoeiusmod\ntempor\nincididunt\nut\nlabore\ndolore\nmagna\naliqua\nut", "19\nqwertyuiop\nasdfghjkl\nzxcvbnm\nqwerty\nasdfg\nzxcvb\nlkjhg\nmnbvc\npoiuy\ntrewq\nlmnop\nokmij\nijnbh\nuhbvg\nygvtf\ntrfde\nedcws\nwqasz\naqswde", "20\naaaa\nbbbb\ncccc\ndddd\neeee\nffff\ngggg\nhhhh\niiii\njjjj\nkkkk\nllll\nmmmm\nnnnn\noooo\npppp\nqqqq\nrrrr\nssss\ntttt", "21\nalgorithm\nbacktracking\ncompilation\ndata\nencryption\nflowchart\ngateway\nheuristic\ninterface\njuxtaposition\nkernel\nlexicon\nmiddleware\nnode\nopcode\nprotocol\nquery\nrasterization\nsyntax\ntoken\nutility", "22\napple\nbat\ncat\ndog\nelephant\nfish\ngoose\nhat\nigloo\njug\nkite\nlion\nmouse\nnut\noctopus\npig\nquail\nrat\nsnake\ntiger\numbrella\nvase", "23\namazon\nbing\nchrome\ndrive\nedge\nfacebook\ngoogle\nhotmail\ninstagram\njava\nkindle\nlinkedin\nmicrosoft\nnetflix\nopera\npinterest\nquora\nreddit\nskype\ntwitter\nuber\nvimeo\nwhatsapp", "24\nantelope\nbuffalo\ncheetah\ndolphin\neagle\nflamingo\ngiraffe\nhippopotamus\nimpala\njellyfish\nkoala\nlemur\nmeerkat\nnarwhal\noryx\npenguin\nquokka\nrhinoceros\nshark\ntapir\nurial\nvulture\nwalrus\nxerus", "25\nalligator\nbarracuda\ncrocodile\ndingoe\nermine\nfennec\ngoat\nhyena\nibis\njackal\nkookaburra\nlynx\nmeerkat\nnandu\nocelot\npanda\nquagga\nraccoon\nserval\ntamarin\nuakari\nvicuna\nwarthog\nxenops\nyak", "26\narchitect\nbuilder\ncontractor\ndesigner\nelectrician\nforeman\nglazier\nhandyman\ninspector\njoiner\nkitchenfitter\nlandscaper\nmason\nnailer\noperator\npainter\nquarrier\nroofer\nsurveyor\ntiler\nupholsterer\nvarnisher\nwelder\nexpeditor\nyardman\nzoner", "27\nanemone\nbuttercup\ncarnations\ndaffodil\nedelweiss\nforgetmenot\ngardenia\nhyacinth\niris\njasmine\nkalanchoe\nlily\nmarigold\nnarcissus\norchid\npeony\nquince\nrose\nsunflower\ntulip\nviolet\nwisteria\nxanthium\nyucca\nzinnia\nacacia\nbegonia", "28\nastronomy\nbiology\nchemistry\ndentistry\neconomics\nforestry\ngenetiology\nhydrology\nimmunology\njurisprudence\nkinesiology\nlimnology\nmeteorology\nneurology\northography\npaleontology\nquantummechanics\nrheology\nseismology\ntoxinology\nurology\nvirology\nwaste\nxenobiology\nyeast\nzoology\nanthropology\nbiophysics", "29\nassignment\nbranch\ncommit\ndependency\nevaluation\nfunction\ngenerator\nhash\nidentifier\njump\nkey\nloop\nmodule\nnamespace\nobject\ndatastructure\nparametric\ncodebase\nrepository\nstate\ntest\nupdate\nvariable\nworktree\nexecution\nyaml\nzipping\nautomation\nbuild", "30\nalphabet\nbrightness\ncontrast\nduration\nexposure\nfilter\ngradient\nhue\nintensity\njuxtapose\nkaleidoscope\nluminance\nmonochrome\nnoise\nopacity\nperspective\nquality\nresolution\nsaturation\ntone\nuniformity\nvibrance\nwarmth\nxposure\nybalance\nzoom\ncorrection\ndither\neffect\nfocus"]}
{"name": "746_A. Compote", "description": "Input\n\nThe first line contains the positive integer a (1 <= a <= 1000) --- the number of lemons Nikolay has. \n\nThe second line contains the positive integer b (1 <= b <= 1000) --- the number of apples Nikolay has. \n\nThe third line contains the positive integer c (1 <= c <= 1000) --- the number of pears Nikolay has.", "testcase": ["1\n1\n1", "2\n3\n4", "1000\n500\n400", "999\n888\n777", "250\n250\n250", "100\n200\n300", "400\n300\n200", "150\n350\n450", "50\n60\n70", "900\n800\n700", "111\n222\n333", "10\n20\n30", "300\n600\n900", "800\n100\n700", "444\n444\n444", "222\n333\n111", "123\n456\n789", "500\n400\n300", "600\n700\n800", "350\n450\n550", "450\n550\n650", "550\n650\n750", "650\n750\n850", "750\n850\n950", "850\n950\n1000", "950\n1000\n900", "1000\n1\n2", "1\n1000\n999", "750\n250\n500", "333\n666\n999", "1000\n1000\n1000"]}
{"name": "766_B. Mahmoud and a Triangle", "description": "Input\n\nThe first line contains single integer n (3 <= n <= 10^5) --- the number of line segments Mahmoud has.\n\nThe second line contains n integers a1, a2, ..., an (1 <= ai <= 10^9) --- the lengths of line segments Mahmoud has.", "testcase": ["3\n1 2 3", "4\n1000000000 1000000000 1000000000 1000000000", "3\n15 27 33", "5\n2 7 1 8 2", "10\n3 1 4 1 5 9 2 6 5 3", "6\n999999937 999999937 999999937 999999937 999999937 999999937", "7\n8 6 7 5 3 0 9", "11\n18 38 24 43 38 10 12 29 30 50 31", "8\n234 84392 234 789 452 123 431 678", "9\n321 432 543 654 765 876 987 198 234", "3\n123456789 987654321 123456789", "10\n42 42 42 42 42 42 42 42 42 42", "7\n100 200 300 400 500 600 700", "3\n999999999 999999999 999999999", "5\n54321 12345 67890 98765 43210", "12\n31 41 59 26 53 58 97 93 23 84 62 64", "6\n1024 2048 4096 8192 16384 32768", "8\n2147483647 2147483646 2147483645 2147483644 2147483643 2147483642 2147483641 2147483640", "4\n123 234 345 456", "6\n11 13 17 19 23 29", "5\n10 20 30 40 50", "12\n8 5 8 3 7 9 1 2 4 7 9 3", "9\n999000001 999000002 999000003 999000004 999000005 999000006 999000007 999000008 999000009", "5\n345 678 901 234 567", "10\n123 145 167 189 210 232 254 276 298 311", "7\n111111111 222222222 333333333 444444444 555555555 666666666 777777777", "4\n999999994 999999995 999999996 999999997", "6\n222222222 333333333 444444444 555555555 666666666 777777777", "3\n100 200 300", "5\n123456789 223456789 323456789 423456789 523456789"]}
{"name": "p02898 AtCoder Beginner Contest 142 - Roller Coaster", "description": "Constraints\n\n* 1 <= N <= 10^5\n* 1 <= K <= 500\n* 1 <= h_i <= 500\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nh_1 h_2 ... h_N", "testcase": ["1 1\n1", "2 2\n1 2", "3 6\ncd 3 5", "4 4\n1 1 1 3", "5 10\n2 4 5 10 13", "10 5\n1 2 1 3 4 1 2 3 4 1", "7 8\n7 6 5 7 6 5 7", "20 20\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20", "50 7\n123 234 23 43 54 23 54 34 65 76 45 23 12 23", "100 17\n432 234 561 235 273 284 295 306 317 328 339 350 361 372 383 394 405", "30 30\n30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "15 10\n42 42 42 42 42 42 42 42 42 42 42 42 42 42 42", "99 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "150 200\n300 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30", "200 250\n2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5", "10000 15\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1", "10^5 500\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50", "100 50\n50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "10 1\n5 5 5 5 5 5 5 5 5 5", "500 500\n500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500", "8 5\n8 1 7 2 6 3 5 4", "40 35\n35 1 34 2 33 3 32 4 31 5 30 6 29 7 28 8 27 9 26 10 25 11 24 12 23 13 22 14 21 15 20 16 19 17 18", "90 45\n1 2 3 4 5 6 7 8 9 10 11 1 2 3 4 5 6 7 8 9 10 11 1 2 3 4 5 6 7 8 9 10 11 1 2 3 4 5 6 7 8 9 10 11", "250 100\n100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40", "1000 200\n200 199 198 197 196 195 194 193 192 191 190 189 188 187 186 185 184 183 182 181 180 179 178 177 176 175 174 173 172 171 170 169 168 167 166 165 164 163 162 161 160 159 158 157 156 155", "77 77\n77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19", "5000 256\n256 255 254 253 252 251 250 249 248 247 246 245 244 243 242 241 240 239 238 237 236 235 234 233 232 231 230 229 228 227 226 225 224 223 222 221 220 219 218 217 216 215 214 213 212 211", "2048 128\n128 127 126 125 124 123 122 121 120 119 118 117 116 115 114 113 112 111 110 109 108 107 106 105 104 103 102 101 100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80", "600 300\n300 299 298 297 296 295 294 293 292 291 290 289 288 287 286 285 284 283 282 281 280 279 278 277 276 275 274 273 272 271 270 269 268 267 266 265 264 263 262 261 260 259 258 257", "333 123\n123 122 121 120 119 118 117 116 115 114 113 112 111 110 109 108 107 106 105 104 103 102 101 100 99 98 97 96 95 94 93", "432 321\n321 320 319 318 317 316 315 314 313 312 311 310 309 308 307 306 305 304 303 302 301 300 299 298 297 296", "765 250\n20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50", "101 42\n3 6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 60 63 66 69 72 75 78 81 84 87 90", "11 4\n1 2 3 4 1 2 3 4 1 2 3", "64 7\n7 7 7 7 7 6 6 6 6 6 5 5 5 5 5 4 4 4 4 4 3 3 3 3 3 2 2 2 2 2 1 1 1 1 1", "4096 102\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50"]}
{"name": "621_A. Wet Shark and Odd and Even", "description": "Input\n\nThe first line of the input contains one integer, n (1 <= n <= 100 000). The next line contains n space separated integers given to Wet Shark. Each of these integers is in range from 1 to 10^9, inclusive.", "testcase": ["1\n1", "2\n2 3", "3\n1000000000 1000000000 1000000000", "4\n1 2 3 4", "5\n999999999 888888888 777777777 666666666 555555555", "6\n123 234 345 456 567 678", "7\n10 20 30 40 50 60 70", "8\n1 1 1 1 1 1 1 1", "9\n2147483647 2147483647 2147483647 2147483647 2147483647 2147483647 2147483647 2147483647 2147483647", "10\n100000000 200000000 300000000 400000000 500000000 600000000 700000000 800000000 900000000 1000000000", "11\n10 20 30 40 50 60 70 80 90 100 110", "12\n11 22 33 44 55 66 77 88 99 1010 1111 1212", "13\n9999999 8888888 7777777 6666666 5555555 4444444 3333333 2222222 1111111 1234567 7654321 1357924 2468135", "14\n9 8 7 6 5 4 3 2 1 10 20 30 40 50", "15\n100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500", "16\n999 999 999 999 999 999 999 999 999 999 999 999 999 999 999 999", "17\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17", "18\n18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2", "19\n19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19", "20\n2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1048576", "21\n1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946", "22\n21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "23\n7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 101", "24\n3 6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 60 63 66 69 72", "25\n17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17", "26\n31 28 31 30 31 30 31 31 30 31 30 31 31 28 31 30 31 30 31 31 30 31 30 31 30 31", "27\n1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000", "28\n2 5 9 14 20 27 35 44 54 65 77 90 104 119 135 152 170 189 209 230 252 275 299 324 350 377 405 434", "29\n29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2", "30\n50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50"]}
{"name": "1166_A. Silent Classroom", "description": "Input\n\nThe first line contains a single integer n (1<= n <= 100) --- the number of students.\n\nAfter this n lines follow.\n\nThe i-th line contains the name of the i-th student.\n\nIt is guaranteed each name is a string of lowercase English letters of length at most 20. Note that multiple students may share the same name.", "testcase": ["1\nalice\n", "2\nbob\nbob\n", "3\neve\ncharlie\ndave\n", "4\nalice\nbob\ncarol\ndave\n", "5\neve\nalice\ndave\nbob\ncarol\n", "6\ncharlie\ndave\neve\nalice\nbob\ncarol\n", "7\nalice\nbob\ncharlie\ndave\neve\nfrank\ngreg\n", "8\nharry\nalice\neve\nbob\ndave\ngreg\nfrank\ncarol\n", "9\nalice\nbob\ncarol\ndave\neve\nfrank\ngreg\nharry\nivan\n", "10\njack\nalice\nbob\ncarol\ndave\neve\nfrank\ngreg\nharry\nivan\n", "11\nalice\nbob\ncarol\ndave\neve\nfrank\ngreg\nharry\nivan\njack\nkate\n", "12\nlucas\nalice\nbob\ncarol\ndave\neve\nfrank\ngreg\nharry\nivan\njack\nkate\n", "13\nmike\nalice\nbob\ncarol\ndave\neve\nfrank\ngreg\nharry\nivan\njack\nkate\nlucas\n", "14\nnora\nalice\nbob\ncarol\ndave\neve\nfrank\ngreg\nharry\nivan\njack\nkate\nlucas\nmike\n", "15\nolivia\nalice\nbob\ncarol\ndave\neve\nfrank\ngreg\nharry\nivan\njack\nkate\nlucas\nmike\nnora\n", "16\npeter\nalice\nbob\ncarol\ndave\neve\nfrank\ngreg\nharry\nivan\njack\nkate\nlucas\nmike\nnora\nolivia\n", "17\nalice\nbob\ncharlie\ndave\neve\nfrank\ngreg\nharry\nivan\njack\nkate\nlucas\nmike\nnora\nolivia\npeter\nquinn\n", "18\nalice\nbob\ncharlie\ndave\neve\nfrank\ngreg\nharry\nivan\njack\nkate\nlucas\nmike\nnora\nolivia\npeter\nquinn\nrachel\n", "19\nalice\nbob\ncharlie\ndave\neve\nfrank\ngreg\nharry\nivan\njack\nkate\nlucas\nmike\nnora\nolivia\npeter\nquinn\nrachel\nsimon\n", "20\nalice\nbob\ncharlie\ndave\neve\nfrank\ngreg\nharry\nivan\njack\nkate\nlucas\nmike\nnora\nolivia\npeter\nquinn\nrachel\nsimon\ntom\n", "21\ntom\nalice\nbob\ncharlie\ndave\neve\nfrank\ngreg\nharry\nivan\njack\nkate\nlucas\nmike\nnora\nolivia\npeter\nquinn\nrachel\nsimon\nulla\n", "22\nvictor\ntom\nalice\nbob\ncharlie\ndave\neve\nfrank\ngreg\nharry\nivan\njack\nkate\nlucas\nmike\nnora\nolivia\npeter\nquinn\nrachel\nsimon\nulla\n", "23\nwinston\nvictor\ntom\nalice\nbob\ncharlie\ndave\neve\nfrank\ngreg\nharry\nivan\njack\nkate\nlucas\nmike\nnora\nolivia\npeter\nquinn\nrachel\nsimon\nulla\n", "24\nxander\nwinston\nvictor\ntom\nalice\nbob\ncharlie\ndave\neve\nfrank\ngreg\nharry\nivan\njack\nkate\nlucas\nmike\nnora\nolivia\npeter\nquinn\nrachel\nsimon\nulla\n", "25\nyvonne\nxander\nwinston\nvictor\ntom\nalice\nbob\ncharlie\ndave\neve\nfrank\ngreg\nharry\nivan\njack\nkate\nlucas\nmike\nnora\nolivia\npeter\nquinn\nrachel\nsimon\nulla\n", "26\nzach\nyvonne\nxander\nwinston\nvictor\ntom\nalice\nbob\ncharlie\ndave\neve\nfrank\ngreg\nharry\nivan\njack\nkate\nlucas\nmike\nnora\nolivia\npeter\nquinn\nrachel\nsimon\nulla\n", "27\nalice\nzach\nyvonne\nxander\nwinston\nvictor\ntom\nbob\ncharlie\ndave\neve\nfrank\ngreg\nharry\nivan\njack\nkate\nlucas\nmike\nnora\nolivia\npeter\nquinn\nrachel\nsimon\nulla\n", "28\nbob\nalice\nzach\nyvonne\nxander\nwinston\nvictor\ntom\ncharlie\ndave\neve\nfrank\ngreg\nharry\nivan\njack\nkate\nlucas\nmike\nnora\nolivia\npeter\nquinn\nrachel\nsimon\nulla\n", "29\ncharlie\nbob\nalice\nzach\nyvonne\nxander\nwinston\nvictor\ntom\ndave\neve\nfrank\ngreg\nharry\nivan\njack\nkate\nlucas\nmike\nnora\nolivia\npeter\nquinn\nrachel\nsimon\nulla\n", "30\nalice\nbob\nalice\nbob\nalice\nbob\nalice\nbob\nalice\nbob\nalice\nbob\nalice\nbob\nalice\nbob\nalice\nbob\nalice\nbob\nalice\nbob\nalice\nbob\nalice\nbob\nalice\nbob\nalice\nbob\n"]}
{"name": "p02801 AtCoder Beginner Contest 151 - Next Alphabet", "description": "Constraints\n\n* C is a lowercase English letter that is not `z`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nC", "testcase": ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "b", "c", "d", "e", "f"]}
{"name": "937_A. Olympiad", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 100) --- the number of participants.\n\nThe next line contains a sequence of n integers a1, a2, ..., an (0 <= ai <= 600) --- participants' scores.\n\nIt's guaranteed that at least one participant has non-zero score.", "testcase": ["2\n300 300", "3\n0 1 2", "1\n100", "4\n234 0 12 345", "5\n600 500 400 300 200", "6\n0 59 100 200 300 400", "7\n1 2 3 4 5 6 7", "10\n0 1 1 1 1 1 1 1 1 5", "8\n10 20 30 40 50 60 70 80", "9\n50 50 50 50 50 50 50 50 50", "11\n0 0 0 0 0 100 0 0 0 0 0", "12\n0 1 2 3 4 5 6 7 8 9 10 11", "13\n0 11 22 33 44 55 66 77 88 99 110 121 132", "14\n600 590 580 570 560 550 540 530 520 510 500 490 480 470", "15\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 300", "16\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100", "17\n23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23", "18\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 120", "19\n5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90", "20\n0 5 0 10 0 15 0 20 0 25 0 30 0 35 0 40 0 45 0 50", "21\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "22\n100 0 100 0 100 0 100 0 100 0 100 0 100 0 100 0 100 0 100 0 100", "23\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44", "24\n45 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 45", "25\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25", "26\n26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26", "27\n0 1 3 2 5 4 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26", "28\n600 599 598 597 596 595 594 593 592 591 590 589 588 587 586 585 584 583 582 581 580 579 578 577 576 575 574 573", "29\n300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300", "30\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1"]}
{"name": "p03307 AtCoder Beginner Contest 102 - Multiple of 2 and N", "description": "Constraints\n\n* 1 <= N <= 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "testcase": ["1", "2", "10", "100", "500", "999", "1000", "1001", "5000", "10000", "50000", "100000", "500000", "999999", "1000000", "10000000", "50000000", "100000000", "500000000", "999999999", "67382911", "234234", "91827364", "72364592", "198237", "4792803", "123456789", "987654321", "111111111", "222222222"]}
{"name": "1324_D. Pair of Topics", "description": "Input\n\nThe first line of the input contains one integer n (2 <= n <= 2 * 10^5) --- the number of topics.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 10^9), where a_i is the interestingness of the i-th topic for the teacher.\n\nThe third line of the input contains n integers b_1, b_2, ..., b_n (1 <= b_i <= 10^9), where b_i is the interestingness of the i-th topic for the students.", "testcase": ["2\n1 1\n1 1", "3\n2 3 4\n4 5 6", "2\n1000000000 1000000000\n1000000000 1000000000", "4\n5 2 8 1\n9 4 7 3", "2\n500000000 600000000\n700000000 800000000", "5\n1 2 3 4 5\n5 4 3 2 1", "6\n10 20 30 40 50 60\n60 50 40 30 20 10", "7\n10000000 20000000 30000000 40000000 50000000 60000000 70000000\n70000000 60000000 50000000 40000000 30000000 20000000 10000000", "3\n345 678 910\n123 456 789", "10\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1", "8\n234567 987654 345678 987654 234567 789012 345678 890123\n123456 678901 234567 890123 456789 123456 678901 234567", "2\n50000000 50000000\n1000000000 1000000000", "3\n10000000 99999999 500000000\n300000000 20000000 70000000", "4\n98765432 87654321 76543210 65432109\n12345678 23456789 34567890 45678901", "9\n9 8 7 6 5 4 3 2 1\n1 2 3 4 5 6 7 8 9", "11\n111111111 222222222 333333333 444444444 555555555 666666666 777777777 888888888 999999999 1000000000 999999999\n999999999 888888888 777777777 666666666 555555555 444444444 333333333 222222222 111111111 1000000000 999999999", "12\n12 23 34 45 56 67 78 89 90 123 234 345\n543 432 321 210 109 98 87 76 65 54 43 32", "13\n13 26 39 52 65 78 91 104 117 130 143 156 169\n169 156 143 130 117 104 91 78 65 52 39 26 13", "6\n999999 888888 777777 666666 555555 444444\n444444 555555 666666 777777 888888 999999", "15\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\n15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "16\n16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16", "2\n12345678 87654321\n21436587 11223344", "20\n20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20", "10\n10 20 30 40 50 60 70 80 90 100\n100 90 80 70 60 50 40 30 20 10", "7\n7 14 21 28 35 42 49\n49 42 35 28 21 14 7", "9\n1 4 1 4 1 4 1 4 1\n4 1 4 1 4 1 4 1 4", "8\n100000000 200000000 300000000 400000000 500000000 600000000 700000000 800000000\n800000000 700000000 600000000 500000000 400000000 300000000 200000000 100000000", "8\n23456789 12345678 34567890 23456789 12345678 34567890 23456789 12345678\n87654321 98765432 76543210 87654321 98765432 76543210 87654321 98765432", "6\n654321 123456 654321 123456 654321 123456\n321654 654123 321654 654123 321654 654123", "4\n10 10 10 10\n100 100 100 100", "5\n1000000000 999999999 888888888 777777777 666666666\n666666666 777777777 888888888 999999999 1000000000"]}
{"name": "p03346 AtCoder Grand Contest 024 - Backfront", "description": "Constraints\n\n* 1 <= N <= 2* 10^5\n* (P_1,P_2,...,P_N) is a permutation of (1,2,...,N).\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nP_1\n:\nP_N", "testcase": ["1\n1", "2\n1\n2", "2\n2\n1", "3\n1\n2\n3", "3\n1\n3\n2", "3\n2\n1\n3", "3\n2\n3\n1", "3\n3\n1\n2", "3\n3\n2\n1", "4\n1\n2\n3\n4", "4\n4\n3\n2\n1", "4\n2\n1\n4\n3", "4\n3\n1\n4\n2", "4\n1\n3\n2\n4", "5\n1\n2\n3\n4\n5", "5\n5\n4\n3\n2\n1", "5\n2\n3\n5\n1\n4", "5\n3\n1\n4\n5\n2", "5\n4\n5\n1\n3\n2", "6\n1\n2\n3\n4\n5\n6", "6\n6\n5\n4\n3\n2\n1", "6\n3\n2\n1\n6\n5\n4", "6\n4\n6\n2\n3\n1\n5", "6\n5\n1\n3\n6\n4\n2", "7\n1\n2\n3\n4\n5\n6\n7", "7\n7\n6\n5\n4\n3\n2\n1", "7\n4\n3\n2\n1\n5\n7\n6", "7\n5\n7\n1\n3\n6\n2\n4", "7\n6\n4\n7\n1\n3\n5\n2", "8\n1\n2\n3\n4\n5\n6\n7\n8"]}
{"name": "1110_A. Parity", "description": "Input\n\nThe first line contains two integers b and k (2<= b<= 100, 1<= k<= 10^5) --- the base of the number and the number of digits.\n\nThe second line contains k integers a_1, a_2, ..., a_k (0<= a_i < b) --- the digits of n.\n\nThe representation of n contains no unnecessary leading zero. That is, a_1 can be equal to 0 only if k = 1.", "testcase": "{\"testcases\": [\n\"2 3\\n1 0 1\",\n\"10 6\\n9 4 1 7 3 5\",\n\"2 1\\n1\",\n\"16 4\\n10 0 4 7\",\n\"3 5\\n2 1 0 2 1\",\n\"5 10\\n1 4 3 2 4 3 0 1 1 2\",\n\"100 5\\n99 11 23 0 45\",\n\"10 5\\n1 0 0 0 1\",\n\"2 10\\n1 1 1 0 1 0 1 1 0 0\",\n\"8 8\\n3 6 1 7 2 4 5 0\",\n\"6 2\\n4 1\",\n\"9 3\\n8 0 7\",\n\"2 4\\n1 1 0 0\",\n\"50 6\\n20 3 40 16 12 31\",\n\"7 7\\n6 1 3 5 6 2 0\",\n\"20 5\\n10 15 17 2 8\",\n\"4 2\\n3 1\",\n\"30 8\\n25 22 6 14 11 28 7 29\",\n\"12 6\\n7 5 11 9 2 3\",\n\"22 3\\n4 16 20\",\n\"10 4\\n1 2 3 4\",\n\"15 5\\n10 13 0 14 7\",\n\"21 10\\n18 4 15 3 14 2 12 11 9 0\",\n\"37 6\\n14 25 35 8 2 16\",\n\"13 7\\n7 12 9 0 5 3 11\",\n\"10 10\\n3 7 9 0 1 4 2 6 5 8\",\n\"18 2\\n11 17\",\n\"10 1\\n7\",\n\"25 4\\n16 24 1 6\",\n\"10 3\\n7 3 9\"\n]}"}
{"name": "439_A. Devu, the Singer and Churu, the Joker", "description": "Input\n\nThe first line contains two space separated integers n, d (1 <= n <= 100; 1 <= d <= 10000). The second line contains n space-separated integers: t1, t2, ..., tn (1 <= ti <= 100).", "testcase": ["1 1\n1", "2 100\n50 50", "3 10000\n100 100 100", "4 123\n5 79 38 1", "5 300\n10 20 30 40 50", "6 750\n125 125 125 125 125 125", "7 4321\n100 100 100 100 100 100 100", "8 987\n12 23 34 45 56 67 78 89", "9 5000\n200 300 400 500 600 700 800 900 1000", "10 2000\n100 100 100 100 100 100 100 100 100 100", "11 321\n29 28 27 26 25 24 23 22 21 20 19", "12 800\n10 20 30 40 50 60 70 80 90 100 110 120", "13 5050\n1 2 3 4 5 6 7 8 9 10 11 12 13", "14 77\n7 6 5 4 3 2 1 2 3 4 5 6 7 7", "15 88\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15", "16 999\n62 62 62 62 62 62 62 62 62 62 62 62 62 62 62 62", "17 2222\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 17", "18 5432\n1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584", "19 454\n24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24", "20 333\n5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95 100", "21 1111\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21", "22 6789\n100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200", "23 444\n20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20", "24 3000\n25 50 75 100 125 150 175 200 225 250 275 300 325 350 375 400 425 450 475 500 525 550 575 600", "25 666\n3 6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 60 63 66 69 72 75", "26 777\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26", "27 888\n33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33", "28 2000\n50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50", "29 300\n20 10 20 10 20 10 20 10 20 10 20 10 20 10 20 10 20 10 20 10 20 10 20 10 20 10", "30 10000\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"]}
{"name": "903_A. Hungry Student Problem", "description": "Input\n\nThe first line contains one integer n (1 <= n <= 100) --- the number of testcases.\n\nThe i-th of the following n lines contains one integer xi (1 <= xi <= 100) --- the number of chicken chunks Ivan wants to eat.", "testcase": ["1\n1", "1\n2", "1\n3", "1\n4", "1\n5", "1\n6", "1\n7", "1\n8", "1\n9", "1\n10", "1\n11", "1\n12", "1\n13", "1\n14", "1\n15", "1\n16", "1\n17", "1\n18", "1\n19", "1\n20", "1\n21", "1\n22", "1\n23", "1\n24", "1\n25", "1\n26", "1\n27", "1\n28", "1\n29", "1\n30"]}
{"name": "950_A. Left-handers, Right-handers and Ambidexters", "description": "Input\n\nThe only line contains three integers l, r and a (0 <= l, r, a <= 100) --- the number of left-handers, the number of right-handers and the number of ambidexters at the training.", "testcase": ["0 0 0", "1 1 1", "2 2 2", "3 3 3", "4 4 4", "5 5 5", "6 6 6", "7 7 7", "8 8 8", "9 9 9", "10 10 10", "11 11 11", "12 12 12", "13 13 13", "14 14 14", "15 15 15", "16 16 16", "17 17 17", "18 18 18", "19 19 19", "20 20 20", "21 21 21", "22 22 22", "23 23 23", "24 24 24", "25 25 25", "26 26 26", "27 27 27", "28 28 28", "29 29 29"]}
{"name": "p03125 AtCoder Beginner Contest 118 - B +/- A", "description": "Constraints\n\n* All values in input are integers.\n* 1 <= A <= B <= 20\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B", "testcase": ["1 1", "2 2", "3 3", "4 4", "5 5", "6 6", "7 7", "8 8", "9 9", "10 10", "11 11", "12 12", "13 13", "14 14", "15 15", "16 16", "17 17", "18 18", "19 19", "20 20", "1 20", "2 19", "3 18", "4 17", "5 16", "6 15", "7 14", "8 13", "9 12", "10 11"]}
{"name": "p03470 AtCoder Beginner Contest 085 - Kagami Mochi", "description": "Constraints\n\n* 1 <= N <= 100\n* 1 <= d_i <= 100\n* All input values are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nd_1\n:\nd_N", "testcase": ["1\n1", "2\n1\n2", "3\n10\n20\n30", "4\n25\n25\n50\n100", "5\n1\n2\n3\n4\n5", "6\n6\n12\n18\n24\n30\n36", "7\n70\n60\n50\n40\n30\n20\n10", "8\n8\n16\n24\n32\n40\n48\n56\n64", "9\n9\n18\n27\n36\n45\n54\n63\n72\n81", "10\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1", "11\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1", "12\n100\n90\n80\n70\n60\n50\n40\n30\n20\n10\n5\n1", "13\n13\n26\n39\n52\n65\n78\n91\n13\n26\n39\n52\n65\n78", "14\n7\n14\n21\n28\n35\n42\n49\n56\n63\n70\n77\n84\n91\n98", "15\n15\n30\n45\n60\n75\n15\n30\n45\n60\n75\n15\n30\n45\n60\n75", "16\n16\n32\n48\n64\n80\n96\n16\n32\n48\n64\n80\n96\n16\n32\n48\n64", "17\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17", "18\n18\n36\n54\n72\n90\n18\n36\n54\n72\n90\n18\n36\n54\n72\n90\n18\n36\n54", "19\n19\n38\n57\n76\n95\n19\n38\n57\n76\n95\n19\n38\n57\n76\n95\n19\n38\n57\n76", "20\n2\n4\n6\n8\n10\n12\n14\n16\n18\n20\n22\n24\n26\n28\n30\n32\n34\n36\n38\n40", "21\n3\n6\n9\n12\n15\n18\n21\n24\n27\n30\n33\n36\n39\n42\n45\n48\n51\n54\n57\n60\n63", "22\n22\n44\n66\n88\n22\n44\n66\n88\n22\n44\n66\n88\n22\n44\n66\n88\n22\n44\n66\n88\n22\n44", "23\n23\n46\n69\n92\n23\n46\n69\n92\n23\n46\n69\n92\n23\n46\n69\n92\n23\n46\n69\n92\n23\n46\n69", "24\n24\n48\n72\n96\n24\n48\n72\n96\n24\n48\n72\n96\n24\n48\n72\n96\n24\n48\n72\n96\n24\n48\n72\n96", "25\n25\n50\n75\n100\n25\n50\n75\n100\n25\n50\n75\n100\n25\n50\n75\n100\n25\n50\n75\n100\n25\n50\n75", "26\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26", "27\n27\n54\n81\n27\n54\n81\n27\n54\n81\n27\n54\n81\n27\n54\n81\n27\n54\n81\n27\n54\n81\n27\n54\n81\n27\n54", "28\n7\n14\n21\n28\n35\n42\n49\n56\n63\n70\n77\n84\n91\n98\n7\n14\n21\n28\n35\n42\n49\n56\n63\n70\n77\n84\n91\n98", "29\n29\n58\n87\n29\n58\n87\n29\n58\n87\n29\n58\n87\n29\n58\n87\n29\n58\n87\n29\n58\n87\n29\n58\n87\n29\n58\n87\n29", "30\n30\n60\n90\n30\n60\n90\n30\n60\n90\n30\n60\n90\n30\n60\n90\n30\n60\n90\n30\n60\n90\n30\n60\n90\n30\n60\n90\n30\n60\n90"]}
{"name": "p03369 AtCoder Beginner Contest 095 - Something on It", "description": "Constraints\n\n* S is a string of length 3.\n* Each character in S is `o` or `x`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "testcase": ["ooo", "oox", "oxo", "oxx", "xoo", "xox", "xxo", "xxx", "oox", "oxo", "xoo", "xxo", "xox", "oxx", "ooo", "ooo", "xoxx", "xxox", "ooxo", "oxxo", "oxox", "xooo", "xxoo", "oxxx", "xxoo", "ooxx", "xoox", "xoxx", "oxxo", "xoxo"]}
{"name": "p02976 AtCoder Grand Contest 035 - Even Degrees", "description": "Constraints\n\n* 2 <= N <= 10^5\n* N-1 <= M <= 10^5\n* 1 <= A_i,B_i <= N (1<= i<= M)\n* The given graph is simple and connected.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nA_1 B_1\n:\nA_M B_M", "testcase": ["2 1\n1 2", "3 2\n1 2\n2 3", "4 3\n1 2\n2 3\n3 4", "4 3\n1 3\n3 4\n4 2", "5 4\n1 2\n2 3\n3 4\n4 5", "5 4\n1 2\n2 5\n5 3\n3 4", "6 5\n1 2\n2 3\n3 4\n4 5\n5 6", "6 5\n1 6\n6 3\n3 4\n4 2\n2 5", "7 6\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7", "7 6\n1 3\n3 5\n5 7\n7 2\n2 4\n4 6", "8 7\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8", "8 7\n1 8\n8 2\n2 3\n3 4\n4 5\n5 6\n6 7", "9 8\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9", "9 8\n1 9\n9 2\n2 4\n4 3\n3 5\n5 6\n6 7\n7 8", "10 9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10", "10 9\n1 10\n10 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9", "20 19\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20", "30 29\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26\n26 27\n27 28\n28 29\n29 30", "50 49\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26\n26 27\n27 28\n28 29\n29 30\n30 31\n31 32\n32 33\n33 34\n34 35\n35 36\n36 37\n37 38\n38 39\n39 40\n40 41\n41 42\n42 43\n43 44\n44 45\n45 46\n46 47\n47 48\n48 49\n49 50", "100 99\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26\n26 27\n27 28\n28 29\n29 30\n30 31\n31 32\n32 33\n33 34\n34 35\n35 36\n36 37\n37 38\n38 39\n39 40\n40 41\n41 42\n42 43\n43 44\n44 45\n45 46\n46 47\n47 48\n48 49\n49 50\n50 51\n51 52\n52 53\n53 54\n54 55\n55 56\n56 57\n57 58\n58 59\n59 60\n60 61\n61 62\n62 63\n63 64\n64 65\n65 66\n66 67\n67 68\n68 69\n69 70\n70 71\n71 72\n72 73\n73 74\n74 75\n75 76\n76 77\n77 78\n78 79\n79 80\n80 81\n81 82\n82 83\n83 84\n84 85\n85 86\n86 87\n87 88\n88 89\n89 90\n90 91\n91 92\n92 93\n93 94\n94 95\n95 96\n96 97\n97 98\n98 99\n99 100", "7 6\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7", "8 7\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8", "9 8\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9", "10 9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10", "11 10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11", "12 11\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12", "13 12\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13", "14 13\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14", "15 14\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15", "16 15\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16", "17 16\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17", "18 17\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18", "19 18\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19"]}
{"name": "p03569 CODE FESTIVAL 2017 qual C - Inserting 'x'", "description": "Constraints\n\n* 1 <= |s| <= 10^5\n* s consists of lowercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\ns", "testcase": ["a", "ab", "abc", "abcd", "abcde", "abcdef", "abcdefg", "abcdefgh", "abcdefghi", "abcdefghij", "abcdefghijk", "abcdefghijkl", "abcdefghijklm", "abcdefghijklmn", "abcdefghijklmno", "abcdefghijklmnop", "abcdefghijklmnopq", "abcdefghijklmnopqr", "abcdefghijklmnopqrs", "abcdefghijklmnopqrst", "abcdefghijklmnopqrstu", "abcdefghijklmnopqrstuv", "abcdefghijklmnopqrstuvw", "abcdefghijklmnopqrstuvwx", "abcdefghijklmnopqrstuvwxy", "abcdefghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyzab", "abcdefghijklmnopqrstuvwxyzabc", "abcdefghijklmnopqrstuvwxyzabcd", "abcdefghijklmnopqrstuvwxyzabcde"]}
{"name": "p03288 AtCoder Beginner Contest 104 - Rated for Me", "description": "Constraints\n\n* 0 <= R <= 4208\n* R is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nR", "testcase": ["0", "4208", "2104", "3500", "123", "42", "789", "2500", "4096", "666", "333", "1987", "1500", "2750", "3141", "999", "1000", "2000", "3000", "4000", "1111", "2222", "3333", "1234", "2345", "3456", "456", "654", "321", "987"]}
{"name": "p02680 AtCoder Beginner Contest 168 - . (Single Dot)", "description": "Constraints\n\n* All values in input are integers between -10^9 and 10^9 (inclusive).\n* 1 <= N, M <= 1000\n* A_i < B_i\\ (1 <= i <= N)\n* E_j < F_j\\ (1 <= j <= M)\n* The point (0, 0) does not lie on any of the given segments.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nA_1 B_1 C_1\n:\nA_N B_N C_N\nD_1 E_1 F_1\n:\nD_M E_M F_M", "testcase": ["1 1\n-10 -5 3\n3 4 5", "2 2\n-10 -9 5\n-8 -6 15\n1 3 -2\n4 5 -10", "3 1\n-10 -1 0\n1 2 3\n3 9 4\n-5 0 10", "1 3\n1 2 3\n-2 -1 3\n0 1 4\n3 4 2", "4 1\n-10 -9 1\n-5 -4 2\n0 1 3\n3 4 4\n1 2 -10", "2 3\n-9 -8 20\n1 2 30\n-7 -6 40\n-3 -2 50\n0 1 60", "5 2\n-10 -5 100\n-20 -15 200\n-30 -25 300\n-40 -35 400\n-50 -45 500\n1 5 600\n6 10 700", "3 4\n-10000000 -5000000 8888\n-3000000 -2000000 9999\n0 10000000 7777\n-9000000 -8000000 6666\n-6000000 -5000000 5555\n-2000000 -1000000 4444\n10000000 20000000 3333", "1 2\n-10 10 -20\n-100 100 200\n100 200 -300", "2 1\n-100000000 100000000 0\n0 99999999 100000000\n-99999999 0 -100000000", "2 2\n-9 1 5\n0 10 6\n-8 2 7\n1 9 8", "3 3\n-3 2 4\n0 4 5\n1 5 6\n-2 3 7\n-1 4 8\n2 6 9", "4 2\n-7 3 10\n-6 4 11\n-5 5 12\n-4 6 13\n-3 7 14\n-2 8 15", "5 1\n-10 0 16\n-9 1 17\n-8 2 18\n-7 3 19\n-6 4 20\n-5 5 21", "1 4\n1 6 22\n-4 3 23\n-2 4 24\n0 5 25\n2 6 26", "2 5\n-10 -5 27\n5 10 28\n-9 -4 29\n-7 -2 30\n-5 0 31\n-3 2 32\n-1 4 33", "6 1\n-20 -15 34\n-14 -9 35\n-8 -3 36\n-2 3 37\n4 9 38\n10 15 39\n5 20 40", "1 6\n-99999999 0 41\n0 999999990 42\n-99999998 -99999997 43\n99999996 99999997 44\n-99999999 99999998 45\n99999997 99999999 46", "3 2\n-2 8 47\n-4 7 48\n-6 6 49\n-8 5 50\n-10 4 51", "7 1\n-100000000 0 52\n-80000000 20000000 53\n-60000000 40000000 54\n-40000000 60000000 55\n-20000000 80000000 56\n0 100000000 57\n50000000 100000000 58\n-50000000 -40000000 59", "1 7\n0 1 60\n-1 0 61\n2 3 62\n3 4 63\n4 5 64\n5 6 65\n6 7 66", "2 6\n-10 0 67\n0 10 68\n-9 -1 69\n-8 -2 70\n-7 -3 71\n-6 -4 72\n-5 -3 73", "8 2\n-100 0 74\n-200 100 75\n-300 200 76\n-400 300 77\n-500 400 78\n-600 500 79\n-700 600 80\n-800 700 81\n-900 800 82\n-1000 900 83", "1 8\n-100000000 99999999 84\n99999998 100000000 85\n-99999997 99999996 86\n99999995 99999994 87\n-99999993 99999992 88\n99999991 99999990 89\n-99999989 99999988 90\n99999987 99999986 91", "4 3\n-100 10 92\n-200 20 93\n-300 30 94\n-400 40 95\n-20 50 96\n-10 60 97\n0 70 98", "5 4\n-5 5 99\n-6 6 100\n-7 7 101\n-8 8 102\n-9 9 103\n-1 2 104\n-2 3 105\n-3 4 106\n-4 5 107", "6 3\n-5 0 108\n-4 1 109\n-3 2 110\n-2 3 111\n-1 4 112\n0 5 113\n1 6 114\n2 7 115\n3 8 116", "2 7\n-5 -4 117\n-3 -2 118\n-2 -1 119\n0 1 120\n2 3 121\n4 5 122\n6 7 123\n8 9 124", "9 2\n-100 100 125\n-200 200 126\n-300 300 127\n-400 400 128\n-500 500 129\n-600 600 130\n-700 700 131\n-800 800 132\n-900 900 133\n800 900 134\n900 1000 135", "2 8\n-50 -30 136\n30 50 137\n-40 -20 138\n20 40 139\n-30 -10 140\n10 30 141\n-20 0 142\n0 20 143\n-10 10 144\n10 20 145", "1 9\n-100000000 -50000000 146\n-25000000 25000000 147\n-75000000 -25000000 148\n25000000 75000000 149\n-50000000 0 150\n0 50000000 151\n-25000000 -12500000 152\n12500000 25000000 153\n50000000 75000000 154\n75000000 87500000 155", "10 2\n-10 -9 156\n-8 -7 157\n-6 -5 158\n-4 -3 159\n-2 -1 160\n0 1 161\n2 3 162\n4 5 163\n6 7 164\n8 9 165\n10 11 166\n12 13 167"]}
{"name": "p02271 Exhaustive Search", "description": "Constraints\n\n* n <= 20\n* q <= 200\n* 1 <= elements in A <= 2000\n* 1 <= Mi <= 2000\n\nInput\n\nIn the first line n is given. In the second line, n integers are given. In the third line q is given. Then, in the fourth line, q integers (Mi) are given.", "testcase": [{"n": 1, "A": [2000], "q": 1, "Mi": [1000]}, {"n": 20, "A": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "q": 3, "Mi": [200, 400, 600]}, {"n": 5, "A": [50, 100, 150, 200, 250], "q": 2, "Mi": [75, 175]}, {"n": 10, "A": [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], "q": 5, "Mi": [150, 160, 170, 180, 190]}, {"n": 15, "A": [200, 400, 600, 800, 100, 120, 140, 160, 180, 200, 220, 240, 260, 280, 300], "q": 10, "Mi": [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]}, {"n": 8, "A": [199, 398, 597, 796, 995, 1194, 1393, 1592], "q": 8, "Mi": [2000, 1999, 1555, 1333, 1111, 888, 666, 444]}, {"n": 20, "A": [2000, 1999, 1998, 1997, 1996, 1995, 1994, 1993, 1992, 1991, 1990, 1989, 1988, 1987, 1986, 1985, 1984, 1983, 1982, 1981], "q": 20, "Mi": [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200]}, {"n": 11, "A": [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55], "q": 11, "Mi": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]}, {"n": 6, "A": [1200, 1100, 1000, 900, 800, 700], "q": 1, "Mi": [2000]}, {"n": 9, "A": [1999, 1798, 1597, 1396, 1195, 994, 793, 592, 391], "q": 9, "Mi": [111, 222, 333, 444, 555, 666, 777, 888, 999]}, {"n": 2, "A": [500, 1500], "q": 2, "Mi": [2000, 1000]}, {"n": 7, "A": [2, 4, 6, 8, 10, 12, 14], "q": 3, "Mi": [1, 3, 5]}, {"n": 4, "A": [200, 400, 600, 800], "q": 4, "Mi": [100, 300, 500, 700]}, {"n": 13, "A": [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300], "q": 6, "Mi": [250, 750, 1250, 1750, 50, 1500]}, {"n": 10, "A": [1900, 1800, 1700, 1600, 1500, 1400, 1300, 1200, 1100, 1000], "q": 5, "Mi": [2000, 1501, 1001, 501, 101]}, {"n": 17, "A": [17, 34, 51, 68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255, 272, 289], "q": 7, "Mi": [200, 400, 600, 800, 1000, 1200, 1400]}, {"n": 12, "A": [1500, 1499, 1498, 1497, 1496, 1495, 1494, 1493, 1492, 1491, 1490, 1489], "q": 10, "Mi": [1500, 1400, 1300, 1200, 1100, 1000, 900, 800, 700, 600]}, {"n": 4, "A": [25, 50, 75, 100], "q": 3, "Mi": [1, 2, 3]}, {"n": 5, "A": [2000, 1600, 1200, 800, 400], "q": 2, "Mi": [1200, 800]}, {"n": 13, "A": [20, 40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240, 260], "q": 13, "Mi": [40, 80, 120, 160, 200, 240, 280, 320, 360, 400, 440, 480, 520]}, {"n": 7, "A": [700, 800, 900, 1000, 1100, 1200, 1300], "q": 5, "Mi": [750, 850, 950, 1050, 1150]}, {"n": 8, "A": [125, 250, 375, 500, 625, 750, 875, 1000], "q": 8, "Mi": [200, 400, 600, 800, 1000, 1200, 1400, 1600]}, {"n": 20, "A": [20, 40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240, 260, 280, 300, 320, 340, 360, 380, 400], "q": 1, "Mi": [200]}, {"n": 3, "A": [666, 1332, 1998], "q": 7, "Mi": [10, 20, 30, 40, 50, 60, 70]}, {"n": 6, "A": [100, 400, 700, 1000, 1300, 1600], "q": 4, "Mi": [500, 1000, 1500, 2000]}, {"n": 19, "A": [105, 210, 315, 420, 525, 630, 735, 840, 945, 1050, 1155, 1260, 1365, 1470, 1575, 1680, 1785, 1890, 1995], "q": 15, "Mi": [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500]}, {"n": 12, "A": [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120], "q": 10, "Mi": [5, 15, 25, 35, 45, 55, 65, 75, 85, 95]}, {"n": 15, "A": [134, 268, 402, 536, 670, 804, 938, 1072, 1206, 1340, 1474, 1608, 1742, 1876, 2010], "q": 20, "Mi": [150, 300, 450, 600, 750, 900, 1050, 1200, 1350, 1500, 1650, 1800, 1950, 2000, 1550, 1750, 1850, 1950, 2050, 2150]}, {"n": 16, "A": [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000, 1800, 1600, 1400, 1200, 1000, 800], "q": 8, "Mi": [50, 150, 250, 350, 450, 550, 650, 750]}, {"n": 6, "A": [1600, 1500, 1400, 1300, 1200, 1100], "q": 3, "Mi": [1300, 1400, 1500]}, {"n": 18, "A": [111, 222, 333, 444, 555, 666, 777, 888, 999, 1110, 1221, 1332, 1443, 1554, 1665, 1776, 1887, 1998], "q": 5, "Mi": [123, 456, 789, 1011, 1314]}, {"n": 4, "A": [1900, 1700, 1500, 1300], "q": 6, "Mi": [2000, 1800, 1600, 1400, 1200, 1000]}, {"n": 9, "A": [9, 18, 27, 36, 45, 54, 63, 72, 81], "q": 2, "Mi": [10, 20]}, {"n": 14, "A": [143, 286, 429, 572, 715, 858, 1001, 1144, 1287, 1430, 1573, 1716, 1859, 2002], "q": 14, "Mi": [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000, 2200, 2400, 2600, 2800]}]}
{"name": "1016_A. Death Note", "description": "Input\n\nThe first line of the input contains two integers n, m (1 <= n <= 2 * 10^5, 1 <= m <= 10^9) --- the number of days you will write names in the notebook and the number of names which can be written on each page of the notebook.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 10^9), where a_i means the number of names you will write in the notebook during the i-th day.", "testcase": ["2 100\n50 50", "3 200\n100 100 100", "4 500\n125 125 125 125", "5 10\n2 2 2 2 2", "6 300\n50 50 50 50 50 50", "7 700\n100 100 100 100 100 100 100", "8 800\n100 100 100 100 100 100 100 100", "9 900\n100 100 100 100 100 100 100 100 100", "10 1000\n100 100 100 100 100 100 100 100 100 100", "11 1100\n100 100 100 100 100 100 100 100 100 100 100", "12 1200\n100 100 100 100 100 100 100 100 100 100 100 100", "13 1300\n100 100 100 100 100 100 100 100 100 100 100 100 100", "14 1400\n100 100 100 100 100 100 100 100 100 100 100 100 100 100", "15 1500\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100", "16 1600\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100", "17 1700\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100", "18 1800\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100", "19 1900\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100", "20 2000\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100", "21 2100\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100", "22 2200\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100", "23 2300\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100", "24 2400\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100", "25 2500\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100", "26 2600\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100", "27 2700\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100", "28 2800\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100", "29 2900\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100", "30 3000\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100", "1 1000000000\n1000000000"]}
{"name": "1391_C. Cyclic Permutations ", "description": "Input\n\nThe first and only line contains a single integer n (3 <= n <= 10^6).", "testcase": ["3", "4", "5", "10", "100", "999", "1000", "5000", "123456", "654321", "234567", "345678", "456789", "567890", "678901", "789012", "890123", "901234", "999999", "100000", "200000", "300000", "400000", "500000", "600000", "700000", "800000", "900000", "999998", "1000000"]}
{"name": "p04019 AtCoder Grand Contest 003 - Wanna go back home", "description": "Constraints\n\n* 1 <= | S | <= 1000\n* S consists of the letters `N`, `W`, `S`, `E`.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nS", "testcase": ["N", "W", "S", "E", "NW", "SE", "ENWS", "NNEESSWW", "SSENWENNWS", "WNES", "EENNWWSW", "WNN", "SSSEENWW", "NEE", "WWSSEN", "EEEE", "NWNWNWNWNW", "SWNW", "EESSSWWENE", "WSWNSW", "ENWNWNWSEW", "SWNESW", "ENWSENWSENWS", "WSWWSWWS", "ESWNNENWNE", "NSENWSEWNWEN", "WEWNES", "SWSESWNENENE", "ENEENEENEENE", "SSWWEENNEENW"]}
{"name": "p03338 AtCoder Beginner Contest 098 - Cut and Count", "description": "Constraints\n\n* 2 <= N <= 100\n* |S| = N\n* S consists of lowercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nS", "testcase": ["2\nab", "3\nabc", "4\nabcd", "5\nabcde", "6\nabcdef", "7\nabcdefg", "8\nabcdefgh", "9\nabcdefghi", "10\nabcdefghij", "11\nabcdefghijk", "12\nabcdefghijkl", "13\nabcdefghijklm", "14\nabcdefghijklmn", "15\nabcdefghijklmno", "16\nabcdefghijklmnop", "17\nabcdefghijklmnopq", "18\nabcdefghijklmnopqr", "19\nabcdefghijklmnopqrs", "20\nabcdefghijklmnopqrst", "21\nabcdefghijklmnopqrstu", "22\nabcdefghijklmnopqrstuv", "23\nabcdefghijklmnopqrstuvw", "24\nabcdefghijklmnopqrstuvwx", "25\nabcdefghijklmnopqrstuvwxy", "26\nabcdefghijklmnopqrstuvwxyz", "27\nabcdefghijklmnopqrstuvwxyza", "28\nabcdefghijklmnopqrstuvwxyzb", "29\nabcdefghijklmnopqrstuvwxyzc", "30\nabcdefghijklmnopqrstuvwxyzd", "31\nabcdefghijklmnopqrstuvwxyze", "32\nabcdefghijklmnopqrstuvwxyzf", "33\nabcdefghijklmnopqrstuvwxyag", "34\nabcdefghijklmnopqrstuvwxyah", "35\nabcdefghijklmnopqrstuvwxyai", "36\nabcdefghijklmnopqrstuvwxyaj", "37\nabcdefghijklmnopqrstuvwxyak", "38\nabcdefghijklmnopqrstuvwxyal", "39\nabcdefghijklmnopqrstuvwxyam", "40\nabcdefghijklmnopqrstuvwxyan", "41\nabcdefghijklmnopqrstuvwxyao", "42\nabcdefghijklmnopqrstuvwxyap", "43\nabcdefghijklmnopqrstuvwxyaq", "44\nabcdefghijklmnopqrstuvwxyar", "45\nabcdefghijklmnopqrstuvwxyas", "46\nabcdefghijklmnopqrstuvwxyat", "47\nabcdefghijklmnopqrstuvwxyau", "48\nabcdefghijklmnopqrstuvwxyav", "49\nabcdefghijklmnopqrstuvwxyaw", "50\nabcdefghijklmnopqrstuvwxyax", "51\nabcdefghijklmnopqrstuvwxyay", "52\nabcdefghijklmnopqrstuvwxyaz", "53\nabcdefghijklmnopqrstuvwxyba", "54\nabcdefghijklmnopqrstuvwxybb", "55\nabcdefghijklmnopqrstuvwxybc", "56\nabcdefghijklmnopqrstuvwxybd", "57\nabcdefghijklmnopqrstuvwxybe", "58\nabcdefghijklmnopqrstuvwxybf", "59\nabcdefghijklmnopqrstuvwxybg", "60\nabcdefghijklmnopqrstuvwxybh", "61\nabcdefghijklmnopqrstuvwxybi", "62\nabcdefghijklmnopqrstuvwxybj", "63\nabcdefghijklmnopqrstuvwxybk", "64\nabcdefghijklmnopqrstuvwxybl", "65\nabcdefghijklmnopqrstuvwxybm", "66\nabcdefghijklmnopqrstuvwxybn", "67\nabcdefghijklmnopqrstuvwxybo", "68\nabcdefghijklmnopqrstuvwxybp", "69\nabcdefghijklmnopqrstuvwxybq", "70\nabcdefghijklmnopqrstuvwxybr", "71\nabcdefghijklmnopqrstuvwxybs", "72\nabcdefghijklmnopqrstuvwxybt", "73\nabcdefghijklmnopqrstuvwxybu", "74\nabcdefghijklmnopqrstuvwxybv", "75\nabcdefghijklmnopqrstuvwxybw", "76\nabcdefghijklmnopqrstuvwxybx", "77\nabcdefghijklmnopqrstuvwxyby", "78\nabcdefghijklmnopqrstuvwxybz", "79\nabcdefghijklmnopqrstuvwxyca", "80\nabcdefghijklmnopqrstuvwxycb", "81\nabcdefghijklmnopqrstuvwxycc", "82\nabcdefghijklmnopqrstuvwxycd", "83\nabcdefghijklmnopqrstuvwxyce", "84\nabcdefghijklmnopqrstuvwxycf", "85\nabcdefghijklmnopqrstuvwxyag", "86\nabcdefghijklmnopqrstuvwxyah", "87\nabcdefghijklmnopqrstuvwxyai", "88\nabcdefghijklmnopqrstuvwxyaj", "89\nabcdefghijklmnopqrstuvwxyak", "90\nabcdefghijklmnopqrstuvwxyal", "91\nabcdefghijklmnopqrstuvwxyam", "92\nabcdefghijklmnopqrstuvwxyan", "93\nabcdefghijklmnopqrstuvwxyao", "94\nabcdefghijklmnopqrstuvwxyap", "95\nabcdefghijklmnopqrstuvwxyaq", "96\nabcdefghijklmnopqrstuvwxyar", "97\nabcdefghijklmnopqrstuvwxyas", "98\nabcdefghijklmnopqrstuvwxyat", "99\nabcdefghijklmnopqrstuvwxyau", "100\nabcdefghijklmnopqrstuvwxyav"]}
{"name": "p03370 AtCoder Beginner Contest 095 - Bitter Alchemy", "description": "Constraints\n\n* 2 <= N <= 100\n* 1 <= m_i <= 1000\n* m_1 + m_2 + ... + m_N <= X <= 10^5\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN X\nm_1\nm_2\n:\nm_N", "testcase": ["2 100\n1\n99", "3 150\n50\n50\n50", "4 200\n30\n30\n30\n30", "5 1000\n200\n200\n200\n200\n200", "6 300\n50\n50\n50\n50\n25\n25", "7 1000\n100\n100\n100\n100\n100\n100\n100", "8 500\n30\n30\n30\n30\n30\n30\n30\n30", "9 900\n100\n100\n100\n100\n100\n100\n100\n100\n100", "10 3000\n300\n300\n300\n300\n300\n300\n300\n300\n300\n300", "2 2000\n1000\n1000", "3 300\n1\n1\n298", "4 400\n99\n99\n99\n99", "5 400\n50\n50\n50\n50\n50", "6 600\n100\n100\n100\n100\n100\n100", "7 700\n100\n100\n100\n100\n100\n100\n100", "8 8000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000", "9 450\n50\n50\n50\n50\n50\n50\n50\n50\n50", "10 10000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000", "2 205\n5\n200", "3 600\n200\n200\n200", "4 888\n222\n222\n222\n222", "5 505\n101\n101\n101\n101\n101", "6 303\n50\n50\n50\n50\n50\n3", "7 700\n100\n100\n100\n100\n100\n100\n100", "8 1600\n200\n200\n200\n200\n200\n200\n200\n200", "9 1800\n200\n200\n200\n200\n200\n200\n200\n200\n200", "2 10001\n5000\n5001", "3 1500\n500\n500\n500", "4 404\n101\n101\n101\n101", "2 10000\n1\n9999"]}
{"name": "1060_A. Phone Numbers", "description": "Input\n\nThe first line contains an integer n --- the number of cards with digits that you have (1 <= n <= 100).\n\nThe second line contains a string of n digits (characters \"0\", \"1\", ..., \"9\") s_1, s_2, ..., s_n. The string will not contain any other characters, such as leading or trailing spaces.", "testcase": ["1\n0", "2\n01", "3\n123", "4\n4567", "5\n98765", "10\n0123456789", "6\n654321", "7\n0000000", "8\n11223344", "9\n55667788", "10\n9999999999", "12\n123123123123", "13\n4564564564567", "11\n76876876876", "6\n123123", "18\n010101010101010101", "19\n3030303030303030303", "14\n11111111111111", "15\n222222222222222", "20\n33333333333333333333", "25\n4444444444444444444444444", "30\n555555555555555555555555555555", "21\n666666666666666666666", "24\n777777777777777777777777", "22\n8888888888888888888888", "16\n1234567890123456", "16\n9999888877776666", "17\n0000111122223333", "23\n12345678912345678912345", "100\n1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"]}
{"name": "1311_C. Perform the Combo", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 10^4) --- the number of test cases.\n\nThen t test cases follow.\n\nThe first line of each test case contains two integers n and m (2 <= n <= 2 * 10^5, 1 <= m <= 2 * 10^5) --- the length of s and the number of tries correspondingly.\n\nThe second line of each test case contains the string s consisting of n lowercase Latin letters.\n\nThe third line of each test case contains m integers p_1, p_2, ..., p_m (1 <= p_i < n) --- the number of characters pressed right during the i-th try.\n\nIt is guaranteed that the sum of n and the sum of m both does not exceed 2 * 10^5 (sum n <= 2 * 10^5, sum m <= 2 * 10^5).\n\nIt is guaranteed that the answer for each letter does not exceed 2 * 10^9.", "testcase": ["1\n2 1\nab\n1", "1\n3 1\nabc\n2", "1\n4 2\nabcd\n1 3", "1\n5 3\nabcde\n2 4 1", "1\n6 2\nabcdef\n5 1", "1\n7 3\nabcdefg\n3 6 2", "1\n8 4\nabcdefgh\n7 1 4 2", "1\n9 3\nabcdefghi\n8 5 2", "1\n10 2\nabcdefghij\n1 9", "1\n11 4\nabcdefghijk\n10 2 7 3", "1\n12 5\nabcdefghijkl\n11 1 3 7 8", "1\n13 3\nabcdefghijklm\n12 2 5", "1\n14 4\nabcdefghijklmn\n1 13 3 7", "1\n15 5\nabcdefghijklmno\n14 2 6 5 1", "1\n16 6\nabcdefghijklmnop\n15 4 2 7 1 8", "1\n17 3\nabcdefghijklmnopq\n1 16 8", "1\n18 5\nabcdefghijklmnopqr\n17 2 9 8 5", "1\n19 4\nabcdefghijklmnopqrs\n1 18 5 9", "1\n20 5\nabcdefghijklmnopqrst\n19 10 1 3 7", "1\n21 3\nabcdefghijklmnopqrstu\n1 20 10", "1\n22 2\nabcdefghijklmnopqrstuv\n21 1", "1\n23 4\nabcdefghijklmnopqrstuvw\n1 22 3 15", "1\n24 5\nabcdefghijklmnopqrstuvwx\n23 2 16 8 4", "1\n25 1\nabcdefghijklmnopqrstuvwxy\n24", "1\n26 7\nabcdefghijklmnopqrstuvwxyz\n1 3 5 7 11 13 17", "2\n2 1\nab\n1\n3 1\nabc\n2", "2\n4 2\nabcd\n1 3\n5 3\nabcde\n2 4 1", "3\n6 2\nabcdef\n5 1\n7 3\nabcdefg\n3 6 2\n4 1\ndcba\n3", "4\n5 1\nedcba\n4\n8 4\nabcdefgh\n7 1 4 2\n3 3\nxyz\n1 2 3\n4 2\nqwer\n1 4", "5\n9 2\nabcdefghi\n8 5\n2 1\nmn\n1\n4 4\nwxyz\n1 2 3 4\n6 3\nuvwxyz\n1 2 6\n7 2\nzyxwvut\n3 6"]}
{"name": "551_A. GukiZ and Contest", "description": "Input\n\nThe first line contains integer n (1 <= n <= 2000), number of GukiZ's students. \n\nThe second line contains n numbers a1, a2, ... an (1 <= ai <= 2000) where ai is the rating of i-th student (1 <= i <= n).", "testcase": ["2\n1 2", "3\n1 2 3", "4\n4 3 2 1", "5\n1 1 1 1 1", "6\n6 5 4 3 2 1", "7\n1 3 5 7 9 11 13", "8\n8 7 6 5 4 3 2 1", "9\n1 2 3 4 5 6 7 8 9", "10\n10 10 10 10 10 10 10 10 10 10", "11\n11 1 11 1 11 1 11 1 11 1 11", "12\n1 2 3 4 5 6 7 8 9 10 11 12", "13\n13 12 11 10 9 8 7 6 5 4 3 2 1", "14\n1 1 2 2 3 3 4 4 5 5 6 6 7 7", "15\n15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "16\n16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "17\n1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1", "18\n18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "19\n1 2 3 4 5 4 3 2 1 2 3 4 5 4 3 2 1 2 3", "20\n20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "21\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "22\n22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "23\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23", "24\n24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "25\n1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1", "26\n1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51", "27\n27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "28\n28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "29\n2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 101 103 107 109", "30\n30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "31\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31"]}
{"name": "p03821 AtCoder Grand Contest 009 - Multiple Array", "description": "Constraints\n\n* All input values are integers.\n* 1 <= N <= 10^5\n* 0 <= A_i <= 10^9(1 <= i <= N)\n* 1 <= B_i <= 10^9(1 <= i <= N)\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN\nA_1 B_1\n:\nA_N B_N", "testcase": ["1\n0 1", "2\n2147483647 2147483647\n2147483647 2147483647", "3\n100 200\n150 250\n300 1000", "3\n0 1000000000\n500000000 999999999\n123456789 987654321", "4\n1 1\n2 2\n3 3\n4 4", "4\n10 100\n100 1000\n1000 10000\n10000 100000", "5\n0 1\n1 2\n2 3\n3 4\n4 5", "5\n100 200\n200 300\n400 500\n500 600\n700 800", "5\n7654321 1234567\n2345678 8765432\n3456789 9876543\n4567890 8765432\n5678901 2345678", "6\n999999999 1000000000\n888888888 999999999\n777777777 888888888\n666666666 777777777\n555555555 666666666\n444444444 555555555", "6\n10 20\n30 40\n50 60\n70 80\n90 100\n110 120", "6\n2 5\n3 6\n5 7\n7 8\n11 13\n13 17", "7\n123 321\n234 432\n345 543\n456 654\n567 765\n678 876\n789 987", "7\n429496729 1000000000\n429496728 900000000\n429496727 800000000\n429496726 700000000\n429496725 600000000\n429496724 500000000\n429496723 400000000", "8\n0 1\n1 1\n1 2\n2 2\n3 3\n5 8\n8 13\n13 21", "8\n9 10\n11 12\n14 15\n16 17\n19 20\n22 23\n25 26\n28 29", "9\n111111111 999999999\n222222222 888888888\n333333333 777777777\n444444444 666666666\n555555555 555555555\n666666666 444444444\n777777777 333333333\n888888888 222222222\n999999999 111111111", "10\n0 1\n1 2\n4 5\n6 7\n8 9\n2 3\n3 4\n5 6\n7 8\n9 10", "10\n10 20\n20 30\n30 40\n40 50\n50 60\n60 70\n70 80\n80 90\n90 100\n100 110", "10\n1 1000000000\n2 999999999\n3 999999998\n4 999999997\n5 999999996\n6 999999995\n7 999999994\n8 999999993\n9 999999992\n10 999999991", "11\n1000000000 1000000000\n100000000 1000000000\n10000000 1000000000\n1000000 1000000000\n100000 1000000000\n10000 1000000000\n1000 1000000000\n100 1000000000\n10 1000000000\n1 1000000000\n0 1000000000", "12\n50 100\n60 110\n70 120\n80 130\n90 140\n100 150\n110 160\n120 170\n130 180\n140 190\n150 200\n160 210", "12\n250 500\n260 510\n270 520\n280 530\n290 540\n300 550\n310 560\n320 570\n330 580\n340 590\n350 600\n360 610", "13\n789 234\n678 567\n567 890\n345 678\n234 567\n123 345\n345 789\n456 123\n678 345\n789 456\n890 678\n901 890\n234 123", "15\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16", "15\n1 1000000000\n2 999999999\n3 999999998\n4 999999997\n5 999999996\n6 999999995\n7 999999994\n8 999999993\n9 999999992\n10 999999991\n11 999999990\n12 999999989\n13 999999988\n14 999999987\n15 999999986", "20\n8 16\n16 32\n32 64\n64 128\n128 256\n256 512\n512 1024\n1024 2048\n2048 4096\n4096 8192\n8192 16384\n16384 32768\n32768 65536\n65536 131072\n131072 262144\n262144 524288\n524288 1048576\n1048576 2097152\n2097152 4194304\n4194304 8388608", "21\n300 600\n320 640\n340 680\n360 720\n380 760\n400 800\n420 840\n440 880\n460 920\n480 960\n500 1000\n520 1040\n540 1080\n560 1120\n580 1160\n600 1200\n620 1240\n640 1280\n660 1320\n680 1360\n700 1400", "22\n31 62\n62 124\n93 186\n124 248\n155 310\n186 372\n217 434\n248 496\n279 558\n310 620\n341 682\n372 744\n403 806\n434 868\n465 930\n496 992\n527 1054\n558 1116\n589 1178\n620 1240\n651 1302\n682 1364", "25\n10 20\n21 41\n32 63\n43 85\n54 107\n65 129\n76 151\n87 173\n98 195\n109 217\n120 239\n131 261\n142 283\n153 305\n164 327\n175 349\n186 371\n197 393\n208 415\n219 437\n230 459\n241 481\n252 503\n263 525\n274 547", "30\n1 2\n2 4\n4 16\n8 64\n16 256\n32 1024\n64 4096\n128 16384\n256 65536\n512 262144\n1024 1048576\n2048 4194304\n4096 16777216\n8192 67108864\n16384 268435456\n32768 1073741824\n65536 4294967296\n131072 17179869184\n262144 68719476736\n524288 274877906944\n1048576 1099511627776\n2097152 4398046511104\n4194304 17592186044416\n8388608 70368744177664\n16777216 281474976710656\n33554432 1125899906842624\n67108864 4503599627370496\n134217728 18014398509481984\n268435456 72057594037927936\n536870912 288230376151711744"]}
{"name": "p03168 Educational DP Contest - Coins", "description": "Constraints\n\n* N is an odd number.\n* 1 <= N <= 2999\n* p_i is a real number and has two decimal places.\n* 0 < p_i < 1\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\np_1 p_2 ... p_N", "testcase": ["3\n0.12 0.34 0.56", "5\n0.11 0.22 0.33 0.44 0.55", "7\n0.10 0.20 0.30 0.40 0.50 0.60 0.70", "3\n0.21 0.45 0.67", "3\n0.01 0.99 0.50", "9\n0.11 0.22 0.33 0.44 0.55 0.66 0.77 0.88 0.99", "11\n0.12 0.23 0.34 0.45 0.56 0.67 0.78 0.89 0.90 0.91 0.92", "3\n0.30 0.60 0.90", "13\n0.02 0.04 0.06 0.08 0.10 0.12 0.14 0.16 0.18 0.20 0.22 0.24 0.26", "3\n0.03 0.06 0.09", "5\n0.72 0.55 0.48 0.36 0.27", "3\n0.17 0.39 0.61", "5\n0.08 0.16 0.24 0.32 0.40", "3\n0.99 0.88 0.77", "3\n0.09 0.18 0.27", "5\n0.54 0.63 0.72 0.81 0.90", "3\n0.23 0.46 0.69", "15\n0.10 0.15 0.20 0.25 0.30 0.35 0.40 0.45 0.50 0.55 0.60 0.65 0.70 0.75 0.80", "17\n0.09 0.18 0.27 0.36 0.45 0.54 0.63 0.72 0.81 0.13 0.22 0.31 0.40 0.49 0.58 0.67 0.76", "7\n0.14 0.28 0.42 0.56 0.70 0.84 0.98", "3\n0.33 0.66 0.99", "13\n0.31 0.32 0.33 0.34 0.35 0.36 0.37 0.38 0.39 0.40 0.41 0.42 0.43", "3\n0.25 0.50 0.75", "5\n0.05 0.10 0.15 0.20 0.25", "3\n0.19 0.32 0.45", "3\n0.58 0.67 0.76", "19\n0.21 0.22 0.23 0.24 0.25 0.26 0.27 0.28 0.29 0.30 0.31 0.32 0.33 0.34 0.35 0.36 0.37 0.38 0.39", "3\n0.71 0.82 0.93", "5\n0.28 0.35 0.42 0.49 0.56", "3\n0.65 0.74 0.83"]}
{"name": "p03003 AtCoder Beginner Contest 130 - Common Subsequence", "description": "Constraints\n\n* 1 <= N, M <= 2 * 10^3\n* The length of S is N.\n* The length of T is M.\n* 1 <= S_i, T_i <= 10^5\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nS_1 S_2 ... S_{N-1} S_{N}\nT_1 T_2 ... T_{M-1} T_{M}", "testcase": ["2 3\n1 2\n3 4 5", "1 1\n100000\n99999", "2 2\n50000 50001\n1 2", "3 3\n34567 43218 12345\n67890 12345 23456", "4 2\n1234 5678 91011 121314\n151617 181920", "2 2\n1 1\n1 1", "5 5\n123 321 456 654 789\n987 654 321 456 123", "3 4\n145 236 987\n20000 30000 40000 50000", "6 3\n10000 20000 30000 40000 50000 60000\n70000 80000 90000", "10 10\n1 2 3 4 5 6 7 8 9 10\n10 9 8 7 6 5 4 3 2 1", "8 5\n950 850 750 650 550 450 350 250\n150 50 950 850 750", "4 10\n9876 5432 10987 54321\n6000 12000 18000 24000 30000 36000 42000 48000 54000 60000", "3 3\n22222 44444 66666\n11111 33333 55555", "7 8\n6423 2348 9841 5892 4839 2384 7843\n8329 4382 3234 2384 5934 4382 3984 9823", "2 2\n32767 32767\n32767 32767", "5 7\n10234 20234 30234 40234 50234\n60234 70234 80234 90234 100234 110234 120234", "6 2\n1111 2222 3333 4444 5555 6666\n7777 8888", "7 6\n1000 2000 3000 4000 5000 6000 7000\n8000 9000 10000 11000 12000 13000", "9 9\n9000 8100 7200 6300 5400 4500 3600 2700 1800\n1000 2000 3000 4000 5000 6000 7000 8000 9000", "10 4\n234 344 456 567 678 789 890 901 123 234\n345 456 567 678", "11 11\n20000 21000 22000 23000 24000 25000 26000 27000 28000 29000 30000\n31000 32000 33000 34000 35000 36000 37000 38000 39000 40000 41000", "8 3\n768 5649 489 57 12 3456 2345 678\n789 1011 1213", "5 9\n6789 1234 5678 9101 1121\n1234 5678 9101 3131 4151 6191 7171 8191 2021", "6 6\n8642 9642 10642 11642 12642 13642\n14642 15642 16642 17642 18642 19642", "7 3\n9567 28923 7512 34559 55123 9434 22435\n52555 12345 67890", "12 12\n12345 23456 34567 45678 56789 67890 78901 89012 90123 12345 23456 34567\n45678 56789 67890 78901 89012 90123 12345 23456 34567 45678 56789", "2 10\n33333 66666\n11111 22222 33333 44444 55555 66666 77777 88888 99999 100000", "9 7\n2666 5332 7998 10664 13330 15996 18662 21328 23994\n26660 29326 31992 34658 37324 39990 42656", "10 10\n11234 21234 31234 41234 51234 61234 71234 81234 91234 101234\n111234 121234 131234 141234 151234 161234 171234 181234 191234 201234", "3 5\n23456 34567 45678\n56789 67890 78901 89012 90123"]}
{"name": "1054_A. Elevator or Stairs?", "description": "Input\n\nThe only line contains six integers x, y, z, t_1, t_2, t_3 (1 <= x, y, z, t_1, t_2, t_3 <= 1000) --- the floor Masha is at, the floor Masha wants to get to, the floor the elevator is located on, the time it takes Masha to pass between two floors by stairs, the time it takes the elevator to pass between two floors and the time it takes for the elevator to close or open the doors.\n\nIt is guaranteed that x != y.", "testcase": ["1 2 3 1 1 1", "5 10 2 3 2 1", "15 8 6 5 3 2", "7 3 9 2 2 1", "100 200 150 2 3 4", "23 45 67 5 6 7", "300 400 350 8 7 6", "99 100 35 3 3 3", "500 600 555 10 9 8", "250 260 270 1 1 2", "900 850 800 10 12 5", "1000 999 1 5 6 2", "1 1000 500 20 15 10", "333 444 222 6 7 3", "666 777 888 9 8 7", "505 404 303 4 3 2", "111 222 333 2 1 1", "444 555 676 3 4 5", "123 321 213 7 8 9", "345 543 432 10 9 8", "678 876 789 4 5 6", "135 246 357 5 4 3", "864 975 531 6 7 2", "12 21 13 1 3 1", "98 76 54 2 4 2", "77 88 99 3 1 3", "999 888 777 4 2 4", "1000 987 876 5 3 5", "432 543 654 6 1 6", "567 678 789 7 2 7"]}
{"name": "570_B. Simple Game", "description": "Input\n\nThe first line contains two integers n and m (1 <= m <= n <= 10^9) --- the range of numbers in the game, and the number selected by Misha respectively.", "testcase": ["1 1", "2 1", "5 3", "100 50", "999999999 500000000", "1000000000 1", "1000000000 999999999", "10 10", "465 123", "234567890 12345678", "345678901 23456789", "456789012 34567890", "567890123 45678901", "678901234 56789012", "789012345 67890123", "890123456 78901234", "901234567 89012345", "17 17", "82 40", "743 743", "999 999", "2048 1024", "314159265 271828182", "42 24", "1729 1440", "333333333 111111111", "987654321 123456789", "999000001 999000000", "500000000 250000000", "249999999 249999998"]}
{"name": "688_B. Lovely Palindromes", "description": "Input\n\nThe only line of the input contains a single integer n (1 <= n <= 10^100 000).", "testcase": ["1", "2", "9", "10", "11", "100", "999", "1000", "1001", "12345", "99999", "100000", "100001", "999999", "1000000", "1000001", "9999999", "10000000", "10000001", "99999999", "100000000", "100000001", "123456789", "987654321", "3141592653589793238462", "2718281828459045235360", "1618033988749894848204", "1414213562373095048801", "1732050807568877293527", "2236067977499789696409"]}
{"name": "1028_A. Find Square", "description": "Input\n\nThe first line contains two integers n and m (1 <= n, m <= 115) --- the number of rows and the number of columns in the table.\n\nThe i-th of the next n lines contains a string of m characters s_{i1} s_{i2} ... s_{im} (s_{ij} is 'W' for white cells and 'B' for black cells), describing the i-th row of the table.", "testcase": [""]}
{"name": "1353_D. Constructing the Array", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 10^4) --- the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains one integer n (1 <= n <= 2 * 10^5) --- the length of a.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 * 10^5 (sum n <= 2 * 10^5).", "testcase": ["1\n100", "2\n150\n50", "3\n30000\n1000\n800", "1\n12345", "4\n2345\n6789\n10000\n1234", "1\n4356", "5\n543\n2000\n1944\n21234\n12", "2\n64738\n50", "1\n19384", "3\n500\n600\n700", "1\n11111", "1\n22222", "2\n333\n444", "1\n555", "2\n6666\n777", "1\n88888", "1\n999", "2\n1010\n2020", "3\n3030\n4040\n5050", "1\n6060", "1\n7070", "2\n808\n909", "1\n1001", "2\n1100\n1200", "3\n1300\n1400\n1500", "1\n1600", "1\n1700", "2\n2100\n2200", "1\n2300", "1\n2400"]}
{"name": "559_B. Equivalent Strings", "description": "Input\n\nThe first two lines of the input contain two strings given by the teacher. Each of them has the length from 1 to 200 000 and consists of lowercase English letters. The strings have the same length.", "testcase": ["ab\nab", "a\na", "xy\nyz", "test\ntext", "example\nexbmple", "abcdefghij\nabcdefghij", "klmnopqrst\nklmnoqrstp", "uvwxyz\nuvwxyza", "stringone\nstringtwo", "randomized\nrandomixed", "abcdefghijklmno\nabcdefghijklnmo", "pqrstuvwx\npqrsuvwxt", "twowords\ntwowcrds", "thirteenchars\nthirteencharz", "abcdefghijklmnopqrst\nabcdefghijklmnopqrst", "bbbbbbbbbbbbbbb\nbbbbbbbbbbbbbbb", "ccccccccccccccccccc\nccccccccccccccccccc", "ddddddddddddddddddddddd\ndddddddddddddddddddddddd", "echonotecho\nechobotecho", "ffffffffff\nffffffffff", "ggggggggggggg\nggggggggggggg", "samestrings\nsamestrings", "different\nbifferent", "almostsame\nalmostssme", "characters\ncharactevs", "twenty\nxwenty", "equalstrings\nequalstrings", "verylongstringofcharacters\nverylongstringofcharactevs", "abcdefgh\nabcdefgh", "matching\nmatshing", "identical\nidentical"]}
{"name": "1140_A. Detective Book", "description": "Input\n\nThe first line contains single integer n (1 <= n <= 10^4) --- the number of pages in the book.\n\nThe second line contains n integers a_1, a_2, ..., a_n (i <= a_i <= n), where a_i is the number of page which contains the explanation of the mystery on page i.", "testcase": ["2\n1 2", "3\n2 3 1", "4\n4 3 2 1", "5\n1 2 3 4 5", "6\n3 1 2 6 4 5", "7\n7 6 5 4 3 2 1", "8\n3 4 7 8 5 6 1 2", "9\n1 2 3 4 5 6 7 8 9", "10\n10 9 8 7 6 5 4 3 2 1", "11\n1 11 3 4 5 2 7 8 9 10 6", "12\n4 5 6 7 8 9 10 11 12 1 2 3", "13\n7 6 5 4 3 2 1 8 9 10 11 12 13", "14\n2 13 3 1 5 6 7 8 9 10 14 12 4 11", "15\n15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "16\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16", "17\n17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "18\n2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 1 18", "19\n19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "20\n5 4 3 2 1 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20", "21\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21", "22\n22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "23\n2 3 1 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 4 23", "24\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24", "25\n25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "26\n1 2 3 4 5 6 7 8 9 10 26 12 13 14 15 16 17 18 19 20 21 22 23 24 11 25", "27\n27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "28\n1 2 3 4 5 6 7 8 28 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 9 27", "29\n2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 1 29", "30\n30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "31\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 31 30"]}
{"name": "699_C. Vacations", "description": "Input\n\nThe first line contains a positive integer n (1 <= n <= 100) --- the number of days of Vasya's vacations.\n\nThe second line contains the sequence of integers a1, a2, ..., an (0 <= ai <= 3) separated by space, where: \n\n  * ai equals 0, if on the i-th day of vacations the gym is closed and the contest is not carried out; \n  * ai equals 1, if on the i-th day of vacations the gym is closed, but the contest is carried out; \n  * ai equals 2, if on the i-th day of vacations the gym is open and the contest is not carried out; \n  * ai equals 3, if on the i-th day of vacations the gym is open and the contest is carried out.", "testcase": [{"1": "1", "2": "0"}, {"1": "1", "2": "1"}, {"1": "2", "2": "3 3"}, {"1": "3", "2": "2 2 2"}, {"1": "4", "2": "0 1 0 1"}, {"1": "5", "2": "1 0 2 0 3"}, {"1": "6", "2": "0 0 0 0 0 0"}, {"1": "7", "2": "3 1 2 3 1 2 3"}, {"1": "8", "2": "2 3 0 1 2 3 0 1"}, {"1": "9", "2": "1 3 2 0 1 3 2 0 0"}, {"1": "10", "2": "1 1 1 1 1 1 1 1 1 1"}, {"1": "11", "2": "2 2 2 2 2 2 2 2 2 2 2"}, {"1": "12", "2": "0 1 3 2 0 1 3 2 0 1 3 2"}, {"1": "13", "2": "3 2 1 0 3 2 1 0 3 2 1 0 3"}, {"1": "14", "2": "1 2 0 1 2 3 1 2 0 1 2 3 1 2"}, {"1": "15", "2": "0 3 3 2 2 1 1 0 3 3 2 2 1 1 0"}, {"1": "16", "2": "2 0 3 1 1 2 0 3 1 1 2 0 3 1 1 2"}, {"1": "17", "2": "0 1 2 0 1 2 3 0 1 2 0 1 2 3 0 1 2"}, {"1": "18", "2": "3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3"}, {"1": "19", "2": "1 2 0 3 1 2 0 3 1 2 0 3 1 2 0 3 1 2 0"}, {"1": "20", "2": "0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3"}, {"1": "21", "2": "1 0 2 3 1 0 2 3 1 0 2 3 1 0 2 3 1 0 2 3 1"}, {"1": "22", "2": "2 1 3 2 2 1 3 2 2 1 3 2 2 1 3 2 2 1 3 2 2 1"}, {"1": "23", "2": "3 0 1 0 3 2 2 1 3 0 1 0 3 2 2 1 3 0 1 0 3 2 2"}, {"1": "24", "2": "0 3 0 3 0 1 0 1 0 2 0 2 0 3 0 3 0 1 0 1 0 2 0 2"}, {"1": "25", "2": "1 3 2 1 0 1 3 2 1 0 1 3 2 1 0 1 3 2 1 0 1 3 2 1 0"}, {"1": "26", "2": "2 0 1 3 2 0 1 3 2 0 1 3 2 0 1 3 2 0 1 3 2 0 1 3 2"}, {"1": "27", "2": "3 1 3 1 3 2 3 2 3 1 3 1 3 2 3 2 3 1 3 1 3 2 3 2 3 1 3"}, {"1": "28", "2": "0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3"}, {"1": "29", "2": "1 3 1 3 1 2 1 2 1 3 1 3 1 2 1 2 1 3 1 3 1 2 1 2 1 3 1 3 1"}, {"1": "30", "2": "3 2 3 2 3 1 3 1 3 2 3 2 3 1 3 1 3 2 3 2 3 1 3 1 3 2 3 2 3"}]}
{"name": "p03337 AtCoder Beginner Contest 098 - Add Sub Mul", "description": "Constraints\n\n* -1000 <= A,B <= 1000\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B", "testcase": ["-1000 -1000", "-500 500", "0 0", "1000 1000", "-1 1", "-999 999", "500 -500", "-100 100", "42 -42", "123 456", "-345 -678", "987 654", "-111 -222", "333 -444", "555 666", "-777 888", "999 -1", "10 20", "-30 40", "50 -60", "70 80", "-90 100", "110 -120", "130 140", "-150 -160", "170 180", "-190 200", "210 -220", "230 240", "-250 260"]}
{"name": "1373_D. Maximum Sum on Even Positions", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 2 * 10^4) --- the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (1 <= n <= 2 * 10^5) --- the length of a. The second line of the test case contains n integers a_0, a_1, ..., a_{n-1} (1 <= a_i <= 10^9), where a_i is the i-th element of a.\n\nIt is guaranteed that the sum of n does not exceed 2 * 10^5 (sum n <= 2 * 10^5).", "testcase": ["1\n1\n1", "1\n2\n1 2", "1\n5\n3 1 4 1 5", "1\n3\n1000000000 1000000000 1000000000", "1\n4\n7 8 9 10", "2\n1\n1\n1\n1", "2\n2\n1 2\n2\n2 3", "2\n3\n1 1 1\n3\n3 2 1", "2\n4\n4 3 2 1\n4\n1 2 3 4", "2\n5\n5 5 5 5 5\n5\n1 2 3 4 5", "2\n6\n6 6 6 6 6 6\n6\n1 1 1 1 1 1", "2\n5\n10 9 8 7 6\n5\n2 4 6 8 10", "1\n10\n1 2 3 4 5 6 7 8 9 10", "1\n8\n255 1023 4095 16383 65535 262143 1048575 4194303", "1\n6\n10 20 30 40 50 60", "1\n7\n1 3 5 7 9 11 13", "1\n3\n42 42 42", "1\n5\n5 4 3 2 1", "1\n3\n100 200 300", "1\n4\n1000 2000 3000 4000", "1\n2\n123456789 987654321", "1\n6\n2 4 8 16 32 64", "1\n9\n9 8 7 6 5 4 3 2 1", "1\n2\n500000000 500000000", "1\n2\n999999999 1000000000", "1\n2\n1 1000000000", "1\n3\n1 500000000 1000000000", "1\n4\n250000000 500000000 750000000 1000000000", "1\n5\n200000000 400000000 600000000 800000000 1000000000", "1\n3\n333333333 333333333 333333333"]}
{"name": "p02600 M-SOLUTIONS Programming Contest 2020 - Kyu in AtCoder", "description": "Constraints\n\n* 400 <= X <= 1999\n* X is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX", "testcase": ["400", "401", "499", "500", "650", "768", "869", "999", "1000", "1024", "1100", "1200", "1301", "1402", "1500", "1600", "1700", "1750", "1800", "1850", "1900", "1945", "1950", "1980", "1987", "1990", "1991", "1995", "1998", "1999"]}
{"name": "275_A. Lights Out", "description": "Input\n\nThe input consists of three rows. Each row contains three integers each between 0 to 100 inclusive. The j-th number in the i-th row is the number of times the j-th light of the i-th row of the grid is pressed.", "testcase": "{\n    \"testcases\": [\n        \"0 1 2\\n3 4 5\\n6 7 8\",\n        \"7 14 22\\n33 10 0\\n9 61 12\",\n        \"45 11 32\\n13 56 14\\n20 80 40\",\n        \"99 88 77\\n66 55 44\\n33 22 11\",\n        \"0 0 0\\n0 0 0\\n0 0 0\",\n        \"100 100 100\\n100 100 100\\n100 100 100\",\n        \"23 56 78\\n89 67 45\\n34 12 23\",\n        \"13 24 35\\n46 57 68\\n79 80 17\",\n        \"24 35 46\\n57 68 79\\n80 17 26\",\n        \"35 46 57\\n68 79 80\\n17 26 35\",\n        \"46 57 68\\n79 80 17\\n26 35 46\",\n        \"57 68 79\\n80 17 26\\n35 46 57\",\n        \"68 79 80\\n17 26 35\\n46 57 68\",\n        \"79 80 17\\n26 35 46\\n57 68 79\",\n        \"80 17 26\\n35 46 57\\n68 79 80\",\n        \"18 66 77\\n54 12 89\\n10 23 9\",\n        \"92 46 17\\n20 36 91\\n43 28 36\",\n        \"26 54 73\\n82 39 29\\n50 14 90\",\n        \"31 82 63\\n54 74 38\\n29 47 66\",\n        \"47 33 13\\n22 71 51\\n80 69 12\",\n        \"15 93 75\\n86 33 24\\n66 78 55\",\n        \"2 9 4\\n7 1 3\\n8 6 5\",\n        \"10 20 30\\n40 50 60\\n70 80 90\",\n        \"55 44 33\\n22 11 0\\n12 23 34\",\n        \"8 19 27\\n33 36 21\\n15 59 62\",\n        \"99 1 67\\n34 76 54\\n23 4 89\",\n        \"88 70 56\\n14 63 77\\n28 36 45\",\n        \"5 10 15\\n20 25 30\\n35 40 45\",\n        \"0 25 50\\n75 100 25\\n50 75 100\",\n        \"24 48 72\\n96 12 36\\n60 84 18\",\n        \"61 39 17\\n28 95 62\\n43 8 71\"\n    ]\n}"}
{"name": "1371_D. Grid-00100", "description": "Input\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 <= t <= 100) --- the number of test cases. Next t lines contain descriptions of test cases.\n\nFor each test case the only line contains two integers n, k (1 <= n <= 300, 0 <= k <= n^2).\n\nIt is guaranteed that the sum of n^2 for all test cases does not exceed 10^5.", "testcase": ["1\n10 50", "1\n20 100", "1\n25 200", "1\n30 400", "1\n35 300", "1\n40 500", "1\n45 600", "1\n50 700", "1\n55 800", "1\n60 900", "1\n65 1000", "1\n70 1100", "1\n75 1200", "1\n80 1300", "1\n85 1400", "1\n90 1500", "1\n95 1600", "1\n100 1700", "1\n105 1800", "1\n110 1900", "1\n115 2000", "1\n120 2100", "1\n125 2200", "1\n130 2300", "1\n135 2400", "1\n140 2500", "1\n145 2600", "1\n150 2700", "1\n155 2800", "1\n160 2900"]}
{"name": "1242_A. Tile Painting", "description": "Input\n\nThe first line of input contains a single integer n (1 <= n <= 10^{12}), the length of the path.", "testcase": ["1", "2", "10", "100", "999", "1000", "10000", "100000", "999999", "1000000", "123456789", "234567890", "345678901", "456789012", "567890123", "678901234", "789012345", "890123456", "901234567", "912345678", "1234567890", "2345678901", "3456789012", "4567890123", "5678901234", "6789012345", "7890123456", "8901234567", "9012345678", "999999999999"]}
{"name": "1351_C. Skier", "description": "Input\n\nThe first line contains an integer t (1 <= t <= 10^4) --- the number of test cases in the input. Then t test cases follow.\n\nEach set is given by one nonempty string of the characters 'S', 'N', 'W', 'E'. The length of the string does not exceed 10^5 characters.\n\nThe sum of the lengths of t given lines over all test cases in the input does not exceed 10^5.", "testcase": ["1\nS", "1\nN", "1\nW", "1\nE", "1\nSNEW", "1\nNESW", "1\nSWEN", "1\nEWSN", "1\nSSS", "1\nNNN", "1\nWWW", "1\nEEE", "1\nSSENW", "1\nSEWN", "1\nNWSE", "1\nNESWNESW", "1\nSWNESWNE", "1\nWENSWE", "1\nENEW", "1\nSNEWNS", "1\nNWSSEN", "1\nWWESS", "1\nEEEWN", "1\nSSWWE", "1\nNNWSSE", "1\nWNWNWNW", "1\nEEEEE", "1\nSSSSS", "1\nSWNESEW", "1\nENWSENWS"]}
{"name": "1101_A. Minimum Integer", "description": "Input\n\nThe first line contains one integer q (1 <= q <= 500) --- the number of queries.\n\nThen q lines follow, each containing a query given in the format l_i r_i d_i (1 <= l_i <= r_i <= 10^9, 1 <= d_i <= 10^9). l_i, r_i and d_i are integers.", "testcase": ["1\n100000000 100000000 50000000", "2\n1 100000000 500\n500000000 900000000 450000000", "3\n200000000 700000000 300000000\n5 30 1\n200000 800000 400000", "1\n1 1 1", "1\n2000000 7000000 3000000", "1\n33333333 77777777 22222222", "1\n123456789 987654321 23456789", "2\n1 9 3\n10 99 30", "1\n100000000 100000000 1", "1\n40000000 55000000 35", "2\n2 2 2\n333 777 222", "3\n1000 5000 2500\n8000000 9000000 4500000\n300 3000 1500", "1\n111111111 999999999 888888888", "2\n1 10 1\n20 2000 10", "1\n10 10 5", "1\n444444444 555555555 333333333", "1\n42424242 242424242 121212121", "2\n7070707 14141414 345678\n1234567 23456789 3456789", "1\n31 42 7", "1\n9 90 3", "2\n87654321 123456789 4321\n10000000 40000000 10000", "1\n50000000 75000000 25000000", "2\n13 37 7\n101 202 101", "1\n2020202 8080808 3030303", "1\n10 20 5", "1\n1 999999999 123456789", "2\n250 250 50\n6000 9000 3000", "1\n666 999 111", "3\n123 222 99\n444 555 111\n789 888 99", "1\n1000 2000 100"]}
{"name": "1189_D1. Add on a Tree", "description": "Input\n\nThe first line contains a single integer n (2 <= n <= 10^5) --- the number of nodes.\n\nEach of the next n-1 lines contains two integers u and v (1 <= u, v <= n, u != v), meaning that there is an edge between nodes u and v. It is guaranteed that these edges form a tree.", "testcase": "{\n    \"testcases\": [\n        \"3\\n1 2\\n2 3\",\n        \"4\\n1 2\\n2 3\\n3 4\",\n        \"5\\n1 2\\n1 3\\n1 4\\n1 5\",\n        \"6\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\",\n        \"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 7\",\n        \"8\\n1 2\\n2 3\\n2 4\\n4 5\\n5 6\\n5 7\\n7 8\",\n        \"9\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n6 7\\n6 8\\n8 9\",\n        \"10\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n5 7\\n7 8\\n7 9\\n9 10\",\n        \"11\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n6 7\\n7 8\\n8 9\\n8 10\\n10 11\",\n        \"12\\n1 2\\n1 3\\n3 4\\n3 5\\n5 6\\n5 7\\n7 8\\n7 9\\n9 10\\n9 11\\n11 12\",\n        \"13\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n6 7\\n6 8\\n8 9\\n8 10\\n10 11\\n10 12\\n12 13\",\n        \"14\\n1 2\\n1 3\\n3 4\\n3 5\\n5 6\\n5 7\\n6 8\\n6 9\\n8 10\\n9 11\\n9 12\\n12 13\\n12 14\",\n        \"15\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\\n5 8\\n8 9\\n8 10\\n9 11\\n10 12\\n11 13\\n13 14\\n14 15\",\n        \"16\\n1 2\\n2 3\\n3 4\\n3 5\\n5 6\\n6 7\\n6 8\\n7 9\\n8 10\\n9 11\\n10 12\\n11 13\\n12 14\\n13 15\\n14 16\",\n        \"17\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n6 7\\n7 8\\n7 9\\n8 10\\n9 11\\n10 12\\n11 13\\n12 14\\n13 15\\n14 16\\n15 17\",\n        \"18\\n1 2\\n2 3\\n2 4\\n4 5\\n5 6\\n5 7\\n7 8\\n7 9\\n9 10\\n9 11\\n11 12\\n11 13\\n13 14\\n13 15\\n15 16\\n15 17\\n17 18\",\n        \"19\\n1 2\\n2 3\\n2 4\\n4 5\\n5 6\\n5 7\\n7 8\\n8 9\\n9 10\\n9 11\\n11 12\\n12 13\\n12 14\\n14 15\\n15 16\\n15 17\\n17 18\\n18 19\",\n        \"20\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n6 7\\n7 8\\n8 9\\n8 10\\n10 11\\n11 12\\n11 13\\n13 14\\n14 15\\n14 16\\n16 17\\n17 18\\n18 19\\n19 20\",\n        \"21\\n1 2\\n1 3\\n1 4\\n4 5\\n4 6\\n6 7\\n6 8\\n7 9\\n8 10\\n9 11\\n10 12\\n11 13\\n12 14\\n12 15\\n14 16\\n15 17\\n16 18\\n17 19\\n18 20\\n19 21\",\n        \"22\\n1 2\\n2 3\\n3 4\\n3 5\\n5 6\\n6 7\\n6 8\\n7 9\\n8 10\\n9 11\\n10 12\\n11 13\\n12 14\\n13 15\\n14 16\\n15 17\\n16 18\\n17 19\\n18 20\\n19 21\\n20 22\",\n        \"23\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n6 7\\n7 8\\n7 9\\n8 10\\n9 11\\n10 12\\n11 13\\n12 14\\n13 15\\n14 16\\n15 17\\n16 18\\n17 19\\n18 20\\n19 21\\n20 22\\n21 23\",\n        \"24\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n5 7\\n6 8\\n7 9\\n8 10\\n9 11\\n10 12\\n11 13\\n12 14\\n13 15\\n14 16\\n15 17\\n16 18\\n17 19\\n18 20\\n19 21\\n20 22\\n21 23\\n22 24\",\n        \"25\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 11\\n11 12\\n12 13\\n13 14\\n14 15\\n15 16\\n16 17\\n17 18\\n18 19\\n19 20\\n20 21\\n21 22\\n22 23\\n23 24\\n24 25\",\n        \"26\\n1 2\\n1 3\\n1 4\\n4 5\\n4 6\\n6 7\\n6 8\\n7 9\\n8 10\\n9 11\\n10 12\\n11 13\\n12 14\\n13 15\\n14 16\\n15 17\\n16 18\\n17 19\\n18 20\\n19 21\\n20 22\\n21 23\\n22 24\\n23 25\\n24 26\",\n        \"27\\n1 2\\n2 3\\n2 4\\n4 5\\n5 6\\n5 7\\n7 8\\n7 9\\n9 10\\n9 11\\n11 12\\n11 13\\n13 14\\n14 15\\n15 16\\n16 17\\n17 18\\n18 19\\n19 20\\n20 21\\n21 22\\n22 23\\n23 24\\n24 25\\n25 26\\n26 27\",\n        \"28\\n1 2\\n1 3\\n3 4\\n3 5\\n5 6\\n5 7\\n7 8\\n7 9\\n9 10\\n9 11\\n11 12\\n11 13\\n13 14\\n13 15\\n15 16\\n15 17\\n17 18\\n17 19\\n19 20\\n19 21\\n21 22\\n21 23\\n23 24\\n23 25\\n25 26\\n25 27\\n27 28\",\n        \"29\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n6 8\\n8 9\\n9 10\\n10 11\\n10 12\\n12 13\\n13 14\\n14 15\\n15 16\\n16 17\\n17 18\\n18 19\\n19 20\\n20 21\\n21 22\\n22 23\\n23 24\\n24 25\\n25 26\\n26 27\\n27 28\\n28 29\",\n        \"30\\n1 2\\n2 3\\n2 4\\n4 5\\n5 6\\n5 7\\n7 8\\n8 9\\n8 10\\n10 11\\n11 12\\n12 13\\n13 14\\n14 15\\n15 16\\n16 17\\n17 18\\n18 19\\n19 20\\n20 21\\n21 22\\n22 23\\n23 24\\n24 25\\n25 26\\n26 27\\n27 28\\n28 29\\n29 30\"\n    ]\n}"}
{"name": "168_A. Wizards and Demonstration", "description": "Input\n\nThe first line contains three space-separated integers, n, x, y (1 <= n, x, y <= 104, x <= n) --- the number of citizens in the city, the number of wizards and the percentage the administration needs, correspondingly.\n\nPlease note that y can exceed 100 percent, that is, the administration wants to see on a demonstration more people that actually live in the city ( > n).", "testcase": ["100 50 200", "500 450 90", "1234 123 400", "3500 256 150", "5432 5432 100", "7777 777 300", "2000 1000 50", "1313 131 313", "4096 2048 250", "3333 1111 333", "10000 5000 180", "7483 3741 125", "2648 1324 264", "1000 999 1000", "4321 432 321", "8000 4000 160", "3000 1500 110", "2500 500 200", "6050 3025 101", "9999 1111 222", "3500 2500 70", "4500 1500 60", "2730 1365 182", "6400 3200 120", "5821 2910 158", "4800 1600 75", "9400 4700 194", "3650 1825 365", "7000 3500 140", "3072 1536 308"]}
{"name": "379_A. New Year Candles", "description": "Input\n\nThe single line contains two integers, a and b (1 <= a <= 1000; 2 <= b <= 1000).", "testcase": ["1 2", "10 20", "5 9", "17 100", "1000 2", "435 876", "123 456", "999 1000", "250 800", "111 222", "333 777", "888 999", "500 501", "1000 999", "32 64", "64 128", "128 256", "256 512", "512 1023", "311 623", "402 804", "999 998", "100 200", "1 1000", "1000 1000", "2 3", "4 5", "6 7", "8 9", "10 11"]}
{"name": "39_H. Multiplication Table", "description": "Input\n\nThe first line contains a single integer k (2 <= k <= 10) --- the radix of the system.", "testcase": ["2", "3", "4", "5", "6", "7", "8", "9", "10", "2", "3", "4", "5", "6", "7", "8", "9", "10", "2", "3", "4", "5", "6", "7", "8", "9", "10", "2", "3", "4"]}
{"name": "44_B. Cola", "description": "Input\n\nThe first line contains four integers --- n, a, b, c (1 <= n <= 10000, 0 <= a, b, c <= 5000).", "testcase": ["1 0 0 0", "10000 5000 5000 5000", "500 2500 2500 2500", "9999 123 456 789", "2 1 1 1", "100 10 20 30", "300 50 50 50", "7777 333 444 555", "3456 1234 2345 3456", "1234 567 890 123", "4321 321 432 543", "6789 678 789 890", "2500 1000 1500 2000", "1111 222 333 444", "2222 111 333 555", "3333 222 444 666", "4444 333 555 777", "5555 444 666 888", "6666 555 777 999", "7777 666 888 1000", "8888 777 999 1111", "9999 888 1000 1222", "1234 234 345 456", "5678 678 789 890", "4321 543 654 765", "8765 987 1098 1209", "2345 345 456 567", "3456 456 567 678", "4567 567 678 789", "9876 1234 2345 3456"]}
{"name": "545_C. Woodcutters", "description": "Input\n\nThe first line contains integer n (1 <= n <= 105) --- the number of trees.\n\nNext n lines contain pairs of integers xi, hi (1 <= xi, hi <= 109) --- the coordinate and the height of the \u0456-th tree.\n\nThe pairs are given in the order of ascending xi. No two trees are located at the point with the same coordinate.", "testcase": ["2\n10 20\n30 40", "3\n1 2\n3 4\n5 6", "4\n100 200\n200 300\n300 400\n400 500", "1\n999999999 1000000000", "5\n10 300\n60 150\n110 210\n160 410\n210 130", "6\n34 78\n56 89\n78 100\n120 200\n300 150\n450 230", "7\n1 100000000\n2 99999999\n3 99999998\n4 99999997\n5 99999996\n6 99999995\n7 99999994", "8\n100000000 250\n200000000 500\n300000000 750\n400000000 1000\n500000000 1250\n600000000 1500\n700000000 1750\n800000000 2000", "9\n5 15\n10 30\n20 45\n30 60\n40 75\n50 90\n60 105\n70 120\n80 135", "10\n1 10\n2 20\n3 30\n4 40\n5 50\n6 60\n7 70\n8 80\n9 90\n10 100", "11\n3 5\n6 15\n9 25\n12 35\n15 45\n18 55\n21 65\n24 75\n27 85\n30 95\n33 105", "12\n5 10\n12 11\n19 12\n26 13\n33 14\n40 15\n47 16\n54 17\n61 18\n68 19\n75 20\n82 21", "13\n100 1\n200 2\n300 3\n400 4\n500 5\n600 6\n700 7\n800 8\n900 9\n1000 10\n1100 11\n1200 12\n1300 13", "14\n123 321\n234 432\n345 543\n456 654\n567 765\n678 876\n789 987\n890 1098\n901 1209\n1012 1320\n1123 1431\n1234 1542\n1345 1653\n1456 1764", "15\n345 987\n456 876\n567 765\n678 654\n789 543\n890 432\n901 321\n1012 210\n1123 109\n1234 98\n1345 87\n1456 76\n1567 65\n1678 54\n1789 43", "16\n958 2015\n959 2016\n960 2017\n961 2018\n962 2019\n963 2020\n964 2021\n965 2022\n966 2023\n967 2024\n968 2025\n969 2026\n970 2027\n971 2028\n972 2029\n973 2030", "17\n2015 958\n2016 959\n2017 960\n2018 961\n2019 962\n2020 963\n2021 964\n2022 965\n2023 966\n2024 967\n2025 968\n2026 969\n2027 970\n2028 971\n2029 972\n2030 973\n2031 974", "18\n321 123\n432 234\n543 345\n654 456\n765 567\n876 678\n987 789\n1098 890\n1209 901\n1320 1012\n1431 1123\n1542 1234\n1653 1345\n1764 1456\n1875 1567\n1986 1678\n2097 1789\n2208 1890", "19\n987 345\n876 456\n765 567\n654 678\n543 789\n432 890\n321 901\n210 1012\n109 1123\n98 1234\n87 1345\n76 1456\n65 1567\n54 1678\n43 1789\n32 1890\n21 1991\n10 2092", "20\n2 10\n20 11\n38 12\n56 13\n74 14\n92 15\n110 16\n128 17\n146 18\n164 19\n182 20\n200 21\n218 22\n236 23\n254 24\n272 25\n290 26\n308 27\n326 28\n344 29", "21\n12 56\n78 67\n145 78\n212 89\n279 100\n346 110\n413 120\n480 130\n547 140\n614 150\n681 160\n748 170\n815 180\n882 190\n949 200\n1016 210\n1083 220\n1150 230\n1217 240\n1284 250", "22\n50 100\n100 90\n150 80\n200 70\n250 60\n300 50\n350 40\n400 30\n450 20\n500 10\n550 5\n600 15\n650 25\n700 35\n750 45\n800 55\n850 65\n900 75\n950 85\n1000 95\n1050 105\n1100 115", "23\n999 2000\n1998 2001\n2997 2002\n3996 2003\n4995 2004\n5994 2005\n6993 2006\n7992 2007\n8991 2008\n9990 2009\n10989 2010\n11988 2011\n12987 2012\n13986 2013\n14985 2014\n15984 2015\n16983 2016\n17982 2017\n18981 2018\n19980 2019\n20979 2020\n21978 2021", "24\n101 505\n303 404\n505 303\n707 202\n909 101\n1111 303\n1313 404\n1515 505\n1717 606\n1919 707\n2121 808\n2323 909\n2525 1010\n2727 1111\n2929 1212\n3131 1313\n3333 1414\n3535 1515\n3737 1616\n3939 1717\n4141 1818\n4343 1919\n4545 2020\n4747 2121", "25\n333 333\n666 333\n999 333\n1332 333\n1665 333\n1998 333\n2331 333\n2664 333\n2997 333\n3330 333\n3663 333\n3996 333\n4329 333\n4662 333\n4995 333\n5328 333\n5661 333\n5994 333\n6327 333\n6660 333\n6993 333\n7326 333\n7659 333\n7992 333\n8325 333", "26\n250 1000\n500 2000\n750 3000\n1000 4000\n1250 5000\n1500 6000\n1750 7000\n2000 8000\n2250 9000\n2500 10000\n2750 11000\n3000 12000\n3250 13000\n3500 14000\n3750 15000\n4000 16000\n4250 17000\n4500 18000\n4750 19000\n5000 20000\n5250 21000\n5500 22000\n5750 23000\n6000 24000\n6250 25000\n6500 26000", "27\n300 300\n600 300\n900 300\n1200 300\n1500 300\n1800 300\n2100 300\n2400 300\n2700 300\n3000 300\n3300 300\n3600 300\n3900 300\n4200 300\n4500 300\n4800 300\n5100 300\n5400 300\n5700 300\n6000 300\n6300 300\n6600 300\n6900 300\n7200 300\n7500 300\n7800 300\n8100 300", "28\n400 1200\n800 1100\n1200 1000\n1600 900\n2000 800\n2400 700\n2800 600\n3200 500\n3600 400\n4000 300\n4400 200\n4800 100\n5200 50\n5600 150\n6000 250\n6400 350\n6800 450\n7200 550\n7600 650\n8000 750\n8400 850\n8800 950\n9200 1050\n9600 1150\n10000 1250\n10400 1350\n10800 1450\n11200 1550", "29\n500 2500\n1000 2400\n1500 2300\n2000 2200\n2500 2100\n3000 2000\n3500 1900\n4000 1800\n4500 1700\n5000 1600\n5500 1500\n6000 1400\n6500 1300\n7000 1200\n7500 1100\n8000 1000\n8500 900\n9000 800\n9500 700\n10000 600\n10500 500\n11000 400\n11500 300\n12000 200\n12500 100\n13000 50\n13500 150\n14000 250\n14500 350", "30\n1 5000\n2 10000\n3 15000\n4 20000\n5 25000\n6 30000\n7 35000\n8 40000\n9 45000\n10 50000\n11 55000\n12 60000\n13 65000\n14 70000\n15 75000\n16 80000\n17 85000\n18 90000\n19 95000\n20 100000\n21 105000\n22 110000\n23 115000\n24 120000\n25 125000\n26 130000\n27 135000\n28 140000\n29 145000\n30 150000"]}
{"name": "101_C. Vectors", "description": "Input\n\nThe first line contains integers x1 \u0438 y1 --- the coordinates of the vector A ( - 108 <= x1, y1 <= 108). The second and the third line contain in the similar manner vectors B and C (their coordinates are integers; their absolute value does not exceed 108).", "testcase": ["0 0\n-100000000 -100000000\n100000000 100000000", "1 1\n-1 -1\n2 2", "100000000 0\n0 100000000\n-100000000 0", "50000000 50000000\n-50000000 -50000000\n0 0", "1000000 2000000\n-3000000 4000000\n5000000 -6000000", "12345678 87654321\n-123456 789123\n456789 -987654", "99999999 100000000\n-9999999 99999998\n-99999997 99999996", "1000000 999999\n2000000 -1999999\n3000000 3999998", "98765432 12345678\n22222222 33333333\n-44444444 55555555", "42 42\n-42 -42\n42 42", "27000000 36000000\n-72000000 18000000\n54000000 -90000000", "7654321 1234567\n2345678 3456789\n-1234567 -2345678", "123 321\n456 654\n-789 -987", "10000 20000\n-30000 40000\n50000 -60000", "10101010 20202020\n30303030 40404040\n-50505050 -60606060", "11111111 22222222\n33333333 44444444\n-55555555 -66666666", "0 100000000\n100000000 0\n-100000000 -10000000", "88888888 77777777\n66666666 55555555\n-44444444 -33333333", "21474836 21474836\n-21474836 -21474836\n21474836 21474836", "16384000 32768000\n-49152000 65536000\n81920000 -98304000", "1 0\n0 1\n-1 -1", "1000000 2000000\n3000000 4000000\n-5000000 -6000000", "123 456\n789 101\n-112 -131", "90000000 80000000\n70000000 60000000\n-50000000 -40000000", "5345192 3579238\n892345 -4235789\n-1394857 4857391", "23232323 32323232\n41414141 51515151\n-61616161 -71717171", "111 999\n888 777\n-666 -555", "3333 4444\n5555 6666\n-7777 -8888", "4040404 8080808\n-12121212 16161616\n20202020 -24242424", "9999999 8888888\n7777777 6666666\n-5555555 -4444444", "65535 32767\n-16383 8191\n4095 2047"]}
{"name": "151_C. Win or Freeze", "description": "Input\n\nThe first line contains the only integer q (1 <= q <= 1013).\n\nPlease do not use the %lld specificator to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specificator.", "testcase": ["1", "2", "3", "4", "5", "123456789", "987654321", "4294967295", "999999999", "1013", "1000000000000", "717171717171", "123", "999999999999", "555555555555", "369963369963", "808080808080", "135791357913", "246824682468", "864209864209", "102030405060", "72036854775807", "123456789012", "5060708090100", "350000000000", "90071992547409", "199999999999", "800000000000", "222222222222", "101010101010"]}
{"name": "195_A. Let's Watch Football", "description": "Input\n\nThe first line contains three space-separated integers a, b and c (1 <= a, b, c <= 1000, a > b). The first number (a) denotes the size of data needed to watch one second of the video. The second number (b) denotes the size of data Valeric and Valerko can download from the Net per second. The third number (c) denotes the video's length in seconds.", "testcase": ["10 5 100", "50 49 500", "1000 999 60", "120 110 10", "800 799 200", "420 410 30", "300 250 70", "900 800 100", "150 149 150", "230 200 50", "700 699 300", "325 324 25", "678 677 150", "432 430 90", "1000 1 1000", "987 786 234", "864 863 10", "256 255 256", "512 511 512", "640 639 80", "100 50 100", "220 219 220", "330 329 330", "450 449 450", "570 569 570", "690 689 690", "710 709 710", "850 849 850", "980 979 980", "999 998 999"]}
{"name": "478_A. Initial Bet", "description": "Input\n\nThe input consists of a single line containing five integers c1, c2, c3, c4 and c5 --- the number of coins that the first, second, third, fourth and fifth players respectively have at the end of the game (0 <= c1, c2, c3, c4, c5 <= 100).", "testcase": ["0 0 0 0 0", "1 1 1 1 1", "2 3 4 5 6", "100 100 100 100 100", "50 27 33 99 10", "67 34 23 78 45", "12 48 76 55 1", "22 13 57 79 36", "0 100 50 25 75", "90 45 30 15 60", "3 6 9 12 15", "81 27 54 36 63", "5 10 15 20 25", "40 80 60 20 0", "8 16 24 32 40", "47 53 59 61 67", "14 29 43 58 72", "69 35 18 82 50", "11 22 33 44 55", "99 88 77 66 55", "21 42 63 84 20", "70 30 60 90 10", "7 14 21 28 35", "98 76 54 32 10", "26 52 78 104 13", "31 62 93 16 39", "83 49 68 34 17", "64 48 32 16 8", "37 74 29 59 89", "17 34 51 68 85"]}
{"name": "526_A. King of Thieves", "description": "Input\n\nThe first line contains integer n (1 <= n <= 100) --- the number of segments on the level.\n\nNext line contains the scheme of the level represented as a string of n characters '*' and '.'.", "testcase": [{"n": 1, "level": "*"}, {"n": 2, "level": ".."}, {"n": 3, "level": "***"}, {"n": 4, "level": ".*.*"}, {"n": 5, "level": "..*.."}, {"n": 6, "level": "******"}, {"n": 7, "level": ".*.*.*"}, {"n": 8, "level": "..*..*.."}, {"n": 9, "level": "***.****"}, {"n": 10, "level": ".**.*..*.*"}, {"n": 11, "level": "****..***.."}, {"n": 12, "level": "...**.*...**"}, {"n": 13, "level": ".*.*.*.*.*.*."}, {"n": 14, "level": "*.**..***..**."}, {"n": 15, "level": "..*.*.*.*.*..*"}, {"n": 16, "level": "***.***.***.***"}, {"n": 17, "level": ".*..*.**.*.*..*."}, {"n": 18, "level": "****....***....*"}, {"n": 19, "level": ".*.*...**.*...*.*"}, {"n": 20, "level": "*.**..**..*..*..**"}, {"n": 21, "level": "..***..***...****.."}, {"n": 22, "level": ".*.*.*..**..*.*.**.*"}, {"n": 23, "level": "*.*.*..****..*.*.*.**"}, {"n": 24, "level": ".**..**...*.*..**.*..*"}, {"n": 25, "level": "****..*.***.*.*.*.*.**"}, {"n": 26, "level": "..*...**.*...**.*...*..*"}, {"n": 27, "level": ".***.***..*.*.*..***.*..*"}, {"n": 28, "level": "**..*.*..*..**.*.*..*.*.*."}, {"n": 29, "level": ".*..*..**..*.*.***..*..*.*."}, {"n": 30, "level": ".*.*..*.*.*.**..**.*.*.*..**"}]}
{"name": "716_D. Complete The Graph", "description": "Input\n\nThe first line contains five integers n, m, L, s, t (2 <= n <= 1000, 1 <= m <= 10 000, 1 <= L <= 109, 0 <= s, t <= n - 1, s != t) --- the number of vertices, number of edges, the desired length of shortest path, starting vertex and ending vertex respectively.\n\nThen, m lines describing the edges of the graph follow. i-th of them contains three integers, ui, vi, wi (0 <= ui, vi <= n - 1, ui != vi, 0 <= wi <= 109). ui and vi denote the endpoints of the edge and wi denotes its weight. If wi is equal to 0 then the weight of the corresponding edge was erased.\n\nIt is guaranteed that there is at most one edge between any pair of vertices.", "testcase": ["2 1 10 0 1\n0 1 10", "3 3 100 1 2\n0 1 50\n1 2 50\n0 2 75", "4 4 123 0 3\n0 1 40\n1 2 40\n2 3 43\n0 2 70", "5 4 25 2 4\n0 1 10\n1 2 5\n2 3 2\n3 4 8", "6 5 300 1 4\n0 1 100\n1 2 100\n2 3 100\n3 4 0\n4 5 99", "6 6 500 0 5\n0 1 150\n1 2 150\n2 3 150\n3 4 50\n4 5 0\n0 2 175", "7 7 700 2 6\n0 1 200\n1 2 10\n2 3 150\n3 4 100\n4 5 200\n5 6 40\n0 3 300", "7 8 777 3 6\n0 1 300\n1 2 100\n2 3 100\n3 4 77\n4 5 100\n5 6 99\n3 6 200\n1 5 75", "8 7 270 1 7\n0 1 70\n1 2 20\n2 3 30\n3 4 50\n4 5 20\n5 6 30\n6 7 50", "8 8 888 0 7\n0 1 200\n1 2 150\n2 3 100\n3 4 100\n4 5 120\n5 6 100\n6 7 118\n0 3 300", "9 10 500 4 8\n0 1 50\n1 2 75\n2 3 25\n3 4 50\n4 5 75\n5 6 25\n6 7 100\n7 8 75\n4 7 30\n1 4 60", "9 8 600 3 5\n0 1 200\n1 2 0\n2 3 200\n3 4 0\n4 5 200\n5 6 0\n6 7 150\n7 8 150", "10 10 1000 5 9\n0 1 100\n1 2 100\n2 3 100\n3 4 100\n4 5 100\n5 6 100\n6 7 100\n7 8 100\n8 9 100\n0 5 200", "10 20 2222 9 8\n0 1 100\n1 2 100\n2 3 100\n3 4 200\n4 5 200\n5 6 200\n6 7 200\n7 8 200\n8 9 200\n0 9 150\n3 8 100\n0 3 150\n1 4 150\n2 5 150\n4 8 100\n1 9 125\n5 9 150\n2 6 175\n3 7 225\n0 4 175", "20 30 10000 15 19\n0 1 500\n1 2 500\n2 3 450\n3 4 250\n4 5 650\n5 6 350\n6 7 750\n7 8 850\n8 9 950\n9 10 150\n10 11 250\n11 12 350\n12 13 450\n13 14 550\n14 15 650\n15 16 70\n16 17 800\n17 18 900\n18 19 500\n0 2 400\n0 3 300\n1 3 650\n2 4 550\n3 5 350\n4 6 225\n5 7 125\n6 8 625\n9 12 125\n10 13 325\n13 19 875", "30 40 20000 0 29\n0 1 500\n1 2 500\n2 3 600\n3 4 600\n4 5 700\n5 6 800\n6 7 900\n7 8 500\n8 9 600\n9 10 700\n10 11 800\n11 12 900\n12 13 1000\n13 14 1100\n14 15 1200\n15 16 1300\n16 17 1400\n17 18 1500\n18 19 1600\n19 20 1700\n20 21 1800\n21 22 1900\n22 23 2000\n23 24 2100\n24 25 2200\n25 26 2300\n26 27 2400\n27 28 2500\n28 29 2600\n0 5 2000", "5 4 3999 2 3\n0 1 999\n1 2 1000\n2 3 1000\n3 4 1000", "3 2 100 0 2\n0 1 50\n1 2 50", "3 3 300 0 1\n0 1 100\n1 2 100\n0 2 200", "4 4 444 2 3\n0 1 111\n1 2 111\n2 3 111\n3 0 111", "4 3 800 1 3\n0 1 400\n1 2 400\n2 3 0", "5 5 777 4 1\n0 1 100\n1 2 200\n2 3 300\n3 4 177\n4 0 0", "5 10 5555 1 3\n0 1 1000\n1 2 1000\n2 3 1055\n3 4 1500\n4 0 1000\n0 2 800\n0 3 850\n1 3 855\n1 4 900\n2 4 1100", "6 5 2222 0 5\n0 1 0\n1 2 1111\n2 3 1111\n3 4 0\n4 5 0", "6 6 333 5 1\n0 1 50\n1 2 50\n2 3 0\n3 4 133\n4 5 0\n0 5 100", "7 7 1234 6 1\n0 1 300\n1 2 0\n2 3 300\n3 4 234\n4 5 0\n5 6 400\n0 6 300", "7 10 6666 2 5\n0 1 666\n1 2 666\n2 3 666\n3 4 666\n4 5 666\n5 6 666\n0 2 500\n1 3 600\n2 4 700\n3 5 800", "8 8 350 0 7\n0 1 50\n1 2 50\n2 3 50\n3 4 0\n4 5 75\n5 6 75\n6 7 50\n0 3 150", "8 15 4444 7 0\n0 1 200\n1 2 300\n2 3 400\n3 4 500\n4 5 600\n5 6 700\n6 7 900\n0 2 250\n1 3 350\n2 4 450\n3 5 550\n4 6 650\n5 7 750\n0 4 800\n1 5 850", "9 9 999 8 0\n0 1 150\n1 2 150\n2 3 0\n3 4 300\n4 5 99\n5 6 300\n6 7 0\n7 8 0\n0 5 600", "9 20 8700 4 5\n0 1 500\n1 2 700\n2 3 800\n3 4 900\n4 5 1000\n5 6 1100\n6 7 1200\n7 8 1300\n0 3 600\n1 4 700\n2 5 800\n3 6 900\n4 7 1000\n5 8 1100\n0 6 500\n1 7 400\n2 8 300\n0 4 550\n1 5 650\n2 6 750"]}
{"name": "805_A. Fake NP", "description": "Input\n\nThe first line contains two integers l and r (2 <= l <= r <= 109).", "testcase": ["2 1000000000", "2 3", "4 10", "2 100", "2 999999999", "2 500000000", "100000000 1000000000", "25 30", "123456789 987654321", "99999 1000000", "345678 123456789", "100000000 200000000", "398765432 987654321", "2 99999999", "9999 1234567", "9999 999999", "1234 56789", "2 23456789", "234567 2345678", "567890 6789012", "3456789 45678901", "9876543 19876543", "1234567 7654321", "159357 753159", "22222222 99999999", "2 7777777", "88888888 99999999", "99999999 100000000", "500000000 600000000", "300000000 900000000"]}
{"name": "1129_A2. Toy Train", "description": "Input\n\nThe first line contains two space-separated integers n and m (2 <= n <= 5 000; 1 <= m <= 20 000) --- the number of stations and the number of candies, respectively.\n\nThe i-th of the following m lines contains two space-separated integers a_i and b_i (1 <= a_i, b_i <= n; a_i != b_i) --- the station that initially contains candy i and the destination station of the candy, respectively.", "testcase": ["3 2\n1 2\n3 1", "4 3\n2 4\n1 3\n3 1", "5 4\n5 3\n4 2\n1 5\n2 3", "6 5\n1 6\n2 5\n4 3\n3 2\n5 4", "4 4\n2 3\n3 1\n1 4\n4 2", "7 6\n7 1\n1 5\n5 7\n3 2\n6 4\n2 3", "5 5\n1 2\n3 4\n5 1\n2 5\n4 3", "8 7\n2 5\n8 1\n1 3\n4 6\n6 2\n3 7\n7 4", "10 9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n9 10\n10 1", "5 6\n1 2\n1 3\n1 4\n1 5\n2 3\n3 5", "6 8\n2 3\n4 5\n6 1\n1 2\n3 4\n5 6\n2 6\n4 1", "7 10\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 3\n2 4\n2 5\n2 6", "9 12\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 1\n1 3\n2 4\n3 5", "15 20\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 1\n2 5\n5 8\n8 11\n11 14\n1 10", "11 10\n10 1\n1 2\n2 3\n3 4\n4 5\n5 6\n7 8\n8 9\n9 10\n6 11", "12 11\n12 1\n1 2\n2 3\n3 4\n4 5\n6 7\n7 8\n8 9\n9 10\n10 11\n5 12", "13 12\n13 1\n1 2\n2 3\n3 4\n5 13\n4 5\n6 7\n7 8\n8 9\n9 10\n11 12\n10 11", "14 13\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n8 14\n7 8\n9 10\n10 11\n11 12\n12 13\n13 14", "15 14\n15 1\n2 15\n1 2\n3 4\n4 5\n5 6\n6 7\n7 8\n9 10\n8 9\n11 12\n10 11\n13 14\n12 13", "16 15\n1 2\n2 3\n3 4\n4 5\n5 16\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n16 1", "17 16\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17", "18 17\n18 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n8 18\n7 8\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n17 18", "19 18\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n9 19\n8 9\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n18 19\n17 18", "20 19\n20 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n13 20\n12 13\n14 15\n15 16\n17 18\n16 17\n18 19", "21 20\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n17 18\n18 19\n19 20\n20 21\n16 17", "22 20\n22 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n17 18\n18 19\n19 20\n16 21", "23 20\n23 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n12 23\n11 12\n13 14\n14 15\n16 17\n17 18\n18 19\n19 20\n21 22", "24 20\n24 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n8 24\n7 8\n9 10\n10 11\n11 12\n12 13\n13 14\n15 16\n14 15\n17 18\n18 19\n20 21\n19 20", "25 20\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n10 25\n9 10\n11 12\n12 13\n13 14\n14 15\n15 16\n17 18\n16 17\n18 19\n19 20\n21 22", "26 20\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n12 26\n11 12\n13 14\n14 15\n15 16\n17 18\n16 17\n19 20\n18 19\n21 22", "27 20\n1 2\n2 3\n3 4\n4 5\n27 1\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n13 14\n12 13\n14 15\n16 17\n15 16\n18 19\n17 18\n20 21", "28 20\n28 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n13 14\n12 13\n15 16\n14 15\n17 18\n16 17\n19 20\n18 19", "29 20\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n10 29\n9 10\n11 12\n12 13\n13 14\n14 15\n15 16\n17 18\n16 17\n19 20\n18 19\n21 22", "30 20\n30 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n8 30\n7 8\n9 10\n10 11\n11 12\n12 13\n13 14\n15 16\n14 15\n17 18\n18 19\n20 21\n19 20"]}
{"name": "1208_A. XORinacci", "description": "Input\n\nThe input contains one or more independent test cases.\n\nThe first line of input contains a single integer T (1 <= T <= 10^3), the number of test cases.\n\nEach of the T following lines contains three space-separated integers a, b, and n (0 <= a, b, n <= 10^9) respectively.", "testcase": ["1\n0 0 1000000000", "1\n123456789 987654321 123456789", "1\n2147483647 2147483647 2147483647", "1\n1 1 1", "1\n500000000 500000000 500000000", "1\n10 20 30", "1\n0 1 0", "1\n0 0 0", "1\n1000000000 1000000000 1000000000", "1\n10 10 10", "1\n1 1000000000 999999999", "1\n999999999 1 1000000000", "1\n700000000 800000000 900000000", "1\n123 456 789", "1\n1 2 3", "1\n3 2 1", "1\n0 0 1", "1\n1 0 0", "1\n100 200 300", "1\n300 200 100", "1\n555555555 444444444 333333333", "1\n987654321 123456789 987654321", "1\n314159265 358979323 846264338", "1\n161803399 874989484 606403282", "1\n0 1000000000 1000000000", "1\n1000000000 0 1000000000", "1\n999999999 999999999 0", "1\n400000000 500000000 600000000", "1\n2 4 8", "1\n65536 32768 16384"]}
{"name": "1227_A. Math Problem", "description": "Input\n\nThe first line contains integer number t (1 <= t <= 100) --- the number of test cases in the input. Then t test cases follow.\n\nThe first line of each test case contains one integer n (1 <= n <= 10^{5}) --- the number of segments. The following n lines contain segment descriptions: the i-th of them contains two integers l_i,r_i (1 <= l_i <= r_i <= 10^{9}).\n\nThe sum of all values n over all the test cases in the input doesn't exceed 10^5.", "testcase": ["2\n3\n1 3\n4 6\n7 10\n2\n2 2\n3 5", "1\n5\n10 15\n20 25\n30 35\n40 45\n50 55", "3\n1\n100000000 100000000\n4\n10 20\n20 30\n30 40\n40 50\n2\n5 10\n10 20", "1\n4\n123456789 987654321\n234567890 345678901\n456789012 567890123\n678901234 789012345", "2\n2\n1 900000000\n900000001 1000000000\n3\n500000000 600000000\n700000000 800000000\n900000000 1000000000", "4\n1\n1 2\n1\n2 3\n1\n3 4\n1\n4 5", "1\n3\n1 1\n2 2\n3 3", "2\n2\n4 8\n10 14\n3\n1 5\n6 10\n11 15", "1\n6\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2", "2\n7\n1 10\n2 9\n3 8\n4 7\n5 6\n6 5\n7 4\n3\n10 100\n50 500\n100 1000", "1\n8\n1 100\n50 150\n100 200\n150 250\n200 300\n250 350\n300 400\n350 450", "2\n3\n1 10000\n2 20000\n3 30000\n2\n10000 20000\n20000 30000", "1\n5\n10 20\n20 30\n30 40\n40 50\n50 60", "3\n1\n1 10\n1\n20 30\n1\n40 50", "1\n4\n100000 200000\n200000 300000\n300000 400000\n400000 500000", "3\n2\n1 500000000\n500000000 1000000000\n2\n250000000 750000000\n750000000 1000000000\n2\n10 20\n30 40", "1\n3\n111111111 222222222\n333333333 444444444\n555555555 666666666", "1\n2\n987654321 987654322\n123456789 987654320", "2\n3\n100000 200000\n300000 400000\n500000 600000\n4\n700000 800000\n900000 1000000\n1100000 1200000\n1300000 1400000", "1\n5\n15 25\n35 45\n55 65\n75 85\n95 105", "2\n4\n2 5\n8 11\n14 17\n20 23\n3\n6 9\n12 15\n18 21", "3\n3\n3 4\n5 6\n7 8\n2\n9 10\n11 12\n1\n13 14", "2\n5\n2 4\n4 6\n6 8\n8 10\n10 12\n4\n1 3\n3 5\n5 7\n7 9", "1\n6\n1 100\n101 200\n201 300\n301 400\n401 500\n501 600", "2\n2\n50 100\n150 200\n3\n250 300\n350 400\n450 500", "1\n3\n12345 67890\n23456 78901\n34567 89012", "2\n4\n10 100\n100 1000\n1000 10000\n10000 100000\n2\n100000 200000\n200000 300000", "1\n3\n100 200\n200 300\n300 400", "1\n2\n100000000 200000000\n200000000 300000000", "1\n7\n10 20\n20 30\n30 40\n40 50\n50 60\n60 70\n70 80"]}
{"name": "1374_B. Multiply by 2, divide by 6", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 2 * 10^4) --- the number of test cases. Then t test cases follow. \n\nThe only line of the test case contains one integer n (1 <= n <= 10^9).", "testcase": ["1", "2", "3", "4", "5", "1000000000", "999999999", "500000000", "250000000", "123456789", "987654321", "192837465", "234567", "345678", "456789", "567890", "678901", "789012", "890123", "901234", "17", "42", "256", "1024", "2048", "4096", "8192", "16384", "32768", "65536"]}
{"name": "1466_C. Canine poetry", "description": "Input\n\nThe first line of the input contains a single integer t (1 <= t <= 10^5) denoting the number of test cases, then t test cases follow.\n\nThe first and only line of each test case contains a non-empty string of lowercase English letters, Orpheus' poem.\n\nThe sum of the length of Orpheus' poems in all test cases will not exceed 10^5.", "testcase": ["1\nabcd", "2\nabc\ndefg", "1\na", "1\npoem", "3\nxyz\nabc\nmnop", "1\nsingletestcase", "2\nmultiple\ntestcases", "1\nanotherone", "2\nshort\nlongerexample", "1\nz", "4\na\ne\ni\no", "1\njustonelongwordwithoutsingleseparation", "1\nshortone", "2\nxy\nzabcde", "1\nsomepoem", "3\nabcde\nfghij\nklmno", "1\nnowthisisepic", "2\nright\nwrong", "1\ntiny", "2\nab\ncdef", "3\nghi\njklmno\nprstuv", "1\npoetry", "2\nrhythm\nblues", "1\nsingle", "2\ntriple\nquad", "1\neasy", "3\nproblem\nsolving\nisfun", "1\nliterature", "2\nscience\nmath", "1\nharmony"]}
{"name": "209_B. Pixels", "description": "Input\n\nThe first line contains three space-separated integers a, b and c (0 <= a, b, c <= 231; a + b + c > 0) --- the number of red, green and blue pixels, correspondingly.", "testcase": ["0 0 1", "0 1 0", "1 0 0", "231 231 231", "0 231 231", "231 0 231", "231 231 0", "123 456 789", "1024 2048 4096", "123456 789012 345678", "429496729 429496729 429496729", "0 429496729 429496729", "429496729 0 429496729", "429496729 429496729 0", "111111111 222222222 333333333", "987654321 123456789 987654321", "1 2 3", "4 5 6", "7 8 9", "10 11 12", "13 14 15", "16 17 18", "19 20 21", "22 23 24", "25 26 27", "28 29 30", "31 32 33", "34 35 36", "37 38 39", "40 41 42"]}
{"name": "235_A. LCM Challenge", "description": "Input\n\nThe first line contains an integer n (1 <= n <= 106) --- the n mentioned in the statement.", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "100", "1000", "10000", "100000", "1000000", "999999", "987654", "123456", "505050", "404040", "303030", "202020", "101010", "888888", "777777", "666666", "555555", "444444", "333333", "222222"]}
{"name": "306_C. White, Black and White Again", "description": "Input\n\nThe single line of the input contains integers n, w and b (3 <= n <= 4000, 2 <= w <= 4000, 1 <= b <= 4000) --- the number of days, the number of good events and the number of not-so-good events. It is guaranteed that w + b >= n.", "testcase": ["3 2 1", "4 2 2", "5 3 2", "6 4 2", "7 5 2", "8 4 4", "9 5 4", "10 6 4", "11 7 4", "12 8 4", "13 9 4", "14 8 6", "15 9 6", "16 10 6", "17 11 6", "18 12 6", "19 13 6", "20 10 10", "21 11 10", "22 12 10", "23 13 10", "24 14 10", "25 15 10", "26 14 12", "27 15 12", "28 16 12", "29 17 12", "30 18 12", "31 19 12", "32 20 12"]}
{"name": "425_A. Sereja and Swaps", "description": "Input\n\nThe first line contains two integers n and k (1 <= n <= 200; 1 <= k <= 10). The next line contains n integers a[1], a[2], ..., a[n] ( - 1000 <= a[i] <= 1000).", "testcase": ["1 1\n0", "2 1\n-1000 1000", "3 2\n-500 0 500", "4 3\n-1000 -100 100 1000", "5 3\n-999 -888 123 456 789", "6 4\n-342 512 -512 343 -123 123", "7 5\n987 -234 567 -76 -543 12 345", "8 2\n-1 -2 -3 -4 -5 -6 -7 -8", "9 1\n0 0 0 0 0 0 0 0 0", "10 10\n1000 -1000 500 -500 250 -250 125 -125 60 -60", "11 6\n-333 333 -666 666 -999 999 0 100 -100 200 -200 300", "12 3\n-300 400 -500 600 -700 800 -900 100 -150 150 -50 50", "13 7\n-987 987 -876 876 -765 765 -654 654 -543 543 -432 432 -321 321", "14 8\n-321 123 -432 234 -543 345 -654 456 -765 567 -876 678 -987 789", "15 4\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "16 5\n-1000 -500 0 500 1000 -1000 -500 0 500 1000 -1000 -500 0 500 1000", "17 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "18 10\n-950 950 -850 850 -750 750 -650 650 -550 550 -450 450 -350 350 -250 250 -150 150", "19 6\n-123 124 -234 235 -345 346 -456 457 -567 568 -678 679 -789 790 -890 891", "20 2\n500 -500 500 -500 500 -500 500 -500 500 -500 500 -500 500 -500 500 -500 500 -500 500 -500", "21 9\n-210 210 -198 198 -187 187 -176 176 -164 164 -153 153 -142 142 -131 131 -119 119 108", "22 6\n-110 110 -102 102 -93 93 -85 85 -77 77 -68 68 -60 60 -51 51 -43 43 -35 35 -26 26", "23 3\n42 -42 43 -43 44 -44 45 -45 46 -46 47 -47 48 -48 49 -49 50 -50 51 -51 52 -52", "24 8\n22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33", "25 5\n15 -15 14 -14 13 -13 12 -12 11 -11 10 -10 9 -9 8 -8 7 -7 6 -6 5 -5 4 -4", "26 7\n-3 3 -3 3 -3 3 -3 3 -3 3 -3 3 -3 3 -3 3 -3 3 -3 3 -3 3 -3 3 -3 3", "27 4\n-2 0 2 -2 0 2 -2 0 2 -2 0 2 -2 0 2 -2 0 2 -2 0 2 -2 0 2 -2 0 2", "28 10\n-1 1 -1 1 -1 1 -1 1 -1 1 -1 1 -1 1 -1 1 -1 1 -1 1 -1 1 -1 1 -1 1", "29 4\n-666 666 -222 222 -444 444 -888 888 -111 111 -333 333 -555 555 -777 777 -999 999", "30 5\n5 -5 10 -10 15 -15 20 -20 25 -25 30 -30 35 -35 40 -40 45 -45 50 -50 55 -55"]}
{"name": "730_G. Car Repair Shop", "description": "Input\n\nThe first line contains integer n (1 <= n <= 200) --- the number of requests from clients.\n\nThe following n lines contain requests, one request per line. The i-th request is given as the pair of integers si, di (1 <= si <= 109, 1 <= di <= 5\u00b7106), where si is the preferred time to start repairing the i-th car, di is the number of days to repair the i-th car.\n\nThe requests should be processed in the order they are given in the input.", "testcase": ["1\n1000000000 123456\n", "2\n1 5000000\n1000000000 4000000\n", "3\n200 20\n300 30\n500 50\n", "4\n523 3540\n2345 6789\n67890 12345\n1234567 2345678\n", "5\n10 20\n30 40\n50 60\n70 80\n90 100\n", "6\n100000000 100000\n100000000 200000\n100000000 300000\n100000000 400000\n100000000 500000\n100000000 600000\n", "7\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n", "8\n88888888 88888\n77777777 77777\n66666666 66666\n55555555 55555\n44444444 44444\n33333333 33333\n22222222 22222\n11111111 11111\n", "9\n123 500\n234 400\n345 300\n456 200\n567 100\n678 500\n789 400\n890 300\n901 200\n", "10\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n", "11\n123456 789012\n234567 890123\n345678 901234\n456789 123\n567890 234\n678901 345\n789012 456\n890123 567\n901234 678\n12345 123\n", "12\n11111111 111111\n22222222 222222\n33333333 333333\n44444444 444444\n55555555 555555\n66666666 666666\n77777777 777777\n88888888 888888\n99999999 999999\n10000000 100000\n", "13\n231 4231\n432 5432\n543 6543\n654 7654\n765 8765\n876 9876\n987 10987\n1098 21098\n2109 32109\n3210 43210\n4321 54321\n", "14\n1 2\n3 4\n5 6\n7 8\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n", "15\n1000000000 5000000\n999999999 4999999\n999999998 4999998\n999999997 4999997\n999999996 4999996\n999999995 4999995\n999999994 4999994\n999999993 4999993\n999999992 4999992\n999999991 4999991\n", "16\n1 100\n2 200\n3 300\n4 400\n5 500\n6 600\n7 700\n8 800\n9 900\n10 1000\n11 1100\n12 1200\n13 1300\n14 1400\n15 1500\n16 1600\n", "17\n12 123\n23 234\n34 345\n45 456\n56 567\n67 678\n78 789\n89 890\n90 901\n10 102\n11 113\n12 124\n13 135\n14 146\n15 157\n16 168\n17 179\n", "18\n1000000000 2500000\n800000000 2500000\n600000000 2500000\n400000000 2500000\n200000000 2500000\n100000000 2500000\n80000000 2500000\n60000000 2500000\n40000000 2500000\n20000000 2500000\n", "19\n7 14\n14 13\n21 12\n28 11\n35 10\n42 9\n49 8\n56 7\n63 6\n70 5\n77 4\n84 3\n91 2\n98 1\n", "20\n987654 3210\n876543 4321\n765432 5432\n654321 6543\n543210 7654\n432109 8765\n321098 9876\n210987 10987\n109876 21098\n98765 32109\n", "21\n1234567 1234567\n2345678 2345678\n3456789 3456789\n4567890 4567890\n5678901 5678901\n6789012 6789012\n7890123 7890123\n8901234 8901234\n9012345 9012345\n123456 123456\n", "22\n42 42\n84 84\n126 126\n168 168\n210 210\n252 252\n294 294\n336 336\n378 378\n420 420\n462 462\n504 504\n546 546\n588 588\n630 630\n672 672\n714 714\n756 756\n", "23\n100 2000\n200 1800\n300 1600\n400 1400\n500 1200\n600 1000\n700 800\n800 600\n900 400\n1000 200\n", "24\n1 10\n2 20\n3 30\n4 40\n5 50\n6 60\n7 70\n8 80\n9 90\n10 100\n11 110\n12 120\n13 130\n14 140\n15 150\n16 160\n17 170\n18 180\n19 190\n20 200\n", "25\n54321 54321\n54321 5432\n54321 543\n54321 54\n54321 5\n4321 4321\n4321 432\n4321 43\n4321 4\n321 321\n321 32\n321 3\n21 21\n21 2\n1 1\n", "26\n321 123\n432 234\n543 345\n654 456\n765 567\n876 678\n987 789\n1098 890\n2109 901\n3210 102\n4321 113\n5432 124\n6543 135\n7654 146\n8765 157\n9876 168\n10987 179\n21098 190\n32109 201\n", "27\n1000000000 1234\n900000000 2345\n800000000 3456\n700000000 4567\n600000000 5678\n500000000 6789\n400000000 7890\n300000000 8901\n200000000 9012\n100000000 123\n", "28\n1 5\n2 10\n3 15\n4 20\n5 25\n6 30\n7 35\n8 40\n9 45\n10 50\n11 55\n12 60\n13 65\n14 70\n15 75\n16 80\n17 85\n18 90\n19 95\n20 100\n", "29\n1 12345\n2 23456\n3 34567\n4 45678\n5 56789\n6 67890\n7 78901\n8 89012\n9 90123\n10 1234\n11 2345\n12 3456\n13 4567\n14 5678\n15 6789\n16 7890\n17 8901\n18 9012\n19 123\n20 234\n", "30\n999999999 5000000\n888888888 4000000\n777777777 3000000\n666666666 2000000\n555555555 1000000\n444444444 500000\n333333333 400000\n222222222 300000\n111111111 200000\n123456789 100000\n"]}
{"name": "893_A. Chess For Three", "description": "Input\n\nThe first line contains one integer n (1 <= n <= 100) --- the number of games Alex, Bob and Carl played.\n\nThen n lines follow, describing the game log. i-th line contains one integer ai (1 <= ai <= 3) which is equal to 1 if Alex won i-th game, to 2 if Bob won i-th game and 3 if Carl won i-th game.", "testcase": ["3\n1\n2\n3", "1\n2", "5\n1\n1\n1\n1\n1", "4\n2\n2\n2\n2", "2\n3\n1", "10\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1", "6\n3\n2\n1\n1\n1\n1", "7\n2\n2\n2\n3\n3\n3\n3", "8\n1\n1\n3\n3\n2\n2\n1\n3", "9\n2\n2\n1\n1\n2\n2\n3\n3\n3", "3\n1\n2\n3", "1\n1", "5\n2\n2\n2\n2\n2", "4\n3\n3\n3\n3", "2\n1\n3", "10\n3\n1\n2\n3\n1\n2\n3\n1\n2\n1", "6\n2\n3\n1\n1\n3\n3", "7\n1\n1\n1\n2\n2\n2\n2", "8\n3\n3\n1\n1\n3\n3\n2\n2", "9\n1\n1\n2\n2\n1\n1\n3\n3\n1", "7\n3\n2\n3\n1\n1\n2\n1", "6\n1\n2\n3\n3\n2\n1", "5\n2\n3\n1\n1\n2", "4\n3\n2\n3\n1", "3\n1\n3\n2", "11\n1\n1\n2\n2\n3\n3\n1\n1\n2\n2\n3", "12\n3\n2\n1\n1\n2\n2\n3\n3\n1\n1\n2\n2", "13\n1\n3\n2\n2\n3\n3\n1\n1\n3\n2\n2\n3\n3", "14\n2\n1\n3\n3\n1\n1\n2\n2\n1\n3\n3\n1\n1\n2", "15\n3\n1\n2\n2\n3\n3\n1\n1\n2\n2\n3\n1\n2\n2\n3"]}
{"name": "p01970 The Diversity of Prime Factorization", "description": "Constraints\n\n* 1 \\ leq N \\ leq 10 ^ 5\n* 2 \\ leq q_i \\ leq 10 ^ 6 (1 \\ leq i \\ leq N)", "testcase": [{"N": 1, "q": [2]}, {"N": 2, "q": [2, 3]}, {"N": 3, "q": [500000, 300, 400000]}, {"N": 4, "q": [100005, 200009, 350010, 750000]}, {"N": 5, "q": [2, 2, 2, 2, 2]}, {"N": 6, "q": [999999, 232323, 343434, 454545, 565656, 676767]}, {"N": 10, "q": [100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 100000]}, {"N": 20, "q": [2, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900]}, {"N": 30, "q": [100002, 200003, 300004, 400005, 500006, 600007, 700008, 800009, 900010, 123456, 234567, 345678, 456789, 567890, 678901, 789012, 890123, 901234, 212345, 323456, 434567, 545678, 656789, 767890, 878901, 989012, 990123, 101234, 112345, 123456]}, {"N": 40, "q": [350000, 30000, 40000, 45000, 50000, 55000, 60000, 65000, 70000, 75000, 80000, 85000, 90000, 95000, 100000, 105000, 110000, 115000, 120000, 125000, 130000, 135000, 140000, 145000, 150000, 155000, 160000, 165000, 170000, 175000, 180000, 185000, 190000, 195000, 200000, 205000, 210000, 215000, 220000, 225000]}, {"N": 50, "q": [10000, 11000, 12000, 13000, 14000, 15000, 16000, 17000, 18000, 19000, 20000, 21000, 22000, 23000, 24000, 25000, 26000, 27000, 28000, 29000, 30000, 31000, 32000, 33000, 34000, 35000, 36000, 37000, 38000, 39000, 40000, 41000, 42000, 43000, 44000, 45000, 46000, 47000, 48000, 49000, 50000, 51000, 52000, 53000, 54000, 55000, 56000, 57000, 58000, 59000, 60000]}, {"N": 100, "q": [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200]}, {"N": 200, "q": [10000]}, {"N": 300, "q": [2]}, {"N": 400, "q": [1000000]}, {"N": 500, "q": [500]}, {"N": 600, "q": [100006]}, {"N": 700, "q": [700]}, {"N": 800, "q": [800000]}, {"N": 900, "q": [200000]}, {"N": 1000, "q": [1000000]}, {"N": 5000, "q": [5]}, {"N": 10000, "q": [10000]}, {"N": 15000, "q": [15000]}, {"N": 20000, "q": [20000]}, {"N": 25000, "q": [25000]}, {"N": 30000, "q": [30000]}, {"N": 35000, "q": [35000]}, {"N": 40000, "q": [40000]}, {"N": 45000, "q": [45000]}, {"N": 50000, "q": [50000]}, {"N": 55000, "q": [55000]}, {"N": 60000, "q": [60000]}, {"N": 65000, "q": [65000]}, {"N": 70000, "q": [70000]}, {"N": 75000, "q": [75000]}, {"N": 80000, "q": [80000]}, {"N": 85000, "q": [85000]}, {"N": 90000, "q": [90000]}, {"N": 95000, "q": [95000]}, {"N": 100000, "q": [100000]}]}
{"name": "p02257 Prime Numbers", "description": "Input\n\nThe first line contains an integer N, the number of elements in the list.\n\nN numbers are given in the following lines.", "testcase": ["1\n0", "2\n1\n2", "3\n-1\n0\n1", "4\n10\n9\n8\n7", "5\n3\n1\n4\n1\n5", "6\n100\n-100\n50\n-50\n25\n-25", "7\n5\n10\n15\n20\n25\n30\n35", "8\n1\n-1\n2\n-2\n3\n-3\n4\n-4", "9\n42\n42\n42\n42\n42\n42\n42\n42\n42", "10\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0", "11\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1", "12\n-12\n23\n34\n-45\n56\n-67\n78\n-89\n90\n-101\n112\n-123", "13\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1", "14\n-1\n2\n-3\n4\n-5\n6\n-7\n8\n-9\n10\n-11\n12\n-13\n14", "15\n0\n2\n4\n6\n8\n10\n12\n14\n16\n18\n20\n22\n24\n26\n28", "16\n1\n-3\n5\n-7\n9\n-11\n13\n-15\n17\n-19\n21\n-23\n25\n-27\n29\n-31", "17\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1", "18\n100\n200\n300\n400\n500\n600\n700\n800\n900\n1000\n1100\n1200\n1300\n1400\n1500\n1600\n1700\n1800", "19\n-19\n18\n-17\n16\n-15\n14\n-13\n12\n-11\n10\n-9\n8\n-7\n6\n-5\n4\n-3\n2\n-1", "20\n5\n4\n3\n2\n1\n0\n-1\n-2\n-3\n-4\n-5\n-6\n-7\n-8\n-9\n-10\n-11\n-12\n-13\n-14", "21\n0\n1\n0\n1\n0\n1\n0\n1\n0\n1\n0\n1\n0\n1\n0\n1\n0\n1\n0\n1\n0", "22\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1", "23\n-1\n1\n-2\n2\n-3\n3\n-4\n4\n-5\n5\n-6\n6\n-7\n7\n-8\n8\n-9\n9\n-10\n10\n-11\n11\n-12", "24\n12\n24\n36\n48\n60\n72\n84\n96\n108\n120\n132\n144\n156\n168\n180\n192\n204\n216\n228\n240\n252\n264\n276\n288", "25\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1", "26\n-2\n4\n-8\n16\n-32\n64\n-128\n256\n-512\n1024\n-2048\n4096\n-8192\n16384\n-32768\n65536\n-131072\n262144\n-524288\n1048576\n-2097152\n4194304\n-8388608\n16777216\n-33554432\n67108864", "27\n1\n3\n5\n7\n9\n11\n13\n15\n17\n19\n21\n23\n25\n27\n29\n31\n33\n35\n37\n39\n41\n43\n45\n47\n49\n51\n53\n55", "28\n28\n56\n84\n112\n140\n168\n196\n224\n252\n280\n308\n336\n364\n392\n420\n448\n476\n504\n532\n560\n588\n616\n644\n672\n700\n728\n756\n784", "29\n29\n-28\n27\n-26\n25\n-24\n23\n-22\n21\n-20\n19\n-18\n17\n-16\n15\n-14\n13\n-12\n11\n-10\n9\n-8\n7\n-6\n5\n-4\n3\n-2\n1", "30\n-30\n29\n-28\n27\n-26\n25\n-24\n23\n-22\n21\n-20\n19\n-18\n17\n-16\n15\n-14\n13\n-12\n11\n-10\n9\n-8\n7\n-6\n5\n-4\n3\n-2\n1"]}
{"name": "1096_E. The Top Scorer", "description": "Input\n\nThe only line contains three integers p, s and r (1 <= p <= 100, 0 <= r <= s <= 5000) --- the number of players, the sum of scores of all players and Hasan's score, respectively.", "testcase": ["1 0 0", "2 100 50", "3 4867 100", "4 50 10", "5 300 60", "6 2500 400", "7 123 23", "8 5000 4999", "9 4999 1", "10 250 25", "11 4096 256", "12 1000 10", "13 3700 37", "14 4500 450", "15 3200 320", "16 1500 150", "17 600 60", "18 4900 49", "19 4700 235", "20 777 77", "21 4444 444", "22 369 123", "23 2222 111", "24 3333 333", "25 2000 200", "26 1111 111", "27 3456 123", "28 2345 117", "29 1234 123", "30 4321 432"]}
{"name": "442_C. Artem and Array ", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 5\u00b7105) --- the number of elements in the array. The next line contains n integers ai (1 <= ai <= 106) --- the values of the array elements.", "testcase": ["1\n1\n", "2\n1 2\n", "3\n1 2 3\n", "4\n1 2 3 4\n", "5\n1000000 999999 999998 999997 999996\n", "6\n1 1 1 1 1 1\n", "7\n2 3 5 7 11 13 17\n", "8\n20 20 20 20 20 20 20 20\n", "9\n9 8 7 6 5 4 3 2 1\n", "10\n123456 234567 345678 456789 567890 678901 789012 890123 901234 12345\n", "5\n9999 8888 7777 6666 5555\n", "5\n54321 4321 321 21 1\n", "5\n50 100 150 200 250\n", "5\n950000 951234 952345 953456 954567\n", "5\n333333 444444 555555 666666 777777\n", "5\n11 22 33 44 55\n", "5\n987654 876543 765432 654321 543210\n", "5\n42 42 42 42 42\n", "5\n3 1 4 1 5\n", "5\n8675309 867530 86753 8675 867\n", "5\n111111 222222 333333 444444 555555\n", "5\n500000 400000 300000 200000 100000\n", "5\n76 76 76 76 76\n", "5\n999997 999998 999999 1000000 999996\n", "5\n1 3 5 7 9\n", "5\n777777 888888 999999 101010 202020\n", "5\n256 512 1024 2048 4096\n", "5\n625 1250 2500 5000 10000\n", "5\n3125 6250 12500 25000 50000\n", "5\n2 4 8 16 32\n"]}
{"name": "630_A. Again Twenty Five!", "description": "Input\n\nThe only line of the input contains a single integer n (2 <= n <= 2\u00b71018) --- the power in which you need to raise number 5.", "testcase": ["2", "3", "4", "5", "10", "15", "20", "25", "30", "35", "40", "45", "50", "100", "150", "200", "250", "300", "350", "400", "450", "500", "550", "600", "650", "700", "750", "800", "850", "900"]}
{"name": "1366_A. Shovels and Swords", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 1000) --- the number of test cases.\n\nThe only line of each test case contains two integers a and b (0 <= a, b <= 10^9) --- the number of sticks and the number of diamonds, respectively.", "testcase": ["1\n0 0", "1\n1000000000 1000000000", "1\n0 1000000000", "1\n1000000000 0", "1\n500000000 500000000", "1\n123456789 987654321", "1\n42 42", "1\n999999999 1", "1\n1 999999999", "1\n250000000 750000000", "1\n750000000 250000000", "1\n333333333 666666667", "1\n10 20", "1\n20 10", "1\n505050505 505050505", "1\n314159265 271828182", "1\n161803399 1123581321", "1\n707106781 1414213562", "1\n10000000 90000000", "1\n87654321 123456789", "1\n99999999 99999998", "1\n2 2", "1\n3 6", "1\n6 3", "1\n44444444 55555555", "1\n77777777 222222222", "1\n11 99", "1\n99 11", "1\n100000000 999999999", "1\n999999999 100000000"]}
{"name": "1451_D. Circle Game", "description": "Input\n\nThe first line contains a single integer t (1 <= t <= 100) --- the number of test cases.\n\nThe only line of each test case contains two space separated integers d (1 <= d <= 10^5) and k (1 <= k <= d).", "testcase": ["1\n1 1", "2\n10 5", "3\n100 50", "4\n1000 500", "5\n10000 5000", "6\n100000 50000", "7\n23456 11728", "8\n98765 49382", "9\n87654 43827", "10\n76543 38271", "11\n65432 32716", "12\n54321 27161", "13\n43210 21610", "14\n32109 16054", "15\n21098 10549", "16\n10987 5493", "17\n10001 5000", "18\n12345 6172", "19\n67890 33945", "20\n11111 5555", "21\n22222 11111", "22\n33333 16666", "23\n44444 22222", "24\n55555 27777", "25\n66666 33333", "26\n77777 38888", "27\n88888 44444", "28\n99999 49999", "29\n12321 6160", "30\n10101 5050"]}
{"name": "223_C. Partial Sums", "description": "Input\n\nThe first line contains two space-separated integers n and k (1 <= n <= 2000, 0 <= k <= 109). The next line contains n space-separated integers a1, a2, ..., an --- elements of the array a (0 <= ai <= 109).", "testcase": ["1 0\n0", "2 9\n0 1", "3 1000000000\n0 1 2", "4 500\n0 1 1000000000 999999999", "5 9\n1 2 3 4 5", "6 0\n0 0 0 0 0 0", "7 10\n10 20 30 40 50 60 70", "8 123456789\n1 1 1 1 1 1 1 1", "9 987654321\n1 2 3 4 5 6 7 8 9", "10 9999999\n3 8 2 5 1 7 9 0 4 6", "11 100\n1000000000 999999999 999999998 999999997 999999996 999999995 999999994 999999993 999999992 999999991 999999990", "12 1000\n0 0 1 1 2 2 3 3 4 4 5 5", "13 2000\n900000000 800000000 700000000 600000000 500000000 400000000 300000000 200000000 100000000 0 1 2 3", "14 2000000000\n8 7 6 5 4 3 2 1 0 9 10 11 12 13", "15 300\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30", "16 4000\n999 888 777 666 555 444 333 222 111 0 11 22 33 44 55 66", "17 5000\n0 0 0 1 1 1 2 2 2 3 3 3 4 4 4 5 5", "18 600000000\n543 234 567 789 890 123 456 678 912 345 678 901 234 567 890 123 456 789", "19 7000\n8 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23", "20 800000\n16 32 48 64 80 96 112 128 144 160 176 192 208 224 240 256 272 288 304", "21 90000\n1 2 3 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5", "22 100000\n5 4 3 2 1 0 10 9 8 7 6 5 4 3 2 1 0 10 9 8 7", "23 1111111\n0 2 4 6 8 10 12 14 16 18 1 3 5 7 9 11 13 15 17 19 21", "24 2222222\n5 3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3 2 3 8 4", "25 333333\n4 5 6 7 2 3 1 0 9 8 1 2 3 4 5 6 7 8 9 0 0", "26 4444444\n1 2 3 0 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20", "27 5555555\n9 8 7 6 5 4 3 2 1 0 1 2 3 4 5 6 7 8 9 10 11", "28 666666\n0 1000000 2000000 3000000 4000000 5000000 6000000 7000000 8000000 9000000 10000000 11000000 12000000 13000000 14000000 15000000 16000000 17000000 18000000 19000000", "29 7777777\n77 88 99 11 22 33 44 55 66 0 111 222 333 444 555 666 777 888 999 101010", "30 8888888\n222 333 444 555 666 777 888 999 100100 110110 120120 130130 140140 150150 160160 170170 180180 190190 200200 210210"]}
{"name": "343_B. Alternating Current", "description": "Input\n\nThe single line of the input contains a sequence of characters \"+\" and \"-\" of length n (1 <= n <= 100000). The i-th (1 <= i <= n) position of the sequence contains the character \"+\", if on the i-th step from the wall the \"plus\" wire runs above the \"minus\" wire, and the character \"-\" otherwise.", "testcase": ["+", "-", "++", "--", "+-", "-+", "+++", "---", "+-+", "-+-", "++-", "--+", "+--+", "-++-", "++--+", "---++", "+-+-+-", "-+-+-+", "+++-+-+", "--+--+", "+-++--", "-+--+-", "++-++--", "--+-+-+-", "+-+-+-+-+", "-+-+-+-+-", "++-+--+--", "--++-+-+-+", "+-++-++-+-", "-+--+-+--+"]}
{"name": "483_B. Friends and Presents", "description": "Input\n\nThe only line contains four positive integers cnt1, cnt2, x, y (1 <= cnt1, cnt2 < 109; cnt1 + cnt2 <= 109; 2 <= x < y <= 3\u00b7104) --- the numbers that are described in the statement. It is guaranteed that numbers x, y are prime.", "testcase": ["1 1 2 3", "2 3 5 7", "100000000 200000000 2 29", "700000000 300000000 3 17", "50000000 50000000 11 23", "1234567 7654321 7 31", "222222222 333333333 19 509", "1000 2000 5 13", "8888888 1111111 17 103", "99999999 1 2 1999", "3456789 9876543 13 37", "42424242 57575757 7 43", "222222 777777 3 701", "9999998 2 5 1033", "84959595 15040405 23 29", "345678 123456 11 67", "987654 321098 5 19", "111111 888889 2 199", "300000000 400000000 31 173", "600000000 100000000 3 37", "7777777 2222222 7 999991", "44444444 55555555 13 97", "123123123 876876876 5 3001", "17000000 22000000 37 101", "20202020 30303030 2 1013", "80000000 200000000 5 149", "20100000 10100000 13 37", "35000000 10000000 11 197", "4000000 6000000 7 103", "12345678 87654321 17 29"]}
{"name": "835_A. Key races", "description": "Input\n\nThe first line contains five integers s, v1, v2, t1, t2 (1 <= s, v1, v2, t1, t2 <= 1000) --- the number of characters in the text, the time of typing one character for the first participant, the time of typing one character for the the second participant, the ping of the first participant and the ping of the second participant.", "testcase": ["10 5 3 10 15", "50 2 6 7 3", "100 4 10 10 12", "250 1 3 5 5", "500 6 9 20 25", "75 8 6 15 10", "150 4 2 18 14", "300 5 6 22 19", "125 7 9 11 13", "600 5 8 30 20", "350 3 7 25 30", "425 2 4 8 6", "800 1 1 50 45", "650 10 9 35 40", "900 5 2 55 60", "20 15 10 5 5", "1 100 200 10 15", "2 150 100 20 25", "3 300 250 30 35", "4 350 150 15 20", "5 100 100 40 45", "6 250 200 10 5", "7 200 300 25 20", "8 150 350 30 25", "9 50 75 23 18", "1000 3 3 50 50", "900 6 8 13 19", "800 7 6 28 22", "700 4 10 33 37", "600 8 5 40 45"]}
{"name": "1036_B. Diagonal Walking v.2", "description": "Input\n\nThe first line of the input contains one integer q (1 <= q <= 10^4) --- the number of queries.\n\nThen q lines follow. The i-th of these q lines contains three integers n_i, m_i and k_i (1 <= n_i, m_i, k_i <= 10^{18}) --- x-coordinate of the destination point of the query, y-coordinate of the destination point of the query and the number of moves in the query, correspondingly.", "testcase": ["1\n1 1 1", "1\n2 2 3", "1\n3 3 2", "1\n4 4 4", "1\n5 5 10", "1\n6 6 12", "1\n7 7 14", "1\n8 8 7", "1\n9 9 18", "1\n10 10 20", "1\n11 11 22", "1\n12 12 24", "1\n13 13 26", "1\n14 14 28", "1\n15 15 15", "1\n16 16 32", "1\n17 17 34", "1\n18 18 36", "1\n19 19 38", "1\n20 20 40", "1\n21 21 21", "1\n22 22 44", "1\n23 23 46", "1\n24 24 48", "1\n25 25 50", "1\n26 26 52", "1\n27 27 54", "1\n28 28 56", "1\n29 29 58", "1\n30 30 60"]}
{"name": "1373_B. 01 Game", "description": "Input\n\nFirst line contains one integer t (1 <= t <= 1000) --- the number of test cases.\n\nOnly line of each test case contains one string s (1 <= |s| <= 100), consisting of only characters 0 and 1.", "testcase": ["1\n0", "1\n1", "1\n00", "1\n11", "1\n101", "1\n110", "1\n001", "1\n010", "1\n011", "1\n100", "1\n1010", "1\n1001", "1\n1100", "1\n1111", "1\n0000", "1\n0011", "1\n0101", "1\n0110", "1\n1000", "1\n1011", "1\n1101", "1\n1110", "1\n0001", "1\n0010", "1\n0100", "1\n10000", "1\n11011", "1\n00100", "1\n11100", "1\n00011"]}
{"name": "166_A. Rank List", "description": "Input\n\nThe first line contains two integers n and k (1 <= k <= n <= 50). Then n lines contain the description of the teams: the i-th line contains two integers pi and ti (1 <= pi, ti <= 50) --- the number of solved problems and the total penalty time of the i-th team, correspondingly. All numbers in the lines are separated by spaces.", "testcase": ["2 1\n1 20\n2 10", "3 2\n5 30\n4 25\n5 15", "4 3\n10 50\n8 40\n10 45\n6 30", "5 1\n2 10\n2 20\n1 10\n3 15\n2 10", "6 6\n6 25\n6 30\n6 35\n6 40\n6 45\n6 50", "7 3\n7 50\n1 50\n4 25\n7 45\n6 35\n5 30\n4 15", "8 4\n3 15\n3 20\n3 25\n3 30\n3 35\n3 40\n3 45\n3 20", "9 1\n9 14\n8 13\n7 12\n6 11\n5 10\n4 9\n3 8\n2 7\n1 6", "10 5\n10 10\n9 20\n10 5\n8 15\n10 10\n7 25\n6 30\n5 10\n4 50\n3 40", "11 11\n1 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11", "12 6\n12 40\n12 41\n12 42\n12 43\n12 44\n12 45\n12 46\n12 47\n12 48\n12 49\n12 50", "13 7\n13 31\n13 32\n13 33\n13 34\n13 35\n13 36\n12 25\n11 24\n10 23\n9 22\n8 21", "14 2\n14 18\n14 28\n13 38\n12 48\n11 40\n10 30\n9 20\n8 10\n7 5\n6 15\n5 25\n4 35\n3 45", "15 15\n10 30\n10 29\n10 28\n10 27\n10 26\n10 25\n10 24\n10 23\n10 22\n10 21\n10 20\n10 19\n10 18\n10 17\n10 16", "16 8\n8 24\n8 23\n8 22\n8 21\n8 20\n8 19\n8 18\n8 17\n8 16\n8 15\n8 14\n8 13\n8 12\n8 11\n8 10\n8 9", "17 9\n1 45\n2 44\n3 43\n4 42\n5 41\n6 40\n7 39\n8 38\n9 37\n10 36\n11 35\n12 34\n13 33\n14 32\n15 31\n16 30\n17 29", "18 6\n50 1\n49 2\n48 3\n47 4\n46 5\n45 6\n44 7\n43 8\n42 9\n41 10\n40 11\n39 12\n38 13\n37 14\n36 15\n35 16\n34 17\n33 18", "19 10\n10 10\n10 11\n10 12\n10 13\n10 14\n10 15\n10 16\n10 17\n10 18\n10 19\n10 20\n10 21\n10 22\n10 23\n10 24\n10 25\n10 26\n10 27\n10 28", "20 5\n20 20\n19 19\n18 18\n17 17\n16 16\n15 15\n14 14\n13 13\n12 12\n11 11\n10 10\n9 9\n8 8\n7 7\n6 6\n5 5\n4 4\n3 3\n2 2\n1 1", "21 7\n3 10\n3 11\n3 12\n3 13\n3 14\n3 15\n3 16\n3 17\n3 18\n3 19\n3 20\n3 21\n3 22\n3 23\n3 24\n3 25\n3 26\n3 27\n3 28\n3 29\n3 30", "22 11\n22 50\n21 49\n20 48\n19 47\n18 46\n17 45\n16 44\n15 43\n14 42\n13 41\n12 40\n11 39\n10 38\n9 37\n8 36\n7 35\n6 34\n5 33\n4 32\n3 31\n2 30", "23 2\n4 10\n5 9\n6 8\n7 7\n8 6\n9 5\n10 4\n11 3\n12 2\n13 1\n14 10\n15 9\n16 8\n17 7\n18 6\n19 5\n20 4\n21 3\n22 2\n23 1\n1 50\n2 49", "24 12\n24 40\n23 39\n22 38\n21 37\n20 36\n19 35\n18 34\n17 33\n16 32\n15 31\n14 30\n13 29\n12 28\n11 27\n10 26\n9 25\n8 24\n7 23\n6 22\n5 21\n4 20\n3 19\n2 18\n1 17", "25 13\n25 30\n25 31\n25 32\n25 33\n25 34\n25 35\n25 36\n25 37\n25 38\n25 39\n25 40\n25 41\n25 42\n25 43\n25 44\n25 45\n25 46\n25 47\n25 48\n25 49\n25 50\n24 30\n23 31\n22 32\n21 33", "26 1\n1 50\n2 49\n3 48\n4 47\n5 46\n6 45\n7 44\n8 43\n9 42\n10 41\n11 40\n12 39\n13 38\n14 37\n15 36\n16 35\n17 34\n18 33\n19 32\n20 31\n21 30\n22 29\n23 28\n24 27\n25 26\n26 1", "27 14\n27 27\n26 26\n25 25\n24 24\n23 23\n22 22\n21 21\n20 20\n19 19\n18 18\n17 17\n16 16\n15 15\n14 14\n13 13\n12 12\n11 11\n10 10\n9 9\n8 8\n7 7\n6 6\n5 5\n4 4\n3 3\n2 2\n1 1", "28 7\n1 28\n2 27\n3 26\n4 25\n5 24\n6 23\n7 22\n8 21\n9 20\n10 19\n11 18\n12 17\n13 16\n14 15\n15 14\n16 13\n17 12\n18 11\n19 10\n20 9\n21 8\n22 7\n23 6\n24 5\n25 4\n26 3\n27 2\n28 1", "29 15\n29 10\n28 11\n27 12\n26 13\n25 14\n24 15\n23 16\n22 17\n21 18\n20 19\n19 20\n18 21\n17 22\n16 23\n15 24\n14 25\n13 26\n12 27\n11 28\n10 29\n9 30\n8 31\n7 32\n6 33\n5 34\n4 35\n3 36\n2 37\n1 38", "30 10\n15 20\n15 21\n15 22\n15 23\n15 24\n15 25\n15 26\n15 27\n15 28\n15 29\n15 30\n15 31\n15 32\n15 33\n15 34\n15 35\n15 36\n15 37\n15 38\n15 39\n15 40\n15 41\n15 42\n15 43\n15 44\n15 45\n15 46\n15 47\n15 48\n15 49", "31 16\n31 40\n30 41\n29 42\n28 43\n27 44\n26 45\n25 46\n24 47\n23 48\n22 49\n21 50\n20 40\n19 41\n18 42\n17 43\n16 44\n15 45\n14 46\n13 47\n12 48\n11 49\n10 50\n9 40\n8 41\n7 42\n6 43\n5 44\n4 45\n3 46\n2 47\n1 48", "32 17\n32 50\n31 49\n30 48\n29 47\n28 46\n27 45\n26 44\n25 43\n24 42\n23 41\n22 40\n21 39\n20 38\n19 37\n18 36\n17 35\n16 34\n15 33\n14 32\n13 31\n12 30\n11 29\n10 28\n9 27\n8 26\n7 25\n6 24\n5 23\n4 22\n3 21\n2 20\n1 19", "33 13\n33 30\n32 29\n31 28\n30 27\n29 26\n28 25\n27 24\n26 23\n25 22\n24 21\n23 20\n22 19\n21 18\n20 17\n19 16\n18 15\n17 14\n16 13\n15 12\n14 11\n13 10\n12 9\n11 8\n10 7\n9 6\n8 5\n7 4\n6 3\n5 2\n4 1\n3 33\n2 32\n1 31", "34 2\n34 34\n33 33\n32 32\n31 31\n30 30\n29 29\n28 28\n27 27\n26 26\n25 25\n24 24\n23 23\n22 22\n21 21\n20 20\n19 19\n18 18\n17 17\n16 16\n15 15\n14 14\n13 13\n12 12\n11 11\n10 10\n9 9\n8 8\n7 7\n6 6\n5 5\n4 4\n3 3\n2 2\n1 1"]}
{"name": "56_E. Domino Principle", "description": "Input\n\nThe first line contains integer n (1 <= n <= 105) which is the number of dominoes. Then follow n lines containing two integers xi and hi ( - 108 <= xi <= 108, 2 <= hi <= 108) each, which are the coordinate and height of every domino. No two dominoes stand on one point.", "testcase": ["1\n0 2", "2\n-10 3\n10 10", "3\n-100000000 10\n0 5\n100000000 50", "3\n-99999999 4\n-50000000 6\n-1000000 7", "3\n10000000 3\n50000000 4\n90000000 2", "4\n1 2\n2 3\n3 4\n4 5", "4\n-3 10\n1 11\n4 20\n7 30", "5\n-1 3\n2 5\n7 4\n15 10\n20 6", "5\n10 3\n20 4\n30 5\n40 6\n50 7", "5\n-100 2\n-50 3\n0 2\n50 3\n100 4", "6\n-90 5\n-45 3\n0 4\n45 6\n90 3\n100 8", "6\n0 5\n100 6\n200 2\n300 4\n400 2\n500 3", "7\n-1 2\n0 2\n1 2\n2 2\n3 2\n4 2\n5 2", "7\n-10 10\n-5 10\n0 10\n5 10\n10 10\n15 10\n20 10", "8\n100 4\n200 6\n300 8\n400 10\n500 12\n600 14\n700 16\n800 18", "8\n-1 2\n1 2\n-2 3\n2 3\n-3 4\n3 4\n-4 5\n4 5", "9\n-10 3\n-7 3\n-4 3\n-1 3\n0 3\n1 3\n4 3\n7 3\n10 3", "9\n80000000 4\n85000000 4\n90000000 5\n95000000 6\n98000000 5\n98500000 4\n98700000 4\n98800000 3\n98900000 3", "10\n-1000000 2\n-800000 3\n-600000 4\n-400000 5\n-200000 6\n0 7\n200000 8\n400000 9\n600000 10\n800000 11", "10\n10 5\n20 6\n30 7\n40 8\n50 9\n60 10\n70 11\n80 12\n90 13\n100 14", "11\n-1000 2\n-900 2\n-800 2\n-700 2\n-600 2\n-500 2\n0 2\n500 2\n600 2\n700 2\n800 2", "11\n-200 3\n-150 5\n-100 7\n50 9\n100 11\n150 13\n200 15\n250 17\n300 19\n350 21\n400 23", "12\n1000 4\n2000 4\n3000 4\n4000 4\n5000 4\n6000 4\n7000 4\n8000 4\n9000 4\n10000 4\n11000 4\n12000 4", "12\n-30 8\n-20 9\n-10 10\n0 11\n10 12\n20 13\n30 14\n40 15\n50 16\n60 17\n70 18\n80 19", "13\n-10000 5\n-9000 5\n-8000 5\n-7000 5\n-6000 5\n-5000 5\n-4000 5\n-3000 5\n-2000 5\n-1000 5\n0 5\n1000 5\n2000 5", "13\n-20000 6\n-18000 7\n-16000 8\n-14000 9\n-12000 10\n-10000 11\n-8000 12\n-6000 13\n-4000 14\n-2000 15\n0 16\n2000 17\n4000 18", "14\n-50 10\n-40 10\n-30 10\n-20 10\n-10 10\n0 10\n10 10\n20 10\n30 10\n40 10\n50 10\n60 10\n70 10\n80 10", "14\n-500000 10\n-400000 20\n-300000 30\n-200000 40\n-100000 50\n0 60\n100000 70\n200000 80\n300000 90\n400000 100\n500000 110\n600000 120\n700000 130\n800000 140", "15\n10 7\n20 7\n30 7\n40 7\n50 7\n60 7\n70 7\n80 7\n90 7\n100 7\n110 7\n120 7\n130 7\n140 7\n150 7", "15\n100010 4\n100020 4\n100030 4\n100040 4\n100050 4\n100060 4\n100070 4\n100080 4\n100090 4\n100100 4\n100110 4\n100120 4\n100130 4\n100140 4\n100150 4", "16\n-1000000 18\n-925000 17\n-850000 16\n-775000 15\n-700000 14\n-625000 13\n-550000 12\n-475000 11\n-400000 10\n-325000 9\n-250000 8\n-175000 7\n-100000 6\n-25000 5\n50000 4\n125000 3"]}
{"name": "633_A. Ebony and Ivory", "description": "Input\n\nThe first line of the input contains three integers a, b, c (1 <= a, b <= 100, 1 <= c <= 10 000) --- the number of units of damage dealt by Ebony gun and Ivory gun, and the total number of damage required to break the shield, respectively.", "testcase": ["3 4 100", "1 67 4567", "34 76 2345", "13 13 13", "17 91 3892", "2 3 578", "8 8 2000", "6 14 167", "23 45 9786", "12 34 5678", "50 50 10000", "18 27 234", "11 22 3333", "31 71 6543", "19 28 1984", "6 9 3000", "5 5 5000", "20 40 8000", "25 50 7500", "17 81 2347", "29 39 7392", "9 11 999", "3 7 700", "9 10 4000", "16 24 200", "33 66 3300", "44 77 4400", "1 100 10000", "99 1 1234", "22 56 6789"]}
{"name": "103_C. Russian Roulette", "description": "Input\n\nThe first line contains three integers n, k and p (1 <= n <= 1018, 0 <= k <= n, 1 <= p <= 1000) --- the number of slots in the cylinder, the number of bullets and the number of queries. Then follow p lines; they are the queries. Each line contains one integer xi (1 <= xi <= n) the number of slot to describe.\n\nPlease do not use the %lld specificator to read or write 64-bit numbers in \u0421++. It is preferred to use cin, cout streams or the %I64d specificator.", "testcase": ["10 3 2\n1\n7", "50 20 5\n10\n20\n30\n40\n50", "100 0 1\n73", "200 150 3\n111\n150\n199", "1000000000 250000000 4\n500000000\n750000000\n250000000\n999999999", "500 100 6\n1\n100\n200\n300\n400\n500", "1018 0 3\n418\n583\n1017", "999999 2 2\n400000\n999999", "1500 1499 5\n3\n150\n700\n1000\n1450", "1000000000000000000 500000000000000000 2\n999999999999999999\n500000000000000000", "88888888888 44444444444 3\n22222222222\n66666666666\n88888888888", "123456789 987654 2\n12345\n67890", "250 100 2\n200\n250", "1000000000 50000000 3\n1\n500000000\n1000000000", "1018 789 5\n101\n203\n405\n607\n808", "819 72 3\n9\n368\n819", "32768 16384 4\n1\n1024\n2048\n32768", "9999999999999999 8888888888888888 5\n123456789\n987654321\n4444444444\n5555555555\n9999999999", "918273645 345678912 1\n123456789", "1018 1 2\n1\n1018", "15 7 3\n3\n6\n9", "900 450 4\n10\n20\n30\n40", "1111111111 123456789 2\n555555555\n1111111111", "18 9 3\n5\n10\n15", "25 20 2\n1\n25", "50 25 5\n2\n4\n6\n8\n10", "99999 88888 3\n789\n12345\n98765", "300 150 4\n1\n100\n200\n300", "1 0 1\n1", "9999 999 2\n999\n9999"]}
{"name": "1062_D. Fun with Integers", "description": "Input\n\nA single line contains a single integer n (2 <= n <= 100 000) --- the given integer described above.", "testcase": ["2", "3", "10", "100", "999", "1523", "23456", "32768", "40000", "50005", "61453", "72999", "81000", "99999", "100000", "27583", "34567", "44122", "55678", "60000", "70001", "80002", "90003", "3451", "98765", "11111", "22222", "33333", "44444", "54321"]}
{"name": "1084_C. The Fair Nut and String", "description": "Input\n\nThe first line contains the string s (1 <= |s| <= 10^5) consisting of lowercase Latin letters.", "testcase": ["a", "b", "z", "ab", "cd", "efgh", "ijklmno", "pqrstuvw", "xyzabcde", "fghijk", "lmnopqr", "stuvwxyz", "abcdefghij", "klmnopqrst", "uvwxyzabcd", "efghijklmn", "opqrstuvwx", "yzabcdefgh", "ijklmnopqr", "stuvwxyzaa", "bcdefghijk", "lmnopqrstuv", "wxyzabcdefgh", "ijklmnopqrst", "uvwxyzabcdef", "ghijklmnopqr", "stuvwxyzzabc", "defghijklmno", "pqrstuvwxyzab", "cdefghijklmn"]}
{"name": "1131_E. String Multiplication", "description": "Input\n\nThe first line contains a single integer n (2 <= n <= 100 000) --- the number of strings, wroted by Denis.\n\nNext n lines contain non-empty strings p_1, p_2, ..., p_n, consisting of lowercase english letters.\n\nIt's guaranteed, that the total length of the strings p_i is at most 100 000, and that's the beauty of the resulting product is at most 10^9.", "testcase": ["2\nab\nba", "4\nabc\nbcd\ncde\ndef", "3\nxyz\nyxz\nzxy", "5\na\nbb\nccc\ndddd\neeeee", "2\nflower\nflow", "6\na\nb\nc\nd\ne\nf", "3\nhello\nworld\nprogram", "7\nquick\nbrown\nfox\njumps\nover\nthe\nlazy", "2\nxy\nyx", "3\naaa\nbbb\nccc", "10\na\nbc\ndef\nghij\nklmno\npqrstu\nvwxyzab\ncdefghij\nklmnopqrs\ntuvwxyz", "8\nqwer\ntyui\nopas\ndfgh\njklz\nxcvb\nmner\nbvcx", "4\nrandom\nstrings\nfor\ntesting", "2\npizza\npasta", "3\nalgorithm\nbinary\nsearch", "5\njava\nscala\nkotlin\ngroovy\nclojure", "2\nprogramming\nlanguages", "6\nsun\nmon\ntue\nwed\nthu\nfri", "3\njanuary\nfebruary\nmarch", "5\nspring\nsummer\nautumn\nwinter\nseason", "2\nmorning\nevening", "4\ntwilight\ndawn\ndusk\nnoon", "3\nbreakfast\nlunch\ndinner", "6\nred\norange\nyellow\ngreen\nblue\nindigo", "7\nviolin\nviola\ncello\nbass\nguitar\nbanjo\nharp", "2\ncat\ndog", "3\nlion\ntiger\npanther", "5\napple\norange\nbanana\ngrape\nmelon", "2\nnorth\nsouth", "3\neast\nwest\ncenter"]}
{"name": "1230_A. Dawid and Bags of Candies", "description": "Input\n\nThe only line contains four integers a_1, a_2, a_3 and a_4 (1 <= a_i <= 100) --- the numbers of candies in each bag.", "testcase": ["1 1 1 1", "2 2 2 2", "3 3 3 3", "4 4 4 4", "5 5 5 5", "6 6 6 6", "7 7 7 7", "8 8 8 8", "9 9 9 9", "10 10 10 10", "11 12 13 14", "15 16 17 18", "19 20 21 22", "23 24 25 26", "27 28 29 30", "31 32 33 34", "35 36 37 38", "39 40 41 42", "43 44 45 46", "47 48 49 50", "51 52 53 54", "55 56 57 58", "59 60 61 62", "63 64 65 66", "67 68 69 70", "71 72 73 74", "75 76 77 78", "79 80 81 82", "83 84 85 86", "87 88 89 90"]}
{"name": "139_D. Digits Permutations", "description": "Input\n\nThe first line contains a positive integer n --- the original number. The number of digits in this number does not exceed 105. The number is written without any leading zeroes.", "testcase": ["1", "12", "123", "1234", "12345", "123456", "1234567", "12345678", "123456789", "987654321", "1234567890", "2345678901", "3456789012", "4567890123", "5678901234", "6789012345", "7890123456", "8901234567", "9012345678", "1122334455", "2233445566", "3344556677", "4455667788", "5566778899", "6677889900", "123123123", "234234234", "345345345", "456456456", "999999999"]}
{"name": "239_A. Two Bags of Potatoes", "description": "Input\n\nThe first line of input contains three integers y, k, n (1 <= y, k, n <= 109; <image> <= 105).", "testcase": ["1 100000 100000", "2 50000 100000", "3 33333 100000", "4 25000 100000", "5 20000 100000", "6 16667 100000", "7 14286 100000", "8 12500 100000", "9 11111 100000", "10 10000 100000", "11 9091 100000", "12 8333 100000", "13 7692 100000", "14 7143 100000", "15 6667 100000", "16 6250 100000", "17 5882 100000", "18 5556 100000", "19 5263 100000", "20 5000 100000", "21 4762 100000", "22 4545 100000", "23 4348 100000", "24 4167 100000", "25 4000 100000", "500000 1000 1000000", "200000 750 500000", "333333 333 666666", "444444 222 888888", "555555 111 999999"]}
{"name": "690_A1. Collective Mindsets (easy)", "description": "Input\n\nThe only line of input contains one integer: N, the number of attendees (1 <= N <= 109).", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "100", "1000", "10000", "100000", "1000000", "10000000", "500000000", "2147483647", "999999999", "543", "8765", "12345", "654321", "987654", "111111111", "222222222", "333333333", "444444444", "555555555", "666666666"]}
{"name": "1076_B. Divisor Subtraction", "description": "Input\n\nThe only line contains a single integer n (2 <= n <= 10^{10}).", "testcase": ["2", "3", "10", "100", "9999999999", "1234567890", "9876543210", "4294967296", "1000000001", "5000000000", "2999999999", "7500000000", "84967295", "2147483648", "4294967295", "6123456789", "8000000000", "9000000001", "3333333333", "4444444444", "5555555555", "6666666666", "7777777777", "8888888888", "9999999998", "2222222222", "1111111111", "11", "1000000000", "1999999999"]}
{"name": "121_C. Lucky Permutation", "description": "Input\n\nThe first line contains two integers n and k (1 <= n, k <= 109) --- the number of elements in the permutation and the lexicographical number of the permutation.", "testcase": ["1 1", "2 1", "2 2", "3 5", "5 10", "5 40", "5 120", "6 400", "6 720", "7 5040", "7 1000", "8 20000", "8 40320", "9 362880", "9 100000", "10 1000000", "10 3628800", "15 1307674368000", "15 500000", "20 100000", "20 2432902008176640000", "25 1000000000", "25 620448401733239439360000", "30 1000000000", "30 265252859812191058636308480000000", "50 1000000000", "50 30414093201713378043612608166064768844377641568960512000000000000", "100 1000000000", "100 93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000", "1000000000 1"]}
{"name": "1305_B. Kuroni and Simple Strings", "description": "Input\n\nThe only line of input contains a string s (1 <= |s| <= 1000) formed by characters '(' and ')', where |s| is the length of s.", "testcase": ["()", "(())", "((()))", "()(())", "(()())", "(())()", "(()(()))", "(((())))", "(()()())", "((())())", "(()(()))", "()()()()", "((()()()))", "(()())(())", "(((())))()", "()((()))", "(())((()))", "((()))(())", "(()())()()", "(()()(()))", "((())()())", "()()(())", "((()))()", "(()()()(()))", "(((()))())", "()(()()())", "(())(())()", "(()())(()())", "(()(()))()()", "()(()())(())"]}
{"name": "136_B. Ternary Logic", "description": "Input\n\nThe first line contains two integers a and c (0 <= a, c <= 109). Both numbers are written in decimal notation.", "testcase": ["0 0", "1 1", "2 2", "100000 100000", "123456789 987654321", "0 109", "109 0", "999999999 999999999", "543210 67890", "111111111 222222222", "333333333 444444444", "555555555 666666666", "777777777 888888888", "999999999 111111111", "234567890 123456789", "345678901 234567890", "456789012 345678901", "567890123 456789012", "678901234 567890123", "789012345 678901234", "890123456 789012345", "901234567 890123456", "123 321", "456 654", "789 987", "147 258", "369 963", "528 825", "639 936", "741 147"]}
{"name": "393_C. Blocked Points", "description": "Input\n\nThe first line contains an integer n (0 <= n <= 4\u00b7107).", "testcase": [0, 1, 2, 3, 4, 5, 123, 456, 789, 1000, 9999, 12345, 20000, 30001, 40000, 77777, 123456, 200000, 300000, 4000000, 5000000, 10000000, 15000000, 20000000, 25000000, 30000000, 35000000, 37000000, 39000000, 40000000]}
{"name": "513_A. Game", "description": "Input\n\nThe first line contains four integers n1, n2, k1, k2. All numbers in the input are from 1 to 50.\n\nThis problem doesn't have subproblems. You will get 3 points for the correct submission.", "testcase": ["9 26 7 13", "1 50 1 50", "12 34 5 6", "3 17 2 9", "19 11 8 10", "25 36 16 20", "49 2 25 25", "40 10 10 20", "22 22 11 11", "8 44 4 22", "34 15 17 7", "50 1 26 24", "41 9 21 3", "2 48 1 47", "13 37 6 18", "5 45 5 9", "27 23 14 8", "6 14 3 7", "20 30 10 15", "11 39 1 13", "32 18 16 9", "7 42 7 21", "28 28 14 14", "10 40 5 20", "21 29 7 14", "14 35 2 17", "4 46 2 23", "33 17 16 8", "15 33 5 16", "18 32 9 16"]}
{"name": "538_B. Quasi Binary", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 106).", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "15", "20", "30", "50", "75", "100", "200", "300", "400", "500", "600", "700", "800", "900", "1000", "10000", "100000", "500000", "999999", "1000000"]}
{"name": "680_D. Bear and Tower of Cubes", "description": "Input\n\nThe only line of the input contains one integer m (1 <= m <= 1015), meaning that Limak wants you to choose X between 1 and m, inclusive.", "testcase": ["1", "2", "15", "100", "999", "1000", "99999", "123456", "999999", "1000000", "1234567", "10000000", "99999999", "123456789", "999999999", "1000000000", "1234567890", "9999999999", "10000000000", "12345678901", "99999999999", "100000000000", "123456789012", "999999999999", "1000000000000", "1234567890123", "9999999999999", "10000000000000", "12345678901234", "1015"]}
{"name": "110_B. Lucky String", "description": "Input\n\nThe single line contains a positive integer n (1 <= n <= 105) --- the length of the sought string.", "testcase": ["1", "2", "3", "4", "5", "10", "20", "30", "40", "50", "60", "70", "80", "90", "100", "200", "300", "400", "500", "600", "700", "800", "900", "1000", "10000", "20000", "30000", "40000", "50000", "105000"]}
{"name": "117_B. Very Interesting Game", "description": "Input\n\nThe first line contains three integers a, b, mod (0 <= a, b <= 109, 1 <= mod <= 107).", "testcase": ["0 0 1", "109 109 10000000", "523456789 123456789 9999999", "999999999 999999999 9999999", "0 1000000000 1000000", "500000000 500000000 500000", "250000000 750000000 100000", "100000000 900000000 10000", "600000000 400000000 20000", "123456789 987654321 345678", "100000000 200000000 300000", "400000000 500000000 600000", "700000000 800000000 700000", "900000000 100000000 800000", "150000000 250000000 150000", "350000000 450000000 250000", "550000000 650000000 350000", "750000000 850000000 450000", "950000000 50000000 550000", "123123123 321321321 123123", "424242424 242424242 424242", "575757575 757575757 575757", "606060606 606060606 606060", "707070707 808080808 707070", "123 456 789", "234 567 890", "345 678 901", "456 789 123", "567 890 234", "678 901 345"]}
{"name": "127_E. E-reader Display", "description": "Input\n\nThe first line contains number n (1 <= n <= 2000).\n\nNext n lines contain n characters each: the description of the picture that needs to be shown. \"0\" represents the white color and \"1\" represents the black color.", "testcase": ["1\n0", "1\n1", "2\n00\n01", "2\n10\n11", "2\n01\n10", "3\n000\n001\n010", "3\n011\n100\n101", "3\n110\n111\n000", "4\n0000\n0001\n0010\n0100", "4\n0110\n1001\n1010\n1100", "4\n1110\n1111\n1001\n0000", "5\n00000\n00001\n00010\n00100\n01000", "5\n01111\n10000\n10111\n11001\n01110", "5\n11111\n11110\n10001\n01111\n00001", "6\n000000\n000001\n000010\n000100\n001000\n010000", "6\n001010\n101010\n001010\n101010\n001010\n101010", "6\n010101\n101010\n010101\n101010\n010101\n101010", "7\n0000000\n0000001\n0000010\n0000100\n0001000\n0010000\n0100000", "7\n0111011\n1010100\n1011101\n1100110\n0111011\n1010100\n1011101", "7\n1111111\n1111110\n1100011\n0111111\n0011000\n0111111\n1111111", "8\n00000000\n00000001\n00000010\n00000100\n00001000\n00010000\n00100000\n01000000", "8\n01110111\n10101001\n10111010\n11001101\n01110110\n10101001\n10111010\n11001101", "8\n11111111\n11111110\n11100111\n01111110\n00111000\n01111110\n11111111\n11111111", "9\n000000000\n000000001\n000000010\n000000100\n000001000\n000010000\n000100000\n001000000\n010000000", "9\n011101110\n101010010\n101110100\n110011011\n011101100\n101010010\n101110100\n110011011\n011101110", "9\n111111111\n111111110\n111001111\n011111110\n001110000\n011111110\n111111111\n111111111\n110000011", "10\n0000000000\n0000000001\n0000000010\n0000000100\n0000001000\n0000010000\n0000100000\n0001000000\n0010000000\n0100000000", "10\n0111011110\n1010100110\n1011101001\n1100110110\n0111011011\n1010100110\n1011101001\n1100110110\n0111011110\n0111011110", "10\n1111111111\n1111111110\n1110011111\n0111111110\n0011100011\n0111111110\n1111111111\n1111111110\n1100000111\n1111111111", "11\n00000000000\n00000000001\n00000000010\n00000000100\n00000001000\n00000010000\n00000100000\n00001000000\n00010000000\n00100000000\n01000000000"]}
{"name": "365_A. Good Number", "description": "Input\n\nThe first line contains integers n and k (1 <= n <= 100, 0 <= k <= 9). The i-th of the following n lines contains integer ai without leading zeroes (1 <= ai <= 109).", "testcase": ["1 0\n1", "2 3\n10\n100", "4 1\n123\n234\n345\n456", "5 2\n22\n33\n44\n55\n66", "3 5\n165\n235\n875", "6 4\n1234\n5678\n91011\n1213\n1415\n1617", "7 6\n987654\n123456\n234567\n345678\n456789\n567890\n678901", "8 7\n9999999\n8888888\n7777777\n6666666\n5555555\n4444444\n3333333\n2222222", "9 8\n11111111\n22222222\n33333333\n44444444\n55555555\n66666666\n77777777\n88888888\n99999999", "10 0\n10\n20\n30\n40\n50\n60\n70\n80\n90\n100", "2 1\n2\n2", "3 2\n12\n23\n34", "4 3\n123\n456\n789\n101", "5 4\n12345\n23456\n34567\n45678\n56789", "6 5\n123456\n654321\n111111\n222222\n333333\n444444", "7 6\n987654\n1234567\n2345678\n3456789\n4567890\n5678901\n6789012", "8 0\n1\n2\n3\n4\n5\n6\n7\n8", "9 1\n21\n43\n65\n87\n9\n10\n12\n14\n16", "10 2\n123\n234\n345\n101112\n1314\n151617\n1819\n202\n212\n222", "2 7\n8765432\n1234567", "3 4\n1001\n2002\n3003", "4 0\n1\n2\n3\n4", "5 3\n123\n456\n789\n1011\n1213", "6 1\n10\n11\n12\n13\n14\n15", "7 9\n999999999\n888888888\n777777777\n666666666\n555555555\n444444444\n333333333", "8 2\n12\n23\n34\n45\n56\n67\n78\n89", "9 0\n9\n8\n7\n6\n5\n4\n3\n2\n1", "10 5\n100001\n200002\n300003\n400004\n500005\n600006\n700007\n800008\n900009\n1000010", "3 3\n333\n333\n333", "2 8\n88888888\n99999999"]}
{"name": "625_A. Guest From the Past", "description": "Input\n\nFirst line of the input contains a single integer n (1 <= n <= 1018) --- the number of rubles Kolya has at the beginning.\n\nThen follow three lines containing integers a, b and c (1 <= a <= 1018, 1 <= c < b <= 1018) --- the cost of one plastic liter bottle, the cost of one glass liter bottle and the money one can get back by returning an empty glass bottle, respectively.", "testcase": ["1\n1\n2\n1", "2\n1\n1000000000000\n999999999999", "15\n5\n10\n4", "99999999999\n99999999998\n999999999999\n99999999997", "1000000000000000000\n500000000000000000\n999999999999999999\n499999999999999999", "3\n3\n4\n2", "123456789012345678\n987654321098765432\n987654321098765431\n123456789012345677", "1018\n6\n7\n3", "500\n100\n200\n99", "100\n1\n101\n1", "250\n5\n50\n4", "1000000000000000000\n1\n2\n1", "888888888888888888\n777777777777777777\n888888888888888887\n666666666666666666", "111111111111111111\n333333333333333333\n444444444444444444\n222222222222222222", "20\n10\n15\n9", "10\n1\n3\n2", "1000000000000000000\n999999999999999999\n1000000000000000000\n999999999999999998", "555555555555555555\n555555555555555554\n555555555555555553\n555555555555555552", "777777777777777777\n888888888888888888\n888888888888888887\n777777777777777776", "2\n2\n3\n1", "100000000000000001\n100000000000000000\n100000000000000002\n99999999999999999", "100\n3\n5\n2", "17\n4\n6\n3", "250000000000000000\n100000000000000000\n150000000000000000\n50000000000000000", "504\n100\n150\n50", "999999999999999\n1000000000000000\n1000000000000001\n999999999999998", "790\n100\n110\n90", "199999999999999999\n1\n1000000000000000000\n1", "521\n13\n60\n12", "1000000000000000000\n999999999999999999\n1000000000000000000\n999999999999999998"]}
{"name": "12_B. Correct Solution?", "description": "Input\n\nThe first line contains one integer n (0 <= n <= 109) without leading zeroes. The second lines contains one integer m (0 <= m <= 109) --- Bob's answer, possibly with leading zeroes.", "testcase": [{"n": 0, "m": "000000000"}, {"n": 123456789, "m": "0123456789"}, {"n": 308, "m": "00000308"}, {"n": 999999999, "m": "999999999"}, {"n": 123, "m": "0000123"}, {"n": 5, "m": "0005"}, {"n": 987654321, "m": "0987654321"}, {"n": 1000000000, "m": "1000000000"}, {"n": 12, "m": "0012"}, {"n": 4000, "m": "004000"}, {"n": 350, "m": "0000350"}, {"n": 72, "m": "72"}, {"n": 500500500, "m": "500500500"}, {"n": 80, "m": "80"}, {"n": 246809753, "m": "0246809753"}, {"n": 1, "m": "000000001"}, {"n": 25, "m": "000000025"}, {"n": 999080007, "m": "999080007"}, {"n": 400000000, "m": "400000000"}, {"n": 123001230, "m": "0123001230"}, {"n": 623, "m": "00000623"}, {"n": 900000000, "m": "900000000"}, {"n": 76453, "m": "0076453"}, {"n": 234567890, "m": "234567890"}, {"n": 87654321, "m": "087654321"}, {"n": 210, "m": "0210"}, {"n": 10000001, "m": "10000001"}, {"n": 2019, "m": "2019"}, {"n": 64, "m": "64"}, {"n": 333333333, "m": "333333333"}]}
{"name": "221_C. Little Elephant and Problem", "description": "Input\n\nThe first line contains a single integer n (2 <= n <= 105) --- the size of array a. The next line contains n positive integers, separated by single spaces and not exceeding 109, --- array a.\n\nNote that the elements of the array are not necessarily distinct numbers.", "testcase": ["2\n1 2", "3\n2 5 3", "2\n999999999 1000000000", "4\n10 20 20 30", "5\n1 2 3 4 5", "6\n5 5 5 5 5 5", "7\n100000000 100000000 100000000 100000000 100000000 100000000 100000000", "8\n1 1 2 3 5 8 13 21", "9\n9 8 7 6 5 4 3 2 1", "10\n10 9 8 7 6 5 4 3 2 1", "11\n21 34 55 89 144 233 377 610 987 1597 2584", "12\n257 514 771 1028 1285 1542 1799 2056 2313 2570 2827 3084", "13\n2 3 5 7 11 13 17 19 23 29 31 37 41", "14\n43 47 53 59 61 67 71 73 79 83 89 97 101 103", "15\n107 109 113 127 131 137 139 149 151 157 163 167 173 179 181", "16\n191 193 197 199 211 223 227 229 233 239 241 251 257 263 269 271", "17\n277 281 283 293 307 311 313 317 331 337 347 353 359 367 373 379 383", "18\n389 397 401 409 419 421 431 433 439 443 449 457 461 463 467 479 487 491", "19\n499 503 509 521 523 541 547 557 563 569 571 577 587 593 599 601 607 613 617", "20\n619 631 641 643 647 653 659 661 673 677 683 691 701 709 719 727 733 739 743 751", "21\n757 761 769 773 787 797 809 811 821 823 827 829 839 853 857 859 863 877 881 883 887", "22\n907 911 919 929 937 941 947 953 967 971 977 983 991 997 1009 1013 1019 1021 1031 1033 1039 1049", "23\n1051 1061 1063 1069 1087 1091 1093 1097 1103 1109 1117 1123 1129 1151 1153 1163 1171 1181 1187 1193 1201 1213 1217", "24\n1223 1229 1231 1237 1249 1259 1277 1279 1283 1289 1291 1297 1301 1303 1307 1319 1321 1327 1361 1367 1373 1381 1399 1409", "25\n1423 1427 1429 1433 1439 1447 1451 1453 1459 1471 1481 1483 1487 1489 1493 1499 1511 1523 1531 1543 1549 1553 1559 1567 1571", "26\n1579 1583 1597 1601 1607 1609 1613 1619 1621 1627 1637 1657 1663 1667 1669 1679 1693 1697 1699 1709 1721 1733 1741 1747 1753 1759", "27\n1777 1783 1787 1789 1801 1811 1823 1831 1847 1861 1867 1871 1873 1877 1879 1889 1901 1907 1913 1931 1933 1949 1951 1973 1979 1987 1993", "28\n1997 1999 2003 2011 2017 2027 2029 2039 2053 2063 2069 2081 2083 2087 2089 2099 2111 2113 2129 2131 2137 2141 2143 2153 2161 2179 2203 2207 2213", "29\n2221 2237 2239 2243 2251 2267 2269 2273 2281 2287 2293 2297 2309 2311 2333 2339 2341 2347 2351 2357 2371 2377 2381 2383 2389 2393 2399 2407 2411 2417", "30\n2437 2441 2447 2459 2467 2473 2477 2503 2521 2531 2539 2543 2549 2551 2557 2579 2591 2593 2609 2617 2621 2633 2647 2657 2659 2663 2671 2707 2711 2713"]}
{"name": "p02174 Power Subsequences", "description": "Input\n\nThe input is given in the following format.\n\n\n$ N $\n$ x_1 $ $ \\ ldots $ $ x_N $\n\n\nThe first line is given the length $ N $. In the second row, the elements of the sequence $ X $ are given, separated by blanks.", "testcase": ["3\n1 2 3", "5\n10 20 30 40 50", "4\n5 15 25 35", "2\n100 200", "6\n-1 -2 -3 -4 -5 -6", "1\n42", "7\n3 1 4 1 5 9 2", "8\n0 0 0 0 0 0 0 0", "10\n1 1 2 3 5 8 13 21 34 55", "9\n-10 10 -10 10 -10 10 -10 10 -10", "6\n123 456 789 1011 1213 1415", "7\n2 4 6 8 10 12 14", "3\n99 999 9999", "4\n-7 -8 -9 -10", "5\n0 -1 2 -3 4", "8\n8 7 6 5 4 3 2 1", "11\n0 1 0 1 0 1 0 1 0 1 0", "3\n500 1000 1500", "6\n-100 -200 -300 -400 -500 -600", "7\n1 3 6 10 15 21 28", "5\n-5 10 -15 20 -25", "8\n21 22 23 24 25 26 27 28", "10\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1", "3\n777 888 999", "6\n2 -4 6 -8 10 -12", "4\n50 100 150 200", "2\n321 654", "5\n10 9 8 7 6", "10\n1 4 9 16 25 36 49 64 81 100", "7\n-3 6 -9 12 -15 18 -21"]}
{"name": "1159_A. A pile of stones", "description": "Input\n\nThe first line contains one positive integer n --- the number of operations, that have been made by Vasya (1 <= n <= 100).\n\nThe next line contains the string s, consisting of n symbols, equal to \"-\" (without quotes) or \"+\" (without quotes). If Vasya took the stone on i-th operation, s_i is equal to \"-\" (without quotes), if added, s_i is equal to \"+\" (without quotes).", "testcase": [{"n": 1, "s": "-"}, {"n": 1, "s": "+"}, {"n": 2, "s": "--"}, {"n": 2, "s": "++"}, {"n": 2, "s": "-+"}, {"n": 2, "s": "+-"}, {"n": 3, "s": "---"}, {"n": 3, "s": "+++"}, {"n": 3, "s": "+-+"}, {"n": 3, "s": "-+-"}, {"n": 4, "s": "----"}, {"n": 4, "s": "++++"}, {"n": 4, "s": "--++"}, {"n": 4, "s": "++--"}, {"n": 4, "s": "-++-"}, {"n": 5, "s": "-----"}, {"n": 5, "s": "+++++"}, {"n": 5, "s": "-+-+-"}, {"n": 5, "s": "+-+-+"}, {"n": 5, "s": "+--+--"}, {"n": 6, "s": "------"}, {"n": 6, "s": "++++++"}, {"n": 6, "s": "-+-+-+"}, {"n": 6, "s": "+-+-+-"}, {"n": 6, "s": "--++--"}, {"n": 7, "s": "-------"}, {"n": 7, "s": "+++++++"}, {"n": 7, "s": "-+-+-+-"}, {"n": 7, "s": "+-+-+-+"}, {"n": 8, "s": "--------"}, {"n": 8, "s": "++++++++"}, {"n": 8, "s": "-+-+-+-+"}, {"n": 8, "s": "+-+-+-+-"}, {"n": 9, "s": "---------"}, {"n": 9, "s": "+++++++++"}, {"n": 9, "s": "-+-+-+-+-"}, {"n": 9, "s": "+-+-+-+-+-"}, {"n": 10, "s": "----------"}, {"n": 10, "s": "++++++++++"}, {"n": 10, "s": "-+-+-+-+-+-"}]}
{"name": "1181_A. Chunga-Changa", "description": "Input\n\nThe first line contains three integers x, y and z (0 <= x, y <= 10^{18}, 1 <= z <= 10^{18}) --- the number of chizhics Sasha has, the number of chizhics Masha has and the price of a coconut.", "testcase": ["0 0 1", "1000000000000000000 1000000000000000000 2", "500000000000000000 500000000000000000 999999999999999999", "999999999999999999 1 10", "123456789012345678 987654321098765432 10000000000000000", "1 2 3", "100 200 300", "333333333333333333 444444444444444444 555555555555555555", "10 20 30", "998 999 1000", "0 10 5", "435 345 789", "675 9000 6000", "1 0 1", "250000000000000000 750000000000000000 500000000000000000", "987654321 123456789 98765432", "100000000000000000 50000000000000000 60000000000000000", "745 839 213", "710 435 20", "1000 2000 262144", "2 4 8", "1000000000000000 99999999999999 999999999999999", "0 1000000000000000000 999999999999999999", "10 10 10", "330 440 550", "222 333 444", "888 999 1001", "100000000000001 200000000000001 300000000000001", "700 800 900", "175 350 525"]}
{"name": "125_A. Measuring Lengths in Baden", "description": "Input\n\nThe only line contains an integer n (1 <= n <= 10000).", "testcase": ["1", "2", "3", "4", "5", "40", "75", "89", "123", "200", "225", "333", "457", "598", "678", "789", "891", "999", "1001", "1234", "1999", "2500", "3000", "3456", "4000", "4567", "5000", "6000", "7000", "9999"]}
{"name": "40_C. Berland Square", "description": "Input\n\nThe first line contains integers N, x, M, y. (1 <= N, M <= 100000, - 100000 <= x, y <= 100000, x != y).", "testcase": ["1 2 1 3", "100000 -99999 100000 99999", "12345 -54321 67890 12345", "50000 0 50000 -1", "99999 34567 88888 -34568", "23456 11111 76543 -11112", "100001 50000 100001 49999", "2 100000 2 -100000", "35 -35 36 36", "90500 -45000 90500 45001", "70000 -1234 60000 1235", "32500 -789 32000 -788", "80000 15999 85000 -15999", "3 -333 5 333", "40000 20000 30000 -20001", "8000 4444 9000 -4445", "2048 -1024 4096 1025", "16384 8192 16383 -8193", "32767 -16383 32766 16384", "25000 12500 25001 -12501", "60000 -30000 59999 30001", "1024 512 512 -513", "8192 -4096 4096 4097", "16384 999 -16384 -999", "32768 16384 32769 -16385", "51000 25500 50999 -25501", "44444 -22222 44445 22223", "37000 -18500 37001 18501", "2500 1250 2499 -1251", "48000 -24000 47999 24001"]}
{"name": "742_A. Arpa\u2019s hard exam and Mehrdad\u2019s naive cheat", "description": "Input\n\nThe single line of input contains one integer n (0 <= n <= 109).", "testcase": [0, 1, 2, 123, 4567, 89012, 234567, 3456789, 12345678, 999999999, 875349502, 102938475, 123012930, 999000000, 657483920, 294857291, 987654321, 100000000, 250000000, 500000000, 750000000, 848372999, 987239846, 729461837, 666666666, 111111111, 222222222, 333333333, 444444444, 555555555]}
{"name": "87_C. Interesting Game", "description": "Input\n\nThe single line contains a single integer n (1 <= n <= 105).", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "100", "1000", "10000", "100000", "54321"]}
{"name": "1191_A. Tokitsukaze and Enhancement", "description": "Input\n\nThe only line contains a single integer x (30 <= x <= 100) --- the value Tokitsukaze's HP currently.", "testcase": ["30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "60"]}
{"name": "1251_C. Minimize The Integer", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 10^4) --- the number of test cases in the input.\n\nThe only line of each test case contains the integer a, its length n is between 1 and 3 * 10^5, inclusive.\n\nIt is guaranteed that the sum of all values n does not exceed 3 * 10^5.", "testcase": ["1\n3", "1\n9", "1\n27", "1\n81", "1\n243", "1\n729", "1\n2187", "1\n6561", "1\n19683", "1\n59049", "1\n177147", "1\n531441", "1\n1594323", "1\n4782969", "1\n14348907", "1\n11", "1\n111", "1\n1111", "1\n11111", "1\n111111", "1\n121", "1\n123", "1\n1234", "1\n12345", "1\n123456", "1\n1234567", "1\n22", "1\n222", "1\n2222", "1\n22222"]}
{"name": "287_B. Pipeline", "description": "Input\n\nThe first line contains two space-separated integers n and k (1 <= n <= 1018, 2 <= k <= 109).\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.", "testcase": ["1 2", "5 10", "100 2000", "1000 999", "999999999 100000000", "987654321 123456789", "1000000000 200000000", "2147483647 214748364", "4294967295 42949672", "1234567890 98765432", "19 20", "99 100", "1018 103", "111111111111 22222222", "123456789012 34567890", "1000000000018 29999999", "2000000000001 90000000", "500500500500 505050505", "750000000000 75000000", "987654321098 123456789", "2147483647000 214748364", "4294967295000 429496729", "1844674407370 9551615", "1922337203685 54775807", "10 1000000000", "72036854775807 100000009", "1000000000000 200000000", "10000000000000 300000000", "900000000000000 400000000", "101812345678912 987654321"]}
{"name": "733_A. Grasshopper And the String", "description": "Input\n\nThe first line contains non-empty string consisting of capital English letters. It is guaranteed that the length of the string does not exceed 100.", "testcase": ["A", "B", "HELLO", "WORLD", "ABCDEFGHIJ", "KLMNOPQRST", "UVWXYZ", "RANDOMTEXT", "JUSTLETTERS", "QWERTYUIOP", "SOMEINPUT", "CAPITALS", "NONEMPTY", "MAXLENGTHTESTAABBCCDDEE", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "STRINGOFLENGTHFIFTYEEEEEEEEF", "XXYYZZ", "THISISTHIRTYCHARACTERSLONGXX", "QWERTYASDFGZXCVB", "HAPPYCODING", "ALPHABETICAL", "STRINGCASE", "TESTINGSTRING", "HELLOWORLDAGAIN", "MAXIMUMCHARSAAABBBCCCDDEEFF", "STRI", "FIVELETTERS", "LETTERSONLY", "NOMORETHANAHUNDRED", "ABCDEFGHIJKLMNOPQRSTUVWXYZZZZZZ"]}
{"name": "1091_C. New Year and the Sphere Transmission", "description": "Input\n\nThe only line consists of a single integer n (2 <= n <= 10^9) --- the number of people playing with the ball.", "testcase": ["2", "3", "4", "10", "100", "999", "1000", "10000", "50000", "99999", "100000", "250000", "500000", "750000", "999999", "1000000", "2000000", "3000000", "4000000", "5000000", "6000000", "7000000", "8000000", "9000000", "10000000", "20000000", "30000000", "50000000", "75000000", "100000000"]}
{"name": "1180_A. Alex and a Rhombus", "description": "Input\n\nThe first and only input line contains integer n (1 <= n <= 100) --- order of a rhombus whose numbers of cells should be computed.", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30"]}
{"name": "1239_A. Ivan the Fool and the Probability Theory", "description": "Input\n\nThe only line contains two integers n and m (1 <= n, m <= 100 000), the number of rows and the number of columns of the field.", "testcase": ["1 1", "2 2", "3 3", "4 4", "5 5", "6 7", "8 9", "10 10", "11 14", "12 23", "15 30", "16 50", "17 99", "18 100", "19 60", "20 70", "21 80", "22 90", "23 100", "24 101", "25 200", "30 300", "35 500", "40 600", "45 700", "50 800", "55 900", "60 1000", "65 1111", "70 10000"]}
{"name": "199_C. About Bacteria", "description": "Input\n\nThe first line contains four space-separated integers k, b, n and t (1 <= k, b, n, t <= 106) --- the parameters of bacterial growth, the time Qwerty needed to grow z bacteria in the first experiment and the initial number of bacteria in the second experiment, correspondingly.", "testcase": ["1 1 1 1", "2 3 4 5", "10 20 30 40", "1000000 500000 250000 125000", "123456 654321 111111 222222", "98765 87654 76543 65432", "314159 271828 161803 141421", "12345 23456 34567 45678", "999999 888888 777777 666666", "142857 285714 428571 571428", "101010 202020 303030 404040", "13579 24680 12345 67890", "222222 444444 666666 888888", "102030 304050 506070 708090", "111111 222222 333333 444444", "99999 88888 77777 66666", "43210 54321 65432 76543", "100000 200000 300000 400000", "234567 123456 345678 456789", "11111 22222 33333 44444", "987654 876543 765432 654321", "31415 92653 58979 32384", "54321 12345 67890 13579", "123321 456654 789987 101101", "333 444 555 666", "777777 888888 999999 1000000", "10101 20202 30303 40404", "2020 3030 4040 5050", "676767 565656 454545 343434", "123 321 123 321"]}
{"name": "342_C. Cupboard and Balloons", "description": "Input\n\nThe single line contains two integers r, h (1 <= r, h <= 107).", "testcase": ["1 1", "2 5", "3 10", "4 15", "5 20", "6 25", "7 30", "8 35", "9 40", "10 45", "11 50", "12 55", "13 60", "14 65", "15 70", "16 75", "17 80", "18 85", "19 90", "20 95", "100 1000", "200 2000", "300 3000", "400 4000", "500 5000", "600 6000", "700 7000", "800 8000", "900 9000", "10000 100000"]}
{"name": "675_A. Infinite Sequence", "description": "Input\n\nThe first line of the input contain three integers a, b and c ( - 109 <= a, b, c <= 109) --- the first element of the sequence, Vasya's favorite number and the difference between any two neighbouring elements of the sequence, respectively.", "testcase": ["-1000000000 0 1", "0 999999999 999999999", "1 -1 0", "12345 67890 -123", "2147483647 -2147483648 1", "1000000000 1000000000 -1000000000", "-999999999 -999999999 0", "-500000000 500000000 -1000000000", "987654321 -123456789 0", "0 0 0", "-100000000 200000000 300000000", "900000000 -800000000 1000000", "-444444444 0 444444444", "1000000 -1000000 -1", "500000000 123456789 -987654321", "-9 0 3", "42 42 42", "-1000000000 1000000000 2000000000", "100 1 -100", "10 -10 20", "111111111 222222222 333333333", "999999999 -999999999 1", "-123456789 987654321 -1000000000", "500000000 500000000 0", "2147483647 -2147483648 10", "-2147483648 2147483647 1", "0 -2147483648 2147483647", "-1 1 -2", "0 2147483647 -2147483647", "-999999999 0 999999999"]}
{"name": "9_A. Die Roll", "description": "Input\n\nThe only line of the input file contains two natural numbers Y and W --- the results of Yakko's and Wakko's die rolls.", "testcase": ["4 3", "6 2", "1 1", "5 5", "2 4", "3 6", "6 6", "1 2", "3 3", "4 2", "5 3", "2 5", "4 4", "3 1", "1 6", "2 1", "5 1", "1 3", "6 1", "2 6", "5 4", "4 5", "3 5", "5 2", "2 3", "6 3", "3 2", "2 2", "6 5", "4 1"]}
{"name": "626_C. Block Towers", "description": "Input\n\nThe first line of the input contains two space-separated integers n and m (0 <= n, m <= 1 000 000, n + m > 0) --- the number of students using two-block pieces and the number of students using three-block pieces, respectively.", "testcase": ["0 1", "1 0", "2 3", "25 30", "250 300", "300 450", "600 600", "999999 1", "500000 500000", "1 999999", "234567 654321", "123456 654321", "0 10", "10 0", "100 100", "999 999", "999998 2", "2 999998", "333333 333333", "1 1", "20 30", "40 50", "60 70", "80 90", "1000 2000", "2000 1000", "765432 234567", "876543 123456", "987654 321", "111111 888889"]}
{"name": "87_A. Trains", "description": "Input\n\nThe first line contains two integers a and b (a != b, 1 <= a, b <= 106).", "testcase": ["1 2", "1000000 999999", "2 3", "3 4", "500000 600000", "100001 100002", "60000 70000", "800 900", "234567 234568", "987654 987655", "111111 222222", "333333 444444", "555555 666666", "777777 888888", "123456 234567", "345678 456789", "98765 98766", "87654 87655", "76543 76544", "65432 65433", "54321 54322", "43210 43211", "32123 32124", "214365 214366", "135790 135791", "246801 246802", "908070 908071", "807060 807061", "706050 706051", "605040 605041"]}
{"name": "1008_A. Romaji", "description": "Input\n\nThe first line of the input contains the string s consisting of |s| (1<= |s|<= 100) lowercase Latin letters.", "testcase": ["a", "ab", "abc", "abcd", "abcde", "abcdef", "abcdefg", "abcdefgh", "abcdefghi", "abcdefghij", "abcdefghijk", "abcdefghijkl", "abcdefghijklm", "abcdefghijklmn", "abcdefghijklmno", "abcdefghijklmnop", "abcdefghijklmnopq", "abcdefghijklmnopqr", "abcdefghijklmnopqrs", "abcdefghijklmnopqrst", "abcdefghijklmnopqrstu", "abcdefghijklmnopqrstuv", "abcdefghijklmnopqrstuvw", "abcdefghijklmnopqrstuvwx", "abcdefghijklmnopqrstuvwxy", "abcdefghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyza", "abcdefghijklmnopqrstuvwxyzaa", "abcdefghijklmnopqrstuvwxyzaaa", "abcdefghijklmnopqrstuvwxyzaaaa"]}
{"name": "1480_A. Yet Another String Game", "description": "Input\n\nEach test contains multiple test cases. The first line contains t (1 <= t <= 1000) --- the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains a single string s (1 <= |s| <= 50) consisting of lowercase English letters.", "testcase": ["3\nabc\na\nxyz", "2\npuzzle\njava", "4\napple\nbanana\ncherry\ndate", "1\nprogramming", "5\none\ntwo\nthree\nfour\nfive", "6\nsample\ntest\ncases\nto\ngenerate\noutput", "7\nhorse\ncow\ndog\ncat\nmouse\nrat\nbat", "8\neight\ntestcases\nare\nbeing\nwritten\ndown\nright\nnow", "9\nthis\nis\na\nset\nof\nnine\nseparate\ntest\ncases", "10\nten\ntest\ncases\nwill\nbe\nprovided\nhere\neach\ndifferent\nfrom", "2\nanother\nset", "11\neleven\nnew\ncases\nto\nchallenge\nthe\nsystem\neach\nmore\nunique\nthan", "3\nthe\nlast\none", "1\nsingular", "4\nquad\nset\nof\ncases", "12\ntwelve\ncases\nhere\na\nwhole\ndirty\ndozen\nto\ncompute\nand\nprocess\nfor\ntesting", "3\ntriple\nthreat\nchallenge", "13\nlucky\nnumber\nthirteen\ncases\nstart\nnow\ngiving\nmore\nexamples\nthan\nbefore\nto\nensure\naccuracy", "5\nhigh\nfive\ncase\nscenario\nunfolds", "14\ngoing\npast\ntwelve\nwe\nreach\nfourteen\ncases\nto\nprove\nthe\npoint\nof\nvalidity\nand\nversatility", "2\nshort\nsweet", "15\nmidway\npoint\nof\nthirty\ncases\nto\naccumulate\nand\nsubmit\nfor\nthis\nexample\nsession", "7\nseven\nstars\nalign\nfor\nthis\ntest\nsuite", "16\nnot\nstopping\nat\nfifteen\nwe\ncontinue\nwith\nsixteen\ntough\ncases\nfor\nexamination", "6\nmix\nand\nmatch\nthese\nsix\nexamples", "17\nseventeen\nstrides\nahead\nin\ntest\ncase\nwriting\nto\nshowcase\nmany\nmore\ncombinations", "4\ntetra\ncase\nbundle\nincoming", "18\neighteen\ncases\naltogether\nnow\nand\nstill\nmaintaining\nthe\nquality\nof\neach\ninput", "3\nabc\ndef\nghi", "19\nnineteen\ncases\nare\na\nlot\nbut\nwe\nstrive\nfor\nexcellence\nin\ntest\ncase\ndesign", "5\na\nbb\nccc\ndddd\neeeee"]}
{"name": "1506_G. Maximize the Remaining String", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 10^4). Then t test cases follow.\n\nEach test case is characterized by a string s, consisting of lowercase Latin letters (1 <= |s| <= 2 * 10^5).\n\nIt is guaranteed that the sum of the lengths of the strings in all test cases does not exceed 2 * 10^5.", "testcase": ["3", "abc", "defghij", "k", "2", "xy", "mnopqr", "4", "a", "bc", "def", "ghijk", "1", "zyxw", "3", "vuts", "rqponm", "lkj", "1", "abcd", "5", "e", "fg", "hij", "klmno", "pqrstuv", "2", "wxyz", "nopqrs", "3", "tu", "vwxyz", "abcdefg", "4", "hello", "world", "programming", "challenge", "6", "one", "two", "three", "four", "five", "sixseven"]}
{"name": "161_C. Abracadabra", "description": "Input\n\nThe input consists of a single line containing four integers l1, r1, l2, r2 (1 <= li <= ri <= 109, i = 1, 2). The numbers are separated by single spaces. li and ri give the indices of the first and the last characters of the i-th chosen substring, correspondingly (i = 1, 2). The characters of string abracadabra are numbered starting from 1.", "testcase": ["1 5 6 10", "2 4 7 11", "1 3 2 6", "2 7 8 10", "1 9 3 5", "4 8 1 3", "2 6 5 9", "1 1 2 2", "2 2 3 3", "4 4 5 5", "6 6 7 7", "8 8 9 9", "10 10 11 11", "1 11 1 11", "1 7 5 11", "3 8 1 6", "1 4 4 7", "8 11 2 5", "1 10 2 9", "3 5 5 7", "6 9 7 11", "2 3 4 5", "5 6 6 7", "7 8 8 9", "9 10 10 11", "1 2 3 4", "2 5 6 9", "3 6 7 10", "4 7 8 11", "1 11 1 6"]}
{"name": "204_A. Little Elephant and Interval", "description": "Input\n\nThe single line contains a pair of integers l and r (1 <= l <= r <= 1018) --- the boundaries of the interval.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use cin, cout streams or the %I64d specifier.", "testcase": ["1 100", "2 1000", "3 10000", "100 100000", "1000 1000000", "10000 10000000", "100000 100000000", "1000000 1000000000", "9999999999999999 10000000000000000", "500 1500", "600 3600", "700 4900", "800 6400", "900 8100", "1000 10000", "1100 12100", "1200 14400", "1300 16900", "1400 19600", "1500 22500", "123456789 987654321", "1000000000 2000000000", "100000 999999", "12345 67890", "987 6543", "1024 4096", "2048 8192", "4096 16384", "1 1018", "111111111 999999999"]}
{"name": "680_A. Bear and Five Cards", "description": "Input\n\nThe only line of the input contains five integers t1, t2, t3, t4 and t5 (1 <= ti <= 100) --- numbers written on cards.", "testcase": ["1 1 1 1 1", "100 100 100 100 100", "50 23 87 16 42", "2 17 3 89 45", "14 75 38 59 97", "20 20 20 20 21", "33 67 12 46 55", "81 19 35 100 26", "62 73 88 14 53", "10 10 10 10 11", "22 33 44 55 66", "77 88 99 11 22", "5 7 3 9 2", "48 48 47 47 46", "99 2 23 18 39", "1 100 1 100 1", "50 50 50 50 50", "71 83 92 14 36", "22 31 44 56 78", "3 6 9 12 15", "67 34 17 85 43", "95 95 95 94 94", "7 14 21 28 35", "29 58 29 58 29", "83 83 83 83 84", "39 78 39 78 39", "6 12 18 24 30", "13 26 39 52 65", "42 84 21 63 105", "9 18 27 36 45"]}
{"name": "1037_A. Packets", "description": "Input\n\nThe only line contains a single integer n (1 <= n <= 10^9) --- the number of coins you have.", "testcase": ["1", "2", "3", "4", "5", "10", "100", "999", "1000", "10000", "123456", "999999", "1000000", "10000000", "12345678", "500000000", "999999999", "54321", "800000000", "987654321", "314159265", "271828182", "141421356", "161803399", "212345678", "564738291", "111111111", "222222222", "333333333", "444444444"]}
{"name": "124_C. Prime Permutation", "description": "Input\n\nThe only line contains the initial string s, consisting of small Latin letters (1 <= |s| <= 1000).", "testcase": ["a", "bc", "def", "ghij", "klmno", "pqrstu", "vwxyzab", "cdefghij", "jklmnopqr", "stuvwxyzab", "abcdefghij", "klmnopqrstu", "vwxyzabcdefg", "hijklmnopqrst", "uvwxyzabcdefg", "hijklmnopqrstu", "vwxyzabcdefghij", "klmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyz", "bcdefghijklmnopqrstuvwxyza", "cdefghijklmnopqrstuvwxyzab", "defghijklmnopqrstuvwxyzabc", "efghijklmnopqrstuvwxyzabcd", "fghijklmnopqrstuvwxyzabcde", "ghijklmnopqrstuvwxyzabcdef", "hijklmnopqrstuvwxyzabcdefg", "ijklmnopqrstuvwxyzabcdefgh", "jklmnopqrstuvwxyzabcdefghi", "klmnopqrstuvwxyzabcdefghij", "lmnopqrstuvwxyzabcdefghijk"]}
{"name": "1490_C. Sum of Cubes", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 100) --- the number of test cases. Then t test cases follow.\n\nEach test case contains one integer x (1 <= x <= 10^{12}).\n\nPlease note, that the input for some test cases won't fit into 32-bit integer type, so you should use at least 64-bit integer type in your programming language.", "testcase": ["1", "2", "3", "10", "100", "1000", "999999", "1000000000", "4294967296", "10000000000", "100000000000", "123456789012", "400000000000", "512345678901", "611111111111", "720000000002", "812345678911", "999999999999", "1000000000000", "888888888888", "777777777777", "666666666666", "555555555555", "444444444444", "333333333333", "222222222222", "999999999991", "909090909090", "808080808080", "707070707070"]}
{"name": "571_A. Lengthening Sticks", "description": "Input\n\nThe single line contains 4 integers a, b, c, l (1 <= a, b, c <= 3\u00b7105, 0 <= l <= 3\u00b7105).", "testcase": ["1 1 1 0", "2 3 4 5", "123 234 345 100", "300000 299999 299998 1", "12345 67890 111213 22222", "5 7 8 10", "150000 150001 150002 200000", "300 400 500 600", "1000 2000 3000 4000", "3 2 1 0", "29999 24999 21999 27000", "98765 87654 76543 11223", "2222 3333 4444 5555", "161718 181716 171615 1920", "250000 251000 252000 150", "102030 203040 304050 506070", "16325 16326 16324 7", "123456 234567 345678 2", "150000 100000 50000 200000", "90000 120000 150000 180000", "173 274 375 109", "256 512 1024 10000", "314159 271828 161803 0", "299999 300000 299998 20", "253 197 229 59", "1234 1337 666 222", "11000 22000 33000 250", "70000 80000 90000 100000", "16384 32768 65536 128", "276 525 18 700"]}
{"name": "709_D. Recover the String", "description": "Input\n\nThe only line of the input contains four non-negative integers a00, a01, a10 and a11. Each of them doesn't exceed 109.", "testcase": ["0 0 0 0", "1 2 3 4", "4 3 2 1", "100000000 99999999 99999998 99999997", "7654321 1234567 8901234 5678901", "1 0 0 1", "0 1 1 0", "100000000 200000000 300000000 400000000", "123 321 456 654", "500000000 500000000 500000000 500000000", "987654321 123456789 987654321 123456789", "98765432 23456789 87654321 56789012", "99999999 88888888 77777777 66666666", "0 999999999 999999999 0", "100000000 0 0 100000000", "55555555 44444444 33333333 22222222", "111111111 222222222 333333333 444444444", "9999999 8888888 7777777 6666666", "12345678 87654321 12345678 87654321", "10000000 20000000 30000000 40000000", "44444444 55555555 66666666 77777777", "999999990 999999991 999999992 999999993", "0 123456789 987654321 0", "250000000 500000000 750000000 1000000000", "222222222 333333333 444444444 555555555", "1 1 1 1", "10 20 30 40", "300000000 600000000 900000000 1200000000", "1 1000000000 500000000 999999999", "400000000 200000000 100000000 300000000"]}
{"name": "867_C. Ordering Pizza", "description": "Input\n\nThe first line of input will contain integers N and S (1 <= N <= 105, 1 <= S <= 105), the number of contestants and the number of slices per pizza, respectively. N lines follow.\n\nThe i-th such line contains integers si, ai, and bi (1 <= si <= 105, 1 <= ai <= 105, 1 <= bi <= 105), the number of slices the i-th contestant will eat, the happiness they will gain from each type 1 slice they eat, and the happiness they will gain from each type 2 slice they eat, respectively.", "testcase": ["2 8\n4 3 2\n5 4 3", "3 5\n3 2 1\n2 5 4\n3 3 3", "5 10\n1 10 5\n2 6 6\n3 7 8\n1 9 3\n4 2 2", "1 50\n25 35 40", "4 8\n6 1 2\n7 3 4\n8 5 6\n5 7 8", "10 3\n1 100000 99999\n2 50000 40000\n3 10000 20000\n3 150000 140000\n2 70000 50000\n1 30000 20000\n1 80000 90000\n2 20000 30000\n3 60000 50000\n2 40000 60000", "6 15\n5 10 20\n10 20 10\n15 5 5\n10 30 20\n8 25 30\n2 40 50", "8 7\n3 7 8\n2 9 6\n1 10 11\n4 5 4\n5 8 7\n6 2 3\n4 12 9\n3 6 5", "7 20\n10 15 10\n15 10 20\n20 5 7\n5 20 15\n7 10 5\n8 13 9\n12 7 8", "1 100000\n99999 1 1", "9 12\n6 14 14\n7 13 15\n8 15 16\n5 20 25\n10 10 5\n9 6 7\n4 18 17\n3 16 19\n7 9 8", "11 9\n3 10 12\n2 8 9\n1 11 13\n4 7 6\n5 14 14\n6 15 12\n7 9 5\n8 4 3\n3 2 1\n2 6 8\n1 5 7", "15 20\n5 30 50\n4 60 80\n3 40 70\n2 20 60\n1 50 90\n10 10 10\n9 9 9\n8 8 8\n7 7 7\n6 6 6\n11 11 11\n12 12 12\n13 13 13\n14 14 14\n15 15 15", "20 4\n1 100 200\n1 200 100\n1 300 400\n1 400 300\n1 500 600\n1 600 500\n1 700 800\n1 800 700\n1 900 1000\n1 1000 900\n1 1100 1200\n1 1200 1100\n1 1300 1400\n1 1400 1300\n1 1500 1600\n1 1600 1500\n1 1700 1800\n1 1800 1700\n1 1900 2000\n1 2000 1900", "2 1000\n999 10 20\n1000 30 40", "5 6\n1 9 8\n2 7 5\n3 5 6\n4 8 11\n5 1 3", "3 50\n40 2 1\n30 3 2\n20 4 3", "13 13\n13 50 40\n12 40 30\n11 30 20\n10 20 10\n9 10 40\n8 40 50\n7 50 60\n6 60 70\n5 70 80\n4 80 90\n3 90 100\n2 100 110\n1 110 120", "6 7\n6 1 1\n5 2 3\n4 4 5\n3 6 7\n2 8 9\n1 10 11", "10 15\n10 1 1\n9 2 2\n8 3 3\n7 4 4\n6 5 5\n5 6 6\n4 7 7\n3 8 8\n2 9 9\n1 10 10", "7 14\n7 99 100\n6 98 97\n5 96 95\n4 94 93\n3 92 91\n2 90 89\n1 88 87", "5 20\n4 55 60\n3 65 70\n2 75 80\n1 85 90\n5 45 40", "12 10\n1 100 90\n2 90 100\n3 80 70\n4 70 60\n5 60 50\n6 50 40\n7 40 30\n8 30 20\n9 20 10\n10 10 5\n11 5 10\n12 25 35", "14 22\n14 22 24\n13 23 25\n12 21 22\n11 19 20\n10 18 19\n9 20 21\n8 24 23\n7 25 26\n6 26 27\n5 27 28\n4 28 29\n3 29 30\n2 30 31\n1 31 32", "8 24\n2 1000 2000\n4 2000 1500\n6 1500 1000\n8 1000 500\n10 500 1000\n12 100 200\n14 200 300\n16 300 400", "19 19\n1 50 50\n2 49 48\n3 47 46\n4 45 44\n5 43 42\n6 41 40\n7 39 38\n8 37 36\n9 35 34\n10 33 32\n11 31 30\n12 29 28\n13 27 26\n14 25 24\n15 23 22\n16 21 20\n17 19 18\n18 17 16\n19 15 14", "2 100\n50 60 70\n50 80 90", "3 16\n8 12 14\n4 9 11\n4 15 17", "14 17\n1 80 70\n2 75 65\n3 60 55\n4 50 45\n5 40 35\n6 30 25\n7 20 15\n8 15 10\n9 25 30\n10 35 40\n11 45 50\n12 55 60\n13 65 70\n14 75 80", "16 8\n2 1000 900\n4 800 700\n6 600 500\n8 400 300\n10 200 100\n12 100 200\n14 300 400\n16 500 600\n1 700 800\n3 900 1000\n5 1100 1200\n7 1300 1400\n9 1500 1600\n11 1700 1800\n13 1900 2000\n15 2100 2200", "6 30\n5 100 200\n10 200 150\n15 150 100\n20 100 50\n25 50 100\n30 25 50", "9 25\n6 300 400\n12 400 300\n18 500 600\n5 600 500\n11 700 800\n17 800 700\n4 900 1000\n10 1000 900\n16 1100 1200"]}
{"name": "1362_A. Johnny and Ancient Computer", "description": "Input\n\nThe input consists of multiple test cases. The first line contains an integer t (1 <= t <= 1000) --- the number of test cases. The following t lines contain a description of test cases.\n\nThe first and only line in each test case contains integers a and b (1 <= a, b <= 10^{18}) --- the initial and target value of the variable, respectively.", "testcase": ["1\n2 9", "1\n17 34", "1\n28 56", "1\n1000000000000000 9999999999999999", "1\n129 1000000000000000", "1\n987654321 1234567890123456", "1\n1 10", "1\n3333333333333333 6666666666666666", "1\n11 111111111111111111", "1\n1000000000000000 2000000000000000", "1\n100000000000000 1000000000000000", "1\n999999999999999 10000000000000000", "1\n123456789 987654321", "1\n5000000000000000 10000000000000000", "1\n3141592653589793 2718281828459045", "1\n1627384950 10817283728171", "1\n2718281828 3141592653", "1\n451234567890123 512345678901234", "1\n1000000000000000 1000000000000001", "1\n4312345678901234 5312345678901234", "1\n6000000000000000 7000000000000000", "1\n8000000000000000 9000000000000000", "1\n1000000000000000 1100000000000000", "1\n1200000000000000 1300000000000000", "1\n1400000000000000 1500000000000000", "1\n1600000000000000 1700000000000000", "1\n1 10000000000000000", "1\n99999999999999 10000000000000000", "1\n5555555555555555 8888888888888888", "1\n7777777777777777 999999999999999999"]}
{"name": "1471_A. Strange Partition", "description": "Input\n\nThe first input line contains a single integer t --- the number of test cases (1 <= t <= 1000).\n\nThe first line of each test case contains two integers n and x (1 <= n <= 10^5, 1 <= x <= 10^9).\n\nThe next line contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 10^9), the elements of the array a. \n\nIt is guaranteed that the sum of values of n over all test cases does not exceed 10^5.", "testcase": ["1\n5 6\n4 3 7 6 8", "1\n3 1\n1000000000 1000000000 1000000000", "1\n4 1000000000\n1 2 3 4", "1\n2 15\n10 5", "1\n10 500\n1 1 1 1 1 1 1 1 1 10", "1\n7 3\n1 6 2 5 3 7 4", "1\n6 100000000\n100000000 100000000 100000000 100000000 100000000 100000000", "1\n8 250\n10 20 30 40 50 60 70 80", "1\n3 123456789\n987654321 123456789 192837465", "1\n5 47\n47 47 47 47 47", "1\n2 5\n1 4", "1\n9 99999999\n1 2 3 4 5 6 7 8 9", "1\n4 10000\n1000 2000 3000 4000", "1\n5 321\n321 432 543 654 765", "1\n7 888\n111 222 333 444 555 666 777", "1\n10 10\n10 9 8 7 6 5 4 3 2 1", "1\n6 37\n3 6 9 12 15 18", "1\n3 28\n14 7 7", "1\n4 1000000\n1 1000 100000 10000000", "1\n5 98765\n12345 23456 34567 45678 56789", "1\n8 2323\n2323 4646 6969 9292 11615 13938 16261 18584", "1\n3 123\n321 654 987", "1\n7 435345\n545 545 545 545 545 545 545", "1\n2 1\n1000000000 999999999", "1\n5 1000000000\n1000000000 1000000000 1000000000 1000000000 1000000000", "1\n1 50\n49", "1\n6 600\n100 100 100 100 100 100", "1\n4 4444\n1111 1111 1111 1111", "1\n7 77777\n11111 22222 33333 44444 55555 66666 77777", "1\n9 9999999\n1111111 2222222 3333333 4444444 5555555 6666666 7777777 8888888 9999999"]}
{"name": "1498_A. GCD Sum", "description": "Input\n\nThe first line of input contains one integer t (1 <= t <= 10^4) --- the number of test cases. \n\nThen t lines follow, each containing a single integer n (1 <= n <= 10^{18}).\n\nAll test cases in one test are different.", "testcase": ["1", "2", "9223372036854775807", "1000000000000000000", "999999999999999999", "123456789012345678", "234567890123456789", "345678901234567890", "111111111111111111", "222222222222222222", "333333333333333333", "444444444444444444", "555555555555555555", "666666666666666666", "777777777777777777", "888888888888888888", "999999999999999998", "123456789098765432", "101010101010101010", "202020202020202020", "303030303030303030", "404040404040404040", "505050505050505050", "606060606060606060", "707070707070707070", "808080808080808080", "909090909090909090", "100000000000000001", "864197532864197532", "135792468135792468"]}
{"name": "478_C. Table Decorations", "description": "Input\n\nThe single line contains three integers r, g and b (0 <= r, g, b <= 2\u00b7109) --- the number of red, green and blue baloons respectively. The numbers are separated by exactly one space.", "testcase": ["0 0 0", "1 0 0", "0 1 0", "0 0 1", "1 1 1", "2 2 2", "3 3 3", "10 10 10", "20 20 20", "100 100 100", "200 200 200", "300 300 300", "1000 1000 1000", "2000 2000 2000", "3000 3000 3000", "10000 10000 10000", "20000 20000 20000", "30000 30000 30000", "100000 100000 100000", "200000 200000 200000", "500000 500000 500000", "1000000 1000000 1000000", "1500000 1500000 1500000", "2000000 2000000 2000000", "5000000 5000000 5000000", "10000000 10000000 10000000", "15000000 15000000 15000000", "200000000 200000000 200000000", "1000000000 1000000000 1000000000", "2000000000 2000000000 2000000000"]}
{"name": "5_C. Longest Regular Bracket Sequence", "description": "Input\n\nThe first line of the input file contains a non-empty string, consisting of \u00ab(\u00bb and \u00ab)\u00bb characters. Its length does not exceed 106.", "testcase": ["()", "(())", "()()", "((()))", "()()()", "(()())", "((()))(())", "((((()))))", "(())(())()", "()(()())", "(())()(())", "(()(()()))", "()(())()", "()((()))()", "(()()())", "(((())))", "((())())", "(()())(())", "(()()(()))", "((()()()))", "(()(()))()", "(((()())()))", "(((()))())", "((()())())", "((()()))()", "(()(())())", "()(((())))", "((()))(()())", "((())())()", "(()())()()"]}
{"name": "622_A. Infinite Sequence", "description": "Input\n\nThe only line contains integer n (1 <= n <= 1014) --- the position of the number to find.\n\nNote that the given number is too large, so you should use 64-bit integer type to store it. In C++ you can use the long long integer type and in Java you can use long integer type.", "testcase": ["1", "2", "100", "99999999999999", "100000000000000", "54321", "77777777777777", "12345678901234", "11111111111111", "22222222222222", "33333333333333", "44444444444444", "55555555555555", "66666666666666", "88888888888888", "99999999999998", "10101010101010", "12121212121212", "13131313131313", "14141414141414", "15151515151515", "16161616161616", "17171717171717", "18181818181818", "19191919191919", "20202020202020", "21212121212121", "23232323232323", "24242424242424", "25252525252525"]}
{"name": "784_D. Touchy-Feely Palindromes", "description": "Input\n\nThe only line of the input contains a string of digits. The length of the string is between 1 and 10, inclusive.", "testcase": ["1", "23", "456", "7890", "12345", "678901", "2345678", "90123456", "789012345", "0123456789", "2", "34", "567", "8901", "23456", "789012", "3456789", "12345678", "901234567", "3456789012", "4", "56", "789", "0123", "456789", "1234567", "89012345", "678901234", "5678901234", "9"]}
{"name": "805_C. Find Amir", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 105) --- the number of schools.", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30"]}
{"name": "997_B. Roman Digits", "description": "Input\n\nThe only line of the input file contains a single integer n (1 <= n <= 10^9) --- the number of roman digits to use.", "testcase": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 18, 24, 30, 42, 58, 75, 150, 250, 500, 1024, 2048, 9999, 15000, 52342, 100000, 500000, 999999, 1000000000]}
{"name": "111_D. Petya and Coloring", "description": "Input\n\nThe first line contains space-separated integers n, m and k (1 <= n, m <= 1000, 1 <= k <= 106) --- the board's vertical and horizontal sizes and the number of colors respectively.", "testcase": ["1 1 1", "1 1 1000000", "1 2 1", "2 1 2", "10 10 50", "100 100 1000", "1000 1000 10000", "5 7 20", "8 9 999999", "3 4 100", "20 20 2000", "30 30 500", "50 50 9999", "40 40 1234", "200 200 9000", "300 300 8000", "600 700 20000", "999 999 100000", "1000 10 100000", "12 13 5000", "14 15 700", "18 19 850", "20 21 3000", "50 60 400", "80 90 600", "150 160 7000", "250 250 2500", "700 800 75000", "850 900 95000", "1000 1000 1000000"]}
{"name": "1223_A. CME", "description": "Input\n\nThe first line contains one integer q (1 <= q <= 100) --- the number of queries.\n\nThe only line of each query contains one integer n (2 <= n <= 10^9) --- the number of matches.", "testcase": ["1\n2", "1\n3", "1\n4", "1\n5", "1\n6", "1\n7", "1\n100", "1\n999", "1\n12345678", "1\n87654321", "1\n100000000", "1\n23456789", "1\n34567890", "1\n45678901", "1\n56789012", "1\n67890123", "1\n78901234", "1\n89012345", "1\n90123456", "1\n123", "1\n1000", "1\n10000", "1\n100000", "1\n50000", "1\n400000", "1\n30000", "1\n200000", "1\n150000", "1\n120000", "1\n750000"]}
{"name": "1267_B. Balls of Buma", "description": "Input\n\nThe only line contains a non-empty string of uppercase English letters of length at most 3 * 10^5. Each letter represents a ball with the corresponding color.", "testcase": ["A", "BC", "AAA", "BCDA", "ABCDE", "AAABBB", "ABCABC", "ABCDEFG", "AAABBBCCC", "AABBCCDDE", "ABCDEABCDE", "ABCABCABCABC", "AABBAABBCCDDCC", "ABCDEFGHIJKLM", "AABBCCDDEEFFGGHH", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCABCABCABCABCABCABCABC", "AABBCCDDEEFFGGHHIIJJKKLLMM", "ABCDEFGHIJKLMNOPQRSTUVWXYZABCD", "AAAABBBBCCCCDDDDEEEEFFFFGGGG", "ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJ", "AABBCCDDEEAABBCCDDEEAABBCCDDEE", "ABCDEFGHIJKLABCDEFGHIJKLABCDEFGHIJKL", "AAAABBBBCCCCAAAABBBBCCCCAAAABBBBCCCC", "ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQR", "AABBCCDDEEFFAABBCCDDEEFFAABBCCDDEEFF", "ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWX", "AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJ", "ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWXY", "AABBCCDDEEAABBCCDDEEAABBCCDDEEAABBCCDDEEAABBCCDDEEAABBCCDDEE"]}
{"name": "32_D. Constellation", "description": "Input\n\nThe first line contains three integers n, m and k (1 <= n, m <= 300, 1 <= k <= 3\u00b7107) --- height and width of the map and index of the required constellation respectively. The upper-left corner has coordinates (1, 1), and the lower-right --- (n, m). Then there follow n lines, m characters each --- description of the map. j-th character in i-th line is \u00ab*\u00bb, if there is a star in the corresponding square, and \u00ab.\u00bb if this square is empty.", "testcase": ["3 3 1\n*.*\n.*.\n*.*", "1 1 10000000\n*", "2 2 7\n.*\n*.", "5 5 5\n*.*.*\n.*.*.\n*.*.*\n.*.*.\n*.*.*", "3 4 12345\n*..*\n.**.\n*..*", "10 10 300\n....*.....\n....*.....\n....*.....\n....*.....\n**********\n....*.....\n....*.....\n....*.....\n....*.....\n....*.....", "6 6 1000\n*....*\n.*..*.\n..**..\n..**..\n.*..*.\n*....*", "7 7 20000\n*...*.*\n..*.*..\n.*...*.\n*******\n.*...*.\n..*.*..\n*...*.*", "2 5 100\n*.*.*\n.*.*.", "8 8 22222\n*.*.*.*.\n.*.*.*.*\n*.*.*.*.\n.*.*.*.*\n*.*.*.*.\n.*.*.*.*\n*.*.*.*.\n.*.*.*.*", "3 10 30000\n*..*..*..*\n..........\n*..*..*..*", "4 4 4444\n*.*.\n.*.*\n*.*.\n.*.*", "5 5 999\n*****\n.*.*.\n*****\n.*.*.\n*****", "2 2 12\n*.\n.*", "6 3 15000\n*.*\n.*.\n*.*\n.*.\n*.*\n.*.", "1 10 10000\n**********", "9 9 6789\n*.*.*.*.*\n.*.*.*.*.\n*.*.*.*.*\n.*.*.*.*.\n*.*.*.*.*\n.*.*.*.*.\n*.*.*.*.*\n.*.*.*.*.\n*.*.*.*.*", "3 3 27\n***\n.*.\n***", "4 4 16\n*..*\n..*.\n.*..\n*..*", "6 6 7000\n*....*\n..*...\n....*.\n.*....\n...*..\n*....*", "7 7 9876\n.......*\n.*.....*\n..*...*.\n...*.*..\n....*...\n..*...*.\n.*.....*", "8 8 8000\n*.*.*.*.\n..*.*.*.\n.*.*.*.*\n*.*.*.*.\n.*.*.*.*\n*.*.*.*.\n.*.*.*.*\n*.*.*.*.", "9 9 5678\n*.......*\n.*.....*.\n..*...*..\n...*.*...\n....*....\n...*.*...\n..*...*..\n.*.....*.\n*.......*", "3 5 303\n.....\n**.**\n.....", "2 6 600\n..**..\n**..**", "7 5 700\n*.*.*\n.*.*.\n*.*.*\n.*.*.\n*.*.*\n.*.*.\n*.*.*", "8 6 800\n*....*\n.****.\n*....*\n.****.\n*....*\n.****.\n*....*\n.****.", "9 7 900\n*..*..*\n.*.**.*\n*.*..*.\n.*..*.*\n*.*.*..\n.*.*.**\n*..*..*\n.*..*.*\n*.*.*.*", "4 10 40000\n.*..*..*..\n*..*..*.*\n.*..*..*..\n*..*..*.*", "5 7 5000\n*.*.*.*\n.*.*.*.\n*.*.*.*\n.*.*.*.\n*.*.*.*"]}
{"name": "420_A. Start Up", "description": "Input\n\nThe first line contains a non-empty name that needs to be checked. The name contains at most 105 large English letters. The name will be written with the next sans serif font: \n\n<image>", "testcase": ["JACK", "OLIVIA", "NOAH", "EMMA", "AIDEN", "SOPHIA", "LUCAS", "ISABELLA", "LIAM", "AVA", "MASON", "MIA", "ETHAN", "CHARLOTTE", "CAMILA", "ALEXANDER", "SANTIAGO", "ELIZABETH", "BENJAMIN", "MADISON", "SEBASTIAN", "ABIGAIL", "WILLIAM", "EMILY", "MATEO", "ELLIE", "JAMES", "HARPER", "MATTHEW", "AMELIA"]}
{"name": "74_C. Chessboard Billiard", "description": "Input\n\nThe first line contains two integers n and m (2 <= n, m <= 106).", "testcase": ["2 1000000", "3 999999", "4 800000", "5 500000", "6 600000", "7 700000", "8 300000", "9 400000", "10 200000", "20 900000", "30 100000", "40 200000", "50 300000", "100 400000", "200 500000", "300 600000", "400 700000", "500 800000", "600 900000", "700 100000", "800 200000", "900 300000", "1000 400000", "2000 500000", "3000 600000", "4000 700000", "5000 800000", "6000 900000", "7000 100000", "10000 200000"]}
{"name": "798_A. Mike and palindrome", "description": "Input\n\nThe first and single line contains string s (1 <= |s| <= 15).", "testcase": ["a", "hello", "world", "testcase", "abcdefghij", "kotlin", "python", "jsonformat", "validate", "computer", "programming", "keyboard", "mouse", "speaker", "monitor", "laptop", "desktop", "camera", "phone", "headset", "charger", "battery", "cable", "adapter", "remote", "router", "modem", "antenna", "signal", "transmission"]}
{"name": "934_D. A Determined Cleanup", "description": "Input\n\nThe only line of input contains two space-separated integers p and k (1 <= p <= 1018, 2 <= k <= 2 000).", "testcase": ["1 2", "10 7", "15 200", "100000 1999", "9223372036854775807 2000", "101 250", "123456789 201", "999999999999999999 500", "500000000000000000 1997", "1000000000000000000 2", "777777777777777777 3", "888888888888888888 4", "222222222222222222 1999", "333333333333333333 1998", "444444444444444444 2000", "775478935139845687 333", "234567890987654321 456", "987654321123456789 789", "789456123789654123 1234", "333222111888999777 1996", "654321789456123987 654", "111111111111111111 1995", "543212345678901234 543", "123451234512345123 145", "912345678912345678 234", "567856785678567856 678", "123123412341234123 42", "800000000000000000 200", "314159265358979323 1697", "271828182845904523 1729"]}
{"name": "1146_B. Hate \"A\"", "description": "Input\n\nThe first line of input contains a string t (1 <= |t| <= 10^5) consisting of lowercase English letters.", "testcase": ["a", "bc", "def", "ghij", "klmno", "pqrstu", "vwxyzab", "abcdefgh", "ijklmnopq", "rstuvwxyzab", "cdefghijklmn", "opqrstuvwxyzabc", "defghijklmnopqr", "stuvwxyzabcdefgh", "ijklmnopqrstuvwxy", "zabcdefghijklmnop", "qrstuvwxyabcdefghij", "klmnopqrstuvwxyzabcde", "fghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuv", "wxyzabcdefghijklmnopqr", "stuvwxyzabcdefghijklmnop", "qrstuvwxyzabcdefghijklmno", "pqrstuvwxyzabcdefghijklmn", "opqrstuvwxyzabcdefghijklm", "nopqrstuvwxyzabcdefghijkl", "mnopqrstuvwxyzabcdefghijk", "lmnopqrstuvwxyzabcdefghij", "klmnopqrstuvwxyzabcdefghi", "jklmnopqrstuvwxyzabcdefgh"]}
{"name": "374_A. Inna and Pink Pony", "description": "Input\n\nThe first line of the input contains six integers n, m, i, j, a, b (1 <= n, m <= 106; 1 <= i <= n; 1 <= j <= m; 1 <= a, b <= 106).\n\nYou can assume that the chessboard rows are numbered from 1 to n from top to bottom and the columns are numbered from 1 to m from left to right. Position (i, j) in the statement is a chessboard cell on the intersection of the i-th row and the j-th column. You can consider that the corners are: (1, m), (n, 1), (n, m), (1, 1).", "testcase": ["4 5 2 2 1 2", "1000 1000 500 500 10 15", "6 7 3 5 2 3", "10 10 7 3 3 4", "100 200 50 100 5 5", "500000 500000 250000 250000 10000 10000", "1 1000000 1 999999 1 1", "106 106 53 53 5 5", "250 500 123 456 7 8", "999999 999999 789456 123789 111 222", "1000000 1000000 500000 500000 333 444", "10 10 1 10 1 1", "100 500 25 475 3 7", "6 5 1 1 1 1", "8 8 5 5 1 2", "15 25 5 10 3 3", "99999 88888 44444 55555 99 98", "600 400 200 50 6 4", "500 700 123 234 12 11", "10000 20000 5000 15000 500 700", "100 300 80 290 2 4", "7 9 4 6 1 3", "100000 200000 99999 123456 789 101", "444444 555555 333333 444444 2222 3333", "2 3 1 3 1 1", "333333 222222 123456 78910 1234 2345", "10 10 2 9 2 1", "9 9 3 7 3 2", "300000 400000 150000 350000 5000 6000", "500 1000 400 900 5 10"]}
{"name": "933_B. A Determined Cleanup", "description": "Input\n\nThe only line of input contains two space-separated integers p and k (1 <= p <= 1018, 2 <= k <= 2 000).", "testcase": ["1 2", "10 2000", "999999999999999999 2", "123456789123456789 2011", "17 17", "1000000000000000 123", "1018 551", "981273981273981 1999", "500000000000000000 666", "2 1998", "150 150", "9007199254740991 2048", "4294967296 1024", "9007199254740992 3", "300 2001", "555555555555555555 333", "750000000000000000 142", "987654321098765432 1984", "888888888888888888 1023", "314159265358979 2718", "271828182845904 1987", "707070707070707 707", "2020202020202020 2020", "111111111111111111 567", "222222222222222222 789", "333333333333333333 1234", "444444444444444444 987", "1357924680135792468 1111", "864197532864197532 2000", "42 42"]}
{"name": "987_B. High School: Become Human", "description": "Input\n\nOn the only line of input there are two integers x and y (1 <= x, y <= 10^{9}).", "testcase": ["1 1", "2 2", "3 3", "4 4", "5 5", "6 6", "7 7", "8 8", "9 9", "10 10", "123456789 987654321", "100000000 200000000", "999999999 100000000", "500000000 500000000", "111111111 222222222", "333333333 444444444", "555555555 666666666", "777777777 888888888", "999999999 999999998", "100000001 100000002", "200000003 200000004", "300000005 300000006", "400000007 400000008", "500000009 500000010", "600000011 600000012", "700000013 700000014", "800000015 800000016", "900000017 900000018", "999999999 1", "1 999999999"]}
{"name": "p01498 King Slime", "description": "Input\n\nThe first line contains three integers N (2 <= N <= 40,000), W and H (1 <= W, H <= 100,000), which denote the number of slimes, the width and the height of the grid respectively.\n\nThe following N lines describe the initial coordinates of the slimes. The i-th line contains two integers xi (1 <= xi <= W) and yi (1 <= yi <= H), which indicate the coordinates of the i-th slime . All the coordinates are 1-based.\n\nYou may assume that each cell is occupied by at most one slime initially.", "testcase": ["3 10 10\n1 1\n2 2\n3 3", "2 50 50\n25 25\n26 26", "4 100 100\n100 100\n50 50\n75 75\n25 25", "5 1000 1000\n500 500\n250 250\n750 750\n100 100\n900 900", "10 500 500\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n9 9\n10 10", "20 700 700\n100 100\n200 200\n300 300\n400 400\n500 500\n600 600\n700 700\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n9 9\n10 10\n11 11\n12 12\n13 13", "6 60 80\n15 20\n30 40\n45 60\n32 47\n12 25\n29 55", "7 1000 2000\n1 1999\n2 1998\n3 1997\n4 1996\n5 1995\n6 1994\n7 1993", "10 10000 20000\n100 200\n300 400\n500 600\n700 800\n900 1000\n1100 1200\n1300 1400\n1500 1600\n1700 1800\n1900 2000", "2 150 150\n75 75\n76 76", "15 1234 4321\n100 1000\n200 2000\n300 3000\n400 4000\n123 321\n234 432\n345 543\n456 654\n567 765\n678 876\n789 987\n8910 1098\n11 23\n12 34\n13 45", "8 888 888\n111 111\n222 222\n333 333\n444 444\n555 555\n666 666\n777 777\n888 888", "5 12345 54321\n1234 4321\n2345 5432\n3456 6543\n4567 7654\n5678 8765", "5 200 200\n10 10\n20 20\n30 30\n40 40\n50 50", "3 333 333\n33 33\n66 66\n99 99", "2 40 40\n20 20\n21 21", "12 500 600\n10 20\n30 40\n50 60\n70 80\n90 100\n110 120\n130 140\n150 160\n170 180\n190 200\n210 220\n230 240", "7 77 77\n7 7\n14 14\n21 21\n28 28\n35 35\n42 42\n49 49", "9 9000 10000\n100 200\n300 400\n500 600\n700 800\n900 1000\n1100 1200\n1300 1400\n1500 1600\n1700 1800", "6 600 700\n100 100\n200 200\n300 300\n400 400\n500 500\n600 600", "4 800 900\n100 100\n300 300\n500 500\n700 700", "5 5000 5000\n1000 1000\n2000 2000\n3000 3000\n4000 4000\n5000 5000", "11 1100 1100\n100 100\n200 200\n300 300\n400 400\n500 500\n600 600\n700 700\n800 800\n900 900\n1000 1000\n1100 1100", "6 6000 7000\n1000 2000\n3000 4000\n5000 6000\n7000 8000\n9000 10000\n11000 12000", "7 700 800\n100 200\n300 400\n500 600\n700 700\n800 800\n900 900\n1000 1000", "8 80 90\n10 20\n30 40\n50 60\n70 80\n12 23\n34 45\n56 67\n78 89", "12 1200 1300\n100 200\n300 400\n500 600\n700 800\n900 1000\n1100 1200\n130 230\n340 450\n560 670\n780 890\n910 101\n112 123", "13 1300 1400\n100 200\n300 400\n500 600\n700 800\n900 1000\n1100 1200\n1300 1300\n320 420\n540 640\n760 860\n980 1080\n1110 1210\n1230 1330", "14 1400 1500\n100 200\n300 400\n500 600\n700 800\n900 1000\n1100 1200\n1300 1400\n150 250\n370 470\n590 690\n810 910\n1030 1130\n1250 1350\n1470 1570", "15 1500 1600\n100 200\n300 400\n500 600\n700 800\n900 1000\n1100 1200\n1300 1400\n1500 1500\n160 260\n380 480\n600 700\n820 920\n1040 1140\n1260 1360\n1480 1580"]}
{"name": "1401_A. Distance and Axis", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 6000) --- the number of test cases.\n\nThe only line of each test case contains two integers n and k (0 <= n, k <= 10^6) --- the initial position of point A and desirable absolute difference.", "testcase": ["1\n0 0", "1\n500000 500000", "1\n250000 750000", "1\n600000 400000", "1\n100000 900000", "1\n850000 150000", "1\n300000 700000", "1\n700000 300000", "1\n450000 550000", "1\n550000 450000", "1\n100000 0", "1\n0 100000", "1\n345678 654321", "1\n123456 789012", "1\n800000 200000", "1\n200000 800000", "1\n50000 950000", "1\n950000 50000", "1\n222222 777777", "1\n777777 222222", "1\n999999 1", "1\n1 999999", "1\n60000 940000", "1\n940000 60000", "1\n432123 567876", "1\n567876 432123", "1\n987654 12345", "1\n12345 987654", "1\n40000 960000", "1\n960000 40000"]}
{"name": "146_D. Lucky Number 2", "description": "Input\n\nThe single line contains four integers a1, a2, a3 and a4 (1 <= a1, a2, a3, a4 <= 106).", "testcase": ["1 1 1 1", "2 3 4 5", "10 200 3000 40000", "100000 90000 80000 70000", "123456 234567 345678 456789", "999999 999998 999997 999996", "847362 263515 976453 135799", "657839 438291 938475 293845", "102938 475869 283746 857483", "9999 8888 7777 6666", "54321 12345 67890 9876", "222222 333333 444444 555555", "101010 202020 303030 404040", "24680 13579 86420 97531", "849302 294930 204493 499023", "1 1000000 500000 250000", "987654 123456 789012 345678", "2222 3333 4444 5555", "666666 777777 888888 999999", "16384 32768 65536 131072", "100001 100002 100003 100004", "654321 543210 432109 321098", "314159 271828 161803 141421", "192837 564738 291847 384756", "717273 818283 919293 102030", "426780 135790 864209 975310", "1000000 999999 999998 999997", "418726 827364 672819 198273", "382763 726381 918273 564738", "426135 791382 182764 738291"]}
{"name": "404_D. Minesweeper 1D", "description": "Input\n\nThe first line contains sequence of characters without spaces s1s2... sn (1 <= n <= 106), containing only characters \"*\", \"?\" and digits \"0\", \"1\" or \"2\". If character si equals \"*\", then the i-th cell of the field contains a bomb. If character si equals \"?\", then Valera hasn't yet decided what to put in the i-th cell. Character si, that is equal to a digit, represents the digit written in the i-th square.", "testcase": ["1?", "0*", "2**1", "?0?2", "*1*0?", "1?*2*0", "1**?*2", "?*1**0", "0**?**", "**1?*1", "22?*0*", "2*?1**", "*0**1?", "1*2*?0", "*?*?*1", "0*0*2?", "?1*2*0", "2*?*?1", "**?0*2", "2??*1*", "1**?0?", "*2?1**", "0*?*?1", "?*2*?0", "**0?**", "0*1*?*", "1*?0*2", "???*0*", "*2*??1", "*0?*1*"]}
{"name": "550_A. Two Substrings", "description": "Input\n\nThe only line of input contains a string s of length between 1 and 105 consisting of uppercase Latin letters.", "testcase": ["A", "QR", "XTZ", "JHFDS", "MKJHYTGF", "FTYGHVBNJ", "QWERTYUIOPAS", "ZXCVBNMLKJHG", "QAZWSXEDCRFVTGB", "PLMNKOIJBUVYHGT", "ABCDEFGHIJKLMNO", "PQRSTUVWXYZABCD", "EFGHIJKLMNOPQRST", "UVWXYZABCDEFGHIJ", "YZABCDEFGHIJKLMNOP", "RSTUVWXYZABCDEFG", "HIJKLMNOPQRSTUVW", "GHIJKLMNOPQRSTUVX", "KLMNOPQRSTUVWXYZ", "ZYXWVUTSRQPONML", "ONMLKJIHGFEDCBAX", "ASDFGHJKLZXCVBNMQ", "FWIOERJSLKDZMXCNV", "LSKDJFHWEROINMXCVB", "QWERTYUIOPASDFGHJ", "ZXCVBNMLKJHGFDSAQP", "ERTYUIOPQLKJHGFDSZ", "WERTYUIOLKJHGFERDS", "MNOPQRSTUVWXYZABCDEFGHIJ", "BCDEFGHIJKLMNOPQRSTUVWXYZ"]}
{"name": "690_F1. Tree of Life (easy)", "description": "Input\n\nThe first line of the input contains a single integer n -- the number of vertices in the tree (1 <= n <= 10000). The vertices are labeled with the numbers from 1 to n. Then n - 1 lines follow, each describing one edge using two space-separated numbers a b -- the labels of the vertices connected by the edge (1 <= a < b <= n). It is guaranteed that the input represents a tree.", "testcase": ["2\n1 2", "3\n1 2\n2 3", "4\n1 2\n2 3\n3 4", "5\n1 2\n2 3\n3 4\n4 5", "6\n1 2\n1 3\n1 4\n1 5\n1 6", "7\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7", "8\n1 2\n1 3\n1 4\n2 5\n2 6\n4 7\n4 8", "9\n1 2\n2 3\n2 4\n4 5\n4 6\n6 7\n6 8\n8 9", "10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10", "11\n1 2\n2 3\n2 4\n4 5\n4 6\n6 7\n7 8\n8 9\n9 10\n10 11", "12\n1 2\n1 3\n1 4\n3 5\n3 6\n4 7\n4 8\n5 9\n5 10\n6 11\n6 12", "13\n1 2\n2 3\n2 4\n4 5\n4 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13", "14\n1 2\n2 3\n3 4\n3 5\n5 6\n5 7\n7 8\n8 9\n8 10\n10 11\n10 12\n12 13\n13 14", "15\n1 2\n2 3\n3 4\n4 5\n3 6\n3 7\n7 8\n7 9\n9 10\n9 11\n11 12\n11 13\n13 14\n14 15", "16\n1 2\n2 3\n2 4\n2 5\n5 6\n5 7\n5 8\n8 9\n8 10\n8 11\n11 12\n11 13\n11 14\n14 15\n14 16", "17\n1 2\n2 3\n3 4\n4 5\n5 6\n4 7\n7 8\n8 9\n9 10\n10 11\n10 12\n12 13\n13 14\n14 15\n15 16\n16 17", "18\n1 2\n1 3\n1 4\n3 5\n3 6\n4 7\n4 8\n5 9\n5 10\n6 11\n6 12\n12 13\n12 14\n14 15\n14 16\n16 17\n16 18", "19\n1 2\n2 3\n2 4\n4 5\n4 6\n6 7\n6 8\n8 9\n8 10\n10 11\n10 12\n12 13\n12 14\n14 15\n14 16\n16 17\n16 18\n18 19", "20\n1 2\n1 3\n3 4\n4 5\n4 6\n6 7\n6 8\n8 9\n8 10\n10 11\n10 12\n12 13\n12 14\n14 15\n14 16\n16 17\n16 18\n18 19\n19 20", "21\n1 2\n2 3\n2 4\n4 5\n4 6\n6 7\n6 8\n1 9\n9 10\n9 11\n11 12\n11 13\n13 14\n13 15\n15 16\n15 17\n17 18\n17 19\n19 20\n20 21", "22\n1 2\n1 3\n3 4\n4 5\n4 6\n2 7\n7 8\n2 9\n9 10\n9 11\n11 12\n11 13\n13 14\n13 15\n15 16\n15 17\n17 18\n17 19\n19 20\n19 21\n21 22", "23\n1 2\n1 3\n3 4\n4 5\n4 6\n6 7\n6 8\n2 9\n9 10\n9 11\n11 12\n11 13\n13 14\n13 15\n15 16\n15 17\n17 18\n17 19\n19 20\n19 21\n21 22\n22 23", "24\n1 2\n1 3\n3 4\n4 5\n4 6\n6 7\n6 8\n2 9\n9 10\n9 11\n11 12\n11 13\n13 14\n13 15\n15 16\n15 17\n17 18\n17 19\n19 20\n19 21\n21 22\n21 23\n23 24", "25\n1 2\n1 3\n3 4\n4 5\n4 6\n6 7\n6 8\n2 9\n9 10\n9 11\n11 12\n11 13\n13 14\n13 15\n15 16\n15 17\n17 18\n17 19\n19 20\n19 21\n21 22\n21 23\n23 24\n24 25", "26\n1 2\n1 3\n3 4\n4 5\n4 6\n6 7\n6 8\n2 9\n9 10\n9 11\n11 12\n11 13\n13 14\n13 15\n15 16\n15 17\n17 18\n17 19\n19 20\n19 21\n21 22\n21 23\n23 24\n23 25\n25 26", "27\n1 2\n1 3\n3 4\n4 5\n4 6\n6 7\n6 8\n2 9\n9 10\n9 11\n11 12\n11 13\n13 14\n13 15\n15 16\n15 17\n17 18\n17 19\n19 20\n19 21\n21 22\n21 23\n23 24\n23 25\n25 26\n26 27", "28\n1 2\n1 3\n3 4\n4 5\n4 6\n6 7\n6 8\n2 9\n9 10\n9 11\n11 12\n11 13\n13 14\n13 15\n15 16\n15 17\n17 18\n17 19\n19 20\n19 21\n21 22\n21 23\n23 24\n23 25\n25 26\n25 27\n27 28", "29\n1 2\n1 3\n3 4\n4 5\n4 6\n6 7\n6 8\n2 9\n9 10\n9 11\n11 12\n11 13\n13 14\n13 15\n15 16\n15 17\n17 18\n17 19\n19 20\n19 21\n21 22\n21 23\n23 24\n23 25\n25 26\n25 27\n27 28\n28 29", "30\n1 2\n1 3\n3 4\n4 5\n4 6\n6 7\n6 8\n2 9\n9 10\n9 11\n11 12\n11 13\n13 14\n13 15\n15 16\n15 17\n17 18\n17 19\n19 20\n19 21\n21 22\n21 23\n23 24\n23 25\n25 26\n25 27\n27 28\n27 29\n29 30"]}
{"name": "804_A. Find Amir", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 105) --- the number of schools.", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30"]}
{"name": "488_A. Giga Tower", "description": "Input\n\nThe only line of input contains an integer a ( - 109 <= a <= 109).", "testcase": ["-109", "-100000000", "-99999999", "-88888888", "-77777777", "-55555555", "-12345678", "-1", "0", "1", "42", "123", "999", "1024", "10000", "100000", "1234567", "55555555", "77777777", "88888888", "99999999", "100000000", "109", "999999999", "-999999999", "500000000", "-500000000", "200000000", "-200000000", "300000000"]}
{"name": "560_B. Gerald is into Art", "description": "Input\n\nThe first line contains two space-separated numbers a1 and b1 --- the sides of the board. Next two lines contain numbers a2, b2, a3 and b3 --- the sides of the paintings. All numbers ai, bi in the input are integers and fit into the range from 1 to 1000.", "testcase": ["2 2\n1 1\n1 1", "5 7\n2 3\n4 2", "1000 999\n500 499\n300 400", "10 20\n5 6\n6 10", "123 456\n78 89\n90 32", "300 400\n200 100\n100 150", "600 800\n400 300\n200 300", "38 57\n26 14\n28 37", "950 700\n600 400\n300 200", "1000 500\n250 400\n200 300", "720 480\n360 240\n200 300", "512 256\n128 64\n85 170", "875 1024\n437 512\n300 400", "750 600\n375 450\n200 250", "600 600\n300 300\n300 300", "1000 1000\n500 500\n500 499", "200 300\n100 200\n99 100", "450 900\n225 300\n200 400", "999 888\n333 444\n555 666", "50 75\n25 35\n40 30", "210 420\n105 210\n100 150", "640 480\n320 240\n120 360", "800 600\n400 300\n200 500", "320 640\n160 320\n80 400", "480 720\n240 360\n180 270", "1000 1\n500 1\n499 1", "850 950\n425 475\n300 600", "77 77\n25 50\n51 26", "345 678\n123 234\n210 345", "888 555\n444 333\n222 111"]}
{"name": "656_C. Without Text", "description": "Input\n\nThe only line of the input is a string (between 1 and 50 characters long, inclusive). Each character will be an alphanumeric character or a full stop \".\".", "testcase": ["a", "bC.d", "abc123", "A1B2C3", "12345.", "abcd.efg", "Xx.Yy.Zz", "1.2.3.4.5", "000.111.222", "Test.Case.10", "AA.BB.CC.DD.EE", "9.8.7.6.5.4.3", "A2b3C4d5E6", ".a.b.c.d.e.f.", "Z7Y8X9W0", "Example1234", ".1X2Y3Z4.", "a...b...c...d", "QWERTYUIOPASDFGH", "0123456789ABCDEFG", "Z.", "TestcaseTwentyTwo", "test.case.23", ".24TestCase.", "twenty.five25", "26Point.Six", "t27.e2.7t", "Twen.T.y.EIGHT", "CaseNumber29", "EndOf30"]}
{"name": "886_B. Vlad and Cafes", "description": "Input\n\nIn first line there is one integer n (1 <= n <= 2\u00b7105) --- number of cafes indices written by Vlad.\n\nIn second line, n numbers a1, a2, ..., an (0 <= ai <= 2\u00b7105) are written --- indices of cafes in order of being visited by Vlad. Vlad could visit some cafes more than once. Note that in numeration, some indices could be omitted.", "testcase": ["1\n0", "2\n1 2", "3\n3 1 2", "4\n2 2 2 2", "5\n1 3 5 7 9", "6\n0 1 0 1 0 1", "7\n200000 199999 200000 199998 200000 199997 200000", "8\n12345 23456 34567 45678 56789 67890 78901 12345", "9\n101 102 103 104 105 106 107 108 109", "10\n100000 100001 100002 100003 100004 100005 100006 100007 100008 100009", "11\n0 1 2 3 4 5 6 7 8 9 10", "12\n200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000", "13\n0 2 4 6 8 10 12 14 16 18 20 22 24", "14\n54321 54322 54323 54324 54325 54326 54327 54328 54329 54330 54321 54322 54323 54324", "15\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "16\n100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115", "17\n200000 199999 199998 199997 199996 199995 199994 199993 199992 199991 199990 199989 199988 199987 199986 199985", "18\n10 20 30 40 50 60 70 80 90 100 110 120 130 140 150 160 170 180", "19\n159 158 157 156 155 154 153 152 151 150 149 148 147 146 145 144 143 142 141", "20\n4 8 15 16 23 42 4 8 15 16 23 42 4 8 15 16 23 42 4 8", "21\n105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105", "22\n32767 32766 32765 32764 32763 32762 32761 32760 32759 32758 32757 32756 32755 32754 32753 32752 32751 32750 32749 32748 32747 32746", "23\n16384 16385 16386 16387 16388 16389 16390 16391 16392 16393 16394 16395 16396 16397 16398 16399 16400 16401 16402 16403 16404 16405 16406", "24\n65535 65534 65533 65532 65531 65530 65529 65528 65527 65526 65525 65524 65523 65522 65521 65520 65519 65518 65517 65516 65515 65514 65513 65512", "25\n1 000 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000 16000 17000 18000 19000 20000 21000 22000 23000 24000", "26\n120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145", "27\n22000 21000 20000 19000 18000 17000 16000 15000 14000 13000 12000 11000 10000 9000 8000 7000 6000 5000 4000 3000 2000 1000 0", "28\n8 6 7 5 3 0 9 8 6 7 5 3 0 9 8 6 7 5 3 0 9 8 6 7 5 3 0 9", "29\n4321 4322 4323 4324 4325 4326 4327 4328 4329 4330 4331 4332 4333 4334 4335 4336 4337 4338 4339 4340 4341 4342 4343 4344 4345 4346 4347 4348 4349", "30\n98765 98764 98763 98762 98761 98760 98759 98758 98757 98756 98755 98754 98753 98752 98751 98750 98749 98748 98747 98746 98745 98744 98743"]}
{"name": "909_B. Segments", "description": "Input\n\nThe only input line contains a single integer N (1 <= N <= 100).", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30"]}
{"name": "476_A. Dreamoon and Stairs", "description": "Input\n\nThe single line contains two space separated integers n, m (0 < n <= 10000, 1 < m <= 10).", "testcase": ["1 2", "10000 10", "345 3", "8765 5", "2345 7", "1234 6", "4532 8", "9999 9", "8000 4", "543 2", "234 9", "5821 3", "6012 5", "3000 6", "4826 7", "1827 8", "2910 10", "1500 4", "678 3", "7890 7", "3456 5", "9081 6", "4531 8", "1290 9", "7612 10", "870 2", "5500 3", "6501 4", "9800 5", "1100 2"]}
{"name": "599_A. Patrick and Shopping", "description": "Input\n\nThe first line of the input contains three integers d1, d2, d3 (1 <= d1, d2, d3 <= 108) --- the lengths of the paths. \n\n  * d1 is the length of the path connecting Patrick's house and the first shop; \n  * d2 is the length of the path connecting Patrick's house and the second shop; \n  * d3 is the length of the path connecting both shops.", "testcase": ["1 1 1", "2 3 4", "3 2 1", "5 5 5", "10 1 1", "1 10 1", "1 1 10", "99999999 1 2", "12345678 87654321 10000000", "2 2 3", "10 10 20", "20 10 10", "10 20 10", "6 8 12", "15 30 45", "108 107 106", "25000000 25000001 49999999", "1 10000000 9999999", "11111111 22222222 33333333", "98765432 12345678 87654321", "55555555 55555555 55555555", "16 17 18", "9 11 20", "100000000 100000000 100000000", "20 12 30", "45 45 90", "7 7 14", "31 41 59", "26 26 52", "35 45 55"]}
{"name": "77_E. Martian Food", "description": "Input\n\nThe first line contains integer t (1 <= t <= 104) --- amount of testcases.\n\nEach of the following t lines contain three positive integers: the radii of the plate and a portion of the Golden Honduras R and r (1 <= r < R <= 104) and the number k (1 <= k <= 104).\n\nIn the pretests 1 <= k <= 2.", "testcase": ["1\n10 5 4", "1\n1500 749 23", "1\n10400 10399 2", "1\n10000 5000 1", "1\n9000 4500 200", "1\n1234 567 101", "1\n2345 678 3", "1\n3456 789 21", "1\n4567 890 54", "1\n5678 901 76", "1\n6789 123 98", "1\n7890 234 250", "1\n8901 345 345", "1\n9012 456 432", "1\n2123 789 556", "1\n3234 890 789", "1\n4345 901 888", "1\n5456 1234 999", "1\n6567 2345 1111", "1\n7678 3456 1234", "1\n8789 4567 1300", "1\n9890 5678 1400", "1\n1000 500 1500", "1\n1100 550 1600", "1\n1200 600 1700", "1\n1300 650 1800", "1\n1400 700 1900", "1\n1500 750 2000", "1\n1600 800 2100", "1\n1700 850 2200"]}
{"name": "p03975 Kyoto University Programming Contest 2016 - A Barricade", "description": "Input\n\nN, A and B are given on the first line and t_i is given on the (i+1)-th line.\n\n\nN A B\nt1\n:\ntN", "testcase": ["3 10 20\n15\n25\n30", "4 5 15\n10\n5\n20\n8", "5 1 10\n2\n4\n1\n3\n5", "2 100 200\n150\n250", "6 30 50\n35\n45\n55\n60\n30\n50", "1 1 1000\n500", "10 10 10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10", "7 77 777\n77\n777\n777\n777\n77\n77\n777", "8 8 88\n8\n16\n24\n32\n40\n48\n56\n64", "3 333 3333\n333\n3333\n3333", "1 0 1\n0", "9 1 9\n1\n2\n3\n4\n5\n6\n7\n8\n9", "2 500 1000\n750\n999", "3 10 20\n10\n15\n20", "5 50 100\n75\n50\n100\n85\n90", "4 20 40\n25\n35\n30\n45", "5 5 25\n5\n10\n15\n20\n25", "4 40 100\n60\n80\n100\n120", "6 200 400\n250\n300\n350\n400\n450\n500", "2 2 4\n2\n4", "3 3 6\n4\n5\n3", "7 70 170\n80\n90\n100\n110\n120\n130\n140", "5 15 45\n20\n30\n40\n50\n60", "8 80 160\n85\n90\n95\n100\n110\n120\n130\n140", "1 55 555\n255", "4 7 49\n14\n21\n28\n35", "3 1000 2000\n1500\n2000\n2500", "3 30 300\n100\n200\n300", "6 60 600\n120\n240\n360\n480\n600\n720", "2 2 20\n10\n20"]}
{"name": "1185_A. Ropewalkers", "description": "Input\n\nThe only line of the input contains four integers a, b, c, d (1 <= a, b, c, d <= 10^9). It is possible that any two (or all three) ropewalkers are in the same position at the beginning of the performance.", "testcase": ["1 1 1 1", "1 2 3 4", "5 6 7 8", "9 10 11 12", "13 14 15 16", "17 18 19 20", "100 200 300 400", "123456789 987654321 123456789 987654321", "1000000000 999999999 1000000000 999999999", "99999 88888 77777 66666", "222222222 333333333 444444444 555555555", "10 10 10 10", "1000 1000 1000 1000", "384 763 184 385", "543 210 654 321", "334 667 999 500", "23 46 69 92", "123 321 456 654", "111111111 999999999 888888888 777777777", "42 24 42 24", "512 1024 2048 4096", "768 512 256 128", "999 999 999 999", "300 600 900 1200", "58 116 58 116", "165 330 495 660", "860 860 860 860", "11 22 33 44", "479001599 479001600 479001601 479001602", "500000000 500000001 500000002 499999999"]}
{"name": "1203_E. Boxers", "description": "Input\n\nThe first line contains an integer n (1 <= n <= 150000) --- the number of boxers. The next line contains n integers a_1, a_2, ..., a_n, where a_i (1 <= a_i <= 150000) is the weight of the i-th boxer.", "testcase": ["1\n1", "2\n1 2", "3\n3 2 1", "4\n4 3 2 1", "5\n1 2 3 4 5", "6\n6 5 4 3 2 1", "7\n1 3 5 7 2 4 6", "8\n8 7 6 5 4 3 2 1", "9\n1 1 1 1 1 1 1 1 1", "10\n10 9 8 7 6 5 4 3 2 1", "11\n1 2 3 4 5 6 7 8 9 10 11", "12\n4 8 12 3 7 11 2 6 10 1 5 9", "13\n13 13 13 13 13 13 13 13 13 13 13 13 13", "14\n7 6 5 4 3 2 1 8 9 10 11 12 13 14", "15\n15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "16\n1 16 2 15 3 14 4 13 5 12 6 11 7 10 8 9", "17\n17 1 16 2 15 3 14 4 13 5 12 6 11 7 10 8 9", "18\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18", "19\n19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "20\n1 3 5 7 9 11 13 15 17 19 2 4 6 8 10 12 14 16 18 20", "21\n21 1 20 2 19 3 18 4 17 5 16 6 15 7 14 8 13 9 12 10 11", "22\n11 22 10 21 9 20 8 19 7 18 6 17 5 16 4 15 3 14 2 13 1 12", "23\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23", "24\n24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "25\n25 1 24 2 23 3 22 4 21 5 20 6 19 7 18 8 17 9 16 10 15 11 14 12 13", "26\n13 14 15 16 17 18 19 20 21 22 23 24 25 26 12 11 10 9 8 7 6 5 4 3 2 1", "27\n1 3 5 7 9 11 13 15 17 19 21 23 25 27 2 4 6 8 10 12 14 16 18 20 22 24 26", "28\n28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "29\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29", "30\n30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1"]}
{"name": "1220_C. Substring Game in the Lesson", "description": "Input\n\nThe first line of the input contains a single string s (1 <= |s| <= 5 * 10^5) consisting of lowercase English letters.", "testcase": ["a", "b", "z", "aa", "ab", "az", "za", "zz", "abc", "qwe", "asd", "zxc", "rty", "fgh", "vbn", "uio", "jkl", "mnbvc", "lkjhg", "poiuy", "mjuhb", "nhytg", "bgtvf", "fredc", "wsxza", "qazws", "edcrf", "rfvtg", "tgbnh", "yhnmk"]}
{"name": "1485_A. Add and Divide", "description": "Input\n\nThe first line contains a single integer t (1 <= t <= 100) --- the number of test cases.\n\nThe only line of the description of each test case contains two integers a, b (1 <= a,b <= 10^9).", "testcase": ["1\n2 3", "1\n100 200", "1\n999999999 1000000000", "1\n500000000 500000001", "1\n123456789 987654321", "1\n135791113 246810246", "1\n1 1", "1\n2 2", "1\n3 3", "1\n10 20", "1\n333333333 666666666", "1\n42424242 42424242", "1\n7654321 1234567", "1\n111111111 999999999", "1\n222222222 333333333", "1\n444444444 555555555", "1\n777777777 888888888", "1\n101010101 202020202", "1\n303030303 404040404", "1\n808080808 909090909", "1\n314159265 358979323", "1\n161803398 874989484", "1\n141421356 237309505", "1\n112358132 134626329", "1\n161803399 462643383", "1\n100000001 100000002", "1\n100000003 100000004", "1\n100000005 100000006", "1\n100000007 100000008", "1\n100000009 100999999"]}
{"name": "1535_C. Unstable String", "description": "Input\n\nThe first line contains a single integer t (1 <= t <= 10^4) --- number of test cases.\n\nThe first and only line of each test case contains the string s (1 <= |s| <= 2 * 10^5) consisting of characters 0, 1, and ?.\n\nIt is guaranteed that the sum of the string lengths over all test cases does not exceed 2 * 10^5.", "testcase": ["4\n0\n1\n?\n01?", "5\n0?\n???\n1??11\n0?0?\n1", "3\n??0??1\n?01\n111?", "2\n0??0\n??11??", "6\n0\n?\n1\n0?1\n??0??\n?1??0", "3\n1???\n?0?\n1?0?1", "1\n01?0?1", "2\n?1??0\n??0??1", "2\n?11?\n00??0", "3\n?0?0?1\n1\n?1?", "1\n??01???", "1\n??0??1??", "2\n0?10??\n???11?", "1\n0??1?", "4\n0\n??\n?0??\n1?01", "2\n1?\n0??0", "3\n??1\n0?1?\n11??", "1\n?011?", "2\n?01?\n?0?", "2\n1??0?\n00?11", "5\n?1\n???\n0??\n?0?\n??1?", "2\n0?1??\n?011?", "2\n??\n1??01", "1\n???0?", "3\n0\n1?0\n?1??", "1\n0?0??1", "3\n1??\n0??0\n??01", "2\n??0\n0?0?1", "1\n1??0?1", "2\n?1??1\n0?0??"]}
{"name": "255_B. Code Parsing", "description": "Input\n\nThe first line contains a non-empty string s. \n\nIt is guaranteed that the string only consists of characters \"x\" and \"y\". It is guaranteed that the string consists of at most 106 characters. It is guaranteed that as the result of the algorithm's execution won't be an empty string.", "testcase": ["xy", "yxyxxy", "xxxxxx", "yyyyy", "xyxyxyxyxyxyxyxyxyxyxyxyxyxyxy", "yx", "xxyyxyxyyyxxyyxxxyyy", "yyxxyxyxyyyyxxxyx", "xxxyyyyxyxyxyx", "xxyxyxyxyyyyyyyy", "yyyyxyxyxxy", "xyyyxyxyyyxxyx", "xxyxyyxyxyyyyxxxy", "xyyyxyyxy", "xyxyxyyyxyxyxxyxy", "xyyyxyyyyxyyxyxxy", "xxyyyxxyyxxyyyxyyxy", "xyxyxy", "yyyxxyxxyyxyyxyyyxyx", "xxyyxxyxyxyyyyxyxyyyy", "xyyyxyxxyyxyyxxyx", "xyxxyy", "yxxyyxxyxyyyxyxyy", "yyxyxyxxyxxy", "yxxyyxxyyyxxy", "yyxyxyxyxyxyxxyyyyy", "xxyxxyyy", "xyxyyyxyxyxyyxxyy", "yyxyxyyyyxyxyyyx", "xyxyxyxyyyyyxyxyyxyxy"]}
{"name": "373_A. Collecting Beats is Fun", "description": "Input\n\nThe first line contains a single integer k (1 <= k <= 5) --- the number of panels Cucumber boy can press with his one hand.\n\nNext 4 lines contain 4 characters each (digits from 1 to 9, or period) --- table of panels. If a digit i was written on the panel, it means the boy has to press that panel in time i. If period was written on the panel, he doesn't have to press that panel.", "testcase": [{"k": 1, "panels": ["1...", "...2", "....", "3..."]}, {"k": 1, "panels": ["....", "....", "..4.", "...."]}, {"k": 2, "panels": ["..5.", "..6.", "....", "...."]}, {"k": 2, "panels": ["..1.", "...2", "....", "..3."]}, {"k": 3, "panels": ["7...", "....", ".8..", "...9"]}, {"k": 3, "panels": ["....", ".1..", "..2.", "...3"]}, {"k": 1, "panels": [".4..", "....", "....", "...."]}, {"k": 2, "panels": ["....", "..5.", "....", "...."]}, {"k": 4, "panels": ["....", "..6.", "7...", "...8"]}, {"k": 1, "panels": ["9...", "....", "....", "...."]}, {"k": 2, "panels": ["....", "...1", "..2.", "...."]}, {"k": 3, "panels": ["....", "3...", "....", "...."]}, {"k": 4, "panels": ["...4", "..5.", "....", "...."]}, {"k": 5, "panels": ["....", "...6", "....", "7..."]}, {"k": 1, "panels": ["....", "....", "..8.", "...."]}, {"k": 2, "panels": ["....", ".9..", "....", "...."]}, {"k": 3, "panels": ["....", "....", "...1", "..2."]}, {"k": 4, "panels": ["...3", "....", "....", "...."]}, {"k": 5, "panels": ["..4.", "....", "....", "...."]}, {"k": 1, "panels": ["....", "..5.", "....", "...."]}, {"k": 2, "panels": ["....", "....", "....", ".6.."]}, {"k": 3, "panels": ["....", "..7.", "....", "...."]}, {"k": 4, "panels": ["....", "....", "8...", "...."]}, {"k": 5, "panels": ["....", "....", "..9.", "...."]}, {"k": 2, "panels": ["....", "....", "...1", "...."]}, {"k": 3, "panels": ["....", "..2.", "....", "...."]}, {"k": 4, "panels": ["..3.", "....", "....", "...."]}, {"k": 5, "panels": ["....", ".4..", "....", "...."]}, {"k": 1, "panels": ["....", "....", "...5", "...."]}, {"k": 2, "panels": ["....", "....", "6...", "...."]}]}
{"name": "727_A. Transformation: from A to B", "description": "Input\n\nThe first line contains two positive integers a and b (1 <= a < b <= 109) --- the number which Vasily has and the number he wants to have.", "testcase": ["1 2", "10 20", "100 200", "250 1000", "1000000 2000000", "1234567 89101112", "2 3", "4 7", "6 12", "15 30", "23 47", "35 70", "111 222", "999999 1000001", "9999999 10000000", "705 1410", "300 303", "14 88", "17 34", "99 101", "800 1600", "450 900", "60 120", "333 666", "789 1234", "3456 7890", "2222 4444", "88888 99999", "314159 271828", "271 314"]}
{"name": "841_B. Godsend", "description": "Input\n\nFirst line of input data contains single integer n (1 <= n <= 106) --- length of the array.\n\nNext line contains n integers a1, a2, ..., an (0 <= ai <= 109).", "testcase": ["2\n0 0", "3\n1000000000 500000000 250000000", "1\n123456789", "4\n0 1 2 3", "5\n1000 2000 3000 4000 5000", "6\n999999999 888888888 777777777 666666666 555555555 444444444", "10\n0 1 1 2 3 5 8 13 21 34", "7\n0 0 0 0 0 0 0", "8\n109 209 309 409 509 609 709 809", "9\n1 2 4 8 16 32 64 128 256", "11\n2048 1024 512 256 128 64 32 16 8 4 2", "12\n999999996 999999997 999999998 999999999 1000000000 0 1 2 3 4 5 6", "13\n12345 23456 34567 45678 56789 67890 78901 89012 90123 12345 23456 34567 45678", "14\n5 10 20 40 80 160 320 640 1280 2560 5120 10240 20480 40960", "15\n3 6 9 12 15 18 21 24 27 30 33 36 39 42 45", "30\n0 1000000000 999999999 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29", "16\n100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600", "17\n33 44 55 66 77 88 99 110 121 132 143 154 165 176 187 198 209", "18\n50 100 150 200 250 300 350 400 450 500 550 600 650 700 750 800 850 900", "19\n999999940 999999950 999999960 999999970 999999980 999999990 1000000000 999999999 999999998 999999997 999999996 999999995 999999994 999999993 999999992 999999991 999999990 999999989 999999988", "20\n42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42", "21\n83 167 251 335 419 503 587 671 755 839 923 1007 1091 1175 1259 1343 1427 1511 1595 1679 1763", "22\n98765 87654 76543 65432 54321 43210 32109 21098 10987 9876 8765 7654 6543 5432 4321 3210 2109 1098 987 876 765 654", "23\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23", "24\n1023 2046 3069 4092 5115 6138 7161 8184 9207 10230 11253 12276 13299 14322 15345 16368 17391 18414 19437 20460 21483 22506 23529", "25\n8 88888888 44444444 22222222 11111111 55555555 33333333 77777777 99999999 12345678 23456789 34567890 45678901 56789012 67890123 78901234 89012345 90123456 1234567 2345678 3456789 4567890 5678901 6789012 7890123 8901234", "26\n0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1", "27\n100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126", "28\n999999900 999999901 999999902 999999903 999999904 999999905 999999906 999999907 999999908 999999909 999999910 999999911 999999912 999999913 999999914 999999915 999999916 999999917 999999918 999999919 999999920 999999921 999999922 999999923 999999924 999999925 999999926 999999927", "29\n256 512 768 1024 1280 1536 1792 2048 2304 2560 2816 3072 3328 3584 3840 4096 4352 4608 4864 5120 5376 5632 5888 6144 6400 6656 6912 7168 7424", "30\n10 20 30 40 50 60 70 80 90 100 110 120 130 140 150 160 170 180 190 200 210 220 230 240 250 260 270 280 290 300"]}
{"name": "959_E. Mahmoud and Ehab and the xor-MST", "description": "Input\n\nThe only line contains an integer n (2 <= n <= 1012), the number of vertices in the graph.", "testcase": ["2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "100", "1000", "10000", "100000", "1000000", "10000000", "100000000", "1000000000", "1012", "500000000000", "999999999999", "1000000000000", "54321", "123456789", "987654321"]}
{"name": "1163_C1. Power Transmission (Easy Edition)", "description": "Input\n\nThe first line contains a single integer n (2 <= n <= 50) --- the number of electric poles.\n\nEach of the following n lines contains two integers x_i, y_i (-10^4 <= x_i, y_i <= 10^4) --- the coordinates of the poles.\n\nIt is guaranteed that all of these n points are distinct.", "testcase": "{\n    \"testcases\": [\n        \"2\\n-10000 10000\\n10000 -10000\",\n        \"3\\n0 1\\n2 3\\n4 5\",\n        \"4\\n100 200\\n-300 400\\n150 -100\\n-350 500\",\n        \"5\\n123 456\\n789 123\\n-321 654\\n215 -634\\n-213 124\",\n        \"6\\n1 1\\n-1 -1\\n2 2\\n-2 -2\\n3 3\\n-3 -3\",\n        \"7\\n1000 1000\\n-1000 -1000\\n2000 2000\\n-2000 -2000\\n3000 3000\\n-3000 -3000\\n4000 4000\",\n        \"8\\n10 10\\n20 20\\n30 30\\n40 40\\n50 50\\n60 60\\n70 70\\n80 80\",\n        \"9\\n-1 2\\n-2 3\\n-3 4\\n-4 5\\n-5 6\\n-6 7\\n-7 8\\n-8 9\\n-9 10\",\n        \"10\\n15 15\\n15 -15\\n-15 15\\n-15 -15\\n10 10\\n10 -10\\n-10 10\\n-10 -10\\n5 5\\n5 -5\",\n        \"11\\n234 567\\n8910 -1112\\n1314 1516\\n1718 -1920\\n2122 2324\\n2526 -2728\\n2930 3132\\n3334 -3536\\n3738 3940\\n4142 -4344\\n4546 4748\",\n        \"12\\n100 101\\n102 103\\n104 105\\n106 107\\n108 109\\n110 111\\n112 113\\n114 115\\n116 117\\n118 119\\n120 121\\n122 123\",\n        \"13\\n-456 123\\n789 -1011\\n1213 1415\\n1617 -1819\\n2021 2223\\n2425 -2627\\n2829 3031\\n3233 -3435\\n3637 3839\\n4041 -4243\\n4445 4647\\n4849 -5050\\n5151 5252\",\n        \"14\\n999 1000\\n-1001 1002\\n1003 -1004\\n1005 1006\\n-1007 1008\\n1009 -1010\\n1011 1012\\n-1013 1014\\n1015 -1016\\n1017 1018\\n-1019 1020\\n1021 -1022\\n1023 1024\\n-1025 1026\",\n        \"15\\n550 550\\n-550 550\\n550 -550\\n-550 -550\\n451 450\\n-451 450\\n451 -450\\n-451 -450\\n352 350\\n-352 350\\n352 -350\\n-352 -350\\n253 250\\n-253 250\\n253 -250\",\n        \"16\\n3000 4000\\n-3000 -4000\\n2000 3000\\n-2000 -3000\\n4000 5000\\n-4000 -5000\\n1000 2000\\n-1000 -2000\\n0 1000\\n0 -1000\\n100 200\\n-100 -200\\n300 400\\n-300 -400\\n500 600\\n-500 -600\",\n        \"17\\n1 2\\n3 4\\n5 6\\n7 8\\n9 10\\n11 12\\n13 14\\n15 16\\n17 18\\n19 20\\n21 22\\n23 24\\n25 26\\n27 28\\n29 30\\n31 32\\n33 34\",\n        \"18\\n6000 7000\\n-6000 -7000\\n8000 9000\\n-8000 -9000\\n7000 8000\\n-7000 -8000\\n9000 10000\\n-9000 -10000\\n123 456\\n-123 -456\\n789 1011\\n-789 -1011\\n1112 1314\\n-1112 -1314\\n1315 1516\\n-1315 -1516\\n1517 1718\\n-1517 -1718\",\n        \"19\\n11 12\\n13 14\\n15 16\\n17 18\\n19 20\\n21 22\\n23 24\\n25 26\\n27 28\\n29 30\\n31 32\\n33 34\\n35 36\\n37 38\\n39 40\\n41 42\\n43 44\\n45 46\\n47 48\",\n        \"20\\n98 76\\n-54 32\\n10 -20\\n30 40\\n-50 60\\n70 -80\\n90 100\\n-110 120\\n130 -140\\n150 160\\n-170 180\\n190 200\\n-210 220\\n230 -240\\n250 260\\n-270 280\\n290 300\\n-310 320\\n330 -340\\n340 350\",\n        \"21\\n1200 1300\\n1400 1500\\n1600 1700\\n1800 1900\\n2000 2100\\n2200 2300\\n2400 2500\\n2600 2700\\n2800 2900\\n3000 3100\\n3200 3300\\n3400 3500\\n3600 3700\\n3800 3900\\n4000 4100\\n4200 4300\\n4400 4500\\n4600 4700\\n4800 4900\\n5000 5100\\n5200 5300\",\n        \"22\\n-200 300\\n400 -500\\n600 700\\n-800 900\\n1000 -1100\\n1200 1300\\n-1400 1500\\n1600 1700\\n-1800 1900\\n2000 -2100\\n2200 2300\\n-2400 2500\\n2600 2700\\n-2800 2900\\n3000 -3100\\n3200 3300\\n-3400 3500\\n3600 3700\\n-3800 3900\\n4000 -4100\\n4200 4300\\n-4400 4500\",\n        \"23\\n2345 6789\\n-1011 1213\\n1415 -1617\\n1819 2021\\n-2223 2425\\n2627 -2829\\n3031 3233\\n-3435 3637\\n3839 -4041\\n4243 4546\\n-4748 4950\\n5152 -5354\\n5556 5758\\n-5960 6162\\n6364 -6566\\n6768 6970\\n-7172 7374\\n7576 7778\\n-7980 8182\\n8384 -8586\\n8788 8990\\n-9192 9394\\n9596 -9798\",\n        \"24\\n-333 444\\n555 -666\\n777 888\\n-999 1111\\n2222 -3333\\n4444 5555\\n-6666 7777\\n8888 9999\\n-1010 1111\\n1212 -1313\\n1414 1515\\n-1616 1717\\n1818 -1919\\n2020 2121\\n-2222 2323\\n2424 -2525\\n2626 2727\\n-2828 2929\\n3030 -3131\\n3232 3333\\n-3434 3535\\n3636 3737\\n-3838 3939\\n4040 -4141\",\n        \"25\\n101 202\\n303 404\\n505 606\\n707 808\\n909 1010\\n1111 1212\\n1313 1414\\n1515 1616\\n1717 1818\\n1919 2020\\n2121 2222\\n2323 2424\\n2525 2626\\n2727 2828\\n2929 3030\\n3131 3232\\n3333 3434\\n3535 3636\\n3737 3838\\n3939 4040\\n4141 4242\\n4343 4444\\n4545 4646\\n4747 4848\\n4949 5050\",\n        \"26\\n-20 -19\\n-18 -17\\n-16 -15\\n-14 -13\\n-12 -11\\n-10 -9\\n-8 -7\\n-6 -5\\n-4 -3\\n-2 -1\\n0 1\\n2 3\\n4 5\\n6 7\\n8 9\\n10 11\\n12 13\\n14 15\\n16 17\\n18 19\\n20 21\\n22 23\\n24 25\\n26 27\\n28 29\\n30 31\",\n        \"27\\n-2000 -2001\\n-2002 -2003\\n-2004 -2005\\n-2006 -2007\\n-2008 -2009\\n-2010 -2011\\n-2012 -2013\\n-2014 -2015\\n-2016 -2017\\n-2018 -2019\\n-2020 -2021\\n-2022 -2023\\n-2024 -2025\\n-2026 -2027\\n-2028 -2029\\n-2030 -2031\\n-2032 -2033\\n-2034 -2035\\n-2036 -2037\\n-2038 -2039\\n-2040 -2041\\n-2042 -2043\\n-2044 -2045\\n-2046 -2047\\n-2048 -2049\\n-2050 -2051\\n-2052 -2053\",\n        \"28\\n50 50\\n49 49\\n48 48\\n47 47\\n46 46\\n45 45\\n44 44\\n43 43\\n42 42\\n41 41\\n40 40\\n39 39\\n38 38\\n37 37\\n36 36\\n35 35\\n34 34\\n33 33\\n32 32\\n31 31\\n30 30\\n29 29\\n28 28\\n27 27\\n26 26\\n25 25\\n24 24\\n23 23\",\n        \"29\\n-5050 -4040\\n-3030 -2020\\n-1010 0\\n1010 2020\\n3030 4040\\n5050 6060\\n7070 8080\\n9090 10000\\n-9090 -8080\\n-7070 -6060\\n-5050 -4040\\n-3030 -2020\\n-1010 0\\n1010 2020\\n3030 4040\\n5050 6060\\n7070 8080\\n9090 10000\\n-9090 -8080\\n-7070 -6060\\n-5050 -4040\\n-3030 -2020\\n-1010 0\\n1010 2020\\n3030 4040\\n5050 6060\\n7070 8080\\n9090 10000\\n-9090 -8080\",\n        \"30\\n3500 3600\\n3700 3800\\n3900 4000\\n4100 4200\\n4300 4400\\n4500 4600\\n4700 4800\\n4900 5000\\n5100 5200\\n5300 5400\\n5500 5600\\n5700 5800\\n5900 6000\\n6100 6200\\n6300 6400\\n6500 6600\\n6700 6800\\n6900 7000\\n7100 7200\\n7300 7400\\n7500 7600\\n7700 7800\\n7900 8000\\n8100 8200\\n8300 8400\\n8500 8600\\n8700 8800\\n8900 9000\\n9100 9200\\n9300 9400\"\n    ]\n}"}
{"name": "1328_A. Divisibility Problem", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 10^4) --- the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains two integers a and b (1 <= a, b <= 10^9).", "testcase": ["1\n2 3", "1\n100 200", "1\n123456789 987654321", "1\n1 1", "1\n999999999 1000000000", "1\n456789 123456", "1\n234567 765432", "1\n345678 876543", "1\n1000000 2000000", "1\n2147483647 2147483647", "1\n3456789 9876543", "1\n7777777 999999999", "1\n34567 76543", "1\n111111111 222222222", "1\n333333333 777777777", "1\n88888888 99999999", "1\n10000000 10000000", "1\n12345 54321", "1\n314159265 271828182", "1\n161803399 141421356", "1\n1123581321 161803399", "1\n100000 200000", "1\n149162536 123456789", "1\n22222222 33333333", "1\n500000000 500000000", "1\n98765432 12345678", "1\n24681012 1357911", "1\n101010101 202020202", "1\n303030303 404040404", "1\n505050505 606060606"]}
{"name": "510_B. Fox And Two Dots", "description": "Input\n\nThe first line contains two integers n and m (2 <= n, m <= 50): the number of rows and columns of the board.\n\nThen n lines follow, each line contains a string consisting of m characters, expressing colors of dots in each line. Each character is an uppercase Latin letter.", "testcase": ["2 2\nAA\nBB", "3 3\nABC\nBCA\nCAB", "2 3\nZZZ\nPPP", "4 4\nAAAA\nBBBB\nCCCC\nDDDD", "3 5\nABCDE\nFGHIJ\nKLMNO", "2 4\nWXYZ\nQRST", "5 5\nQQQQQ\nWWWWW\nEEEEE\nRRRRR\nTTTTT", "2 2\nXX\nYY", "4 3\nABC\nDEF\nGHI\nJKL", "6 6\nABCDEF\nFEDCBA\nABCDEF\nFEDCBA\nABCDEF\nFEDCBA", "3 4\nABCD\nEFGH\nIJKL", "5 5\nPQRST\nABCDE\nUVWXY\nFGHIJ\nKLMNO", "2 8\nABCDEFGH\nHGFEDCBA", "3 3\nPPP\nQQQ\nRRR", "7 7\nAAAAAAA\nBBBBBBB\nCCCCCCC\nDDDDDDD\nEEEEEEE\nFFFFFF\nGGGGGGG", "2 10\nABCDEFGHIJ\nJKLMNOPQR", "4 4\nMNMN\nNONO\nMNMN\nNONO", "3 3\nXXX\nYYY\nZZZ", "2 5\nAAAAA\nBBBBB", "8 8\nABCDEFGH\nIJKLMNOP\nQRSTUVWX\nYZABCDEF\nGHIJKLMN\nOPQRSTUV\nWXYZABCD\nEFGHIJKL", "4 6\nABCDEF\nFEDCBA\nABCDEF\nFEDCBA", "2 2\nKK\nKK", "5 5\nGGGGG\nHHHHH\nIIIII\nJJJJJ\nKKKKK", "6 6\nLMNOPQ\nQRSTUV\nWXYZAB\nCDEFAG\nHIJKLM\nNOPQRS", "7 7\nZZZZZZZ\nYYYYYYY\nXXXXXXX\nWWWWWWW\nVVVVVVV\nUUUUUUU\nTTTTTTT", "2 7\nABCDEFG\nGFEDCBA", "9 9\nRRRRRRRRR\nSSSSSSSSS\nTTTTTTTTT\nUUUUUUUUU\nVVVVVVVVV\nWWWWWWWWW\nXXXXXXXXX\nYYYYYYYYY\nZZZZZZZZZ", "8 8\nAABBCCDD\nEEDDCCBB\nAABBCCDD\nEEDDCCBB\nAABBCCDD\nEEDDCCBB\nAABBCCDD\nEEDDCCBB", "4 4\nQWER\nTYUI\nOPAS\nDFGH", "5 5\nJKLJI\nHGFED\nCBAZY\nXWVUT\nSRQPO"]}
{"name": "535_C. Tavas and Karafs", "description": "Input\n\nThe first line of input contains three integers A, B and n (1 <= A, B <= 106, 1 <= n <= 105).\n\nNext n lines contain information about queries. i-th line contains integers l, t, m (1 <= l, t, m <= 106) for i-th query.", "testcase": ["1 1 2\n1 5 3\n3 10 2", "2 3 1\n1 6 4", "999999 1000000 3\n500 1500 1000\n2000 3000 1500\n10 20 300", "650000 650000 2\n4000 8000 9000\n10000 20000 15000", "234567 765432 4\n123456 654321 111111\n222222 333333 444444\n555555 666666 777777\n123 234 345", "9999 8888 5\n12 34 56\n78 90 12\n34 56 78\n90 12 34\n56 78 90", "100000 100000 1\n1 100000 100000", "2 2 1\n100 100 100", "17 19 3\n1 1 1\n2 2 2\n3 3 3", "1 1000000 2\n10 20 30\n40 50 60", "100 200 1\n50 60 70", "500000 500001 3\n200000 300000 10000\n400000 500000 40000\n50 100 150", "300000 350000 1\n100000 200000 300000", "888888 999999 2\n123456 234567 345678\n1234 5678 91011", "50 100 3\n5 10 15\n20 25 30\n35 40 45", "765432 987654 4\n111111 222222 333333\n444444 555555 666666\n777777 888888 999999\n100000 150000 200000", "9999 9999 2\n1 2 3\n4 5 6", "100 500 5\n1 50 100\n150 200 250\n300 350 400\n450 500 550\n600 650 700", "1000 2000 2\n200 400 600\n800 1000 1200", "200000 300000 3\n10000 20000 30000\n40000 50000 60000\n70000 80000 90000", "123456 789012 1\n1 10 100", "1000000 1000000 1\n1 1000000 1000000", "111111 999999 4\n222222 333333 444444\n555555 666666 777777\n888888 999999 111111\n100000 150000 200000", "25 35 2\n5 15 25\n30 40 50", "555 777 3\n123 234 567\n890 123 456\n789 1011 1213", "503 504 1\n100000 200000 300000", "1 2 1\n2 3 4", "999999 999999 2\n1 2 3\n4 5 6", "4321 5432 4\n1234 2345 3456\n4567 5678 6789\n7890 8910 1234\n2345 3456 4567", "98765 98766 3\n10000 20000 30000\n60000 70000 80000\n90000 100000 110000"]}
{"name": "1068_B. LCM", "description": "Input\n\nThe only line contains one integer --- b (1 <= b <= 10^{10}).", "testcase": ["3", "17", "42", "9999999999", "1234567890", "987654321", "246802468", "1357913579", "864209865", "4815162342", "1024", "2048", "4096", "8192", "16384", "32768", "65536", "131072", "262144", "524288", "1048576", "2097152", "4194304", "8388608", "16777216", "33554432", "67108864", "134217728", "268435456", "536870912"]}
{"name": "221_A. Little Elephant and Function", "description": "Input\n\nA single line contains integer n (1 <= n <= 1000) --- the size of permutation.", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30"]}
{"name": "554_A. Kyoya and Photobooks", "description": "Input\n\nThe first line of input will be a single string s (1 <= |s| <= 20). String s consists only of lowercase English letters.", "testcase": ["a", "ab", "abc", "abcd", "abcde", "abcdef", "abcdefg", "abcdefgh", "abcdefghi", "abcdefghij", "abcdefghijk", "abcdefghijkl", "abcdefghijklm", "abcdefghijklmn", "abcdefghijklmno", "abcdefghijklmnop", "abcdefghijklmnopq", "abcdefghijklmnopqr", "abcdefghijklmnopqrs", "abcdefghijklmnopqrst", "abcdefghijklmnopqrstu", "abcdefghijklmnopqrstuv", "abcdefghijklmnopqrstuvw", "abcdefghijklmnopqrstuvwx", "abcdefghijklmnopqrstuvwxy", "abcdefghijklmnopqrstuvwxyz", "banana", "community", "development", "environment"]}
{"name": "624_B. Making a String", "description": "Input\n\nThe first line of the input contains a single integer n (2 <= n <= 26) --- the number of letters in the alphabet.\n\nThe next line contains n integers ai (1 <= ai <= 109) --- i-th of these integers gives the limitation on the number of occurrences of the i-th character in the string.", "testcase": ["2\n1 1", "3\n2 5 2", "5\n10 1 3 4 5", "4\n2 7 4 2", "6\n6 3 15 8 2 9", "7\n5 6 7 4 3 6 1", "8\n1 1 1 1 1 1 1 8", "10\n10 9 8 7 6 5 4 3 2 1", "9\n3 6 9 2 4 7 1 5 8", "2\n100000000 99999999", "11\n10 20 30 40 50 60 70 80 90 100 110", "12\n12 11 10 9 8 7 6 5 4 3 2 1", "13\n1000000 2000000 3000000 4000000 5000000 6000000 7000000 8000000 9000000 1000000 1100000 1200000 1300000", "14\n1 3 1 3 1 3 1 3 1 3 1 3 1 3", "15\n5 4 3 2 1 5 4 3 2 1 5 4 3 2 1", "16\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32", "17\n17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "18\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18", "19\n5000 4000 3000 2000 1000 500 400 300 200 100 50 40 30 20 10 5 4 3 2", "20\n9 9 4 4 1 1 9 9 4 4 1 1 9 9 4 4 1 1 9 9", "21\n7 6 5 4 3 2 1 7 6 5 4 3 2 1 7 6 5 4 3 2 1", "22\n5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95 100 105 110", "23\n23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "24\n100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300 2400", "25\n25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "26\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 26", "3\n3 1 2", "7\n7 6 5 4 3 2 1", "8\n8 7 6 5 4 3 2 1", "26\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26"]}
{"name": "1141_A. Game 23", "description": "Input\n\nThe only line of the input contains two integers n and m (1 <= n <= m <= 5*10^8).", "testcase": ["1 1", "2 3", "10 10", "100 1000", "123456 654321", "234567 765432", "345678 876543", "456789 987654", "100000 200000", "250000 500000", "300000 600000", "350000 700000", "400000 800000", "450000 900000", "500000 1000000", "150000 300000", "200000 400000", "250000 450000", "300000 500000", "350000 550000", "123 123123", "234 234234", "345 345345", "456 456456", "567 567567", "678 678678", "789 789789", "890 890890", "123456789 234567890", "345678901 456789012"]}
{"name": "1217_C. The Number Of Good Substrings", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 1000) --- the number of queries.\n\nThe only line of each query contains string s (1 <= |s| <= 2 * 10^5), consisting of only digits 0 and 1.\n\nIt is guaranteed that sum_{i=1}^{t} |s_i| <= 2 * 10^5.", "testcase": ["1\n0", "1\n1", "1\n01", "1\n10", "1\n111", "1\n000", "1\n101", "1\n010", "1\n1101", "1\n1001", "1\n00000", "1\n11111", "1\n00110011", "1\n11001100", "1\n10101010", "1\n01010101", "1\n1000000001", "1\n1111111111", "1\n000100010001", "1\n111011101110", "1\n100101100110", "1\n011010011001", "1\n1010101010101", "1\n0101010101010", "1\n111000111000111", "1\n000111000111000", "1\n101001010100101", "1\n010110101101011", "1\n111000110001100011", "1\n0001110011100111001"]}
{"name": "142_A. Help Farmer", "description": "Input\n\nThe only line contains integer n from the problem's statement (1 <= n <= 109).", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "109"]}
{"name": "1526_D. Kill Anton", "description": "Input\n\nThe first line of input contains a single integer t (1 <= t <= 100000) --- the number of testcases.\n\nThe first and only line of each testcase contains 1 string a (1 <= |a| <= 100000). a consists of only the characters \"A\", \"N\", \"O\" and \"T\".\n\nIt is guaranteed that the sum of |a| over all testcases does not exceed 100000.", "testcase": ["1\nANT", "2\nAAAA\nNOT", "1\nONAT", "1\nAAAAANNOOOOTT", "1\nA", "3\nNNN\nAAA\nTTT", "1\nNANANA", "1\nTONTO", "2\nANOT\nTANO", "1\nNATO", "1\nOTAN", "1\nNOTA", "2\nTANT\nTNAANTO", "1\nANNO", "1\nAANO", "1\nNOVA", "2\nANO\nANNA", "1\nONTO", "3\nTANTA\nAT\nNANO", "1\nANTOANOAN", "1\nAANTTOONN", "1\nTONNANNO", "1\nNANAOT", "2\nANATO\nTOANA", "1\nATTNAO", "1\nNONAN", "1\nTAAANNOOO", "1\nNNNAAAATTT", "1\nATNATNATN", "1\nOTOTOTOTOT"]}
{"name": "439_B. Devu, the Dumb Guy", "description": "Input\n\nThe first line will contain two space separated integers n, x (1 <= n, x <= 105). The next line will contain n space separated integers: c1, c2, ..., cn (1 <= ci <= 105).", "testcase": ["2 10000\n1 10000", "5 50000\n123 4567 8910 1112 1314", "3 20\n5 10 5", "4 9999\n2345 6789 3456 123", "10 100000\n10000 20000 30000 40000 50000 60000 70000 80000 90000 10000", "1 105\n105", "6 1000\n100 200 300 400 500 600", "7 77777\n11111 22222 33333 44444 55555 66666 77777", "8 88888\n8888 7777 6666 5555 4444 3333 2222 1111", "9 99999\n9999 8888 7777 6666 5555 4444 3333 2222 1111", "30 100000\n1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000 16000 17000 18000 19000 20000 21000 22000 23000 24000 25000 26000 27000 28000 29000 30000", "2 5000\n2500 2500", "5 200000\n40000 40000 40000 40000 40000", "3 33333\n11111 11111 11111", "4 44444\n11111 11111 11111 11111", "10 12345\n1234 567 890 1234 567 890 1234 567 890 1234", "1 100000\n100000", "6 65432\n10872 10123 12345 54321 6543 1234", "7 43210\n1234 2345 3456 4567 5678 6789 7890", "8 99999\n12500 12500 12500 12500 12500 12500 12500 12500", "9 98765\n10973 10973 10973 10973 10973 10973 10973 10973 10973", "30 123456\n4098 8196 12294 16392 20490 24588 28686 32784 36882 40980 45078 49176 53274 57372 61470 65568 69666 73764 77862 81960 86058 90156 94254 98352 102450 106548 110646 114744 118842 122940", "2 20000\n10000 10000", "5 123456\n24691 24691 24691 24691 24691", "3 9999\n3333 3333 3333", "4 54321\n13580 13580 13580 13580", "10 11111\n1111 1111 1111 1111 1111 1111 1111 1111 1111 1111", "1 55555\n55555", "6 66666\n11111 11111 11111 11111 11111 11111", "7 7777\n1111 1111 1111 1111 1111 1111 1111", "8 8888\n1111 1111 1111 1111 1111 1111 1111 1111", "9 9999\n1111 1111 1111 1111 1111 1111 1111 1111 1111", "30 10005\n335 335 335 335 335 335 335 335 335 335 335 335 335 335 335 335 335 335 335 335 335 335 335 335 335 335 335 335 335 335"]}
{"name": "1038_D. Slime", "description": "Input\n\nThe first line of the input contains an integer n (1 <= n <= 500 000) denoting the number of slimes.\n\nThe next line contains n integers a_i (-10^9 <= a_i <= 10^9), where a_i is the value of i-th slime.", "testcase": ["1\n0", "2\n1000000000 -1000000000", "3\n-999999999 -999999999 -999999999", "4\n500000000 500000000 500000000 500000000", "5\n-1 -2 -3 -4 -5", "6\n1 2 3 4 5 6", "7\n0 0 0 0 0 0 0", "8\n1000000000 -1000000000 1000000000 -1000000000 1000000000 -1000000000 1000000000 -1000000000", "9\n123456789 -123456789 987654321 -987654321 111111111 -111111111 999999999 -999999999 888888888", "10\n10 9 8 7 6 5 4 3 2 1", "11\n-10 -9 -8 -7 -6 -5 -4 -3 -2 -1 -11", "12\n1 2 3 4 5 6 7 8 9 10 11 12", "13\n-1 1 -1 1 -1 1 -1 1 -1 1 -1 1 -1", "14\n2147483647 -2147483648 2147483647 -2147483648 2147483647 -2147483648 2147483647 -2147483648 2147483647 -2147483648 2147483647 -2147483648 2147483647", "15\n-500000000 500000000 -500000000 500000000 -500000000 500000000 -500000000 500000000 -500000000 500000000 -500000000 500000000 -500000000 500000000 -500000000", "16\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "17\n1 -1 2 -2 3 -3 4 -4 5 -5 6 -6 7 -7 8 -8 9", "18\n-12 34 -56 78 -90 12 -34 56 -78 90 -12 34 -56 78 -90 12 -34 56", "19\n0 1000000000 0 -1000000000 0 1000000000 0 -1000000000 0 1000000000 0 -1000000000 0 1000000000 0 -1000000000 0 1000000000 0", "20\n-500000000 -500000000 -500000000 -500000000 -500000000 -500000000 -500000000 -500000000 -500000000 -500000000 -500000000 -500000000 -500000000 -500000000 -500000000 -500000000 -500000000 -500000000 -500000000 -500000000", "21\n1 -1 1 -1 1 -1 1 -1 1 -1 1 -1 1 -1 1 -1 1 -1 1 -1 1", "22\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44", "23\n1000000000 999999999 999999998 999999997 999999996 999999995 999999994 999999993 999999992 999999991 999999990 999999989 999999988 999999987 999999986 999999985 999999984 999999983 999999982 999999981 999999980 999999979 999999978", "24\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1", "25\n-1000000000 1000000000 -999999999 999999999 -999999998 999999998 -999999997 999999997 -999999996 999999996 -999999995 999999995 -999999994 999999994 -999999993 999999993 -999999992 999999992 -999999991 999999991 -999999990 999999990 -999999989 999999989 -999999988", "26\n1 0 -1 0 1 0 -1 0 1 0 -1 0 1 0 -1 0 1 0 -1 0 1 0 -1 0 1 0 -1 0 1 0", "27\n27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "28\n-28 -27 -26 -25 -24 -23 -22 -21 -20 -19 -18 -17 -16 -15 -14 -13 -12 -11 -10 -9 -8 -7 -6 -5 -4 -3 -2 -1", "29\n13 -23 33 -43 53 -63 73 -83 93 -103 113 -123 133 -143 153 -163 173 -183 193 -203 213 -223 233 -243 253 -263 273 -283 293", "30\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"]}
{"name": "1102_A. Integer Sequence Dividing", "description": "Input\n\nThe first line of the input contains one integer n (1 <= n <= 2 * 10^9).", "testcase": ["1", "2", "3", "4", "5", "100", "999", "1000", "1001", "12345", "67890", "999999", "1000000", "10000001", "123456789", "987654321", "1000000000", "1500000000", "2000000000", "1999999999", "178956970", "214748364", "429496729", "1431655765", "886731088", "1073741823", "14294967295", "17179869184", "2000000000", "2000000000"]}
{"name": "118_D. Caesar's Legions", "description": "Input\n\nThe only line contains four space-separated integers n1, n2, k1, k2 (1 <= n1, n2 <= 100, 1 <= k1, k2 <= 10) which represent how many footmen and horsemen there are and the largest acceptable number of footmen and horsemen standing in succession, correspondingly.", "testcase": ["1 1 1 1", "2 3 2 3", "4 4 1 1", "5 5 2 2", "6 6 3 3", "7 7 4 4", "8 8 5 5", "9 9 6 6", "10 10 7 7", "11 11 8 8", "12 12 9 9", "13 13 10 10", "14 14 1 1", "15 15 2 2", "16 16 3 3", "17 17 4 4", "18 18 5 5", "19 19 6 6", "20 20 7 7", "21 21 8 8", "22 22 9 9", "23 23 10 10", "24 24 2 3", "25 25 3 4", "26 26 4 5", "27 27 5 6", "28 28 6 7", "29 29 7 8", "30 30 8 9", "31 31 9 10"]}
{"name": "285_D. Permutation Sum", "description": "Input\n\nThe single line contains integer n (1 <= n <= 16).", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "1", "3", "5", "7", "9", "11", "13", "15", "2", "4", "6", "8", "10", "12", "14"]}
{"name": "44_I. Toys", "description": "Input\n\nThe first line contains an integer n (1 <= n <= 10) --- the number of toys.", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]}
{"name": "710_E. Generate a String", "description": "Input\n\nThe only line contains three integers n, x and y (1 <= n <= 107, 1 <= x, y <= 109) --- the number of letters 'a' in the input file and the parameters from the problem statement.", "testcase": ["1 1 1", "2 500000000 999999999", "3 100000000 250000000", "4 750000000 750000000", "5 2 2", "6 123456789 987654321", "7 10000000 10000000", "8 19999999 19999999", "9 5000000 5000000", "10 11 13", "11 999999999 999999999", "12 500 1000", "13 9000000 2000000", "14 3000001 7000002", "15 6000000 8000000", "16 43214321 123456789", "17 87654321 98765432", "18 10 20", "19 600000 700000", "20 8000 9000", "21 88 99", "22 7777777 8888888", "23 333 444", "24 555 666", "25 222 333", "26 1000 2000", "27 100000 200000", "28 15000 25000", "29 7000000 14000000", "30 100000 500000"]}
{"name": "822_A. I'm bored with life", "description": "Input\n\nThe first and single line contains two integers A and B (1 <= A, B <= 109, min(A, B) <= 12).", "testcase": ["1 1", "3 12", "5 6", "12 10000000", "11 300", "8 200000000", "2 2", "12 999999999", "4 1000", "7 9000000", "3 500000", "12 123456789", "1 109", "6 44444444", "1 1", "9 987654321", "12 9", "10 1000000000", "11 11", "3 789", "5 4567890", "2 222222222", "12 333333333", "7 777", "12 543210987", "8 87654321", "6 654321", "4 4321234", "10 10203040", "1 1000000000"]}
{"name": "p02127 AABABCAC", "description": "Input\n\nThe input is given in the following format.\n\n\n$ s $\n$ t $\n\n\nThe string $ s $ is given on the first line, and the string $ t $ is given on the second line.", "testcase": [{"s": "hello", "t": "world"}, {"s": "abc", "t": "def"}, {"s": "python", "t": "rocks"}, {"s": "test", "t": "case"}, {"s": "algorithm", "t": "performance"}, {"s": "data", "t": "mining"}, {"s": "machine", "t": "learning"}, {"s": "artificial", "t": "intelligence"}, {"s": "deep", "t": "neural"}, {"s": "random", "t": "forest"}, {"s": "linear", "t": "regression"}, {"s": "classification", "t": "task"}, {"s": "pattern", "t": "recognition"}, {"s": "natural", "t": "language"}, {"s": "support", "t": "vector"}, {"s": "decision", "t": "tree"}, {"s": "ensemble", "t": "methods"}, {"s": "clustering", "t": "analysis"}, {"s": "feature", "t": "selection"}, {"s": "gradient", "t": "boosting"}, {"s": "neural", "t": "network"}, {"s": "dimensionality", "t": "reduction"}, {"s": "genetic", "t": "algorithm"}, {"s": "fuzzy", "t": "logic"}, {"s": "information", "t": "retrieval"}, {"s": "k-nearest", "t": "neighbors"}, {"s": "principal", "t": "component"}, {"s": "reinforcement", "t": "learning"}, {"s": "supervised", "t": "learning"}, {"s": "unsupervised", "t": "learning"}]}
{"name": "110_C. Lucky Sum of Digits", "description": "Input\n\nThe single line contains an integer n (1 <= n <= 106) --- the sum of digits of the required lucky number.", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30"]}
{"name": "854_B. Maxim Buys an Apartment", "description": "Input\n\nThe only line of the input contains two integers: n and k (1 <= n <= 109, 0 <= k <= n).", "testcase": ["1 0", "2 1", "3 0", "3 3", "4 2", "5 0", "5 5", "100 50", "1000 999", "1000000 0", "1000000 1000000", "10000000 5000000", "109 9", "219 19", "876 76", "987654 654", "123456789 34567", "500000000 250000000", "999999999 0", "999999999 999999999", "345 123", "9999999 8888888", "8888888 1111111", "1111111 111111", "2222222 0", "3333333 333333", "4444444 4444444", "5555555 1234567", "6666666 654321", "7777777 777777"]}
{"name": "99_C. Help Victoria the Wise", "description": "Input\n\nThe first line contains exactly 6 characters without spaces from the set {R, O, Y, G, B, V} --- they are the colors of gems with which the box should be decorated.", "testcase": ["ROYGBV", "RRRRRR", "OOOOOO", "YYYYYY", "GGGGGG", "BBBBBB", "VVVVVV", "ROYGVB", "YVBRGO", "GRBOVY", "OYVGBR", "BGVORY", "VBROYG", "GYORBV", "RVGBYO", "OVRYBG", "BRYGOV", "YGBVRO", "GBVORY", "VOBGYR", "RBOVYG", "YGRVOB", "OBGYVR", "VROYGB", "BYGVRO", "GVOYBR", "RYOBVG", "OGVBYR", "BVROGY", "YVOGRB"]}
{"name": "p02320 Knapsack Problem with Limitations", "description": "Input\n\n\nN W\nv1 w1 m1\nv2 w2 m2\n:\nvN wN mN\n\n\nThe first line consists of the integers N and W. In the following N lines, the value, weight and limitation of the i-th item are given.", "testcase": ["3 50\n10 20 2\n30 40 1\n20 30 3", "4 100\n5 10 10\n15 20 4\n25 30 2\n35 40 1", "2 30\n3 5 7\n4 10 3", "5 70\n10 15 5\n20 25 2\n30 35 1\n5 10 8\n45 50 1", "6 200\n12 24 2\n7 14 3\n30 60 1\n40 80 2\n55 110 1\n33 66 3", "1 10\n2 2 5", "3 35\n5 5 4\n10 10 3\n15 15 2", "2 60\n40 20 1\n20 30 2", "7 150\n10 5 10\n20 10 8\n30 20 5\n40 30 3\n50 40 2\n60 50 1\n70 60 1", "3 40\n10 10 1\n20 20 2\n30 30 1", "4 80\n8 8 1\n16 16 3\n24 24 2\n32 32 1", "5 90\n18 9 4\n36 18 3\n54 27 2\n72 36 1\n90 45 1", "10 1000\n50 5 20\n100 10 15\n150 15 13\n200 20 12\n250 25 10\n300 30 8\n350 35 6\n400 40 5\n450 45 3\n500 50 2", "8 120\n16 2 6\n24 3 5\n32 4 5\n40 5 4\n48 6 3\n56 7 3\n64 8 2\n72 9 1", "3 15\n2 1 5\n4 2 4\n6 3 3", "6 85\n17 5 2\n34 10 2\n51 15 1\n68 20 1\n85 25 1\n102 30 1", "7 70\n7 3 3\n14 6 3\n21 9 3\n28 12 2\n35 15 2\n42 18 1\n49 21 1", "3 25\n5 3 3\n10 4 2\n15 5 1", "9 300\n30 10 10\n60 20 9\n90 30 8\n120 40 7\n150 50 6\n180 60 5\n210 70 4\n240 80 3\n270 90 2", "11 1100\n10 1 100\n20 2 90\n30 3 80\n40 4 70\n50 5 60\n60 6 50\n70 7 40\n80 8 30\n90 9 20\n100 10 10\n110 11 5", "4 44\n11 4 1\n22 8 2\n33 12 1\n44 16 1", "5 55\n10 5 5\n15 10 3\n20 15 2\n25 20 1\n30 25 1", "8 160\n20 10 4\n40 20 3\n60 30 2\n80 40 2\n100 50 1\n120 60 1\n140 70 1\n160 80 1", "2 75\n25 15 3\n50 25 1", "3 100\n20 10 5\n40 35 2\n60 55 1", "5 200\n40 50 2\n60 70 2\n80 90 1\n100 110 1\n120 130 1", "7 77\n11 6 7\n22 5 5\n33 4 3\n44 3 2\n55 2 1\n66 1 1\n77 7 1", "1 5\n3 2 1", "6 123\n23 3 6\n46 6 5\n69 9 4\n92 12 3\n115 15 2\n123 18 1", "8 80\n5 1 8\n10 2 7\n15 3 6\n20 4 5\n25 5 4\n30 6 3\n35 7 2\n40 8 1", "10 250\n25 12 5\n50 24 4\n75 36 3\n100 48 2\n125 60 2\n150 72 1\n175 84 1\n200 96 1\n225 108 1\n250 120 1"]}
{"name": "1204_D1. Kirk and a Binary String (easy version)", "description": "Input\n\nThe first line contains a binary string of length not more than 2\\: 000.", "testcase": ["0", "1", "01", "10", "110", "001", "111", "0000", "1010", "1101", "0011", "1111", "00000", "10101", "01010", "110011", "001100", "111111", "0000000", "1010101", "0101010", "11001100", "00110011", "11111111", "000000000", "101010101", "010101010", "1100110011", "0011001100", "1111111111"]}
{"name": "65_A. Harry Potter and Three Spells", "description": "Input\n\nThe first line contains 6 integers a, b, c, d, e, f (0 <= a, b, c, d, e, f <= 1000).", "testcase": ["0 0 0 0 0 0", "1 2 3 4 5 6", "10 20 30 40 50 60", "100 200 300 400 500 600", "999 999 999 999 999 999", "123 456 789 321 654 987", "0 1 2 3 4 5", "1 1 1 1 1 1", "2 4 6 8 10 12", "13 14 15 16 17 18", "200 150 100 50 25 12", "7 14 21 28 35 42", "50 100 150 200 250 300", "333 333 333 333 333 333", "444 444 444 444 444 444", "12 24 36 48 60 72", "987 654 321 987 654 321", "222 333 444 555 666 777", "888 888 888 888 888 888", "0 1000 0 1000 0 1000", "1000 0 1000 0 1000 0", "111 222 333 444 555 666", "555 444 333 222 111 0", "9 8 7 6 5 4", "3 3 3 3 3 3", "6 12 18 24 30 36", "800 600 400 200 100 50", "250 500 750 100 250 500", "678 345 123 678 345 123", "963 852 741 963 852 741"]}
{"name": "797_A. k-Factorization", "description": "Input\n\nThe first line contains two integers n and k (2 <= n <= 100000, 1 <= k <= 20).", "testcase": ["2 1", "100000 20", "50000 15", "32769 2", "12345 5", "23456 10", "34567 8", "45678 16", "10 3", "15000 6", "20000 7", "25000 9", "30000 4", "35000 11", "40000 13", "45000 12", "80000 14", "90000 17", "95000 18", "85000 19", "75000 20", "65000 1", "55000 2", "47000 3", "37000 4", "27000 7", "17000 6", "77000 5", "88000 9", "99000 10"]}
{"name": "933_C. A Colourful Prospect", "description": "Input\n\nThe first line of input contains one integer n (1 <= n <= 3), denoting the number of circles.\n\nThe following n lines each contains three space-separated integers x, y and r ( - 10 <= x, y <= 10, 1 <= r <= 10), describing a circle whose center is (x, y) and the radius is r. No two circles have the same x, y and r at the same time.", "testcase": ["1\n0 0 1", "1\n-10 10 2", "1\n10 -10 3", "1\n5 5 4", "1\n-5 -5 5", "2\n0 0 6\n1 1 1", "2\n-10 10 7\n10 -10 2", "2\n5 -5 8\n-5 5 3", "2\n3 3 9\n-3 -3 4", "2\n6 -6 1\n-6 6 5", "3\n0 0 10\n1 2 3\n-1 -1 2", "3\n-10 10 1\n10 -10 2\n0 0 3", "3\n5 5 4\n-5 -5 5\n1 1 6", "3\n2 -2 7\n-2 2 8\n0 0 9", "3\n7 7 10\n-7 -7 2\n3 3 3", "1\n0 1 1", "1\n-2 2 3", "1\n3 -3 4", "1\n-4 4 5", "1\n5 -5 6", "2\n0 1 1\n0 -1 2", "2\n2 0 3\n-2 0 4", "2\n1 1 5\n-1 -1 6", "2\n3 3 7\n-3 -3 8", "2\n4 -4 9\n-4 4 1", "3\n1 2 1\n3 3 2\n-1 -2 3", "3\n-2 -3 4\n2 3 5\n0 1 6", "3\n3 0 7\n-1 4 8\n1 -3 9", "3\n-4 1 10\n4 -1 2\n2 2 3", "3\n5 -2 4\n-5 2 5\n-1 -1 6"]}
{"name": "p01499 Rabbit Game Playing", "description": "Input\n\nThe first line of input contains two integers N and T (1 <= N <= 100,000, 1 <= T <= 10,000). N is the number of stages, and T is the compromise level.\n\nThe following N lines describe the difficulty levels of each stage. The i-th line contains one integer Di (1 <= Di <= 100,000), which is the difficulty level of the i-th stage.", "testcase": ["2 1\n4\n5", "3 10\n20000\n30000\n10000", "5 5\n12345\n23456\n34567\n45678\n56789", "4 7\n500\n500\n500\n500", "6 2\n1\n2\n3\n4\n5\n6", "7 3\n1500\n3000\n4500\n6000\n7500\n9000\n10500", "8 4\n1111\n2222\n3333\n4444\n5555\n6666\n7777\n8888", "9 9\n111\n222\n333\n444\n555\n666\n777\n888\n999", "10 2\n4312\n5423\n6534\n7645\n8756\n9867\n10978\n2021\n3132\n4243", "10 10\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1", "11 7\n100\n200\n300\n400\n500\n600\n700\n800\n900\n1000\n1100", "12 6\n100000\n20000\n30000\n40000\n50000\n60000\n70000\n80000\n90000\n100000\n11000\n12000", "13 5\n2134\n3245\n4356\n5467\n6578\n7689\n8710\n9821\n10932\n20143\n31254\n42365\n53476", "14 8\n7500\n8500\n9500\n10500\n11500\n12500\n13500\n14500\n15500\n16500\n17500\n18500\n19500\n20500", "15 10\n10\n20\n40\n80\n160\n320\n640\n1280\n2560\n5120\n10240\n20480\n40960\n81920\n100000", "16 4\n1234\n2345\n3456\n4567\n5678\n6789\n7890\n8901\n9012\n1013\n2124\n3235\n4346\n5457\n6568\n7679", "17 3\n300\n600\n900\n1200\n1500\n1800\n2100\n2400\n2700\n3000\n3300\n3600\n3900\n4200\n4500\n4800\n5100", "18 6\n10000\n20000\n30000\n40000\n50000\n60000\n70000\n80000\n90000\n100000\n11000\n12000\n13000\n14000\n15000\n16000\n17000\n18000", "19 7\n7654\n8765\n9876\n10987\n21098\n32109\n43210\n54321\n65432\n76543\n87654\n98765\n109876\n210987\n321098\n432109\n543210\n654321\n765432", "20 2\n2\n4\n8\n16\n32\n64\n128\n256\n512\n1024\n2048\n4096\n8192\n16384\n32768\n65536\n131072\n262144\n524288\n1048576", "21 8\n123\n234\n345\n456\n567\n678\n789\n890\n901\n12\n34\n56\n78\n90\n1234\n2345\n3456\n4567\n5678\n6789\n7890", "22 10\n10\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20", "23 1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1", "24 4\n4444\n4444\n4444\n4444\n4444\n4444\n4444\n4444\n4444\n4444\n4444\n4444\n4444\n4444\n4444\n4444\n4444\n4444\n4444\n4444\n4444\n4444\n4444\n4444", "25 3\n3\n6\n9\n12\n15\n18\n21\n24\n27\n30\n33\n36\n39\n42\n45\n48\n51\n54\n57\n60\n63\n66\n69\n72\n75", "26 5\n5000\n10000\n15000\n20000\n25000\n30000\n35000\n40000\n45000\n50000\n55000\n60000\n65000\n70000\n75000\n80000\n85000\n90000\n95000\n100000\n105000\n110000\n115000\n120000\n125000\n130000", "27 2\n78\n156\n234\n312\n390\n468\n546\n624\n702\n780\n858\n936\n1014\n1092\n1170\n1248\n1326\n1404\n1482\n1560\n1638\n1716\n1794\n1872\n1950\n2028\n2106", "28 7\n7000\n14000\n21000\n28000\n35000\n42000\n49000\n56000\n63000\n70000\n77000\n84000\n91000\n98000\n105000\n112000\n119000\n126000\n133000\n140000\n147000\n154000\n161000\n168000\n175000\n182000\n189000\n196000", "29 9\n999\n1998\n2997\n3996\n4995\n5994\n6993\n7992\n8991\n9990\n10989\n11988\n12987\n13986\n14985\n15984\n16983\n17982\n18981\n19980\n20979\n21978\n22977\n23976\n24975\n25974\n26973\n27972\n28971", "30 6\n6000\n12000\n18000\n24000\n30000\n36000\n42000\n48000\n54000\n60000\n66000\n72000\n78000\n84000\n90000\n96000\n102000\n108000\n114000\n120000\n126000\n132000\n138000\n144000\n150000\n156000\n162000\n168000\n174000", "100 100\n1000\n2000\n3000\n4000\n5000\n6000\n7000\n8000\n9000\n10000\n11000\n12000\n13000\n14000\n15000\n16000\n17000\n18000\n19000\n20000\n21000\n22000\n23000\n24000\n25000\n26000\n27000\n28000\n29000\n30000\n31000\n32000\n33000\n34000\n35000\n36000\n37000\n38000\n39000\n40000\n41000\n42000\n43000\n44000\n45000\n46000\n47000\n48000\n49000\n50000\n51000\n52000\n53000\n54000\n55000\n56000\n57000\n58000\n59000\n60000\n61000\n62000\n63000\n64000\n65000\n66000\n67000\n68000\n69000\n70000\n71000\n72000\n73000\n74000\n75000\n76000\n77000\n78000\n79000\n80000\n81000\n82000\n83000\n84000\n85000\n86000\n87000\n88000\n89000\n90000\n91000\n92000\n93000\n94000\n95000\n96000\n97000\n98000\n99000\n100000"]}
{"name": "634_B. XOR Equation", "description": "Input\n\nThe first line of the input contains two integers s and x (2 <= s <= 1012, 0 <= x <= 1012), the sum and bitwise xor of the pair of positive integers, respectively.", "testcase": ["2 0", "2 1", "10 2", "1000000 128", "1000000000000 999999999999", "500000000000 499999999999", "1000000000 7340032", "2048 1023", "999999999999 123456789010", "100000000000 98765432109", "4294967296 4294967295", "999999995904 987654320", "100000048576 12345678", "250000000000 350000000000", "111111111111 222222222222", "2147483647 2147483646", "909090909090 123456789012", "500000000001 100000000000", "350000000000 250000000000", "600000000000 600000000000", "1023 1", "1024 512", "65536 32768", "99999999977 88888888888", "8 3", "17 16", "194 5", "999999940000 600000", "100000000000 99999999", "512 256"]}
{"name": "p02259 Bubble Sort", "description": "Input\n\nThe first line of the input includes an integer N, the number of elements in the sequence.\n\nIn the second line, N elements of the sequence are given separated by spaces characters.", "testcase": ["1\n1", "2\n1 2", "3\n2 3 4", "4\n10 20 30 40", "5\n-1 -2 -3 -4 -5", "6\n100 200 100 200 100 200", "7\n0 0 0 0 0 0 0", "8\n1 -1 2 -2 3 -3 4 -4", "9\n9 8 7 6 5 4 3 2 1", "10\n-10 10 -10 10 -10 10 -10 10 -10 10", "11\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000", "12\n-1 2 -3 4 -5 6 -7 8 -9 10 -11 12", "13\n13 12 11 10 9 8 7 6 5 4 3 2 1", "14\n1 4 9 16 25 36 49 64 81 100 121 144 169 196", "15\n15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "16\n-16 -15 -14 -13 -12 -11 -10 -9 -8 -7 -6 -5 -4 -3 -2 -1", "17\n101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117", "18\n18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18", "19\n1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1", "20\n20 -20 20 -20 20 -20 20 -20 20 -20 20 -20 20 -20 20 -20 20 -20", "21\n1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1", "22\n22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "23\n-23 23 -22 22 -21 21 -20 20 -19 19 -18 18 -17 17 -16 16 -15 15 -14 14 -13 13 -12", "24\n2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1048576 2097152 4194304 8388608 16777216", "25\n1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49", "26\n-1 -4 -9 -16 -25 -36 -49 -64 -81 -100 -121 -144 -169 -196 -225 -256 -289 -324 -361 -400 -441 -484 -529 -576 -625 -676", "27\n27 54 81 108 135 162 189 216 243 270 297 324 351 378 405 432 459 486 513 540 567 594 621 648 675 702 729", "28\n0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1", "29\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29", "30\n30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1"]}
{"name": "1047_D. Little C Loves 3 II", "description": "Input\n\nA single line contains two integers n and m (1 <= n,m <= 10^9) --- the number of rows and the number of columns of the chessboard.", "testcase": ["1 1", "2 2", "3 3", "4 4", "5 5", "6 6", "7 7", "8 8", "10 10", "20 20", "50 50", "100 100", "200 200", "300 300", "400 400", "500 500", "600 600", "700 700", "800 800", "900 900", "1000 1000", "5000 5000", "10000 10000", "100000 100000", "200000 200000", "300000 300000", "400000 400000", "500000 500000", "1000000 1000000", "1000000000 1000000000"]}
{"name": "1409_B. Minimum Product", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 2 * 10^4) --- the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains five integers a, b, x, y and n (1 <= a, b, x, y, n <= 10^9). Additional constraint on the input: a >= x and b >= y always holds.", "testcase": ["1\n10 20 5 10 5", "1\n100 200 50 100 50", "1\n500 1000 200 500 10", "1\n25 30 20 25 5", "1\n123456789 987654321 12345678 98765432 100000000", "1\n43 57 42 56 1", "1\n320000000 450000000 319999999 449999999 2", "1\n7777777 8888888 7777771 8888882 6", "1\n214748364 214748364 107374182 107374182 107374182", "1\n1000000000 1000000000 1 1 999999999", "1\n54321 12345 5432 1234 1", "1\n67890 123456 6789 12345 50", "1\n111111111 222222222 111111110 222222220 1", "1\n999999999 500000000 100000000 1 499999999", "1\n1000000000 999999999 500000000 400000000 750000000", "1\n1024 2048 512 1024 100", "1\n333333333 666666666 222222222 555555555 111111111", "1\n98765432 12345678 9876540 1234560 10", "1\n864197532 975318642 864197530 975318640 2", "1\n999999940 999999980 1 40 939", "1\n1000000000 1000000000 500000000 500000000 499999999", "1\n100000000 100000000 1 1 99999999", "1\n123456789 987654321 12345678 98765432 87654321", "1\n222222222 111111111 22222221 11111111 200000000", "1\n999999991 999999992 999999990 999999990 1", "1\n600000000 700000000 599999999 699999999 2", "1\n800000000 900000000 799999999 899999999 1", "1\n444444444 555555555 444444443 555555554 2", "1\n10 5 2 1 2", "1\n935 814 500 300 250"]}
{"name": "628_A. Tennis Tournament", "description": "Input\n\nThe only line contains three integers n, b, p (1 <= n, b, p <= 500) --- the number of participants and the parameters described in the problem statement.", "testcase": ["1 1 1", "2 2 2", "3 4 5", "4 3 2", "5 10 15", "6 20 25", "7 100 200", "8 150 100", "9 250 300", "10 50 50", "11 80 90", "12 60 70", "13 30 40", "14 110 120", "15 130 140", "16 170 160", "17 180 190", "18 210 220", "19 230 240", "20 260 270", "21 280 290", "22 300 310", "23 320 330", "24 340 350", "25 360 370", "26 380 390", "27 400 410", "28 420 430", "29 440 450", "30 460 470"]}
{"name": "791_A. Bear and Big Brother", "description": "Input\n\nThe only line of the input contains two integers a and b (1 <= a <= b <= 10) --- the weight of Limak and the weight of Bob respectively.", "testcase": ["1 1", "1 2", "1 3", "1 4", "1 5", "1 6", "1 7", "1 8", "1 9", "1 10", "2 2", "2 3", "2 4", "2 5", "2 6", "2 7", "2 8", "2 9", "3 3", "3 4", "3 5", "3 6", "3 7", "3 8", "4 4", "4 5", "4 6", "4 7", "4 8", "5 5"]}
{"name": "405_A. Gravity Flip", "description": "Input\n\nThe first line of input contains an integer n (1 <= n <= 100), the number of the columns in the box. The next line contains n space-separated integer numbers. The i-th number ai (1 <= ai <= 100) denotes the number of cubes in the i-th column.", "testcase": ["1\n1", "2\n1 2", "3\n3 2 1", "4\n4 4 4 4", "5\n5 1 2 3 4", "6\n1 2 3 4 5 6", "7\n7 6 5 4 3 2 1", "8\n8 1 7 2 6 3 5 4", "9\n1 1 1 1 1 1 1 1 1", "10\n10 9 8 7 6 5 4 3 2 1", "11\n1 2 3 4 5 6 7 8 9 10 11", "12\n12 11 10 9 8 7 6 5 4 3 2 1", "13\n1 3 5 7 9 11 13 11 9 7 5 3 1", "14\n14 13 12 11 10 9 8 7 6 5 4 3 2 1", "15\n1 2 2 3 3 4 4 5 5 6 6 7 7 8 8", "16\n16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "17\n1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9", "18\n9 8 7 6 5 4 3 2 1 1 2 3 4 5 6 7 8 9", "19\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19", "20\n20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "21\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "22\n22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "23\n1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1", "24\n1 3 5 7 9 11 13 15 17 19 21 23 22 20 18 16 14 12 10 8 6 4 2", "25\n25 24 21 20 17 16 13 12 9 8 5 4 1 2 3 6 7 10 11 14 15 18 19 22 23", "26\n1 3 5 3 1 3 5 3 1 3 5 3 1 3 5 3 1 3 5 3 1 3 5 3 1 3", "27\n27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "28\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 27 25 23 21 19 17 15 13 11 9 7 5 3 1", "29\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29", "30\n30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1"]}
{"name": "736_B. Taxes", "description": "Input\n\nThe first line of the input contains a single integer n (2 <= n <= 2\u00b7109) --- the total year income of mr. Funt.", "testcase": ["2", "3", "100", "200", "500", "1000", "1500", "2000", "10000", "50000", "100000", "500000", "1000000", "1500000", "2000000", "999999", "1111111", "2234567", "3333333", "4444444", "5555555", "6666666", "7777777", "8888888", "9999999", "123456789", "987654321", "1999999999", "2000000000", "174638291"]}
{"name": "760_B. Frodo and pillows", "description": "Input\n\nThe only line contain three integers n, m and k (1 <= n <= m <= 109, 1 <= k <= n) --- the number of hobbits, the number of pillows and the number of Frodo's bed.", "testcase": ["1 1 1", "2 3 1", "3 6 2", "4 7 3", "5 8 1", "6 12 6", "7 14 3", "8 16 5", "9 20 4", "10 25 6", "11 30 2", "12 35 4", "13 40 7", "14 45 5", "15 50 8", "16 60 10", "17 68 11", "18 72 9", "19 76 13", "20 80 16", "21 84 17", "22 88 14", "23 92 18", "24 96 20", "25 100 21", "26 110 22", "27 120 23", "28 130 24", "29 140 25", "30 150 26"]}
{"name": "p00357 Trampoline", "description": "Input\n\nThe input is given in the following format.\n\n\nN\nd_1\nd_2\n:\nd_N\n\n\nThe first line provides the number of trampolines N (2 <= N <= 3 \u00d7 105). Each of the subsequent N lines gives the maximum allowable jumping distance in integer meters for the i-th trampoline d_i (1 <= d_i <= 106).", "testcase": ["2\n1\n2", "3\n1\n2\n3", "4\n4\n3\n2\n1", "5\n5\n4\n3\n2\n1", "6\n1\n2\n3\n4\n5\n6", "2\n1000000\n1000000", "7\n1\n1\n1\n1\n1\n2\n3", "8\n8\n7\n6\n5\n4\n3\n2\n1", "9\n2\n3\n5\n7\n11\n13\n17\n19\n23", "10\n1\n2\n2\n3\n3\n4\n4\n5\n5\n6", "3\n500000\n500000\n500000", "3\n100\n200\n300", "3\n300\n200\n100", "6\n234567\n123456\n234567\n123456\n234567\n123456", "11\n1\n1\n2\n2\n3\n3\n4\n4\n5\n5\n10", "5\n10000\n20000\n30000\n40000\n50000", "4\n4444\n3333\n2222\n1111", "2\n999999\n888888", "10\n10\n20\n30\n40\n50\n60\n70\n80\n90\n100", "15\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1", "7\n1000000\n1000000\n1000000\n1000000\n1000000\n1000000\n1000000", "8\n11\n22\n33\n44\n55\n66\n77\n88", "6\n6\n6\n6\n6\n6\n6", "12\n23\n34\n45\n56\n67\n78\n89\n90\n123\n234\n345\n456", "20\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20", "21\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1", "5\n111111\n222222\n333333\n444444\n555555", "4\n999\n888\n777\n666", "13\n130\n120\n110\n100\n90\n80\n70\n60\n50\n40\n30\n20\n10", "14\n1\n3\n7\n15\n31\n63\n127\n255\n511\n1023\n2047\n4095\n8191\n16383"]}
{"name": "1352_C. K-th Not Divisible by n", "description": "Input\n\nThe first line contains an integer t (1 <= t <= 1000) --- the number of test cases in the input. Next, t test cases are given, one per line.\n\nEach test case is two positive integers n (2 <= n <= 10^9) and k (1 <= k <= 10^9).", "testcase": ["3 10", "2 1", "1000000000 500000000", "123456789 100000", "234567890 12345", "345678901 9876543", "456789012 77777", "567890123 88888", "678901234 99999", "789012345 11111", "890123456 22222", "901234567 33333", "112345678 44444", "212345679 55555", "312345680 66666", "412345681 1000000", "512345682 2000000", "612345683 3000000", "712345684 4000000", "812345685 5000000", "912345686 6000000", "1012345687 7000000", "1112345688 8000000", "1212345689 9000000", "1312345690 43210", "1412345691 54321", "1512345692 65432", "1612345693 76543", "1712345694 87654", "1812345695 98765"]}
{"name": "864_C. Bus", "description": "Input\n\nThe first line contains four integers a, b, f, k (0 < f < a <= 106, 1 <= b <= 109, 1 <= k <= 104) --- the endpoint of the first bus journey, the capacity of the fuel tank of the bus, the point where the gas station is located, and the required number of journeys.", "testcase": ["1000000 1000000000 500000 1", "100 1000 50 2", "500 2000 250 10", "100000 999999 9999 20", "200 500 100 3", "10000 50000 99 5", "300000 700000 150000 7", "1000000 1000000 123456 1", "999999 1000000 888888 10", "555555 777777 444444 8", "456789 987654 333333 15", "222222 333333 111111 6", "1000000 500000 250000 20", "600000 2000000 300000 7", "800000 900000 400000 5", "230000 450000 100000 9", "1000000 2000000 750000 4", "870000 1000000 435000 10", "980000 2000000 490000 4", "460000 1000000 230000 6", "650000 300000 325000 2", "777777 888888 400000 4", "123456 654321 10000 30", "262144 524288 131072 3", "400000 500000 200000 12", "950000 1900000 475000 8", "150000 750000 37000 7", "710000 1420000 355000 11", "440000 880000 220000 9", "365000 730000 182500 13"]}
{"name": "171_D. Broken checker", "description": "Input\n\nThe only line of the input contains an integer between 1 and 5, inclusive. All tests for this problem are different. The contents of the test case doesn't need to be equal to its index.", "testcase": ["1", "2", "3", "4", "5", "1", "2", "3", "4", "5", "1", "2", "3", "4", "5", "1", "2", "3", "4", "5", "1", "2", "3", "4", "5", "1", "2", "3", "4", "5"]}
{"name": "402_A. Nuts", "description": "Input\n\nThe first line contains four space-separated integers k, a, b, v (2 <= k <= 1000; 1 <= a, b, v <= 1000) --- the maximum number of sections in the box, the number of nuts, the number of divisors and the capacity of each section of the box.", "testcase": ["2 50 3 10", "5 100 4 25", "3 75 2 30", "10 200 8 50", "4 60 1 15", "8 120 10 40", "7 140 6 35", "6 90 5 20", "9 180 7 45", "12 240 12 60", "11 220 11 55", "15 300 15 75", "14 280 14 70", "13 260 13 65", "17 340 16 85", "16 320 17 80", "18 360 18 90", "19 380 19 95", "20 400 20 100", "22 440 21 110", "21 420 22 105", "24 480 23 120", "23 460 24 115", "26 520 25 130", "25 500 26 125", "28 560 27 140", "27 540 28 135", "30 600 29 150", "29 580 30 145", "1000 1000 1000 1000"]}
{"name": "597_A. Divisibility", "description": "Input\n\nThe only line contains three space-separated integers k, a and b (1 <= k <= 1018; - 1018 <= a <= b <= 1018).", "testcase": ["1 -1000000000000000000 1000000000000000000", "2 -500000000000000000 500000000000000000", "3 -200000000000000000 300000000000000000", "4 -10000000000000000 40000000000000000", "5 -2000000000000000 2000000000000000", "6 -90000000000000 90000000000000", "7 -8000000000000 5000000000000", "8 -10000000000 20000000000", "9 -7000000000 6000000000", "10 -1000000000 2000000000", "11 -200000000 500000000", "12 -50000000 100000000", "13 -3000000 4000000", "14 -500000 800000", "15 -100000 150000", "16 -10000 20000", "17 -5000 5000", "18 -1000 2000", "19 -100 200", "20 -50 100", "21 -20 30", "22 -10 15", "23 -5 6", "24 -3 4", "25 -2 2", "1018 -100000 100000", "100000000000000 -2000000 2000000", "99999999999999 -99999999999 99999999999", "88888888888888 -88888888888 88888888888", "77777777777777 -77777777777 77777777777"]}
{"name": "690_A2. Collective Mindsets (medium)", "description": "Input\n\nThe only line of input contains one integer: N, the number of attendees (1 <= N <= 109).", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "100000000", "250000000", "500000000", "750000000", "1000000000"]}
{"name": "779_B. Weird Rounding", "description": "Input\n\nThe only line of the input contains two integer numbers n and k (0 <= n <= 2 000 000 000, 1 <= k <= 9).\n\nIt is guaranteed that the answer exists. All numbers in the input are written in traditional notation of integers, that is, without any extra leading zeros.", "testcase": ["0 1", "1 2", "2000000000 3", "123456789 4", "987654321 5", "999999999 6", "198765432 7", "100000000 8", "2000000000 9", "102030405 1", "506070809 2", "100 3", "333333333 4", "444444444 5", "123123123 2", "456456456 7", "789789789 8", "910111213 1", "1415161718 9", "100100100 3", "211211211 2", "322322322 6", "433433433 5", "544544544 4", "655655655 7", "766766766 1", "877877877 8", "988988988 9", "109109109 3", "1112131415 6"]}
{"name": "825_F. String Compression", "description": "Input\n\nThe only line of input contains one string s consisting of lowercase Latin letters (1 <= |s| <= 8000).", "testcase": ["a", "bc", "def", "ghij", "klmno", "pqrstu", "vwxyzab", "cdefghij", "jklmnopqr", "stuvwxyzab", "abcdefghij", "klmnopqrstu", "uvwxyzabcdef", "ghijklmnopqr", "stuvwxyabcdefgh", "ijklmnopqrstuvwx", "yzabcdefghijklmnop", "qrstuvwxyabcdefghij", "klmnopqrstuvwxyzabcde", "fghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuv", "wxyzabcdefghijklmnopqr", "stuvwxyzabcdefghijklmnop", "ghijklmnopqrstuvwxyzabcdef", "ijklmnopqrstuvwxyzabcdefgh", "opqrstuvwxyzabcdefghijklmnop", "qrstuvwxyzabcdefghijklmnopqrst", "uvwxyzabcdefghijklmnopqrstuvw", "cdefghijklmnopqrstuvwxyzabcdefg", "hijklmnopqrstuvwxyzabcdefghijklmnop"]}
{"name": "1225_C. p-binary", "description": "Input\n\nThe only line contains two integers n and p (1 <= n <= 10^9, -1000 <= p <= 1000).", "testcase": ["1 -1000", "1000000000 1000", "10000000 123", "500 345", "87654321 -432", "999999999 999", "2 -876", "345678 -789", "234567890 -101", "10 250", "50 -500", "42 42", "314159265 -358", "271828182 845", "161803399 -874", "141421356 237", "173205080 -756", "223606797 750", "244948974 -998", "20 500", "400000000 -400", "358979323 846", "161803398 874", "123456789 0", "987654321 -987", "7 777", "65536 -655", "32768 328", "1000000 -1", "999999 1000"]}
{"name": "570_B. Simple Game", "description": "Input\n\nThe first line contains two integers n and m (1 <= m <= n <= 109) --- the range of numbers in the game, and the number selected by Misha respectively.", "testcase": ["10 5", "1000000000 1", "500000000 123456", "1000 999", "20000000 19999999", "87987987 12345", "1234567 123456", "987654321 24681357", "99999999 88888888", "54321 12345", "600000000 345678", "234567890 34567", "456789 123", "159753 456", "7 7", "13579 2468", "524288 262144", "192837465 123456789", "333333333 111111111", "852741 369", "357159 753", "24682468 13579135", "1024 512", "999999937 937", "907203 202020", "9999 9998", "800000000 799999999", "308756 765", "1975308642 975308642", "400000000 987654"]}
{"name": "81_A. Plug-in", "description": "Input\n\nThe input data consists of a single line to be processed. The length of the line is from 1 to 2\u00b7105 characters inclusive. The string contains only lowercase Latin letters.", "testcase": ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "abc", "defghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqr", "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"]}
{"name": "98_B. Help King", "description": "Input\n\nThe first line contains a single integer n from the problem's statement (1 <= n <= 10000).", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30"]}
{"name": "1070_A. Find a Number", "description": "Input\n\nThe first line contains two positive integers d and s (1 <= d <= 500, 1 <= s <= 5000) separated by space.", "testcase": ["1 1", "2 10", "3 50", "4 100", "5 200", "6 300", "7 400", "8 500", "9 600", "10 700", "11 800", "12 900", "13 1000", "14 1100", "15 1200", "16 1300", "17 1400", "18 1500", "19 1600", "20 1700", "21 1800", "22 1900", "23 2000", "24 2100", "25 2200", "26 2300", "27 2400", "28 2500", "29 2600", "30 2700"]}
{"name": "1199_C. MP3", "description": "Input\n\nThe first line contains two integers n and I (1 <= n <= 4 * 10^{5}, 1 <= I <= 10^{8}) --- the length of the array and the size of the disk in bytes, respectively.\n\nThe next line contains n integers a_{i} (0 <= a_{i} <= 10^{9}) --- the array denoting the sound file.", "testcase": ["1 100000000\n0", "2 50000000\n1000000 2000000", "3 80000000\n12345 67890 23456", "4 400000\n98765 54321 123456789 987654321", "5 12345678\n0 1 2 3 4", "10 99999999\n10 20 30 40 50 60 70 80 90 100", "6 5555555\n555 666 777 888 999 1110", "7 7654321\n100009 200008 300007 400006 500005 600004 700003", "8 8888888\n111111111 222222222 333333333 444444444 555555555 666666666 777777777 888888888", "9 10000000\n100000000 900000000 800000000 700000000 600000000 500000000 400000000 300000000 200000000", "4 1000000\n1024 2048 4096 8192", "5 2000000\n256 512 1024 2048 4096", "6 3000000\n16384 32768 65536 131072 262144 524288", "7 10000000\n1048576 2097152 3145728 4194304 5242880 6291456 7340032", "2 8000000\n536870912 1073741824", "3 15000000\n3489660927 6979321854 10458982781", "4 95000000\n0 0 0 0", "5 75000000\n100000000 100000000 100000000 100000000 100000000", "3 500\n1 2 3", "8 9999999\n9999999 88888888 77777777 66666666 55555555 44444444 33333333 22222222", "6 70000000\n123456789 987654321 123456789 987654321 123456789 987654321", "4 25000000\n0 100000000 50000000 100000000", "11 85000000\n1 1 2 3 5 8 13 21 34 55 89", "7 20000000\n429496729 857993458 1286990187 17159842416 21449782945 25739723474 300296639903", "5 50000000\n1 3 7 15 31", "3 60000000\n2147483646 2147483647 2147483647", "4 42000000\n0 0 1073741823 1073741823", "5 123456789\n1000000000 900000000 800000000 700000000 600000000", "10 30000000\n50000000 40000000 30000000 20000000 10000000 5000000 4000000 3000000 2000000 1000000", "12 48000000\n123 456 789 1011 1213 1415 1617 1819 2021 2223 2425 2627", "4 10000000\n999999999 888888888 777777777 666666666"]}
{"name": "14_E. Camels", "description": "Input\n\nThe first line contains a pair of integers n and t (3 <= n <= 20, 1 <= t <= 10).", "testcase": ["3 1", "4 2", "5 3", "6 4", "7 5", "8 6", "9 7", "10 8", "11 1", "12 2", "13 3", "14 4", "15 5", "16 6", "17 7", "18 8", "19 9", "20 10", "6 1", "7 2", "8 3", "9 4", "10 5", "11 6", "12 7", "13 8", "14 9", "15 10", "16 1", "17 2"]}
{"name": "626_B. Cards", "description": "Input\n\nThe first line of the input contains a single integer n (1 <= n <= 200) --- the total number of cards.\n\nThe next line contains a string s of length n --- the colors of the cards. s contains only the characters 'B', 'G', and 'R', representing blue, green, and red, respectively.", "testcase": ["1\nB", "2\nBR", "3\nBBB", "4\nRRRR", "5\nRGBBR", "6\nRRGGGB", "7\nGGBBRRR", "8\nRGBRGBRG", "9\nBGBGBGBGB", "10\nRRRGGGBBBB", "11\nRRRRRGGGGB", "12\nBGRBGRBGRBGR", "13\nRGBRGBRGBRGBR", "14\nRBRBRBRBRBRBRB", "15\nRRRRRRGGGGGBBBB", "16\nBBBGGGRRRRRRBBB", "17\nGGGGRRRBBBBGGGRR", "18\nRGRGRGRGRGRGRGRGRG", "19\nRGBRGBRGBRGBRGBGB", "20\nBRBRBRBRBRBRBRBRBRBR", "21\nRGBRGBRGBRGBRGBRGBRGB", "22\nBGRBGRBGRBGRBGRBGRBGRB", "23\nRRRRRRGGGGGGBBBBBBRRRRR", "24\nBGBGBGBGBGBGBGBGBGBGBGBGBG", "25\nRRRRRGGGGGGBBBBBBGRRRRRGGG", "26\nBGRGRGRGBGBGBGBGBGBGRGRGRG", "27\nRRRGGGBBBRRRGGGBBBRRRGGGBBB", "28\nRGBRGBRGBRGBRGBRGBRGBRGBRGBRGB", "29\nRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "30\nBBBBBBBBBBBBBBBBBBBBBGGGGGGGGGGGGGGGGGGGRRRRRRRRRRRRRRRRRRR"]}
{"name": "765_B. Code obfuscation", "description": "Input\n\nIn the only line of input there is a string S of lowercase English letters (1 <= |S| <= 500) --- the identifiers of a program with removed whitespace characters.", "testcase": ["a", "function", "variable", "ifelsecondition", "whileloop", "forloop", "integeridentifier", "stringvalue", "charactervar", "doubleprecision", "booleanflag", "arrayofintegers", "listofstrings", "mapoftypes", "setofvalues", "queueimplementation", "stackbuiltins", "binarysearchtree", "linkedlist", "graphrepresentation", "hashtablestructure", "recursionfunction", "dynamicprogramming", "maximalvalue", "minimaldifference", "pathfindingalgorithm", "cachingmechanism", "sortalgorithms", "divideandconquertechnique", "multiplereturnvalues"]}
{"name": "1424_G. Years", "description": "Input\n\nThe first line contains an integer n (1 <= n <= 10^5) --- the number of people.\n\nEach of the following n lines contain two integers b and d (1 <= b < d <= 10^9) representing birth and death year (respectively) of each individual.", "testcase": ["3\n1910 1980\n1923 2001\n1934 1990", "2\n1956 2003\n1977 2050", "4\n1876 1953\n1901 1984\n1921 2000\n1945 2010", "1\n1988 2080", "5\n1805 1899\n1813 1900\n1822 1910\n1831 1920\n1850 1940", "6\n1900 1930\n1910 1940\n1920 1950\n1930 1960\n1940 1970\n1950 1980", "7\n1965 2025\n1971 2042\n1980 2070\n1990 2080\n2000 2091\n2005 2101\n2010 2110", "10\n1995 2045\n2000 2050\n2005 2055\n2010 2060\n2015 2065\n2020 2070\n2025 2075\n2030 2080\n2035 2085\n2040 2090", "8\n1994 2025\n1990 2026\n1991 2030\n1992 2035\n1993 2040\n1995 2045\n1996 2050\n1997 2055", "3\n1980 2100\n1976 2090\n1975 2085", "4\n1890 1975\n1900 1985\n1910 1995\n1920 2005", "5\n1800 1923\n1823 1942\n1845 1950\n1867 1965\n1888 1984", "9\n1800 1888\n1857 1932\n1898 1944\n1912 1988\n1922 2000\n1933 2010\n1944 2022\n1980 2080\n1999 2099", "3\n1850 1930\n1860 1940\n1870 1950", "7\n1907 1977\n1918 1999\n1930 2011\n1947 2029\n1958 2060\n1977 2076\n1984 2090", "6\n1990 2050\n1985 2030\n1978 2022\n1966 2005\n1955 1988\n1944 1977", "2\n1886 1963\n1909 2000", "8\n1804 1885\n1822 1909\n1843 1930\n1861 1952\n1880 1969\n1900 1988\n1919 2002\n1938 2022", "3\n1980 2060\n1999 2099\n2001 2100", "9\n1850 1900\n1875 1925\n1890 1930\n1910 1950\n1930 1970\n1950 1990\n1970 2010\n1990 2030\n2010 2050", "10\n1992 2015\n1994 2020\n1996 2025\n1998 2030\n2000 2040\n2002 2050\n2004 2060\n2006 2070\n2008 2080\n2010 2090", "2\n1960 2019\n1980 2055", "7\n1900 1965\n1915 1979\n1932 1990\n1950 2005\n1968 2017\n1985 2045\n2001 2080", "5\n1801 1890\n1820 1905\n1840 1922\n1865 1940\n1887 1964", "4\n1905 1990\n1920 2018\n1935 2020\n1970 2070", "8\n1993 2028\n1995 2032\n1997 2036\n1999 2040\n2001 2044\n2003 2048\n2005 2052\n2007 2056", "6\n2001 2082\n2002 2084\n2003 2086\n2004 2088\n2005 2090\n2006 2092", "7\n1991 2011\n1995 2030\n2000 2055\n2005 2077\n2010 2094\n2015 2109\n2020 2125", "1\n1955 2025", "5\n1970 2000\n1985 2015\n1999 2049\n2006 2066\n2020 2080", "10\n1900 1950\n1910 1960\n1920 1970\n1930 1980\n1940 1999\n1950 2000\n1960 2010\n1970 2020\n1980 2030\n1990 2040"]}
{"name": "1445_C. Division", "description": "Input\n\nThe first line contains an integer t (1 <= t <= 50) --- the number of pairs.\n\nEach of the following t lines contains two integers p_i and q_i (1 <= p_i <= 10^{18}; 2 <= q_i <= 10^{9}) --- the i-th pair of integers.", "testcase": ["1\n2 2", "2\n3 4\n5 6", "1\n8 10", "1\n11 3", "2\n12 5\n7 8", "1\n100 200", "1\n9999 10000", "1\n123456789 23456789", "3\n1000000007 7\n1000000009 9\n10000000021 21", "1\n1000000000000000000 1000000000", "1\n923456789123456789 123456789", "2\n345678912345678 456789\n987654321987654321 134679", "1\n111111111111111111 222222222", "1\n17 18", "1\n19 20", "2\n999999999 9999999\n888888888 88888888", "1\n77 77777", "2\n54321 12345\n67890 23456", "1\n314159265358979 42", "1\n271828182845904 37", "1\n161803398874989 19", "1\n141421356237309 24", "1\n173205080756887 29", "1\n223606797749978 31", "1\n244948974278317 55", "1\n316227766016837 61", "1\n836660026534075 67", "1\n187082869338767 71", "1\n180339887498948 73", "1\n65693924688152 79"]}
{"name": "1519_B. The Cake Is a Lie", "description": "Input\n\nThe first line contains the single integer t (1 <= t <= 100) --- the number of test cases.\n\nThe first and only line of each test case contains three integers n, m, and k (1 <= n, m <= 100; 0 <= k <= 10^4) --- the sizes of grid and the exact amount of money you need to spend.", "testcase": ["1\n3 3 0", "1\n5 5 100", "1\n100 100 5000", "1\n7 4 1234", "1\n9 2 3000", "1\n15 15 1000", "1\n10 10 2000", "1\n55 45 4500", "1\n60 60 8000", "1\n33 77 123", "1\n22 88 200", "1\n13 37 999", "1\n76 76 4500", "1\n89 36 3600", "1\n42 42 4200", "1\n11 11 110", "1\n17 19 1500", "1\n23 29 2001", "1\n31 41 7777", "1\n2 2 0", "1\n3 2 50", "1\n4 3 100", "1\n5 1 25", "1\n6 6 500", "1\n7 3 210", "1\n8 4 320", "1\n9 5 400", "1\n10 8 750", "1\n1 1 0", "1\n99 100 10000"]}
{"name": "577_A. Multiplication Table", "description": "Input\n\nThe single line contains numbers n and x (1 <= n <= 105, 1 <= x <= 109) --- the size of the table and the number that we are looking for in the table.", "testcase": ["1 1", "2 10", "3 100", "4 1000", "5 10000", "6 100000", "7 1000000", "8 10000000", "9 100000000", "10 9", "11 99", "12 999", "13 9999", "14 99999", "15 999999", "16 9999999", "17 99999999", "18 88888888", "19 77777777", "20 666", "50 55555", "100 4444", "1000 333", "10000 222", "105 555", "99999 88888888", "54321 123456", "2023 2023", "104 104", "105 1000000000"]}
{"name": "599_D. Spongebob and Squares", "description": "Input\n\nThe first line of the input contains a single integer x (1 <= x <= 1018) --- the number of squares inside the tables Spongebob is interested in.", "testcase": ["1", "2", "3", "4", "5", "10", "20", "100", "500", "1000", "5000", "10000", "100000", "1000000", "10000000", "100000000", "500000000", "1000000000", "5000000000", "10000000000", "50000000000", "100000000000", "500000000000", "1000000000000", "5000000000000", "10000000000000", "50000000000000", "100000000000000", "500000000000000", "1000000000000000"]}
{"name": "690_E2. Photographs (II)", "description": "Input\n\nThe input format is the same as in the previous version, except that the first line of every question now contains three space-separated numbers h, w and k (1 <= h, w <= 600, 2 <= k <= 16) -- the height (number of rows) and width (number of columns) of the photograph and the number of pieces, respectively. The number of pieces evenly divides the height, and each piece is of the same height h / k.\n\nAgain, there is only one input file to be processed, and the same resources are provided to you as in the previous version (except that now you are given all input images in .bmp format, rather than the first 50).", "testcase": ["1 1 2", "2 2 4", "3 3 3", "4 4 4", "5 10 5", "6 6 6", "7 14 7", "8 16 8", "9 18 3", "10 20 5", "11 22 2", "12 24 4", "13 26 13", "14 28 7", "15 30 3", "16 32 4", "17 34 2", "18 36 9", "19 38 2", "20 40 5", "21 42 3", "22 44 2", "23 46 2", "24 48 4", "25 50 5", "26 52 2", "27 54 3", "28 56 4", "29 58 2", "30 60 6"]}
{"name": "735_D. Taxes", "description": "Input\n\nThe first line of the input contains a single integer n (2 <= n <= 2\u00b7109) --- the total year income of mr. Funt.", "testcase": ["2", "17", "1000", "123456789", "987654321", "145678902", "234567890", "2500000", "1999999999", "2000000000", "678901234", "424242424", "314159265", "271828182", "161803399", "1123581321", "211111112", "125000000", "333333333", "888888888", "777777777", "999999998", "1000000001", "1500000000", "2099999999", "1900000000", "1800000000", "1700000000", "1600000000", "1555555555"]}
{"name": "1073_E. Segment Sum", "description": "Input\n\nThe only line of the input contains three integers l, r and k (1 <= l <= r < 10^{18}, 1 <= k <= 10) --- the borders of the segment and the maximum number of different digits.", "testcase": ["1 1000000000000000000 1", "1 1000000000000000000 2", "2 500000000000000000 3", "3 999999999999999999 4", "4 800000000000000000 5", "5 700000000000000000 6", "1 900000000000000000 7", "2 600000000000000000 8", "1 300000000000000000 10", "1 200000000000000000 2", "1 1000000000000000000 3", "10 50000000000000000 2", "100 10000000000000000 1", "1000 10000000000000000 4", "10000 1000000000000000 2", "100000 1000000000000000 10", "1000000 100000000000000 5", "100000000 10000000000000000 3", "1000000000 999999999999999 2", "99999999999999 1000000000000000000 4", "888888888888 999999999999999999 2", "777777777777 888888888888888888 2", "123456789 987654321987654321 5", "111111111 222222222222222222 2", "333333333 444444444444444444 1", "555555555 666666666666666666 9", "777777777 888888888888888888 6", "123456789 123456789123456789 2", "10203040506070809 192939495969798999 10", "112233445566778899 998877665544332211 8"]}
{"name": "1143_B. Nirvana", "description": "Input\n\nThe only input line contains the integer n (1 <= n <= 2*10^9).", "testcase": ["1", "2", "3", "100", "500", "999", "1000", "12345", "500000", "1000000", "1500000", "2000000", "10234567", "20202020", "25252525", "30000000", "500000000", "76543210", "800000000", "987654321", "1000000000", "1400000000", "1600000000", "1800000000", "1900000000", "1950000000", "1987654321", "1999999999", "2000000000", "2000000001"]}
{"name": "227_C. Flying Saucer Segments", "description": "Input\n\nThe first line contains two space-separated integers: n and m (1 <= n, m <= 109) --- the number of aliens on the saucer and the number, modulo which you should print the answer, correspondingly.", "testcase": ["1 1", "2 1000000000", "3 999999999", "4 123456789", "5 987654321", "6 123123123", "7 987987987", "8 111111111", "9 222222222", "10 333333333", "11 444444444", "12 555555555", "13 666666666", "14 777777777", "15 888888888", "16 999999999", "17 1000000000", "18 900000000", "19 800000000", "20 700000000", "21 600000000", "22 500000000", "23 400000000", "24 300000000", "25 200000000", "26 100000000", "27 99999999", "28 88888888", "29 77777777", "30 66666666"]}
{"name": "322_B. Ciel and Flowers", "description": "Input\n\nThe first line contains three integers r, g and b (0 <= r, g, b <= 109) --- the number of red, green and blue flowers.", "testcase": ["0 0 0", "1 0 0", "0 1 0", "0 0 1", "109 109 109", "123456789 987654321 123456789", "500000000 500000000 500000000", "999999999 0 0", "0 999999999 0", "0 0 999999999", "333333333 333333333 333333334", "1 1 1", "2 3 4", "252525252 252525252 252525252", "100000000 200000000 300000000", "2147483647 2147483647 2147483647", "700000000 800000000 900000000", "123 456 789", "99999999 88888888 77777777", "55555555 66666666 77777777", "112233445 556677889 990011223", "444444444 333333333 222222222", "98765432 12345678 87654321", "0 123456789 987654321", "123456789 0 987654321", "987654321 123456789 0", "555555555 555555555 555555555", "999999998 999999999 1000000000", "400000000 500000000 600000000", "300300300 200200200 100100100"]}
{"name": "510_A. Fox And Snake", "description": "Input\n\nThe only line contains two integers: n and m (3 <= n, m <= 50). \n\nn is an odd number.", "testcase": ["3 5", "5 7", "7 11", "9 13", "11 3", "13 9", "15 17", "17 19", "19 21", "21 23", "23 25", "25 27", "27 29", "29 31", "31 33", "33 35", "35 37", "37 39", "39 41", "41 43", "43 45", "45 47", "47 49", "49 50", "3 50", "5 48", "7 46", "9 44", "11 42", "13 40"]}
{"name": "119_C. Education Reform", "description": "Input\n\nThe first line contains three integers n, m, k (1 <= n <= m <= 50, 1 <= k <= 100) which represent the number of days in an academic year, the number of subjects and the k parameter correspondingly. Each of the following m lines contains the description of a subject as three integers ai, bi, ci (1 <= ai <= bi <= 1016, bi - ai <= 100, 1 <= ci <= 100) --- two limitations to the number of exercises on the i-th subject and the complexity of the i-th subject, correspondingly. Distinct subjects can have the same complexity. The subjects are numbered with integers from 1 to m. \n\nPlease do not use the %lld specificator to read or write 64-bit numbers in \u0421++. It is preferred to use the cin stream or the %I64d specificator.", "testcase": ["1 1 1\n1 2 1", "3 2 5\n1 10 3\n2 11 4", "4 3 10\n500 600 20\n300 400 5\n150 250 15", "2 2 2\n1000000000000000 1000000000000010 30\n1000000000000020 1000000000000030 40", "5 4 12\n1 2 5\n3 4 10\n5 7 20\n8 9 25", "6 2 6\n100 150 35\n200 250 45", "8 5 14\n1 50 12\n50 100 15\n100 150 34\n150 200 44\n200 250 23", "7 3 7\n99999 100099 99\n100999 101099 98\n200999 201099 97", "10 10 50\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n5 5 5\n6 6 6\n7 7 7\n8 8 8\n9 9 9\n10 10 10", "9 6 20\n1000 1050 2\n2000 2050 4\n3000 3050 6\n4000 4050 8\n5000 5050 10\n6000 6050 20", "11 4 30\n123 150 25\n1234 1267 35\n12345 12375 45\n54321 54345 55", "12 7 40\n1 1 1\n2 3 2\n4 6 3\n7 9 4\n10 12 5\n13 15 6\n16 18 7", "15 8 22\n100000000 100000100 10\n200000000 200000100 20\n300000000 300000100 30\n400000000 400000100 40\n500000000 500000100 50\n600000000 600000100 60\n700000000 700000100 70\n800000000 800000100 80", "18 3 8\n500 502 21\n503 506 22\n507 510 23", "14 5 33\n23456 23556 88\n34567 34667 77\n45678 45778 66\n56789 56889 55\n67890 67990 44", "13 6 13\n1 20 10\n20 40 20\n40 60 30\n60 80 40\n80 100 50\n100 120 60", "17 2 14\n9999999999 10000000999 55\n10000001999 10000002999 65", "19 4 27\n1000000000000 1000000000100 17\n1000000000200 1000000000300 18\n1000000000400 1000000000500 19\n1000000000600 1000000000700 20", "16 6 19\n1234567890123 1234567890223 29\n1234567890323 1234567890423 30\n1234567890523 1234567890623 31\n1234567890723 1234567890823 32\n1234567890923 1234567891023 33\n1234567891123 1234567891223 34", "16 5 16\n5000000000000000 5000000000000010 50\n6000000000000000 6000000000000020 60\n7000000000000000 7000000000000030 70\n8000000000000000 8000000000000040 80\n9000000000000000 9000000000000050 90", "20 4 17\n123456789012345 123456789012445 37\n123456789012545 123456789012645 38\n123456789012745 123456789012845 39\n123456789012945 123456789013045 40", "21 3 21\n10000000000000000 10000000000001000 97\n20000000000002000 20000000000003000 98\n30000000000004000 30000000000005000 99", "22 7 2\n500 590 3\n600 690 4\n700 790 5\n800 890 6\n900 990 7\n1000 1090 8\n1100 1190 9", "23 4 23\n100000000000000 100000000000200 77\n200000000000300 200000000000500 86\n300000000000600 300000000000800 95\n400000000000900 400000000001100 94", "24 3 24\n444555666777888 444555666778888 11\n555666777888999 555666777889999 22\n666777888999000 666777889099000 33", "25 8 25\n1111111111111111 1111111111111121 7\n2222222222222222 2222222222222232 8\n3333333333333333 3333333333333343 9\n4444444444444444 4444444444444454 10\n5555555555555555 5555555555555565 12\n6666666666666666 6666666666666676 13\n7777777777777777 7777777777777787 14\n8888888888888888 8888888888888898 15", "26 6 26\n1000000000000000 1000000000000100 40\n1000000000000200 1000000000000300 41\n1000000000000400 1000000000000500 42\n1000000000000600 1000000000000700 43\n1000000000000800 1000000000000900 44\n1000000000001000 1000000000001100 45", "27 5 27\n10000000000000000 10000000000000100 64\n20000000000000000 20000000000000200 65\n30000000000000000 30000000000000300 66\n40000000000000000 40000000000000400 67\n50000000000000000 50000000000000500 68", "28 6 28\n99999999999990 99999999999991 71\n99999999999992 99999999999993 72\n99999999999994 99999999999995 73\n99999999999996 99999999999997 74\n99999999999998 99999999999999 75\n99999999999000 99999999999001 76", "29 7 29\n5000000000000000 5000000000000050 81\n6000000000000000 6000000000000060 82\n7000000000000000 7000000000000070 83\n8000000000000000 8000000000000080 84\n9000000000000000 9000000000000090 85\n10000000000000000 10000000000000050 86\n11000000000000000 11000000000000060 87", "30 6 30\n4444444444444444 4444444444444454 91\n5555555555555555 5555555555555565 92\n6666666666666666 6666666666666676 93\n7777777777777777 7777777777777787 94\n8888888888888888 8888888888888898 95\n9999999999999999 10000000000000009 96"]}
{"name": "460_B. Little Dima and Equation", "description": "Input\n\nThe first line contains three space-separated integers: a, b, c (1 <= a <= 5; 1 <= b <= 10000; - 10000 <= c <= 10000).", "testcase": ["1 1 0", "5 10000 10000", "2 5000 -9999", "4 250 5000", "3 8457 -3456", "5 6241 6231", "1 3333 -5000", "2 123 4567", "4 9876 -3333", "5 6789 12", "3 1111 -2222", "5 2222 3333", "1 3333 -4444", "2 4444 5555", "4 5555 -6666", "5 6666 7777", "3 7777 -8888", "1 8888 9999", "2 500 100", "5 1000 -100", "4 1500 101", "3 2000 -102", "1 2500 103", "2 3000 -104", "5 3500 105", "4 4000 -106", "3 4500 107", "1 1234 -108", "2 2345 109", "5 3456 -110"]}
{"name": "627_A. XOR Equation", "description": "Input\n\nThe first line of the input contains two integers s and x (2 <= s <= 1012, 0 <= x <= 1012), the sum and bitwise xor of the pair of positive integers, respectively.", "testcase": ["3 1", "4 3", "10 2", "123456789012 987654321", "234567890123 123456789", "345678901234 234567890", "456789012345 345678901", "567890123456 456789012", "678901234567 567890123", "789012345678 678901234", "890123456789 789012345", "901234567890 890123456", "111111111111 222222222", "222222222222 333333333", "333333333333 444444444", "444444444444 555555555", "987654321098 111111111", "876543210987 222222222", "765432109876 333333333", "654321098765 444444444", "543210987654 123456789", "432109876543 987654321", "321098765432 111111111", "210987654321 222222222", "109876543210 333333333", "198765432109 444444444", "287654321098 123456789", "376543210987 987654321", "465432109876 111111111", "554321098765 222222222"]}
{"name": "651_A. Joysticks", "description": "Input\n\nThe first line of the input contains two positive integers a1 and a2 (1 <= a1, a2 <= 100), the initial charge level of first and second joystick respectively.", "testcase": ["1 1", "2 2", "3 3", "4 4", "5 5", "6 6", "7 7", "8 8", "9 9", "10 10", "11 11", "12 12", "13 13", "14 14", "15 15", "16 16", "17 17", "18 18", "19 19", "20 20", "21 21", "22 22", "23 23", "24 24", "25 25", "26 26", "27 27", "28 28", "29 29", "30 30"]}
{"name": "1020_C. Elections", "description": "Input\n\nThe first line of input contains two integers n and m (1 <= n, m <= 3000) --- the number of voters and the number of parties respectively.\n\nEach of the following n lines contains two integers p_i and c_i (1 <= p_i <= m, 1 <= c_i <= 10^9) --- the index of this voter's preferred party and the number of bytecoins needed for him to reconsider his decision.\n\nThe United Party of Berland has the index 1.", "testcase": ["2 2\n1 100\n2 200", "3 3\n1 300\n2 400\n3 500", "4 2\n1 600\n2 700\n1 800\n2 900", "5 5\n1 1000\n2 1100\n3 1200\n4 1300\n5 1400", "3 2\n1 1500\n2 1600\n1 1700", "6 2\n1 1800\n2 1900\n1 2000\n2 2100\n1 2200\n2 2300", "2 3\n1 2400\n3 2500", "4 4\n1 2600\n2 2700\n3 2800\n4 2900", "5 2\n1 3000\n2 3100\n1 3200\n2 3300\n1 3400", "3 3\n1 3500\n2 3600\n3 3700", "7 4\n1 3800\n2 3900\n3 4000\n4 4100\n1 4200\n2 4300\n3 4400", "8 3\n1 4500\n2 4600\n3 4700\n1 4800\n2 4900\n3 5000\n1 5100\n2 5200", "10 5\n1 5300\n2 5400\n3 5500\n4 5600\n5 5700\n1 5800\n2 5900\n3 6000\n4 6100\n5 6200", "4 3\n1 6300\n2 6400\n3 6500\n1 6600", "9 4\n1 6700\n2 6800\n3 6900\n4 7000\n1 7100\n2 7200\n3 7300\n4 7400\n1 7500", "15 5\n1 7600\n2 7700\n3 7800\n4 7900\n5 8000\n1 8100\n2 8200\n3 8300\n4 8400\n5 8500\n1 8600\n2 8700\n3 8800\n4 8900\n5 9000", "3 1\n1 9100\n1 9200\n1 9300", "6 3\n1 9400\n2 9500\n3 9600\n1 9700\n2 9800\n3 9900", "5 4\n1 10000\n2 11000\n3 12000\n4 13000\n1 14000", "7 3\n1 15000\n2 16000\n3 17000\n1 18000\n2 19000\n3 20000\n1 21000", "11 2\n1 22000\n2 23000\n1 24000\n2 25000\n1 26000\n2 27000\n1 28000\n2 29000\n1 30000\n2 31000\n1 32000", "8 5\n1 33000\n2 34000\n3 35000\n4 36000\n5 37000\n1 38000\n2 39000\n3 40000", "12 6\n1 41000\n2 42000\n3 43000\n4 44000\n5 45000\n6 46000\n1 47000\n2 48000\n3 49000\n4 50000\n5 51000\n6 52000", "13 4\n1 53000\n2 54000\n3 55000\n4 56000\n1 57000\n2 58000\n3 59000\n4 60000\n1 61000\n2 62000\n3 63000\n4 64000\n1 65000", "14 7\n1 66000\n2 67000\n3 68000\n4 69000\n5 70000\n6 71000\n7 72000\n1 73000\n2 74000\n3 75000\n4 76000\n5 77000\n6 78000\n7 79000", "16 8\n1 80000\n2 81000\n3 82000\n4 83000\n5 84000\n6 85000\n7 86000\n8 87000\n1 88000\n2 89000\n3 90000\n4 91000\n5 92000\n6 93000\n7 94000\n8 95000", "17 9\n1 96000\n2 97000\n3 98000\n4 99000\n5 100000\n6 101000\n7 102000\n8 103000\n9 104000\n1 105000\n2 106000\n3 107000\n4 108000\n5 109000\n6 110000\n7 111000\n8 112000", "18 10\n1 113000\n2 114000\n3 115000\n4 116000\n5 117000\n6 118000\n7 119000\n8 120000\n9 121000\n10 122000\n1 123000\n2 124000\n3 125000\n4 126000\n5 127000\n6 128000\n7 129000\n8 130000", "19 5\n1 131000\n2 132000\n3 133000\n4 134000\n5 135000\n1 136000\n2 137000\n3 138000\n4 139000\n5 140000\n1 141000\n2 142000\n3 143000\n4 144000\n5 145000\n1 146000\n2 147000\n3 148000\n4 149000", "20 6\n1 150000\n2 151000\n3 152000\n4 153000\n5 154000\n6 155000\n1 156000\n2 157000\n3 158000\n4 159000\n5 160000\n6 161000\n1 162000\n2 163000\n3 164000\n4 165000\n5 166000\n6 167000\n1 168000\n2 169000", "21 7\n1 170000\n2 171000\n3 172000\n4 173000\n5 174000\n6 175000\n7 176000\n1 177000\n2 178000\n3 179000\n4 180000\n5 181000\n6 182000\n7 183000\n1 184000\n2 185000\n3 186000\n4 187000\n5 188000\n6 189000\n7 190000"]}
{"name": "1178_C. Tiles", "description": "Input\n\nThe only line contains two space separated integers w, h (1 <= w,h <= 1 000) --- the width and height of the kitchen, measured in tiles.", "testcase": ["1 1", "1000 1000", "500 500", "250 250", "123 456", "321 654", "999 1", "1 999", "100 200", "600 800", "800 600", "300 400", "400 300", "200 100", "50 50", "75 25", "25 75", "111 222", "222 111", "333 444", "444 333", "555 777", "777 555", "888 111", "111 888", "150 750", "750 150", "505 505", "909 808", "808 909"]}
{"name": "196_A. Lexicographically Maximum Subsequence", "description": "Input\n\nThe single line contains a non-empty string s, consisting only of lowercase English letters. The string's length doesn't exceed 105.", "testcase": ["a", "b", "c", "abc", "abcdef", "stringwithlengthlessthanonehundredandfive", "thisisanotherstringwithexactlysixtycharacterslong", "small", "letters", "anotherstring", "yetanothertestcase", "abcdefghijklmnopqrstuvwxyza", "abcdefghijklmnopqrstuvwxyzb", "abcdefghijklmnopqrstuvwxyzc", "abcdefghijklmnopqrstuvwxyzd", "abcdefghijklmnopqrstuvwxyze", "abcdefghijklmnopqrstuvwxyzf", "samplestring", "randomcharacters", "testinput", "lowecaseletters", "singleword", "multiplewordscombinedintoone", "thisstringhasexactlyseventycharactersfollow", "anexampleofalongstringwithdefinedlength", "concatenatedwordswithnospaceswhatsoever", "exactlythirtywordsstrungtogetherwithoutspa", "stringoflettersformingvalidtestcaseformat", "jeszczejedenprzykladdlugiegociagu", "ostatnitestprzedwyczerpaniemlimitu"]}
{"name": "479_A. Expression", "description": "Input\n\nThe input contains three integers a, b and c, each on a single line (1 <= a, b, c <= 10).", "testcase": ["1\n1\n1", "2\n3\n4", "5\n6\n7", "8\n9\n10", "1\n2\n3", "4\n5\n6", "7\n8\n9", "10\n1\n2", "3\n4\n5", "6\n7\n8", "9\n10\n1", "2\n3\n4", "5\n6\n7", "8\n1\n2", "3\n4\n5", "6\n7\n8", "9\n2\n3", "4\n5\n6", "7\n8\n9", "10\n3\n4", "5\n6\n7", "8\n9\n10", "1\n4\n5", "6\n7\n8", "9\n1\n2", "3\n5\n6", "7\n8\n9", "10\n2\n3", "4\n6\n7", "8\n9\n1"]}
{"name": "501_A. Contest", "description": "Input\n\nThe first line contains four integers a, b, c, d (250 <= a, b <= 3500, 0 <= c, d <= 180). \n\nIt is guaranteed that numbers a and b are divisible by 250 (just like on any real Codeforces round).", "testcase": ["250 1000 0 180", "500 1750 45 90", "750 3250 10 170", "1000 2000 35 60", "1250 2250 80 120", "1500 2500 0 80", "1750 2750 140 50", "2000 3000 20 180", "2250 3250 100 100", "2500 3500 30 150", "2750 3000 60 70", "3000 3250 170 10", "3250 3500 90 140", "2750 3500 110 160", "3250 2500 150 30", "3000 2750 40 60", "2500 3000 70 90", "2250 2750 120 20", "2000 3250 160 130", "1750 3500 10 170", "1500 3000 130 40", "1250 3250 50 110", "1000 2500 20 160", "750 2750 80 10", "500 3500 60 140", "250 3000 170 90", "2000 2500 30 70", "2250 2250 0 180", "2750 2750 45 45", "3500 3500 180 0"]}
{"name": "552_B. Vanya and Books", "description": "Input\n\nThe first line contains integer n (1 <= n <= 109) --- the number of books in the library.", "testcase": ["1", "2", "3", "4", "5", "10", "20", "50", "100", "200", "500", "1000", "2000", "5000", "10000", "20000", "50000", "100000", "200000", "500000", "1000000", "2000000", "5000000", "10000000", "20000000", "50000000", "100000000", "200000000", "500000000", "1000000000"]}
{"name": "600_A. Extract Numbers", "description": "Input\n\nThe only line of input contains the string s (1 <= |s| <= 105). The string contains only symbols '.' (ASCII 46), ',' (ASCII 44), ';' (ASCII 59), digits, lowercase and uppercase latin letters.", "testcase": ["a", "abC", "123456", "a,b;c.123", "..........", "a1.b2,c3;d4", "aAaAaAaAaA", "123,456.789;0AB", "abcdefghijklmnopqrstuvwxyz", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "a1b2c3d4e5f6g7h8i9j0k1l2", ";a;b;c;d;e;f;g;h;i;j;k;l;m", "1.2,3.4,5.6,7.8,9.0", "AbCdEfGhIjKlMnOpQrStUvWxYz", ".,;.,;.,;.,;.,;.,;.,;.,;.", "0123456789.,;0123456789", "1,A,1;B,2.C,2;D,3.E,3;F", "aaaaaAAAAA11111;;;;;.....", "ZzYyXxWwVvUuTtSsRrQqPpOo", ",,,...;;;,,,222aaaZZZ", "Hello,World!", "Test,Case.1;With,Text2", "Data;set1234,;compiled!", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;", "..............................", "s0m3M1xedStringWithSymb0ls;", "Lets,test,some,boundary,cases!", "nearTheEnd1234567890;wow", "thisIsLengthyButProperSize11111"]}
{"name": "876_C. Classroom Watch", "description": "Input\n\nThe first line contains integer n (1 <= n <= 109).", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "100", "1000", "10000", "100000", "1000000", "10000000", "100000000", "109", "208", "307", "406", "505", "604", "703", "802", "901", "99999999", "500000000", "987654321", "1000000000"]}
{"name": "922_B. Magic Forest", "description": "Input\n\nThe only line contains a single integer n (1 <= n <= 2500).", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "100", "250", "1000", "2499", "2500"]}
{"name": "1455_E. Four Points", "description": "Input\n\nThe first line contains a single integer t (1 <= t <= 10^4) --- the number of test cases.\n\nEach test case consists of four lines. Each line contains two integers x and y (0 <= x, y <= 10^9) --- coordinates of one of the points p_i = (x, y).\n\nAll points are different in one test case.", "testcase": ["1\n0 0\n0 1\n1 0\n1 1", "1\n10 10\n10 20\n20 10\n20 20", "1\n100 100\n100 200\n200 100\n200 200", "1\n300 300\n300 400\n400 300\n400 400", "1\n500 500\n500 600\n600 500\n600 600", "1\n700 700\n700 800\n800 700\n800 800", "1\n123 456\n456 789\n789 123\n123 789", "1\n900 900\n900 1000\n1000 900\n1000 1000", "1\n111 222\n333 444\n555 666\n777 888", "1\n321 432\n543 654\n765 876\n987 987", "1\n135 246\n357 468\n579 680\n791 802", "1\n234 567\n678 891\n345 678\n789 123", "1\n456 789\n890 123\n567 890\n234 567", "1\n111111111 222222222\n333333333 444444444\n555555555 666666666\n777777777 888888888", "1\n987654321 123456789\n987654322 123456788\n987654323 123456787\n987654324 123456786", "1\n102030 405060\n708090 102030\n304050 607080\n901020 304050", "1\n222333 444555\n666777 888999\n111222 333444\n555666 777888", "1\n999 888\n777 666\n555 444\n333 222", "1\n111000 222000\n333000 444000\n555000 666000\n777000 888000", "1\n123123 456456\n789789 123123\n345345 678678\n901901 234234", "1\n135791 357913\n579135 791357\n913579 135791\n357913 579135", "1\n147 258\n369 147\n258 369\n147 258", "1\n666666 333333\n999999 666666\n333333 999999\n666666 333333", "1\n42 42\n84 84\n126 126\n168 168", "1\n101010 202020\n303030 404040\n505050 606060\n707070 808080", "1\n999999999 888888888\n777777777 666666666\n555555555 444444444\n333333333 222222222", "1\n111 999\n222 888\n333 777\n444 666", "1\n88888888 99999999\n77777777 88888888\n66666666 77777777\n55555555 66666666", "1\n123456789 987654321\n963852741 147258369\n852741963 369852147\n741963852 258369741", "1\n1000000000 1000000000\n1000000000 999999999\n999999999 1000000000\n999999999 999999999"]}
{"name": "180_C. Letter", "description": "Input\n\nThe only line of the input contains a non-empty string consisting of uppercase and lowercase letters. The string's length does not exceed 105.", "testcase": ["a", "Z", "helloworld", "UPPERCASE", "lowercase", "MixedUppERandLOWer", "Short", "LooooooooooooooooooooooongString", "TestingStringWithLength", "AMiXTureOfUpperAndLower", "JuStASiMpLeStRiNg", "LETters", "nuMberInStringButThatsOkay", "cAPSlOCK", "sampletext", "aBcDeFgHiJkLmNoP", "SomewhatLengthyStringHere", "nOpeekiNg", "tIMEsUP", "TestForExactOneHundredAndFiveeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee", "Banana", "ApPlEs", "zZzZzZzZzZzZzZzZzZz", "StrangerThingsHaveHappened", "Discombobulated", "AnOtHeRsTrInGWiThMiXeDcAsE", "YeSAnDnO", "sIxSiXsiX", "cHaRaCtEr", "LasToneToEndTheThirty"]}
{"name": "702_D. Road to Post Office", "description": "Input\n\nThe first line contains 5 positive integers d, k, a, b, t (1 <= d <= 1012; 1 <= k, a, b, t <= 106; a < b), where:\n\n  * d --- the distance from home to the post office; \n  * k --- the distance, which car is able to drive before breaking; \n  * a --- the time, which Vasiliy spends to drive 1 kilometer on his car; \n  * b --- the time, which Vasiliy spends to walk 1 kilometer on foot; \n  * t --- the time, which Vasiliy spends to repair his car.", "testcase": ["1000000000000 1 1 2 3", "1000000000000 2 3 4 5", "1000000000000 5 2 3 10", "999999999999 2 1 3 1", "1000000000000 5 1 10 2", "500000000000 20 5 6 4", "888888888888 10 3 5 7", "1000000000000 50 4 7 3", "1000 1000 1 2 1", "200000000000 50 1 2 5", "150000000000 30 1 2 1", "300000000000 40 2 3 2", "400000000000 10 1 3 5", "600000000000 15 2 5 3", "800000000000 25 3 4 6", "900000000000 35 1 2 8", "123456789012 123 4 5 6", "987654321098 321 2 3 7", "500000000000 1 10 20 5", "100000000000 1 20 30 10", "2000000000000 2 15 25 5", "152345684375 75 5 8 3", "231469872398 60 3 5 9", "785634123896 45 2 4 10", "854756231456 50 6 10 4", "888888888888 88 7 11 7", "354676239874 35 4 9 6", "263587423657 25 3 6 8", "987654321123 150 5 7 2", "125488339999 125 2 8 1"]}
{"name": "122_E. Lucky Permutation", "description": "Input\n\nThe first line contains two integers n and k (1 <= n, k <= 109) --- the number of elements in the permutation and the lexicographical number of the permutation.", "testcase": ["1 1", "2 1", "2 2", "3 2", "3 3", "3 4", "3 5", "3 6", "4 1", "4 4", "4 6", "4 10", "4 20", "4 24", "5 10", "5 20", "5 30", "5 40", "5 50", "5 60", "5 70", "5 80", "5 90", "5 100", "5 110", "5 120", "6 50", "6 100", "6 200", "6 400"]}
{"name": "1543_A. Exciting Bets", "description": "Input\n\nThe first line of input contains a single integer t (1<= t<= 5* 10^3) --- the number of test cases.\n\nThe first and the only line of each test case contains two integers a and b (0<= a, b<= 10^{18}).", "testcase": ["1\n0 0", "1\n10 10", "1\n123456789012345678 987654321098765432", "1\n1000000000000000000 1000000000000000000", "1\n18 24", "1\n999999999999999999 1", "1\n0 1000000000000000000", "1\n500 500", "1\n111111111111111111 222222222222222222", "1\n1 1", "1\n2 3", "1\n345678901234567890 987654321098765432", "1\n4294967296 18446744073709551615", "1\n192837465564738291 918273645546372819", "1\n999999999999999998 999999999999999999", "1\n999999999999999999 999999999999999998", "1\n1000000000 1000000000", "1\n0 999999999999999999", "1\n1 999999999999999999", "1\n10 20", "1\n546372819192837465 564738291918273645", "1\n123456789 987654321", "1\n999999999 1999999998", "1\n1147483648 2341873462", "1\n100000000000000001 200000000000000002", "1\n449999999999999999 550000000000000000", "1\n300000000000000000 400000000000000000", "1\n700000000000000000 800000000000000000", "1\n900000000000000000 700000000000000000", "1\n16 32"]}
{"name": "618_A. Slime Combining", "description": "Input\n\nThe first line of the input will contain a single integer, n (1 <= n <= 100 000).", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "100000"]}
{"name": "666_A. Reberland Linguistics", "description": "Input\n\nThe only line contains a string s (5 <= |s| <= 104) consisting of lowercase English letters.", "testcase": ["abcde", "abcdefghij", "pqrstuvwxy", "abcdefghijklmnopqrstuvwxyz", "mnopqrstuvwxyza", "bcdefghijklmno", "efghijklmnopqrstuv", "zabcdefghijklmnopqrst", "zwxyzabcdefghijklmno", "lkmnijbhuvgycftxdrzseawq", "zxywvutsrqponmlkjihgfedcba", "thecatinthehatknowsalotaboutthat", "thesunintheskyisaballoffire", "qdertfgvbhjzsweiklmxponcu", "languidnessandthekindredmoon", "underneaththestarrysky", "beneaththeoceanbedsliesmysteries", "intheheartoftheseafaraway", "quickbrownfoxjumpsoverthelazydog", "rhythmofthefallingrain", "messageinabottleacrosstheocean", "magicalmysterytouriswaitingtotakeyouaway", "niftytechnologyadvancesrapidly", "kaleidoscopicimaginationswirls", "jaggedrockformationsreachfortheskies", "icecreamconesmeltinthesunshinewarmth", "herbalgardenteemingwithlifeandaromas", "fracturedterrainunveilsearthshistory", "echoesoflaughterinthesummerair", "dancingfirefliesonawarmjulynight"]}
{"name": "p01855 Checkered Pattern", "description": "input\n\n\nT\nh_1 \\ w_1\n...\nh_T \\ w_T\n\n\nOne file contains T inputs. The T in the first line and the vertical and horizontal lengths h_i and w_i in the Tth input are input in the 1 + i line.\n\nConstraint\n\n* An integer\n* 1 <= T <= 1000\n* 1 <= h_i, w_i <= 109", "testcase": ["3\n1 \\ 1\n2 \\ 2\n3 \\ 3", "2\n1000000000 \\ 1000000000\n1 \\ 1", "4\n12 \\ 34\n56 \\ 78\n90 \\ 123\n456 \\ 789", "1\n23 \\ 45", "5\n1 \\ 2\n3 \\ 4\n5 \\ 6\n7 \\ 8\n9 \\ 10", "6\n10 \\ 20\n30 \\ 40\n50 \\ 60\n70 \\ 80\n90 \\ 100\n110 \\ 120", "7\n500 \\ 600\n700 \\ 800\n900 \\ 1000\n1100 \\ 1200\n1300 \\ 1400\n1500 \\ 1600\n1700 \\ 1800", "10\n2 \\ 2\n4 \\ 4\n8 \\ 8\n16 \\ 16\n32 \\ 32\n64 \\ 64\n128 \\ 128\n256 \\ 256\n512 \\ 512\n1024 \\ 1024", "8\n245 \\ 123\n314 \\ 217\n141 \\ 111\n451 \\ 235\n123 \\ 321\n432 \\ 543\n654 \\ 765\n876 \\ 987", "9\n10 \\ 10\n20 \\ 20\n30 \\ 30\n40 \\ 40\n50 \\ 50\n60 \\ 60\n70 \\ 70\n80 \\ 80\n90 \\ 90", "1\n1000000000 \\ 1", "2\n1 \\ 1000000000\n1000000000 \\ 1", "3\n500 \\ 500\n600 \\ 600\n700 \\ 700", "4\n1024 \\ 2048\n2048 \\ 1024\n4096 \\ 8192\n8192 \\ 4096", "5\n123 \\ 456\n789 \\ 101\n112 \\ 131\n415 \\ 161\n718 \\ 192", "6\n333 \\ 333\n666 \\ 666\n999 \\ 999\n1332 \\ 1332\n1665 \\ 1665\n1998 \\ 1998", "7\n42 \\ 24\n84 \\ 48\n126 \\ 72\n168 \\ 96\n210 \\ 120\n252 \\ 144\n294 \\ 168", "10\n11 \\ 22\n33 \\ 44\n55 \\ 66\n77 \\ 88\n99 \\ 110\n111 \\ 222\n333 \\ 444\n555 \\ 666\n777 \\ 888\n999 \\ 1110", "8\n314 \\ 271\n111 \\ 222\n333 \\ 444\n555 \\ 666\n777 \\ 888\n999 \\ 111\n222 \\ 333\n444 \\ 555", "9\n888 \\ 777\n666 \\ 555\n444 \\ 333\n222 \\ 111\n109 \\ 89\n78 \\ 67\n56 \\ 45\n34 \\ 23\n12 \\ 1", "1\n517 \\ 284", "2\n348 \\ 276\n174 \\ 396", "3\n983 \\ 782\n391 \\ 264\n812 \\ 538", "4\n999999999 \\ 999999999\n888888888 \\ 888888888\n777777777 \\ 777777777\n666666666 \\ 666666666", "5\n1234 \\ 4321\n5678 \\ 8765\n1357 \\ 7531\n2468 \\ 8642\n9999 \\ 1999", "6\n800 \\ 900\n700 \\ 600\n600 \\ 500\n500 \\ 400\n400 \\ 300\n300 \\ 200", "7\n256 \\ 512\n512 \\ 1024\n1024 \\ 2048\n2048 \\ 4096\n4096 \\ 8192\n8192 \\ 16384\n16384 \\ 32768", "10\n111 \\ 222\n222 \\ 333\n333 \\ 444\n444 \\ 555\n555 \\ 666\n666 \\ 777\n777 \\ 888\n888 \\ 999\n999 \\ 1110\n1010 \\ 1212", "8\n1023 \\ 1023\n2047 \\ 2047\n4095 \\ 4095\n8191 \\ 8191\n16383 \\ 16383\n32767 \\ 32767\n65535 \\ 65535\n131071 \\ 131071", "9\n1001 \\ 2001\n2002 \\ 3002\n3003 \\ 4003\n4004 \\ 5004\n5005 \\ 6005\n6006 \\ 7006\n7007 \\ 8007\n8008 \\ 9008\n9009 \\ 10009", "1\n109 \\ 109"]}
{"name": "1054_A. Elevator or Stairs?", "description": "Input\n\nThe only line contains six integers x, y, z, t_1, t_2, t_3 (1 <= x, y, z, t_1, t_2, t_3 <= 1000) --- the floor Masha is at, the floor Masha wants to get to, the floor the elevator is located on, the time it takes Masha to pass between two floors by stairs, the time it takes the elevator to pass between two floors and the time it takes for the elevator to close or open the doors.\n\nIt is guaranteed that x != y.", "testcase": ["5 10 3 2 1 4", "1 5 4 3 2 1", "15 20 25 3 5 8", "500 400 450 10 15 7", "100 200 150 5 3 10", "8 2 6 4 2 1", "999 100 850 20 25 3", "27 53 45 7 1 5", "300 600 350 2 4 6", "6 5 2 8 2 5", "75 100 50 1 1 1", "230 330 250 10 5 2", "1000 1 500 1 2 3", "390 415 375 11 12 13", "50 100 70 3 1 4", "9 7 1 10 2 6", "125 250 150 4 6 2", "1 2 4 3 1 2", "999 1 2 4 4 4", "800 700 725 15 20 10", "450 500 470 6 7 8", "70 80 75 5 2 3", "15 45 30 2 3 3", "600 400 300 6 3 1", "995 5 998 3 6 9", "2 20 1 5 3 2", "900 920 910 8 5 10", "444 333 222 9 10 11", "111 222 333 4 5 6", "777 888 999 14 13 12"]}
{"name": "1202_F. You Are Given Some Letters...", "description": "Input\n\nThe first line contains two integers a and b (1 <= a, b <= 10^9) --- the number of letters 'A' and 'B', respectively.", "testcase": ["1 1", "2 324", "546 676", "234 5678", "123456 78910", "999999999 100000000", "40000000 50000000", "900 1200", "3 200000000", "4567 890123", "111 222", "333333 444444", "87654321 12345678", "11 22", "98765 43210", "159753 456852", "222222222 777777777", "88888888 99999999", "343434 565656", "1 1000000000", "500000000 600000000", "2345678 8765432", "10 20", "1010 2020", "3030 4040", "55555 66666", "7777777 8888888", "999999 111111", "12121212 23232323", "34343434 45454545"]}
{"name": "1508_B. Almost Sorted", "description": "Input\n\nThe first line contains a single integer t (1<= t<= 1000) --- the number of test cases.\n\nEach test case consists of a single line containing two integers n and k (1 <= n <= 10^5, 1 <= k <= 10^{18}).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5.", "testcase": ["1\n2 5", "1\n50 10000000000000000", "1\n99999 1", "1\n10 500", "1\n100 999999999999999999", "1\n23 232323232323232323", "1\n500 987654321098765432", "1\n7000 10000", "1\n1234 567890123456789012", "1\n31415 271828182845904523", "1\n42 10000000000000000", "1\n87654 1234567890", "1\n11111 222222222222222222", "1\n22222 333333333333333333", "1\n33333 444444444444444444", "1\n44444 555555555555555555", "1\n55555 666666666666666666", "1\n66666 777777777777777777", "1\n77777 888888888888888888", "1\n88888 999999999999999999", "1\n1 5", "1\n1000 2000", "1\n100000 1000000000000000", "1\n999 500000000000000000", "1\n50 123456789012345678", "1\n25 987654321012345678", "1\n75 1234567890123456789", "1\n9999 98765432101234567", "1\n8888 10000000000000000", "1\n2020 202020202020202020"]}
{"name": "538_A. Cutting Banner", "description": "Input\n\nThe single line of the input contains the word written on the banner. The word only consists of upper-case English letters. The word is non-empty and its length doesn't exceed 100 characters. It is guaranteed that the word isn't word CODEFORCES.", "testcase": ["ABACABA", "YOUTHFORSCIENCE", "OLYMPIAD", "PROGRAMMERS", "BRAINFORCE", "CHALLENGE", "COMPETITION", "SUCCESS", "ACHIEVEMENT", "DREAMHIGH", "WINNING", "GOALSETTING", "MASTERMIND", "LEADERSHIP", "AMBITION", "BRILLIANT", "COURAGEOUS", "DETERMINATION", "ENIGMA", "FLAWLESS", "GENIUS", "HONORABLE", "INVINCIBLE", "JUBILANT", "KNOWLEDGE", "LOGICIAN", "MOTIVATION", "NOBELPRIZE", "OPTIMISM", "PERSEVERANCE"]}
{"name": "630_D. Hexagons!", "description": "Input\n\nThe only line of the input contains one integer n (0 <= n <= 109).", "testcase": ["0", "1", "23", "456", "7890", "12345", "678901", "2345678", "90123456", "109876543", "987654321", "1234567890", "250000000", "500000000", "750000000", "999999999", "100000000", "200000000", "300000000", "400000000", "600000000", "700000000", "800000000", "900000000", "429496729", "214748364", "107374182", "536870911", "268435455", "134217727"]}
{"name": "76_E. Points", "description": "Input\n\nThe first line of input contains one integer number N (1 <= N <= 100 000) --- the number of points. Each of the following N lines contain two integer numbers X and Y ( - 10 000 <= X, Y <= 10 000) --- the coordinates of points. Two or more points may coincide.", "testcase": ["1\n0 0", "2\n-10000 -10000\n10000 10000", "3\n1234 5678\n-1234 -5678\n4321 -8765", "4\n0 1\n1 0\n-1 0\n0 -1", "5\n5000 5000\n5000 -5000\n-5000 5000\n-5000 -5000\n0 0", "6\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6", "7\n100 200\n-300 400\n500 -600\n700 800\n-900 1000\n-1100 -1200\n1300 1400", "8\n-1 1\n-2 2\n-3 3\n-4 4\n-5 5\n-6 6\n-7 7\n-8 8", "9\n1000 2000\n2000 3000\n3000 4000\n4000 5000\n-1000 -2000\n-2000 -3000\n-3000 -4000\n-4000 -5000\n0 0", "10\n-9999 9999\n9999 -9999\n-9998 9998\n9998 -9998\n-9997 9997\n9997 -9997\n-9996 9996\n9996 -9996\n-9995 9995\n9995 -9995", "11\n-10 10\n-20 20\n-30 30\n-40 40\n-50 50\n-60 60\n-70 70\n-80 80\n-90 90\n-100 100\n110 -110", "12\n250 250\n250 -250\n-250 250\n-250 -250\n500 500\n500 -500\n-500 500\n-500 -500\n750 750\n750 -750\n-750 750\n-750 -750", "13\n1 2\n3 4\n5 6\n7 8\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26", "14\n-123 -456\n456 789\n-101 -202\n303 404\n-505 -606\n707 808\n-909 -1010\n1111 1212\n-1313 -1414\n1515 1616\n-1717 -1818\n1919 2020\n-2121 -2222\n2323 2424", "15\n345 678\n-345 -678\n789 123\n-789 -123\n456 789\n-456 -789\n123 456\n-123 -456\n678 901\n-678 -901\n234 567\n-234 -567\n890 123\n-890 -123\n567 890", "16\n-100 -200\n100 200\n-300 400\n300 -400\n-500 600\n500 -600\n-700 800\n700 -800\n-900 1000\n900 -1000\n-1100 1200\n1100 -1200\n-1300 1400\n1300 -1400\n-1500 1600\n1500 -1600", "17\n-333 -666\n333 666\n-777 888\n777 -888\n-999 1110\n999 -1110\n-1222 1333\n1222 -1333\n-1444 1555\n1444 -1555\n-1666 1777\n1666 -1777\n-1888 1999\n1888 -1999\n-2111 2222\n2111 -2222\n-2333 2444", "18\n2100 2200\n2200 2300\n2300 2400\n2400 2500\n2500 2600\n2600 2700\n2700 2800\n2800 2900\n2900 3000\n3000 3100\n3100 3200\n3200 3300\n3300 3400\n3400 3500\n3500 3600\n3600 3700\n3700 3800\n3800 3900", "19\n210 420\n-420 -210\n430 840\n-840 -430\n850 1260\n-1260 -850\n1270 1680\n-1680 -1270\n1690 2100\n-2100 -1690\n2110 2520\n-2520 -2110\n2530 2940\n-2940 -2530\n2950 3360\n-3360 -2950\n3370 3780\n-3780 -3370\n3790 4200", "20\n111 222\n-222 -111\n333 444\n-444 -333\n555 666\n-666 -555\n777 888\n-888 -777\n999 1110\n-1110 -999\n1122 1221\n-1221 -1122\n1333 1444\n-1444 -1333\n1555 1666\n-1666 -1555\n1777 1888\n-1888 -1777\n1999 2110\n-2110 -1999", "21\n35 70\n-70 -35\n105 140\n-140 -105\n175 210\n-210 -175\n245 280\n-280 -245\n315 350\n-350 -315\n385 420\n-420 -385\n455 490\n-490 -455\n525 560\n-560 -525\n595 630\n-630 -595\n665 700\n-700 -665\n735 770", "22\n22 44\n66 88\n110 132\n154 176\n198 220\n242 264\n286 308\n330 352\n374 396\n418 440\n462 484\n506 528\n550 572\n594 616\n638 660\n682 704\n726 748\n770 792\n814 836\n858 880\n902 924\n946 968", "23\n315 630\n945 1260\n-1260 -945\n1585 1900\n-1900 -1585\n2205 2520\n-2520 -2205\n2835 3150\n-3150 -2835\n3465 3780\n-3780 -3465\n4095 4410\n-4410 -4095\n4725 5040\n-5040 -4725\n5355 5670\n-5670 -5355\n5985 6300\n-6300 -5985\n6615 6930\n-6930 -6615\n7245 7560\n-7560 -7245", "24\n0 1\n1 3\n4 6\n7 9\n10 12\n13 15\n16 18\n19 21\n22 24\n25 27\n28 30\n31 33\n34 36\n37 39\n40 42\n43 45\n46 48\n49 51\n52 54\n55 57\n58 60\n61 63\n64 66\n67 69", "25\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26", "26\n-50 100\n150 -300\n450 600\n-750 900\n1050 -1200\n-1350 1500\n1650 -1800\n-1950 2100\n2250 -2400\n-2550 2700\n2850 -3000\n-3150 3300\n3450 -3600\n-3750 3900\n4050 -4200\n-4350 4500\n4650 -4800\n-4950 5100\n5250 -5400\n-5550 5700\n5850 -6000\n-6150 6300\n6450 -6600\n-6750 6900\n7050 -7200\n-7350 7500", "27\n1001 2002\n2003 3004\n3005 4006\n4007 5008\n5009 6010\n6011 7012\n7013 8014\n8015 9016\n9017 10018\n10019 11020\n11021 12022\n12023 13024\n13025 14026\n14027 15028\n15029 16030\n16031 17032\n17033 18034\n18035 19036\n19037 20038\n20039 21040\n21041 22042\n22043 23044\n23045 24046\n24047 25048\n25049 26050\n26051 27052\n27053 28054", "28\n-28 -56\n-84 -112\n-140 -168\n-196 -224\n-252 -280\n-308 -336\n-364 -392\n-420 -448\n-476 -504\n-532 -560\n-588 -616\n-644 -672\n-700 -728\n-756 -784\n-812 -840\n-868 -896\n-924 -952\n-980 -1008\n-1036 -1064\n-1092 -1120\n-1148 -1176\n-1204 -1232\n-1260 -1288\n-1316 -1344\n-1372 -1400\n-1428 -1456\n-1484 -1512\n-1540 -1568", "29\n29 58\n87 116\n145 174\n203 232\n261 290\n319 348\n377 406\n435 464\n493 522\n551 580\n609 638\n667 696\n725 754\n783 812\n841 870\n899 928\n957 986\n1015 1044\n1073 1102\n1131 1160\n1189 1218\n1247 1276\n1305 1334\n1363 1392\n1421 1450\n1479 1508\n1537 1566\n1595 1624\n1653 1682", "30\n-300 600\n900 -1200\n1500 1800\n-2100 2400\n2700 -3000\n-3300 3600\n3900 -4200\n-4500 4800\n5100 -5400\n-5700 6000\n6300 -6600\n-6900 7200\n7500 -7800\n-8100 8400\n8700 -9000\n-9300 9600\n9900 -10200\n-10500 10800\n11100 -11400\n-11700 12000\n12300 -12600\n-12900 13200\n13500 -13800\n-14100 14400\n14700 -15000\n-15300 15600\n15900 -16200\n-16500 16800\n17100 -17400\n-17700 18000"]}
{"name": "887_A. Div. 64", "description": "Input\n\nIn the only line given a non-empty binary string s with length up to 100.", "testcase": ["0", "1", "01", "10", "110", "101010", "000000", "111111", "00110011", "11001100", "010101010101", "101010101010", "111000111000", "000111000111", "011011011011", "100100100100", "111111111111", "000000000000", "010110101101", "101001010010", "110101010101", "010101010110", "100000000001", "111101010111", "000010101000", "101111111101", "110100100011", "010010011000", "110010001001", "001100110011"]}
{"name": "90_A. Cableway", "description": "Input\n\nThe first line contains three integers r, g and b (0 <= r, g, b <= 100). It is guaranteed that r + g + b > 0, it means that the group consists of at least one student.", "testcase": ["0 1 0", "1 0 0", "0 0 1", "1 1 1", "2 3 4", "10 20 30", "15 15 15", "100 0 0", "0 100 0", "0 0 100", "2 2 2", "3 6 9", "12 34 56", "78 91 11", "23 45 67", "89 10 20", "30 0 70", "13 87 0", "99 1 0", "60 25 15", "80 10 10", "22 33 44", "0 50 50", "50 0 50", "50 50 0", "7 7 86", "14 28 58", "21 0 79", "64 18 18", "8 46 46"]}
{"name": "985_D. Sand Fortress", "description": "Input\n\nThe only line contains two integer numbers n and H (1 <= n, H <= 1018) --- the number of sand packs you have and the height of the fence, respectively.", "testcase": ["1 1", "2 2", "3 3", "4 4", "5 5", "6 6", "7 7", "8 8", "9 9", "10 10", "11 11", "12 12", "13 13", "14 14", "15 15", "16 16", "17 17", "18 18", "19 19", "20 20", "1000000000000 1000000000000", "500000000000 800000000000", "450000000000 475000000000", "123456789101 987654321098", "1017 1017", "999999999999 1000000000000", "1018 1018", "500 1500", "750000000000 250000000000", "333333333334 666666666667"]}
{"name": "114_D. Petr#", "description": "Input\n\nThe input file consists of three lines. The first line contains string t. The second and the third lines contain the sbegin and send identificators, correspondingly. All three lines are non-empty strings consisting of lowercase Latin letters. The length of each string doesn't exceed 2000 characters.", "testcase": ["a\nb\nc", "problem\nstart\nfinish", "identification\ninitial\nfinal", "challenge\ncase\nclose", "algorithm\nbegin\nterminate", "solution\ncommence\nend", "example\ninitiate\nhalt", "testcase\nlaunch\nstop", "verification\nopen\nclose", "programming\nenter\nconclude", "computation\norigin\nwrapup", "analysis\ninception\ncomplete", "investigation\nkickoff\nfinal", "determination\nalpha\nomega", "computation\ngenesis\ntheend", "operation\nbirth\nexpiry", "examination\nstartpoint\nfinishline", "assessment\nbase\nclimax", "appraisal\ncommencement\ncurtain", "evaluation\noutset\nadjourn", "judgment\nactivate\ndeactivate", "decision\nleadoff\ndone", "consideration\ngetgo\nwrap", "deliberation\nsetout\nshutdown", "scrutiny\nderive\nshutdown", "analysis\nembark\nwindup", "interpretation\nsetinmotion\nshutdown", "investigation\ngetunderway\ncompletion", "assessment\nenterupon\nshutdown", "evaluation\nsetthestage\nshutdown"]}
{"name": "118_A. String Task", "description": "Input\n\nThe first line represents input string of Petya's program. This string only consists of uppercase and lowercase Latin letters and its length is from 1 to 100, inclusive.", "testcase": ["A", "ABc", "xYzRSTlk", "DoraExplora", "puzzle", "Something", "UPPERlower", "CaseMatters", "sampleInput", "ValidString", "lengthOne", "mixOfCases", "QwErTy", "ASimpleTest", "Z", "MiddleCasesAreFun", "X", "oneMore", "JustAnotherCase", "k", "LettersOnly", "Uppercase", "abcdefghijklmnopqrstuvwxyz", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "abcdefghijklmnopqrstuvwxyZ", "ThisIsATestCase", "HelloWorld", "ByeByeBye", "Short", "LongerExampleString"]}
{"name": "1227_F2. Wrong Answer on test 233 (Hard Version)", "description": "Input\n\nThe first line contains two integers n, k (1 <= n <= 2*10^5, 1 <= k <= 10^9) --- the number of questions and the number of possible answers to each question.\n\nThe following line contains n integers h_1, h_2, ..., h_n, (1 <= h_{i} <= k) --- answers to the questions.", "testcase": ["2 2\n1 2", "3 10\n1 2 3", "4 100\n4 3 2 1", "5 20\n20 1 2 3 4", "6 500\n1 1 1 1 1 1", "7 1000\n999 888 777 666 555 444 333", "8 10\n2 4 6 8 10 8 6 4", "9 50\n49 40 41 42 43 44 45 46 47", "10 1000\n500 500 500 500 500 500 500 500 500 500", "11 200\n11 22 33 44 55 66 77 88 99 110 121", "12 500\n100 200 300 400 1 2 3 4 5 6 7 8", "13 999\n13 26 39 52 65 78 91 104 117 130 143 156 169", "14 3\n3 2 3 1 1 2 3 1 1 2 3 1 2 3", "15 500000\n40000 40001 40002 40003 50000 12345 67890 22334 55666 77888 99999 11111 22222 33333 44444", "16 10\n1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6", "17 1000000\n17 34 51 68 85 10 100 200 300 400 500 600 700 800 900 1000 25", "18 20\n10 9 8 7 6 5 4 3 2 1 11 12 13 14 15 16 17 18", "19 905\n102 203 304 405 506 607 708 809 101 212 313 414 515 616 717 818 919 110 19", "20 57\n57 1 56 2 55 3 54 4 53 5 52 6 51 7 50 8 49 9 48 10", "21 100000\n100 120 140 160 180 200 220 240 260 280 300 320 340 360 380 400 420 440 460 480 500", "22 9999\n200 400 600 800 1000 1200 1400 1600 1800 2000 2200 2400 2600 2800 3000 3200 3400 3600 3800 4000 4200 4400", "23 37\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23", "24 1000\n24 48 72 96 120 144 168 192 216 240 264 288 312 336 360 384 408 432 456 480 504 528 552 576", "25 25\n5 10 15 20 25 1 6 11 16 21 2 7 12 17 22 3 8 13 18 23 4 9 14 19 24", "26 75\n25 50 75 1 26 51 2 27 52 3 28 53 4 29 54 5 30 55 6 31 56 7 32 57 8 33 58 9 34 59", "27 1000000\n999999 999998 999997 999996 999995 999994 999993 999992 999991 999990 999989 999988 999987 999986 999985 999984 999983 999982 999981 999980 999979 999978 999977 999976 999975", "28 88\n11 22 33 44 55 66 77 88 1 12 23 34 45 56 67 78 2 13 24 35 46 57 68 79 3 14 25 36 47 58 69 80 4 15 26 37 48", "29 999\n333 666 999 1 334 667 2 335 668 3 336 669 4 337 670 5 338 671 6 339 672 7 340 673 8 341 674 9 342 675", "30 500\n50 100 150 200 250 300 350 400 450 500 51 101 151 201 251 301 351 401 451 51 52 102 152 202 252 302 352 402 452", "31 10^9\n1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1048576 2097152 4194304 8388608 16777216 33554432 67108864 134217728 268435456 536870912", "32 200000\n1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11 11 12 12 13 13 14 14 15 15"]}
{"name": "1312_D. Count the Arrays", "description": "Input\n\nThe first line contains two integers n and m (2 <= n <= m <= 2 * 10^5).", "testcase": ["2 4", "3 6", "2 2", "4 8", "5 10", "6 12", "7 14", "8 16", "10 20", "11 22", "12 24", "13 26", "14 28", "15 30", "16 32", "17 34", "18 36", "19 38", "20 40", "21 42", "22 44", "23 46", "24 48", "25 50", "26 52", "27 54", "28 56", "29 58", "30 60", "31 62"]}
{"name": "236_C. LCM Challenge", "description": "Input\n\nThe first line contains an integer n (1 <= n <= 106) --- the n mentioned in the statement.", "testcase": ["1", "2", "3", "4", "5", "10", "20", "50", "100", "200", "500", "1000", "5000", "10000", "20000", "50000", "100000", "200000", "500000", "600000", "700000", "800000", "900000", "1000000", "999999", "324561", "456789", "123456", "654321", "876543"]}
{"name": "615_E. Hexagons", "description": "Input\n\nThe only line of the input contains integer n (0 <= n <= 1018) --- the number of Ayrat's moves.", "testcase": ["0", "1", "2", "3", "4", "5", "10", "15", "20", "100", "500", "1000", "5000", "10000", "50000", "100000", "500000", "1000000", "5000000", "10000000", "50000000", "100000000", "500000000", "1000000000", "5000000000", "10000000000", "50000000000", "100000000000", "500000000000", "1018"]}
{"name": "776_E. The Holmes Children", "description": "Input\n\nA single line of input contains two space separated integers n (1 <= n <= 1012) and k (1 <= k <= 1012) indicating that Eurus asks Sherlock and Mycroft to find the value of Fk(n) modulo 1000000007.", "testcase": ["1 1", "1000000000000 1000000000000", "500000000000 999999999999", "999999999999 500000000000", "123456789 987654321", "222222222222 333333333333", "102030405060 706050403020", "314159265358 271828182846", "161803398874 141421356237", "200000000000 700000000000", "5 6", "13 8", "21 34", "1000000007 1000000008", "1000000009 1000000010", "100000000000 123456789", "987654321 123456789", "555555555555 444444444444", "777777777777 888888888888", "424242424242 242424242424", "999999999 999999999", "823456789123 321654987654", "111111111111 222222222222", "333333333333 444444444444", "888888888888 777777777777", "347128347128 923847293847", "999999992 123456789", "1 1000000", "999999 15", "1 123456789"]}
{"name": "801_A. Vicious Keyboard", "description": "Input\n\nThe first line will contain a string s consisting only of uppercase English letters \"V\" and \"K\" with length not less than 1 and not greater than 100.", "testcase": ["V", "K", "VK", "VV", "KK", "VKV", "KVK", "VVV", "KKK", "VKVK", "VVVK", "KKKV", "VKKV", "KVVV", "VKVV", "KVVK", "VKVKV", "VVKVK", "KVVKV", "VVVKK", "KKVVV", "VKVKVK", "VVKVVK", "KVVKVV", "VKVVVK", "VVVKVK", "KKVKVK", "KVKVKV", "VKVKVKV", "VVKVKVKV"]}
{"name": "847_C. Sum of Nestings", "description": "Input\n\nThe first line contains two integers n and k (1 <= n <= 3\u00b7105, 0 <= k <= 1018) --- the number of opening brackets and needed total nesting.", "testcase": ["1 0", "2 1", "3 2", "3 3", "4 6", "5 10", "6 15", "7 21", "8 28", "9 36", "10 45", "11 55", "12 66", "13 78", "14 91", "15 105", "16 120", "17 136", "18 153", "19 171", "20 190", "21 210", "22 231", "23 253", "24 276", "25 300", "26 325", "27 351", "28 378", "29 406"]}
{"name": "964_A. Splits", "description": "Input\n\nThe first line contains one integer n (1 <= n <= 10^9).", "testcase": ["1", "2", "3", "10", "100", "999", "1000", "123456", "1000000", "1234567", "10000000", "20000000", "30000000", "40000000", "50000000", "60000000", "70000000", "80000000", "90000000", "100000000", "200000000", "300000000", "400000000", "500000000", "600000000", "700000000", "800000000", "900000000", "999999999", "1000000000"]}
{"name": "p00500 Unique number", "description": "input\n\nThe input consists of 1 + N lines.\n\nThe integer N (2 <= N <= 200) is written on the first line, which indicates the number of players.\n\nIn the i-th line (1 <= i <= N) of the following N lines, three integers from 1 to 100 are written separated by blanks, and the i-th player is the first, second, and third times, respectively. Represents the number written in the game of.", "testcase": ["3\n10 20 30\n40 50 60\n70 80 90", "2\n1 1 1\n100 100 100", "5\n23 45 67\n89 12 43\n56 78 90\n11 34 56\n78 54 32", "4\n5 10 15\n20 25 30\n35 40 45\n50 55 60", "6\n12 34 56\n78 90 12\n23 45 67\n89 10 11\n22 33 44\n55 66 77", "7\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n5 5 5\n6 6 6\n7 7 7", "10\n34 67 90\n12 24 36\n48 60 72\n84 96 100\n1 3 5\n7 9 11\n13 15 17\n19 21 23\n25 27 29\n31 33 35", "8\n88 77 66\n55 44 33\n22 11 99\n88 76 54\n32 45 67\n89 78 67\n56 45 34\n23 12 1", "9\n5 5 5\n10 10 10\n15 15 15\n20 20 20\n25 25 25\n30 30 30\n35 35 35\n40 40 40\n45 45 45", "2\n99 98 97\n96 95 94", "4\n17 18 19\n20 21 22\n23 24 25\n26 27 28", "3\n1 2 3\n4 5 6\n7 8 9", "6\n34 35 36\n37 38 39\n40 41 42\n43 44 45\n46 47 48\n49 50 51", "5\n55 45 35\n25 15 5\n65 75 85\n95 90 80\n70 60 50", "6\n11 22 33\n44 55 66\n77 88 99\n100 90 80\n70 60 50\n40 30 20", "7\n64 68 72\n76 80 84\n88 92 96\n100 4 8\n12 16 20\n24 28 32\n36 40 44", "11\n27 35 43\n51 59 67\n75 83 91\n99 7 15\n23 31 39\n47 55 63\n71 79 87\n95 3 11\n19 27 35\n43 51 59\n67 75 83", "12\n9 18 27\n36 45 54\n63 72 81\n90 99 8\n17 26 35\n44 53 62\n71 80 89\n98 7 16\n25 34 43\n52 61 70\n79 88 97\n6 15 24", "13\n20 21 22\n23 24 25\n26 27 28\n29 30 31\n32 33 34\n35 36 37\n38 39 40\n41 42 43\n44 45 46\n47 48 49\n50 51 52\n53 54 55\n56 57 58", "8\n10 11 12\n13 14 15\n16 17 18\n19 20 21\n22 23 24\n25 26 27\n28 29 30\n31 32 33", "14\n2 4 6\n8 10 12\n14 16 18\n20 22 24\n26 28 30\n32 34 36\n38 40 42\n44 46 48\n50 52 54\n56 58 60\n62 64 66\n68 70 72\n74 76 78\n80 82 84", "4\n50 40 30\n20 10 100\n90 80 70\n60 50 40", "15\n3 6 9\n12 15 18\n21 24 27\n30 33 36\n39 42 45\n48 51 54\n57 60 63\n66 69 72\n75 78 81\n84 87 90\n93 96 99\n2 5 8\n11 14 17\n20 23 26\n29 32 35", "16\n16 32 48\n64 80 96\n2 18 34\n50 66 82\n98 4 20\n36 52 68\n84 100 6\n22 38 54\n70 86 2\n18 34 50\n66 82 98\n4 20 36\n52 68 84\n100 6 22\n38 54 70\n86 2 18", "17\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n5 5 5\n6 6 6\n7 7 7\n8 8 8\n9 9 9\n10 10 10\n11 11 11\n12 12 12\n13 13 13\n14 14 14\n15 15 15\n16 16 16\n17 17 17", "18\n1 2 3\n4 5 6\n7 8 9\n10 11 12\n13 14 15\n16 17 18\n19 20 21\n22 23 24\n25 26 27\n28 29 30\n31 32 33\n34 35 36\n37 38 39\n40 41 42\n43 44 45\n46 47 48\n49 50 51\n52 53 54", "19\n5 10 20\n25 30 35\n40 45 50\n55 60 65\n70 75 80\n85 90 95\n100 5 10\n15 20 25\n30 35 40\n45 50 55\n60 65 70\n75 80 85\n90 95 100\n5 10 15\n20 25 30\n35 40 45\n50 55 60\n65 70 75\n80 85 90", "20\n56 78 90\n34 56 78\n12 34 56\n78 90 12\n45 67 89\n23 45 67\n1 23 45\n67 89 10\n34 56 78\n90 12 34\n56 78 90\n12 34 56\n78 90 12\n45 67 89\n23 45 67\n1 23 45\n67 89 10\n34 56 78\n90 12 34\n56 78 90", "21\n15 14 13\n12 11 10\n9 8 7\n6 5 4\n3 2 1\n100 99 98\n97 96 95\n94 93 92\n91 90 89\n88 87 86\n85 84 83\n82 81 80\n79 78 77\n76 75 74\n73 72 71\n70 69 68\n67 66 65\n64 63 62\n61 60 59\n58 57 56\n55 54 53", "22\n11 12 13\n14 15 16\n17 18 19\n20 21 22\n23 24 25\n26 27 28\n29 30 31\n32 33 34\n35 36 37\n38 39 40\n41 42 43\n44 45 46\n47 48 49\n50 51 52\n53 54 55\n56 57 58\n59 60 61\n62 63 64\n65 66 67\n68 69 70\n71 72 73\n74 75 76", "23\n8 16 24\n32 40 48\n56 64 72\n80 88 96\n4 12 20\n28 36 44\n52 60 68\n76 84 92\n100 8 16\n24 32 40\n48 56 64\n72 80 88\n96 4 12\n20 28 36\n44 52 60\n68 76 84\n92 100 8\n16 24 32\n40 48 56\n64 72 80\n88 96 4\n12 20 28\n36 44 52"]}
{"name": "1351_A. A+B (Trial Problem)", "description": "Input\n\nThe first line contains an integer t (1 <= t <= 10^4) --- the number of test cases in the input. Then t test cases follow.\n\nEach test case is given as a line of two integers a and b (-1000 <= a, b <= 1000).", "testcase": ["1\n-500 500", "1\n999 1000", "1\n0 0", "1\n-1000 -1000", "1\n1000 1000", "1\n-1 1", "1\n3 -3", "1\n-999 999", "1\n42 24", "1\n-420 420", "1\n-100 100", "1\n1 -1", "1\n123 -123", "1\n-321 321", "1\n555 -555", "1\n-666 666", "1\n777 -777", "1\n888 888", "1\n-888 -888", "1\n111 -111", "1\n-222 222", "1\n333 -333", "1\n-444 444", "1\n555 555", "1\n-777 777", "1\n-123 123", "1\n234 -234", "1\n345 345", "1\n-456 456", "1\n567 -567", "1\n678 678"]}
{"name": "27_E. Number With The Given Amount Of Divisors", "description": "Input\n\nThe first line of the input contains integer n (1 <= n <= 1000).", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30"]}
{"name": "397_A. On Segment's Own Points", "description": "Input\n\nThe first line contains a positive integer n (1 <= n <= 100). The (i + 1)-th line contains integers li and ri (0 <= li < ri <= 100) --- the endpoints of the corresponding segment for the i-th student.", "testcase": ["1\n0 1", "2\n1 2\n2 3", "3\n0 50\n51 100\n25 75", "4\n5 10\n11 20\n21 30\n31 40", "5\n5 15\n20 25\n30 35\n40 45\n50 55", "6\n0 1\n1 2\n2 3\n3 4\n4 5\n5 6", "7\n10 20\n21 30\n31 40\n41 50\n51 60\n61 70\n70 80", "8\n0 10\n11 20\n22 32\n33 43\n44 54\n55 65\n66 76\n77 87", "9\n1 2\n3 4\n5 6\n7 8\n9 10\n11 12\n13 14\n15 16\n17 18", "10\n0 100\n10 20\n30 40\n50 60\n70 80\n15 25\n35 45\n55 65\n75 85\n25 35", "11\n2 3\n4 5\n6 7\n8 9\n10 11\n12 13\n14 15\n16 17\n18 19\n20 21\n22 23", "12\n0 10\n10 20\n20 30\n30 40\n40 50\n50 60\n60 70\n70 80\n80 90\n90 100\n25 35\n35 45", "13\n5 10\n11 16\n17 22\n23 28\n29 34\n35 40\n41 46\n47 52\n53 58\n59 64\n65 70\n71 76\n77 82", "14\n1 2\n3 4\n5 6\n7 8\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28", "15\n10 20\n30 40\n50 60\n70 80\n90 100\n20 30\n40 50\n60 70\n80 90\n1 11\n11 21\n21 31\n31 41\n41 51\n51 61", "16\n0 1\n2 3\n4 5\n6 7\n8 9\n10 11\n12 13\n14 15\n16 17\n18 19\n20 21\n22 23\n24 25\n26 27\n28 29\n30 31", "17\n0 5\n6 11\n12 17\n18 23\n24 29\n30 35\n36 41\n42 47\n48 53\n54 59\n60 65\n66 71\n72 77\n78 83\n84 89\n90 95\n96 100", "18\n1 2\n3 4\n5 6\n7 8\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n29 30\n31 32\n33 34\n35 36", "19\n10 20\n21 31\n32 42\n43 53\n54 64\n65 75\n76 86\n87 97\n5 15\n25 35\n45 55\n65 75\n85 95\n15 25\n35 45\n55 65\n75 85\n95 100\n50 60", "20\n0 10\n11 21\n22 32\n33 43\n44 54\n55 65\n66 76\n77 87\n88 98\n1 11\n12 22\n23 33\n34 44\n45 55\n56 66\n67 77\n78 88\n89 99\n10 20\n20 30", "21\n0 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21", "22\n5 10\n15 20\n25 30\n35 40\n45 50\n55 60\n65 70\n75 80\n85 90\n95 100\n10 15\n20 25\n30 35\n40 45\n50 55\n60 65\n70 75\n80 85\n90 95\n2 7\n12 17\n22 27", "23\n0 4\n5 9\n10 14\n15 19\n20 24\n25 29\n30 34\n35 39\n40 44\n45 49\n50 54\n55 59\n60 64\n65 69\n70 74\n75 79\n80 84\n85 89\n90 94\n95 99\n3 7\n8 12\n13 17", "24\n1 2\n3 4\n5 6\n7 8\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n29 30\n31 32\n33 34\n35 36\n37 38\n39 40\n41 42\n43 44\n45 46\n47 48", "25\n0 10\n10 20\n20 30\n30 40\n40 50\n50 60\n60 70\n70 80\n80 90\n90 100\n11 21\n21 31\n31 41\n41 51\n51 61\n61 71\n71 81\n81 91\n91 100\n5 15\n15 25\n25 35\n35 45\n45 55\n55 65", "26\n0 1\n2 3\n4 5\n6 7\n8 9\n10 11\n12 13\n14 15\n16 17\n18 19\n20 21\n22 23\n24 25\n26 27\n28 29\n30 31\n32 33\n34 35\n36 37\n38 39\n40 41\n42 43\n44 45\n46 47\n48 49\n50 51", "27\n5 10\n10 15\n15 20\n20 25\n25 30\n30 35\n35 40\n40 45\n45 50\n50 55\n55 60\n60 65\n65 70\n70 75\n75 80\n80 85\n85 90\n90 95\n95 100\n4 9\n9 14\n14 19\n19 24\n24 29\n29 34\n34 39", "28\n1 2\n3 4\n5 6\n7 8\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n29 30\n31 32\n33 34\n35 36\n37 38\n39 40\n41 42\n43 44\n45 46\n47 48\n49 50\n51 52\n53 54\n55 56", "29\n0 5\n5 10\n10 15\n15 20\n20 25\n25 30\n30 35\n35 40\n40 45\n45 50\n50 55\n55 60\n60 65\n65 70\n70 75\n75 80\n80 85\n85 90\n90 95\n95 100\n1 6\n6 11\n11 16\n16 21\n21 26\n26 31\n31 36\n36 41\n41 46", "30\n0 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26\n26 27\n27 28\n28 29\n29 30"]}
{"name": "41_B. Martian Dollar", "description": "Input\n\nThe first line contains two integers n and b (1 <= n, b <= 2000) --- the number of days and the initial number of money in bourles. The next line contains n integers ai (1 <= ai <= 2000) --- the prices of Martian dollars.", "testcase": ["2 1500\n100 200", "3 500\n600 300 700", "4 1000\n250 500 750 2000", "1 2000\n1999", "5 150\n100 200 300 400 500", "10 1000\n100 200 300 400 500 600 700 800 900 1000", "6 1200\n2000 1500 1600 1400 1800 1100", "7 700\n700 600 800 500 400 300 200", "8 800\n100 200 150 350 400 450 500 250", "9 900\n123 456 789 101 121 131 141 161 181", "10 2000\n2000 1999 1988 1877 1766 1655 1544 1433 1322 1211", "11 1100\n102 204 306 408 510 612 714 816 918 1020 1122", "12 300\n10 20 30 40 50 60 70 80 90 100 110 120", "13 1300\n130 260 390 520 650 780 910 1040 1170 1300 312 424", "14 1400\n200 400 600 800 1000 1200 1400 1600 1800 2000 1100 1200 1300 1400", "15 2000\n150 300 450 600 750 900 1050 1200 1350 1500 1650 1800 1950 50 100", "16 1600\n160 320 480 640 800 960 1120 1280 1440 1600 1760 1920 80 240 400", "17 1700\n170 340 510 680 850 1020 1190 1360 1530 1700 1870 204 238 272 306", "18 1800\n1080 1180 1280 1380 1480 1580 1680 1780 1880 1980 108 218 328 438 548", "19 1900\n95 190 285 380 475 570 665 760 855 950 1045 1140 1235 1330 91 182", "20 500\n2000 1900 1800 1700 1600 1500 1400 1300 1200 1100 1000 900 800 700 600 500", "21 2100\n21 42 63 84 105 126 147 168 189 210 231 252 273 294 315 336 357 378 399", "22 2200\n1100 2200 330 440 550 660 770 880 990 110 220 330 440 550 660 770 880 990 1100", "23 2300\n23 46 69 92 115 138 161 184 207 230 253 276 299 322 345 368 391 414 437", "24 2400\n100 150 200 250 300 350 400 450 500 550 600 650 700 750 800 850 900 950 1000", "25 2500\n25 50 75 100 125 150 175 200 225 250 275 300 325 350 375 400 425 450 475", "26 2600\n26 52 78 104 130 156 182 208 234 260 286 312 338 364 390 416 442 468 494", "27 2700\n27 54 81 108 135 162 189 216 243 270 297 324 351 378 405 432 459 486 513", "28 2800\n28 56 84 112 140 168 196 224 252 280 308 336 364 392 420 448 476 504 532", "29 2900\n29 58 87 116 145 174 203 232 261 290 319 348 377 406 435 464 493 522 551", "30 3000\n30 60 90 120 150 180 210 240 270 300 330 360 390 420 450 480 510 540 570"]}
{"name": "514_A. Chewba\u0441ca and Number", "description": "Input\n\nThe first line contains a single integer x (1 <= x <= 1018) --- the number that Luke Skywalker gave to Chewbacca.", "testcase": ["1", "2", "923456789012345678", "500000000000000000", "101010101010101010", "42", "999999999999999999", "100000000000000000", "18", "17", "999", "888888888888888888", "123456789123456789", "2", "99999999999999998", "987654321098765432", "314159265358979323", "271828182845904523", "161803398874989484", "202102222020202020", "404", "65536", "4294967296", "18446744073709551615", "3", "27", "8128", "2147483647", "1337", "1123581321345589144"]}
{"name": "630_R. Game", "description": "Input\n\nThe only line of the input contains one integer n (1 <= n <= 1018) --- the size of the field.", "testcase": ["1", "2", "999999999999999999", "1000000000000000000", "1018", "10", "20", "100", "1000", "10000", "100000", "1000000", "10000000", "100000000", "1000000000", "10000000000", "100000000000", "1000000000000", "10000000000000", "100000000000000", "1000000000000000", "10000000000000000", "100000000000000000", "1000000000000000000", "500000000000000000", "600000000000000000", "700000000000000000", "800000000000000000", "900000000000000000", "950000000000000000"]}
{"name": "797_C. Minimal string", "description": "Input\n\nFirst line contains non-empty string s (1 <= |s| <= 105), consisting of lowercase English letters.", "testcase": ["a", "ab", "abc", "abcd", "abcde", "abcdef", "abcdefg", "abcdefgh", "abcdefghi", "abcdefghij", "abcdefghijk", "abcdefghijkl", "abcdefghijklm", "abcdefghijklmn", "abcdefghijklmno", "abcdefghijklmnop", "abcdefghijklmnopq", "abcdefghijklmnopqr", "abcdefghijklmnopqrs", "abcdefghijklmnopqrst", "abcdefghijklmnopqrstu", "abcdefghijklmnopqrstuv", "abcdefghijklmnopqrstuvw", "abcdefghijklmnopqrstuvwx", "abcdefghijklmnopqrstuvwxy", "abcdefghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyza", "abcdefghijklmnopqrstuvwxyzaa", "abcdefghijklmnopqrstuvwxyzaaa", "abcdefghijklmnopqrstuvwxyzaaaa"]}
{"name": "1064_A. Make a triangle!", "description": "Input\n\nThe only line contains tree integers a, b and c (1 <= a, b, c <= 100) --- the lengths of sticks Masha possesses.", "testcase": ["1 1 1", "2 2 2", "3 3 3", "4 4 4", "5 5 5", "6 6 6", "7 7 7", "8 8 8", "9 9 9", "10 10 10", "11 11 11", "12 12 12", "13 13 13", "14 14 14", "15 15 15", "16 16 16", "17 17 17", "18 18 18", "19 19 19", "20 20 20", "21 21 21", "22 22 22", "23 23 23", "24 24 24", "25 25 25", "26 26 26", "27 27 27", "28 28 28", "29 29 29", "30 30 30"]}
{"name": "131_A. cAPS lOCK", "description": "Input\n\nThe first line of the input data contains a word consisting of uppercase and lowercase Latin letters. The word's length is from 1 to 100 characters, inclusive.", "testcase": ["A", "apple", "Banana", "CherryIsBest", "Xylophone", "StrawberriesAreYummy", "Pineapple", "Mango", "JuicyFruit", "Grapes", "watermelon", "Kiwi", "Raspberry", "Blueberries", "Lime", "Lemon", "Orange", "Apricot", "Blackcurrant", "Coconut", "Guava", "Gooseberries", "HoneydewMelon", "Jackfruit", "Kumquat", "Lychee", "Mulberry", "Nectarine", "Olive", "Papaya"]}
{"name": "289_C. Polo the Penguin and Strings", "description": "Input\n\nA single line contains two positive integers n and k (1 <= n <= 106, 1 <= k <= 26) --- the string's length and the number of distinct letters.", "testcase": ["10 1", "100 5", "500 10", "1000 20", "999999 26", "3467 15", "8573 25", "12345 26", "67890 23", "234567 26", "78901 21", "45678 24", "87654 18", "65432 19", "43210 16", "999 3", "2048 26", "32767 26", "54321 22", "77777 26", "8910 2", "22222 4", "33333 5", "44444 6", "55555 7", "66666 8", "1234 9", "2345 10", "3456 11", "4567 12"]}
{"name": "430_E. Guess the Tree", "description": "Input\n\nThe first line of the input contains integer n (1 <= n <= 24). Next line contains n positive integers: the i-th number represents ci (1 <= ci <= n).", "testcase": [{"n": 1, "ci": [1]}, {"n": 2, "ci": [1, 2]}, {"n": 3, "ci": [3, 1, 2]}, {"n": 4, "ci": [1, 4, 3, 2]}, {"n": 5, "ci": [5, 2, 1, 4, 3]}, {"n": 6, "ci": [1, 2, 3, 4, 5, 6]}, {"n": 7, "ci": [7, 6, 5, 4, 3, 2, 1]}, {"n": 8, "ci": [1, 8, 3, 6, 5, 7, 2, 4]}, {"n": 9, "ci": [9, 1, 8, 7, 2, 6, 3, 4, 5]}, {"n": 10, "ci": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {"n": 11, "ci": [11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]}, {"n": 12, "ci": [1, 12, 2, 11, 3, 10, 4, 9, 5, 8, 6, 7]}, {"n": 13, "ci": [13, 1, 12, 2, 11, 3, 10, 4, 9, 5, 8, 6, 7]}, {"n": 14, "ci": [1, 14, 13, 2, 12, 3, 11, 4, 10, 5, 9, 6, 8, 7]}, {"n": 15, "ci": [15, 1, 14, 2, 13, 3, 12, 4, 11, 5, 10, 6, 9, 7, 8]}, {"n": 16, "ci": [1, 16, 2, 15, 3, 14, 4, 13, 5, 12, 6, 11, 7, 10, 8, 9]}, {"n": 17, "ci": [17, 16, 1, 15, 2, 14, 3, 13, 4, 12, 5, 11, 6, 10, 7, 9, 8]}, {"n": 18, "ci": [1, 2, 18, 3, 17, 4, 16, 5, 15, 6, 14, 7, 13, 8, 12, 9, 11, 10]}, {"n": 19, "ci": [19, 1, 18, 2, 17, 3, 16, 4, 15, 5, 14, 6, 13, 7, 12, 8, 11, 9, 10]}, {"n": 20, "ci": [1, 20, 19, 2, 18, 3, 17, 4, 16, 5, 15, 6, 14, 7, 13, 8, 12, 9, 11, 10]}, {"n": 21, "ci": [21, 1, 20, 2, 19, 3, 18, 4, 17, 5, 16, 6, 15, 7, 14, 8, 13, 9, 12, 10, 11]}, {"n": 22, "ci": [1, 22, 21, 2, 20, 3, 19, 4, 18, 5, 17, 6, 16, 7, 15, 8, 14, 9, 13, 10, 12, 11]}, {"n": 23, "ci": [23, 1, 22, 2, 21, 3, 20, 4, 19, 5, 18, 6, 17, 7, 16, 8, 15, 9, 14, 10, 13, 11, 12]}, {"n": 24, "ci": [1, 24, 2, 23, 3, 22, 4, 21, 5, 20, 6, 19, 7, 18, 8, 17, 9, 16, 10, 15, 11, 14, 12, 13]}, {"n": 4, "ci": [2, 3, 4, 1]}, {"n": 6, "ci": [6, 5, 4, 3, 2, 1]}, {"n": 8, "ci": [2, 4, 6, 8, 7, 5, 3, 1]}, {"n": 10, "ci": [10, 8, 6, 4, 2, 1, 3, 5, 7, 9]}, {"n": 12, "ci": [2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11]}, {"n": 14, "ci": [14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]}]}
{"name": "669_A. Little Artem and Presents", "description": "Input\n\nThe only line of the input contains a single integer n (1 <= n <= 109) --- number of stones Artem received on his birthday.", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "100", "1000", "10000", "100000", "1000000", "10000000", "12345678", "54321678", "87654321", "99999999", "500000000", "700000000", "800000000", "900000000", "999999999", "214748364", "429496729", "643245765", "857564911", "999999998"]}
{"name": "758_F. Geometrical Progression", "description": "Input\n\nThe first and the only line cotains three integers n, l and r (1 <= n <= 107, 1 <= l <= r <= 107).", "testcase": ["1 1 1", "2 1 2", "3 1 3", "4 1 4", "5 1 5", "6 1 6", "7 1 7", "8 1 8", "9 1 9", "10 1 10", "100 1 100", "1000 1 1000", "10000 1 10000", "100000 1 100000", "1000000 1 1000000", "10000000 1 10000000", "9999999 1 9999999", "1234567 1 1234567", "7654321 1 7654321", "2345678 1 2345678", "8765432 1 8765432", "3456789 1 3456789", "9876543 1 9876543", "4567890 2 4567890", "1023456 2 1023456", "6543210 2 6543210", "7890123 10 7890123", "8901234 100 8901234", "9012345 1000 9012345", "543210 10000 543210"]}
{"name": "803_C. Maximal GCD", "description": "Input\n\nThe first line consists of two numbers n and k (1 <= n, k <= 1010).", "testcase": ["1 1", "2 5", "10 10", "1000000000 1000000000", "123456789 987654321", "9999999999 1", "5000000000 5000000000", "1 9999999999", "999999999 1000000000", "100000000 5000000000", "2500000000 7500000000", "3333333333 6666666666", "42 42", "5555555555 8888888888", "987654321 123456789", "3141592653 2718281828", "1618033988 1123581321", "2021020202 2022020202", "123123123 987987987", "4444444444 3333333333", "5050505050 5050505050", "7777777777 2222222222", "9000000000 100000000", "1 10000000000", "10000000000 1", "1414213562 1732050807", "7071067811 7071067812", "1000000001 1000000002", "1000000003 1000000004", "1000000005 1000000006"]}
{"name": "p02287 Complete Binary Tree", "description": "Input\n\nIn the first line, an integer $H$, the size of the binary heap, is given. In the second line, $H$ integers which correspond to values assigned to nodes of the binary heap are given in order of node id (from $1$ to $H$).", "testcase": ["5\n1 3 2 5 4", "3\n10 5 2", "4\n100 50 25 75", "7\n10 20 20 30 25 40 35", "2\n99 100", "6\n1 2 3 4 5 6", "10\n15 10 12 8 9 11 10 3 4 2", "1\n42", "8\n32 30 20 10 25 15 5 1", "3\n0 0 0", "9\n88 77 66 55 44 33 22 11 10", "5\n123 100 99 50 3", "11\n1 1 2 3 5 8 13 21 34 55 89", "2\n2 1", "7\n1000 800 600 400 200 100 50", "3\n7 8 6", "14\n101 202 303 404 505 606 707 808 909 1010 1111 1212 1313 1414", "12\n1 4 3 8 7 2 6 5 9 12 11 10", "13\n100 50 50 25 25 25 25 10 10 10 10 5 5", "6\n6 5 4 3 2 1", "8\n1 2 3 4 6 5 7 8", "9\n31 26 21 20 19 18 17 16 15", "15\n1 3 5 7 9 11 13 15 17 19 21 23 25 27 29", "10\n1000 500 1000 200 200 200 200 100 100 100", "5\n10 7 10 3 1", "7\n21 20 19 18 17 16 15", "6\n1 1 1 1 1 2", "3\n9 7 10", "11\n5 4 5 4 4 5 4 4 4 5 4", "4\n2 1 2 1"]}
{"name": "1208_B. Uniqueness", "description": "Input\n\nThe first line of the input contains a single integer n (1 <= n <= 2000) --- the number of elements in the given array.\n\nThe next line contains n spaced integers a_{1}, a_{2}, ..., a_{n} (1 <= a_{i} <= 10^{9}) --- the elements of the array.", "testcase": ["1\n1", "2\n1000000000 500000000", "3\n1 2 3", "4\n6 7 9 4", "5\n213 654 787 345 123", "6\n435 765 876 345 987 234", "7\n345 987 234 567 876 543 210", "8\n234 567 654 789 890 678 345 123", "9\n123 234 345 456 567 678 789 890 901", "10\n10 20 30 40 50 60 70 80 90 100", "11\n110 111 112 113 114 115 116 117 118 119 120", "12\n130 140 150 160 170 180 190 200 210 220 230 240", "13\n1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000", "14\n5100 5200 5300 5400 5500 5600 5700 5800 5900 6000 6100 6200 6300 6400", "15\n241 572 683 794 805 916 1027 1138 1249 1360 1471 1582 1693 1804 1915", "16\n412 523 634 745 856 967 1078 1189 1290 1301 1412 1523 1634 1745 1856 1967", "17\n108 219 330 441 552 663 774 885 996 1007 1118 1229 1340 1451 1562 1673 1784", "18\n181 292 303 414 525 636 747 858 969 1070 1181 1292 1403 1514 1625 1736 1847 1958", "19\n200 311 422 533 644 755 866 977 2088 2199 2300 2411 2522 2633 2744 2855 2966 3077 3188", "20\n1312 1423 1534 1645 1756 1867 1978 2089 2200 2311 2422 2533 2644 2755 2866 2977 3088 3199 3300 3411", "21\n2000 2111 2222 2333 2444 2555 2666 2777 2888 2999 3000 3111 3222 3333 3444 3555 3666 3777 3888 3999 4000", "22\n2100 2211 2322 2433 2544 2655 2766 2877 2988 3099 3200 3311 3422 3533 3644 3755 3866 3977 4088 4199 4300 4411", "23\n3211 3322 3433 3544 3655 3766 3877 3988 4099 4100 4211 4322 4433 4544 4655 4766 4877 4988 5099 5200 5311 5422 5533", "24\n4321 4432 4543 4654 4765 4876 4987 5098 5209 5310 5421 5532 5643 5754 5865 5976 6087 6198 6309 6410 6521 6632 6743 6854", "25\n5432 5543 5654 5765 5876 5987 6098 6209 6320 6431 6542 6653 6764 6875 6986 7097 7208 7319 7430 7541 7652 7763 7874 7985 8096", "26\n6543 6654 6765 6876 6987 7098 7209 7320 7431 7542 7653 7764 7875 7986 8097 8208 8319 8430 8541 8652 8763 8874 8985 9096 9207 9318", "27\n7654 7765 7876 7987 8098 8209 8320 8431 8542 8653 8764 8875 8986 9097 9208 9319 9430 9541 9652 9763 9874 9985 10096 10207 10318 10429 10540", "28\n8765 8876 8987 9098 9209 9320 9431 9542 9653 9764 9875 9986 10097 10208 10319 10430 10541 10652 10763 10874 10985 11096 11207 11318 11429 11540 11651 11762", "29\n9876 9987 10098 10209 10320 10431 10542 10653 10764 10875 10986 11097 11208 11319 11430 11541 11652 11763 11874 11985 12096 12207 12318 12429 12540 12651 12762 12873 12984", "30\n10987 11098 11209 11320 11431 11542 11653 11764 11875 11986 12097 12208 12319 12430 12541 12652 12763 12874 12985 13096 13207 13318 13429 13540 13651 13762 13873 13984 14095 14206"]}
{"name": "70_A. Cookies", "description": "Input\n\nThe first line contains a single integer n (0 <= n <= 1000).", "testcase": ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "100", "200", "300", "400", "500", "600", "700", "800", "900", "1000"]}
{"name": "893_B. Beautiful Divisors", "description": "Input\n\nThe only line of input contains one number n (1 <= n <= 105) --- the number Luba has got.", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30"]}
{"name": "p00491 Pasta", "description": "input\n\nThe input consists of K + 1 lines.\n\nOn the first line, two integers N and K (3 <= N <= 100, 1 <= K <= N) are written with a blank as a delimiter.\n\nOn the 1 + i line (1 <= i <= K), two integers Ai and Bi (1 <= Ai <= N, 1 <= Bi <= 3) are written with a blank as a delimiter. This means that the pasta on the Ai day has already been decided, and when Bi = 1, it is a tomato sauce, when Bi = 2, it is a cream sauce, and when Bi = 3, it is a basil sauce. Ai (1 <= i <= K) are all different. It is guaranteed that there will be at least one plan to meet the conditions in the given input data.", "testcase": ["3 1\n1 2", "5 2\n1 3\n4 1", "4 2\n2 1\n3 2", "3 1\n2 3", "8 2\n3 1\n6 3", "10 3\n1 2\n5 1\n7 3", "6 1\n4 3", "12 2\n4 2\n8 1", "7 3\n2 1\n5 2\n7 3", "15 1\n10 2", "20 4\n3 1\n7 3\n13 2\n16 1", "14 3\n6 2\n11 1\n13 3", "13 2\n3 3\n10 1", "9 3\n1 2\n5 3\n8 1", "30 5\n4 1\n12 2\n18 3\n24 1\n29 2", "11 3\n2 3\n6 1\n9 2", "17 2\n1 1\n16 3", "25 4\n5 2\n10 1\n15 3\n20 2", "18 2\n7 1\n14 2", "16 1\n15 3", "22 3\n2 1\n11 2\n21 3", "24 4\n3 1\n8 3\n15 2\n23 1", "100 1\n50 3", "26 3\n4 2\n13 1\n19 3", "29 5\n5 1\n10 3\n15 2\n20 1\n25 3", "50 2\n25 1\n49 2", "31 4\n7 3\n14 1\n21 2\n28 3", "35 2\n17 2\n34 1", "40 3\n10 3\n20 1\n30 2", "45 2\n22 1\n44 3"]}
{"name": "p02258 Maximum Profit", "description": "Input\n\nThe first line contains an integer $n$. In the following $n$ lines, $R_t$ ($t = 0, 1, 2, ... n-1$) are given in order.", "testcase": ["1\n0", "2\n1\n2", "3\n0\n1\n2", "4\n3\n2\n1\n0", "5\n4\n3\n2\n1\n0", "6\n0\n1\n2\n3\n4\n5", "7\n6\n5\n4\n3\n2\n1\n0", "8\n0\n1\n2\n3\n4\n5\n6\n7", "9\n8\n7\n6\n5\n4\n3\n2\n1", "10\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9", "1\n100", "2\n100\n200", "3\n300\n200\n100", "4\n100\n200\n300\n400", "5\n500\n400\n300\n200\n100", "6\n100\n200\n300\n400\n500\n600", "7\n700\n600\n500\n400\n300\n200\n100", "8\n100\n200\n300\n400\n500\n600\n700\n800", "9\n900\n800\n700\n600\n500\n400\n300\n200\n100", "10\n100\n200\n300\n400\n500\n600\n700\n800\n900\n1000", "1\n0", "2\n10\n11", "3\n20\n21\n22", "4\n30\n31\n32\n33", "5\n40\n41\n42\n43\n44", "6\n50\n51\n52\n53\n54\n55", "7\n60\n61\n62\n63\n64\n65\n66", "8\n70\n71\n72\n73\n74\n75\n76\n77", "9\n80\n81\n82\n83\n84\n85\n86\n87\n88", "10\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99"]}
{"name": "118_B. Present from Lena", "description": "Input\n\nThe first line contains the single integer n (2 <= n <= 9).", "testcase": ["2", "3", "4", "5", "6", "7", "8", "9", "2", "3", "4", "5", "6", "7", "8", "9", "2", "3", "4", "5", "6", "7", "8", "9", "2", "3", "4", "5", "6", "7"]}
{"name": "1514_B. AND 0, Sum Big", "description": "Input\n\nThe first line contains an integer t (1 <= t <= 10) --- the number of test cases you need to solve.\n\nEach test case consists of a line containing two integers n and k (1 <= n <= 10^{5}, 1 <= k <= 20).", "testcase": ["1\n100000 20", "1\n99999 15", "1\n12345 5", "1\n54321 10", "1\n80000 20", "1\n23456 8", "1\n34567 12", "1\n45678 16", "1\n56789 3", "1\n67890 7", "1\n78901 11", "1\n89012 14", "1\n91023 17", "1\n10234 6", "1\n11111 9", "1\n22222 2", "1\n33333 13", "1\n44444 4", "1\n55555 1", "1\n66666 18", "1\n77777 19", "1\n88888 20", "1\n12321 10", "1\n43210 5", "1\n31415 9", "1\n27182 7", "1\n16180 4", "1\n14142 3", "1\n21212 5", "1\n10001 1"]}
{"name": "471_C. MUH and House of Cards", "description": "Input\n\nThe single line contains integer n (1 <= n <= 1012) --- the number of cards.", "testcase": ["1", "2", "10", "50", "100", "102", "500", "1000", "10000", "50000", "100000", "500000", "1000000", "5000000", "10000000", "50000000", "100000000", "500000000", "1000000000", "1500000000", "2000000000", "2500000000", "3000000000", "3500000000", "4000000000", "4500000000", "5000000000", "5500000000", "6000000000", "6500000000"]}
{"name": "664_A. Complicated GCD", "description": "Input\n\nThe only line of the input contains two integers a and b (1 <= a <= b <= 10100).", "testcase": ["1 1", "2 2", "1 10", "5 20", "10 11", "99 100", "1 10000", "12345 12345", "100 200", "50 1000", "9 9", "10 1000", "99 999999", "999 1000", "100 1000", "123 1234", "4321 43210", "10000 20000", "100000 200000", "1 9999999999", "9999 100000", "1000000000 10000000000000000000", "1234567890 12345678901234567890", "10101 10101010101010101010", "10000000000000000000 10000000000000000001", "10 10000000000000000000000000000000", "8 88888888888888888888888888888888", "100000 10000000000000000000000000000000000000000000000000", "99999999999999999999 1000000000000000000000000000000000000000000000000000000", "1 10000000000000000000000000000000000000000000000000000000000000000"]}
{"name": "847_D. Dog Show", "description": "Input\n\nTwo integer numbers are given in the first line - n and T (1 <= n <= 200 000, 1 <= T <= 2\u00b7109) --- the number of bowls of food and the time when the dog is stopped.\n\nOn the next line numbers t1, t2, ..., tn (1 <= ti <= 109) are given, where ti is the moment of time when the i-th bowl of food is ready for eating.", "testcase": ["2 10\n1 9", "3 20\n2 5 8", "4 15\n3 6 9 12", "5 25\n1 5 10 15 20", "10 50\n1 2 3 4 5 6 7 8 9 10", "6 30\n5 10 15 20 25 30", "7 100\n14 28 42 56 70 84 98", "6 18\n3 6 9 12 15 18", "9 45\n5 10 15 20 25 30 35 40 45", "8 160\n20 40 60 80 100 120 140 160", "1 1000000000\n999999999", "200000 2000000000\n", "15 350\n23 46 69 92 115 138 161 184 207 230 253 276 299 322 345", "10 100\n10 20 30 40 50 60 70 80 90 100", "20 2000\n100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000", "50 500\n10 20 30 40 50 60 70 80 90 100 110 120 130 140 150 160 170 180 190 200 210 220 230 240 250 260 270 280 290 300 310 320 330 340 350 360 370 380 390 400 410 420 430 440 450 460 470 480 490 500", "7 70\n10 20 30 40 50 60 70", "30 3000\n100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300 2400 2500 2600 2700 2800 2900 3000", "5 10\n2 4 6 8 10", "1 1\n1", "100 500\n5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95 100 105 110 115 120 125 130 135 140 145 150 155 160 165 170 175 180 185 190 195 200 205 210 215 220 225 230 235 240 245 250 255 260 265 270 275 280 285 290 295 300 305 310 315 320 325 330 335 340 345 350 355 360 365 370 375 380 385 390 395 400 405 410 415 420 425 430 435 440 445 450 455 460 465 470 475 480 485 490 495 500", "15 123456789\n10000000 20000000 30000000 40000000 50000000 60000000 70000000 80000000 90000000 100000000 110000000 120000000 130000000 140000000 150000000", "25 2000\n80 160 240 320 400 480 560 640 720 800 880 960 1040 1120 1200 1280 1360 1440 1520 1600 1680 1760 1840 1920 2000", "40 3000\n75 150 225 300 375 450 525 600 675 750 825 900 975 1050 1125 1200 1275 1350 1425 1500 1575 1650 1725 1800 1875 1950 2025 2100 2175 2250 2325 2400 2475 2550 2625 2700 2775 2850 2925 3000", "12 360\n30 60 90 120 150 180 210 240 270 300 330 360", "8 888\n111 222 333 444 555 666 777 888", "14 140\n10 20 30 40 50 60 70 80 90 100 110 120 130 140", "2 9\n4 8", "11 550\n50 100 150 200 250 300 350 400 450 500 550", "3 15\n5 10 15", "17 1700\n100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700", "18 180\n10 20 30 40 50 60 70 80 90 100 110 120 130 140 150 160 170 180", "13 1300\n100 200 300 400 500 600 700 800 900 1000 1100 1200 1300"]}
{"name": "868_F. Yet Another Minimization Problem", "description": "Input\n\nThe first line contains two integers n and k (2 <= n <= 105, 2 <= k <= min (n, 20)) --- the length of the array and the number of segments you need to split the array into.\n\nThe next line contains n integers a1, a2, ..., an (1 <= ai <= n) --- the elements of the array.", "testcase": ["2 2\n1 2", "3 2\n1 2 3", "4 2\n1 2 3 4", "5 3\n1 2 3 4 5", "6 3\n6 5 4 3 2 1", "7 3\n1 3 5 7 2 4 6", "8 4\n8 7 6 5 4 3 2 1", "9 3\n1 2 3 4 5 6 7 8 9", "10 4\n10 9 8 7 6 5 4 3 2 1", "11 5\n1 1 1 1 1 1 1 1 1 1 1", "12 4\n12 11 10 9 8 7 6 5 4 3 2 1", "13 5\n1 2 3 4 5 6 7 8 9 10 11 12 13", "14 4\n14 13 12 11 10 9 8 7 6 5 4 3 2 1", "15 5\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15", "16 4\n16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "17 5\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17", "18 5\n18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "19 6\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19", "20 5\n20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "21 6\n1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11", "22 7\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22", "23 6\n23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "24 7\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24", "25 7\n25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "26 8\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "27 7\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27", "28 8\n28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "29 8\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29", "30 10\n30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "100 10\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100"]}
{"name": "964_B. Messages", "description": "Input\n\nThe first line contains five integers n, A, B, C and T (1 <= n, A, B, C, T <= 1000).\n\nThe second string contains n integers ti (1 <= ti <= T).", "testcase": ["5 100 200 300 400\n1 2 3 4 5", "1 999 1 1 1\n1", "10 500 400 300 200\n10 20 30 40 50 60 70 80 90 100", "3 123 456 789 1000\n100 200 300", "4 234 678 910 345\n23 45 67 89", "7 800 100 400 700\n1 2 3 4 5 6 7", "5 450 450 450 450\n100 100 100 100 100", "6 321 654 987 1000\n10 20 30 40 50 60", "9 123 456 789 321\n9 8 7 6 5 4 3 2 1", "2 111 222 333 444\n444 333", "8 876 543 210 1000\n100 200 300 400 500 600 700 800", "3 213 435 657 879\n213 435 657", "11 564 283 291 678\n11 22 33 44 55 66 77 88 99 1010", "12 800 600 400 200\n12 23 34 45 56 67 78 89 90 101 112 123", "13 440 220 330 880\n13 24 46 57 68 79 1011 1213", "14 195 385 575 765\n45 76 89 101 113 135", "15 678 345 123 910\n15 30 45 60 75 90 105 120 135", "16 100 100 100 100\n5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5", "17 222 111 999 888\n17 34 51 68 85 102 119 136 153", "18 432 123 876 555\n6 12 18 24 30 36 42 48 54 60 66 72 78 84 90", "19 999 888 777 666\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19", "20 800 700 600 500\n20 40 60 80 100 120 140 160 180 200", "21 432 543 654 765\n123 234 345 456 567 678 789", "22 987 654 321 100\n10 20 30 40 50 60 70 80 90 100 110 120 130", "23 500 400 300 200\n23 46 69 92 115 138 161 184", "24 350 450 550 650\n50 100 150 200 250 300 350 400", "25 222 333 444 555\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25", "26 651 752 853 954\n26 52 78 104 130 156 182", "27 321 432 543 654\n27 54 81 108 135 162 189", "30 100 200 300 400\n1 3 5 7 9 11 13 15 17 19 21 23 25 27 29"]}
{"name": "991_C. Candies", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 10^{18}) --- the initial amount of candies in the box.", "testcase": ["1", "2", "10", "9999999999999999", "15", "10000000000000000", "123456789123456789", "11", "333333333333333333", "17", "999", "500000000000000000", "800000000000000000", "900000000000000000", "19", "987654321098765432", "39", "555555555555555555", "777777777777777777", "888888888888888888", "999999999999999999", "100", "20", "42", "99999999999999998", "250000000000000000", "625000000000000000", "750000000000000000", "875000000000000000", "100000000000000001"]}
{"name": "1255_A. Changing Volume", "description": "Input\n\nEach test contains multiple test cases. The first line contains the number of test cases T (1 <= T <= 1 000). Then the descriptions of the test cases follow.\n\nEach test case consists of one line containing two integers a and b (0 <= a, b <= 10^{9}) --- the current volume and Bob's desired volume, respectively.", "testcase": ["1 0 0", "2 1000000000 500000000", "3 250000000 750000000", "4 123456789 987654321", "5 0 1", "6 10 10", "7 999999999 1000000000", "8 847583842 847583842", "9 404 404", "10 202 4040", "11 1234 4321", "12 0 999999999", "13 500000000 249999999", "14 10000000 20000000", "15 350000000 350000000", "16 88888888 22222222", "17 564 676", "18 1 1", "19 2 3", "20 4 5", "21 6 7", "22 8 9", "23 111111111 222222222", "24 333333333 444444444", "25 555555555 666666666", "26 777777777 888888888", "27 161803398 874817398", "28 314159265 358979323", "29 271828182 846264338", "30 161803399 874817397"]}
{"name": "600_C. Make Palindrome", "description": "Input\n\nThe only line contains string s (1 <= |s| <= 2\u00b7105) consisting of only lowercase Latin letters.", "testcase": ["a", "bb", "cccc", "kzenit", "sampletext", "testcaseexample", "lowercaseletters", "maximumlengthtestcaseoftwohundredthousandcharactersabcdefghijklmnopqrstuvwxyzaabbccdd", "puzzle", "quickfoxjumped", "theenglishalphabet", "abcdefghijklmnopqrstuvwxyz", "uniform", "variablex", "wonder", "extraordinarylengthtestcasewithexactlyonehundredcharactersabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghij", "youthful", "zippy", "anotherexamplestring", "justanotherlongertextexampletofillthetwentytestcasesrequirementofthistest", "short", "lengthyexamplestringthatisntquiteaslongastheothersbutistiller", "midwaypoint", "nearlyfull", "stringsarefun", "thisoneisquiteshort", "tiny", "under", "vexingproblem", "widevarietyoftestcases"]}
{"name": "762_A. k-th divisor", "description": "Input\n\nThe first line contains two integers n and k (1 <= n <= 1015, 1 <= k <= 109).", "testcase": ["1 1", "2 1", "3 5", "4 9", "5 10", "6 11", "7 12", "8 13", "9 14", "10 15", "11 16", "12 17", "13 18", "14 19", "15 20", "16 21", "17 22", "18 23", "19 24", "20 25", "21 26", "22 27", "23 28", "24 29", "25 30", "26 31", "27 32", "28 33", "29 34", "30 35"]}
{"name": "807_B. T-Shirt Hunt", "description": "Input\n\nThe only line contains three integers p, x and y (26 <= p <= 500; 1 <= y <= x <= 20000) --- your place in Codecraft-17, your current score in the elimination round of 8VC Venture Cup 2017, and the smallest number of points you consider sufficient for winning the current round.", "testcase": ["28 1500 1400", "30 1700 1600", "45 20000 19000", "26 500 450", "100 10000 9999", "500 12345 12300", "50 7000 6500", "75 8000 7999", "426 15000 14500", "35 2000 1500", "125 17300 17250", "330 5000 4900", "450 18500 15000", "38 6500 6400", "49 9500 9250", "200 10000 9500", "299 12000 11000", "77 3000 2700", "150 15678 15000", "100 20000 19800", "60 4000 3900", "110 11000 10900", "78 6789 6700", "42 5678 5600", "27 2345 2300", "375 18750 18600", "88 8800 8700", "345 17250 17000", "48 4800 4700", "310 15500 15050"]}
{"name": "1246_A. p-binary", "description": "Input\n\nThe only line contains two integers n and p (1 <= n <= 10^9, -1000 <= p <= 1000).", "testcase": ["1 -1000", "2 -500", "3 -250", "4 -100", "5 -50", "6 -25", "7 -10", "8 -5", "9 -1", "10 0", "11 1", "12 5", "13 10", "14 25", "15 50", "16 100", "17 250", "18 500", "19 750", "20 1000", "100000000 100", "500000000 250", "750000000 500", "1000000000 750", "123456789 -333", "234567890 444", "345678901 555", "456789012 -666", "567890123 777", "678901234 -888"]}
{"name": "1370_D. Odd-Even Subsequence", "description": "Input\n\nThe first line contains two integers n and k (2 <= k <= n <= 2 * 10^5) --- the size of the array a and the size of the subsequence.\n\nThe next line contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 10^9) --- the elements of the array a.", "testcase": ["2 2\n1 2", "3 2\n1 2 3", "4 2\n4 3 2 1", "4 2\n1 1 1 1", "4 3\n5 6 3 2", "4 3\n2 2 2 2", "5 2\n3 1 4 1 5", "5 3\n1 2 3 4 5", "5 5\n9 8 7 6 5", "6 2\n10 20 30 40 50 60", "6 3\n1 3 5 7 9 11", "6 4\n6 5 4 3 2 1", "7 2\n100 200 300 400 500 600 700", "7 4\n1 2 3 4 5 6 7", "7 7\n1 1 1 1 1 1 1", "8 2\n10 20 30 40 50 60 70 80", "8 4\n80 70 60 50 40 30 20 10", "8 5\n1 2 2 3 3 4 4 5", "9 2\n9 8 7 6 5 4 3 2 1", "9 3\n1 3 6 10 15 21 28 36 45", "9 6\n123 456 789 101 112 131 415 161 718", "10 2\n1000000000 900000000 800000000 700000000 600000000 500000000 400000000 300000000 200000000 100000000", "10 5\n10 9 8 7 6 5 4 3 2 1", "10 10\n1 1 1 1 1 1 1 1 1 1", "12 3\n12 34 56 78 90 123 456 789 135 246 579 810", "12 6\n1 2 1 2 1 2 1 2 1 2 1 2", "12 8\n11 22 33 44 55 66 77 88 99 1010 1111 1212", "15 5\n2 7 1 8 2 8 1 8 2 8 4 5 9 0 4", "15 10\n1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000", "20 10\n20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1"]}
{"name": "255_D. Mr. Bender and Square", "description": "Input\n\nThe first line contains four space-separated integers n, x, y, c (1 <= n, c <= 109; 1 <= x, y <= n; c <= n2).", "testcase": ["3 1 1 1", "5 2 3 10", "6 6 1 20", "10 3 7 40", "8 5 2 25", "9 9 5 60", "2 1 2 1", "7 3 4 30", "4 4 2 9", "1000000000 500000000 500000000 1000000000", "15 7 11 100", "12 6 6 50", "20 10 10 200", "30 15 15 400", "17 9 8 150", "25 13 12 300", "13 4 9 70", "11 5 6 60", "14 7 4 90", "31 16 16 450", "21 11 10 250", "22 3 18 350", "23 12 16 360", "24 8 17 380", "16 6 10 120", "18 9 9 180", "19 5 14 190", "26 13 13 400", "27 8 19 500", "28 14 14 600"]}
{"name": "328_A. IQ Test", "description": "Input\n\nThe first line contains exactly four integer numbers between 1 and 1000, inclusively.", "testcase": ["1 1 1 1", "2 3 4 5", "999 1000 998 997", "123 456 789 101", "500 500 500 500", "200 150 100 50", "300 400 500 600", "700 800 900 1000", "876 543 210 111", "321 654 987 1000", "999 888 777 666", "100 200 300 400", "40 60 80 100", "246 135 975 864", "159 753 486 321", "258 147 963 852", "111 222 333 444", "555 666 777 888", "120 320 620 920", "432 543 654 765", "234 567 890 123", "345 678 901 234", "456 789 123 456", "567 890 234 567", "678 901 345 678", "789 123 456 789", "890 234 567 890", "901 345 678 901", "112 334 556 778", "223 445 667 889"]}
{"name": "418_A. Football", "description": "Input\n\nThe first line contains two integers --- n and k (1 <= n, k <= 1000).", "testcase": ["1 1", "2 999", "3 100", "12 345", "123 456", "234 567", "72 17", "55 55", "1000 1000", "999 1", "850 725", "437 263", "111 222", "333 444", "555 666", "777 888", "888 999", "50 50", "600 300", "300 600", "100 200", "200 100", "400 800", "800 400", "500 500", "250 750", "750 250", "900 100", "100 900", "640 480"]}
{"name": "682_A. Alyona and Numbers", "description": "Input\n\nThe only line of the input contains two integers n and m (1 <= n, m <= 1 000 000).", "testcase": ["1 1", "10 10", "500000 500000", "1000000 1000000", "2 3", "999999 999999", "123456 654321", "42 42", "314159 271828", "16384 65536", "32768 32769", "789456 123123", "900000 100000", "800000 200000", "600000 400000", "500000 500001", "400000 600000", "300000 700000", "200000 800000", "100000 900000", "250000 750000", "750000 250000", "123123 456456", "456789 123987", "111111 222222", "333333 444444", "223344 556677", "987654 321098", "666666 333333", "1 1000000"]}
{"name": "888_C. K-Dominant Character", "description": "Input\n\nThe first line contains string s consisting of lowercase Latin letters (1 <= |s| <= 100000).", "testcase": ["a", "ab", "abc", "abcd", "abcde", "abcdef", "abcdefg", "abcdefgh", "abcdefghi", "abcdefghij", "abcdefghijk", "abcdefghijkl", "abcdefghijklm", "abcdefghijklmn", "abcdefghijklmno", "abcdefghijklmnop", "abcdefghijklmnopq", "abcdefghijklmnopqr", "abcdefghijklmnopqrs", "abcdefghijklmnopqrst", "abcdefghijklmnopqrstu", "abcdefghijklmnopqrstuv", "abcdefghijklmnopqrstuvw", "abcdefghijklmnopqrstuvwx", "abcdefghijklmnopqrstuvwxy", "abcdefghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyzab", "abcdefghijklmnopqrstuvwxyzabc", "abcdefghijklmnopqrstuvwxyzabcd", "abcdefghijklmnopqrstuvwxyzabcde"]}
{"name": "104_A. Blackjack", "description": "Input\n\nThe only line contains n (1 <= n <= 25) --- the required sum of points.", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "17", "8", "21", "14", "5"]}
{"name": "1409_D. Decrease the Sum of Digits", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 2 * 10^4) --- the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains two integers n and s (1 <= n <= 10^{18}; 1 <= s <= 162).", "testcase": ["1\n1000000000000000000 162", "1\n900000000000000000 65", "1\n150000000000000000 162", "1\n250000000000000000 100", "1\n200000000000 162", "1\n12345678987654321 80", "1\n100000000000000000 161", "1\n1000000000000000 162", "1\n100000000000000 126", "1\n50000000000000 82", "1\n100000000000 162", "1\n5000000000000 102", "1\n8000000000 162", "1\n777777777777777777 145", "1\n123123123123123123 137", "1\n10 5", "1\n100 100", "1\n1000 120", "1\n10000 140", "1\n100000 1", "1\n1000000 30", "1\n10000000 123", "1\n100000000 162", "1\n1000000000 50", "1\n10000000000 60", "1\n100000000000 70", "1\n1000000000000 80", "1\n10000000000000 90", "1\n100000000000000 100", "1\n10000000000000000 162"]}
{"name": "201_A. Clear Symmetry", "description": "Input\n\nThe only line contains a single integer x (1 <= x <= 100) --- the required sharpness of the matrix.", "testcase": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]}
{"name": "225_E. Unsolvable", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 40).", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30"]}
{"name": "858_C. Did you mean...", "description": "Input\n\nThe only line contains a non-empty word consisting of small English letters. The length of the word is between 1 and 3000 letters.", "testcase": ["a", "b", "puzzle", "example", "test", "word", "solution", "programming", "challenge", "continuous", "validation", "specification", "generation", "smallcase", "letters", "airport", "computer", "keyboard", "monitor", "mouse", "notebook", "randomized", "sequence", "string", "verification", "unique", "variable", "zebra", "tiger", "lion"]}
{"name": "109_A. Lucky Sum of Digits", "description": "Input\n\nThe single line contains an integer n (1 <= n <= 106) --- the sum of digits of the required lucky number.", "testcase": ["4", "7", "10", "20", "1", "30", "999999", "222222", "15", "150000", "3", "48", "64", "55", "500000", "100000", "123", "234", "345", "456", "567", "678", "789", "890", "901", "150", "250", "350", "450", "550"]}
{"name": "1395_A. Boboniu Likes to Color Balls", "description": "Input\n\nThe first line contains one integer T (1<= T<= 100) denoting the number of test cases.\n\nFor each of the next T cases, the first line contains four integers r, g, b and w (0<= r,g,b,w<= 10^9).", "testcase": ["4 5 6 7", "0 0 0 0", "100 200 300 400", "999999999 888888888 777777777 666666666", "123456789 987654321 123456789 987654321", "1 1 1 1", "2 0 0 1", "3 3 3 0", "4 2 2 2", "123 456 789 321", "100000000 200000000 300000000 400000000", "429496729 429496729 429496729 429496729", "98765432 12345678 87654321 23456789", "9999999 8888888 7777777 6666666", "543210987 987654321 123456789 98765432", "220000000 330000000 440000000 550000000", "314159265 358979323 846264338 327950288", "500000000 600000000 700000000 800000000", "999900000 999800000 999700000 999600000", "654321 123456 234567 345678", "0 1000000000 0 1000000000", "999999 1000000 1000001 1000010", "333333333 222222222 111111111 444444444", "101010101 202020202 303030303 404040404", "5050505 6060606 7070707 8080808", "9000000 8000000 7000000 6000000", "432143214 567856785 678967896 789078907", "246802468 135791357 975319753 864206420", "5 10 15 20", "25 50 75 100"]}
{"name": "258_A. Little Elephant and Bits", "description": "Input\n\nThe single line contains integer a, written in the binary notation without leading zeroes. This number contains more than 1 and at most 105 digits.", "testcase": ["10", "11", "101", "1101", "10010", "111000", "1010101", "11011011", "100010101", "1110000111", "10101010101", "110110110110", "1000101010101", "11100001110001", "101010101010101", "1101101101101101", "10001010101010101", "11100001110001111", "1010101010101010101", "11011011011011011011", "100010101010101010101", "1110000111000111000111", "1010101010101010101010101", "11011011011011011011011011", "100010101010101010101010101", "1110000111000111000111000111", "10101010101010101010101010101", "110110110110110110110110110110", "1000101010101010101010101010101", "111000011100011100011100011100011"]}
{"name": "281_A. Word Capitalization", "description": "Input\n\nA single line contains a non-empty word. This word consists of lowercase and uppercase English letters. The length of the word will not exceed 103.", "testcase": ["example", "Word", "lowerUPPER", "mIxEdCaSe", "short", "L", "veryLongWordThatSeemsToNeverEndAndKeepsGoingOnAndOn", "MiddleSized", "with123Numbers", "CAPITALIZED", "noncapatilized", "a", "AnotherOne", "YEtAnother", "newWORDwithLETTERS", "alphabet", "QWERTYuiopasdfghjklzxcvbnm", "ZxYcVuTsRqPoNmLkIjHgFeDcBa", "QuiteALongWordIndeedToBeCertain", "PythonIsFun", "aB", "abC", "ABCdefG", "AnotherLongWordToTestTheLimit", "Short", "MaximumLengthWordPassingTheBoundaryOfWhatCanBeConsideredShortOrLong", "QwErTyAsDfGhZxCvBn", "aAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaA", "YetAnotherTestcaseForYouToConsider", "End"]}
{"name": "447_A. DZY Loves Hash", "description": "Input\n\nThe first line contains two integers, p and n (2 <= p, n <= 300). Then n lines follow. The i-th of them contains an integer xi (0 <= xi <= 109).", "testcase": ["7 5\n1\n2\n3\n4\n5", "2 10\n0\n1\n0\n1\n0\n1\n0\n1\n0\n1", "3 3\n2\n1\n0", "10 2\n1000000000\n999999999", "4 4\n2\n4\n8\n16", "5 6\n3\n6\n9\n12\n15\n18", "9 7\n0\n0\n0\n0\n0\n0\n0", "15 15\n1\n3\n5\n7\n9\n11\n13\n15\n17\n19\n21\n23\n25\n27\n29", "20 6\n1000\n2000\n3000\n4000\n5000\n6000", "8 8\n2\n4\n6\n8\n10\n12\n14\n16", "6 4\n123\n234\n345\n456", "100 10\n0\n10000\n20000\n30000\n40000\n50000\n60000\n70000\n80000\n90000", "50 20\n1234\n2345\n3456\n4567\n5678\n6789\n7890\n8901\n9012\n12\n34\n56\n78\n90\n123\n456\n789\n890\n1234\n5678", "30 7\n777\n7777\n77777\n777777\n7777777\n77777777\n777777777", "12 12\n1\n5\n9\n13\n17\n21\n25\n29\n33\n37\n41\n45", "11 3\n231\n123\n321", "17 6\n1\n11\n111\n1111\n11111\n111111", "25 5\n2500\n5000\n7500\n10000\n12500", "27 9\n27\n54\n81\n108\n135\n162\n189\n216\n243", "29 11\n29\n58\n87\n116\n145\n174\n203\n232\n261\n290\n319", "23 8\n23\n46\n69\n92\n115\n138\n161\n184", "16 16\n1600\n3200\n4800\n6400\n8000\n9600\n11200\n12800\n14400\n16000\n17600\n19200\n20800\n22400\n24000\n25600", "19 9\n190\n380\n570\n760\n950\n1140\n1330\n1520\n1710", "300 15\n10000000\n20000000\n30000000\n40000000\n50000000\n60000000\n70000000\n80000000\n90000000\n100000000\n110000000\n120000000\n130000000\n140000000\n150000000", "33 4\n33\n66\n99\n132", "42 2\n420\n840", "300 10\n10\n20\n30\n40\n50\n60\n70\n80\n90\n100", "222 5\n2222\n4444\n6666\n8888\n11110", "100 20\n1\n25\n50\n75\n100\n125\n150\n175\n200\n225\n250\n275\n300\n325\n350\n375\n400\n425\n450\n475", "75 13\n75\n150\n225\n300\n375\n450\n525\n600\n675\n750\n825\n900\n975", "250 8\n2500\n5000\n7500\n10000\n12500\n15000\n17500\n20000"]}
{"name": "569_D. Symmetric and Transitive", "description": "Input\n\nA single line contains a single integer n (1 <= n <= 4000).", "testcase": ["1", "2", "3", "4", "5", "10", "20", "100", "200", "300", "400", "500", "600", "700", "800", "900", "1000", "1100", "1200", "1300", "1400", "1500", "1600", "1700", "1800", "1900", "2000", "2500", "3000", "4000"]}
{"name": "935_A. Fafa and his Company", "description": "Input\n\nThe input consists of a single line containing a positive integer n (2 <= n <= 105) --- the number of employees in Fafa's company.", "testcase": ["2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31"]}
{"name": "1168_A. Increasing by Modulo", "description": "Input\n\nThe first line contains two integers n and m (1 <= n, m <= 300 000) --- the number of integers in the array and the parameter m.\n\nThe next line contains n space-separated integers a_1, a_2, ..., a_n (0 <= a_i < m) --- the given array.", "testcase": ["1 10\n0", "2 50\n10 20", "3 100\n23 45 67", "4 1000\n123 456 789 234", "5 300000\n12345 23456 34567 45678 56789", "6 150000\n111111 222222 333333 444444 555555 666666", "7 200000\n0 1 2 3 4 5 6", "8 150\n0 15 30 45 60 75 90 105", "9 250\n123 122 144 0 1 55 77 200 100", "10 200000\n4512 56431 16547 13513 12512 20501 2512 28888 13456 24680", "11 50000\n49999 40000 30000 20000 10000 12345 54321 43210 32123 21012 12321", "12 35000\n0 10000 20000 30000 500 1000 1500 2500 3500 12000 13000 14000", "13 3000\n2999 2222 1111 0 123 321 567 765 890 987 456 654 789", "14 100000\n9876 8765 7654 6543 5432 4321 3210 1234 2345 3456 4567 5678 6789 7890", "15 600\n100 200 300 400 500 0 50 150 250 350 450 550 25 75 325", "16 12345\n1111 2222 3333 4444 5555 6666 7777 8888 9999 1010 2020 3030 4040 5050 6060", "17 98765\n111 222 333 444 555 666 777 888 999 101 202 303 404 505 606 707", "18 200\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17", "19 300000\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18", "20 80000\n255 65535 65534 65533 65532 65531 65530 255 256 257 1024 2048 3072 4096 8191", "21 500\n500 400 300 200 100 50 40 30 20 10 0 1 2 3 4", "22 5000\n0 400 800 1200 1600 2000 2400 2800 3200 3600 4000 4400 4800 1 2", "23 300000\n299999 299998 299997 299996 299995 299994 299993 299992 299991 299990 299989 299988 299987 299986", "24 10000\n555 444 333 222 111 0 9999 8888 7777 6666 1000 2000 3000 4000 5000", "25 150000\n149999 149998 149997 149996 149995 149994 149993 149992 149991 149990 149989 149988 149987 149986 149985", "26 2048\n1024 2047 0 1 2 3 1023 511 255 127 63 31 15 7 3", "27 300000\n1 300000 150000 225000 112500 56250 28125 140625 70312 35156 17578 8789 4394 2197", "28 9876\n123 246 369 492 615 738 861 984 1107 1230 1353 1476 1599 1722 1845", "29 32768\n16384 8192 4096 2048 1024 512 256 128 64 32 16 8 4 2 1", "30 257\n0 1 4 7 10 25 50 75 100 125 150 175 200 225 250"]}
{"name": "1288_C. Two Arrays", "description": "Input\n\nThe only line contains two integers n and m (1 <= n <= 1000, 1 <= m <= 10).", "testcase": ["1 1", "2 5", "3 10", "4 2", "5 6", "6 9", "7 3", "8 8", "9 7", "10 4", "11 1", "12 10", "13 2", "14 5", "15 8", "16 3", "17 6", "18 9", "19 3", "20 7", "21 10", "22 2", "23 5", "24 8", "25 1", "26 4", "100 10", "500 6", "750 2", "999 9"]}
{"name": "1437_A. Marketing Scheme", "description": "Input\n\nThe first line contains a single integer t (1 <= t <= 1000) --- the number of test cases.\n\nThe first and only line of each test case contains two integers l and r (1 <= l <= r <= 10^9) --- the range of the number of cans customers can buy.", "testcase": ["1\n1 1000000000", "2\n10 20\n30 40", "3\n100 200\n250 300\n400 500", "1\n123456789 987654321", "2\n1 9\n999999991 1000000000", "1\n55555555 75555555", "1\n33333333 66666666", "4\n1 2\n2 3\n3 4\n4 5", "1\n44444444 88888888", "2\n123 1234\n2345 34567", "1\n111111111 222222222", "3\n1 333\n444 777\n888 999", "2\n12345 123456\n789012 890123", "1\n101010101 202020202", "1\n333 4444", "1\n7777777 88888888", "2\n11 22\n33 44", "1\n98765 432109", "1\n9191919 9292929", "2\n13579 24680\n123456789 987654321", "1\n42424242 46464646", "2\n9999 100000\n100001 200000", "3\n300000 400000\n500000 600000\n700000 800000", "1\n100000 200000", "1\n12321 654321", "1\n2222222 3333333", "2\n777777777 888888888\n1234567 2345678", "3\n50 60\n70 80\n90 100", "1\n600000 700000", "2\n800000 900000\n1000000 1100000"]}
{"name": "1461_E. Water Level", "description": "Input\n\nThe first line of the input contains six integers k, l, r, t, x and y (1 <= l <= k <= r <= 10^{18}; 1 <= t <= 10^{18}; 1 <= x <= 10^6; 1 <= y <= 10^{18}) --- initial water level, the required range, the number of days, daily water usage and the exact amount of water that can be added, respectively.", "testcase": ["1 1 1 1 1 1", "2 2 1000000000000000000 1000000000000000000 1000000 1000000000000000000", "1000000000000000000 1000000000000000000 1 1 500000 500000000000000000", "1 10 20 30 40 50", "1 1 999999999999999999 999999999999999999 1000000 999999999999999999", "1 2 3 4 5 6", "1000 2000 3000 4000 5000 6000", "1 1 1 1 1 1000000000000000000", "900000000000000000 900000000000000000 1000000000000000000 999999999999999999 600000 700000000000000000", "350000000000000000 400000000000000000 600000000000000000 1000000000000000 75000 500", "100000000000000 1000000000000000 1 999999999999999999 234567 123456789012345678", "1 1 1 10 2 3", "200000000000000000 500000000000000000 750000000000000000 5000000000000000 123456 1", "300 300 1000 1000000000000000 2 999999999999999", "500000000000000000 500000000000000001 10 20 30 40", "1000000000000000000 1000000000000000000 1000000000000000000 999999999999999999 999999 1000000000000000000", "555555555555555555 777777777777777777 888888888888888888 1000000 4321 987654321012345678", "100000000000000 100000000000000 100000000000000 100000000000000 3 4", "999999999999999 1000000000000000000 10 10 1000000 999999999999999", "4 5 6 7 8 9", "987654321098765 987654321098766 987654321098767 987654321098768 123456 789012345678901", "16 32 64 128 256 512", "1000000000000000000 1000000000000000000 1 999999999999999999 999999 500000000000000000", "1 100 1000 10000 100000 1000000", "100000000000000 200000000000000 300000000000000 400000000000000 23456 123456789012345", "1 1 1000000000000000000 3 999999 1000000000000000000", "1024 2048 4096 8192 16384 32768", "10 20 30 500000000000000000 600000 700", "214 8482 19782 44444 22222 555", "1000000000000000000 1000000000000000000 1000000000000000000 2 1000000 10"]}
{"name": "32_C. Flea", "description": "Input\n\nThe first line contains three integers n, m, s (1 <= n, m, s <= 106) --- length of the board, width of the board and length of the flea's jump.", "testcase": ["1 1 1", "2 3 1", "4 4 4", "5 10 2", "100 200 50", "10 10 7", "200000 500000 300000", "6 12 1", "1000 2000 500", "2 2 2", "1000000 1000000 1", "300 400 299", "8 9 3", "7 5 5", "13 14 6", "9 8 4", "600000 700000 350000", "400 500 200", "120 240 60", "15 16 15", "20 21 19", "25 100 20", "1000 10000 999", "30 60 29", "500 1000 250", "10000 20000 10000", "35 70 34", "3 3 3", "40 80 39", "450 900 450"]}
{"name": "569_A. Music", "description": "Input\n\nThe single line contains three integers T, S, q (2 <= q <= 104, 1 <= S < T <= 105).", "testcase": ["100 10 2", "15000 500 3", "4567 123 2", "98765 1234 5", "32000 654 10", "90000 4500 4", "85000 123 2", "32678 2358 4", "7645 765 2", "50000 4000 3", "21000 356 2", "87654 2345 6", "63287 1000 7", "98712 876 8", "56789 6789 10", "43940 1201 2", "34000 2500 9", "89212 3123 4", "76459 212 3", "65000 5432 5", "48000 1234 3", "91012 4321 10", "34567 876 4", "85214 642 2", "10005 500 7", "80077 777 11", "72084 484 2", "54321 1000 3", "61000 2500 2", "74500 1345 9"]}
{"name": "p00015 National Budget", "description": "Input\n\nInput consists of several datasets. In the first line, the number of datasets N (1 <= N <= 50) is given. Each dataset consists of 2 lines:\n\n\nThe first integer\nThe second integer\n\n\nThe integer has at most 100 digits.", "testcase": ["2", "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890", "987654321098765432109876543210987654321098765432109876543210987654321098765432109876543210987654321", "3", "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "2222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222", "3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333", "4", "4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444", "5555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555", "6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666", "7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777", "5", "8888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888", "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", "1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101", "2020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020", "3030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030", "6", "12121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212", "13131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313", "14141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414", "15151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515", "16161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616", "7", "17171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717171717", "18181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818", "19191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919", "2020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020", "21212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121", "8", "23232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323", "24242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424", "25252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525", "26262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626", "27272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727", "28282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828", "9", "29292929292929292929292929292929292929292929292929292929292929292929292929292929292929292929292929", "30303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030"]}
{"name": "p00298 Mighty Man", "description": "input\n\nThe input is given in the following format.\n\n\nN\nc1 w1\nc2 w2\n::\ncN wN\n\n\nThe number of powerful people N (1 <= N <= 1000) is given in the first line. The following N lines give the maximum weight ci (1 <= ci <= 100000) and the weight wi (1 <= wi <= 100000) that the i-th power can have.", "testcase": ["4\n1000 800\n2000 1900\n500 499\n1500 1000", "1\n50000 25000", "2\n12345 54321\n23456 65432", "3\n99999 88888\n77777 66666\n44444 33333", "5\n9876 8765\n8765 7654\n7654 6543\n6543 5432\n5432 4321", "6\n30000 20000\n40000 10000\n50000 50000\n60000 30000\n70000 40000\n80000 70000", "7\n11111 11110\n22222 11111\n33333 22223\n44444 33334\n55555 44445\n66666 55555\n77777 66666", "8\n2500 1500\n2500 1500\n2500 1500\n2500 1500\n2500 1500\n2500 1500\n2500 1500\n2500 1500", "9\n100000 99999\n100000 99998\n100000 99997\n100000 99996\n100000 99995\n100000 99994\n100000 99993\n100000 99992\n100000 99991", "10\n1000 500\n2000 1000\n3000 1500\n4000 2000\n5000 2500\n6000 3000\n7000 3500\n8000 4000\n9000 4500\n10000 5000", "3\n2048 1024\n4096 2048\n8192 4096", "4\n1024 512\n2048 1024\n3072 1536\n4096 2048", "5\n20000 15000\n22000 16000\n24000 17000\n26000 18000\n28000 19000", "6\n3000 1000\n6000 2000\n12000 4000\n24000 8000\n48000 16000\n96000 32000", "7\n1500 750\n3000 1500\n4500 2250\n6000 3000\n7500 3750\n9000 4500\n10500 5250", "8\n1111 1110\n2222 2220\n3333 3330\n4444 4440\n5555 5550\n6666 6660\n7777 7770\n8888 8880", "9\n1600 800\n3200 1600\n6400 3200\n12800 6400\n25600 12800\n51200 25600\n102400 51200\n204800 102400\n409600 204800", "10\n234 117\n468 234\n702 351\n936 468\n1170 585\n1404 702\n1638 819\n1872 936\n2106 1053\n2340 1170", "4\n4444 3333\n8888 7777\n2222 1111\n6666 5555", "5\n54321 12345\n54321 12345\n54321 12345\n54321 12345\n54321 12345", "3\n10000 9000\n20000 19000\n30000 29000", "6\n5000 3000\n10000 5000\n15000 9000\n25000 20000\n35000 30000\n45000 40000", "7\n42000 36000\n43000 37000\n44000 38000\n45000 39000\n46000 40000\n47000 41000\n48000 42000", "8\n1000 100\n2000 200\n3000 300\n4000 400\n5000 500\n6000 600\n7000 700\n8000 800", "9\n10500 10499\n20500 20499\n30500 30499\n40500 40499\n50500 50499\n60500 60499\n70500 70499\n80500 80499\n90500 90499", "10\n16000 8000\n32000 16000\n64000 32000\n128000 64000\n256000 128000\n512000 256000\n1024000 512000\n2048000 1024000\n4096000 2048000\n8192000 4096000", "3\n4000 2000\n8000 4000\n12000 6000", "4\n10000 5000\n20000 10000\n30000 15000\n40000 20000", "5\n9500 4750\n19000 9500\n28500 14250\n38000 19000\n47500 23750", "6\n1234 617\n2468 1234\n3702 1851\n4936 2468\n6170 3085\n7404 3702"]}
{"name": "1025_C. Plasticine zebra", "description": "Input\n\nThe only line contains a string s (1 <= |s| <= 10^5, where |s| denotes the length of the string s) comprised of lowercase English letters 'b' and 'w' only, where 'w' denotes a white piece and 'b' denotes a black piece.", "testcase": ["b", "w", "bw", "ww", "bb", "wbw", "bwb", "wwbwb", "bwwbbww", "bbbbbbbbbb", "wwwwwwwwww", "bwbwbwbwbw", "wwbwwbwwbw", "bwbwbwbwbwbwbwbwbwb", "wwwwbwwbwwwwbwwbww", "bbbbbbbbbbbbbbbbbbbb", "wwbwwwwbwwwwbwwwbwbwb", "bbwbwbbbbbwbbbbwbbbbw", "bwbwbwbwbwbwbwbwbwbwbwbwbwbwb", "wwwwwwwwwwbwwwwwwwwwwww", "bbbbwbwbwbwbwbwbwbwbwbwbwbwbwbwb", "wbwbwbwbwbwbwbwbwbwbwbwbwbw", "bwbwbwbwbwbwbwbwbwbwbwbwbwbwbwbwbwbwb", "wwwwwbwwwwwwwwwwwwwwwwwwwwwwwwww", "bbbbbwbwbbwbwbbwbwbbwbwbwbwbwbbwbw", "wwwwwbwwwwbwwwwbwbwwbwwwwbwwwwbwww", "bwbwbwbwbwbwbwbwbbwwbwbwbwbwbwbwbwbwbwbw", "wwwwwwwwwwwwbwwwwwwwwwbwwwwwbwwwbwww", "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb", "wbwbwbwbwbwbwwbwbwwbwbwbwbwbwbwbwbwbwbwbw"]}
{"name": "110_A. Nearly Lucky Number", "description": "Input\n\nThe only line contains an integer n (1 <= n <= 1018).\n\nPlease do not use the %lld specificator to read or write 64-bit numbers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specificator.", "testcase": ["1", "2", "3", "4", "5", "10", "100", "999", "1000", "9999", "123456789", "987654321", "10000000000", "100000000000", "500000000000", "9007199254740991", "9223372036854775807", "101010101010101010", "111111111111111111", "222222222222222222", "333333333333333333", "444444444444444444", "555555555555555555", "666666666666666666", "777777777777777777", "888888888888888888", "999999999999999999", "1000000000000000000", "900000000000000000", "800000000000000000", "700000000000000000"]}
