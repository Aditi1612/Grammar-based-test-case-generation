{"name": "p02936 AtCoder Beginner Contest 138 - Ki", "description": "Constraints\n\n* 2 <= N <= 2 * 10^5\n* 1 <= Q <= 2 * 10^5\n* 1 <= a_i < b_i <= N\n* 1 <= p_j <= N\n* 1 <= x_j <= 10^4\n* The given graph is a tree.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN Q\na_1 b_1\n:\na_{N-1} b_{N-1}\np_1 x_1\n:\np_Q x_Q", "grammar": {"productions": ["<S>->[N] <s> [Q] <n> <T_N-1> <n> <L_Q>", "<T_i>-><T_i-1> <n> [a_i] <s> [b_i]", "<T_1>->[a_1] <s> [b_1]", "<L_i>-><L_i-1> <n> [p_i] <s> [x_i]", "<L_1>->[p_1] <s> [x_1]"], "constraints": ["2<=N<=2*10^5", "1<=Q<=2*10^5", "1<=a_i<b_i<=N", "1<=p_j<=N", "1<=x_j<=10^4"]}}
{"name": "p02696 AtCoder Beginner Contest 165 - Floor Function", "description": "Constraints\n\n* 1 <= A <= 10^{6}\n* 1 <= B <= 10^{12}\n* 1 <= N <= 10^{12}\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B N", "grammar": {"productions": ["<S>->[A] <s> [B] <s> [N]"], "constraints": ["1<=A<=10^6", "1<=B<=10^12", "1<=N<=10^12"]}}
{"name": "p03013 AtCoder Beginner Contest 129 - Typical Stairs", "description": "Constraints\n\n* 1 <= N <= 10^5\n* 0 <= M <= N-1\n* 1 <= a_1 < a_2 < ... < a_M <= N-1\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\na_1\na_2\n.\n.\n.\na_M", "grammar": {"productions": ["<S>->[N] <s> [M] <n> <T_M>", "<T_i>-><T_i-1> <n> a_i", "<T_1>->a_1"], "constraints": ["1<=N<=10^5", "0<=M<=N-1", "1<=a_1<a_2<...<a_M<=N-1"]}}
{"name": "p02953 AtCoder Beginner Contest 136 - Build Stairs", "description": "Constraints\n\n* All values in input are integers.\n* 1 <= N <= 10^5\n* 1 <= H_i <= 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nH_1 H_2 ... H_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> H_i", "<T_1>->H_1"], "constraints": ["1<=N<=10^5", "1<=H_i<=10^9"]}}
{"name": "791_A. Bear and Big Brother", "description": "Input\n\nThe only line of the input contains two integers a and b (1 <= a <= b <= 10) --- the weight of Limak and the weight of Bob respectively.", "grammar": {"productions": ["<S>->a <s> b"], "constraints": ["1<=a<=b<=10"]}}
{"name": "p02891 AtCoder Grand Contest 039 - Connection and Disconnection", "description": "Constraints\n\n* 1 <= |S| <= 100\n* S consists of lowercase English letters.\n* 1 <= K <= 10^9\n* K is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS\nK", "grammar": {"productions": ["<S>->S <n> K", "S->[a-z]{1,100}", "K->[0-9]{1,9}"], "constraints": ["1<=|S|<=100", "1<=K<=10^9"]}}
{"name": "p02693 AtCoder Beginner Contest 165 - We Love Golf", "description": "Constraints\n\n* All values in input are integers.\n* 1 <= A <= B <= 1000\n* 1 <= K <= 1000\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nK\nA B", "grammar": {"productions": ["<S>->K <n> A <s> B", "<T_i>-><T_i-1> <s> [0-9]{1}", "<T_1>->[0-9]{1}"], "constraints": ["1<=A<=B<=1000", "1<=K<=1000"]}}
{"name": "p02718 AtCoder Beginner Contest 161 - Popular Vote", "description": "Constraints\n\n* 1 <= M <= N <= 100\n* 1 <= A_i <= 1000\n* A_i are distinct.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nA_1 ... A_N", "grammar": {"productions": ["<S>->[N] <s> [M] <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["1<=M<=N<=100", "1<=A_i<=1000", "A_i are distinct"]}}
{"name": "443_A. Anton and Letters", "description": "Input\n\nThe first and the single line contains the set of letters. The length of the line doesn't exceed 1000. It is guaranteed that the line starts from an opening curved bracket and ends with a closing curved bracket. Between them, small English letters are listed, separated by a comma. Each comma is followed by a space.", "grammar": {"productions": ["<S>->'(' <T_L> ')'", "<T_i>-><T_i-10> <s> ',' <s> [a-z]{1} ", "<T_1>->[a-z]{1}"], "constraints": ["1<=L<=1000"]}}
{"name": "p03324 AtCoder Beginner Contest 100 - Ringo's Favorite Numbers", "description": "Constraints\n\n* D is 0, 1 or 2.\n* N is an integer between 1 and 100 (inclusive).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nD N", "grammar": {"productions": ["<S>->D <s> [N]", "<T_N>->[1-9]{1} <L_N-1>", "<L_N>->[0-9]{1} <L_N-1>", "<L_1>->[0-9]{1}"], "constraints": ["D=0||D=1||D=2", "1<=N<=100"]}}
{"name": "p02862 AtCoder Beginner Contest 145 - Knight", "description": "Constraints\n\n* 1 <= X <= 10^6\n* 1 <= Y <= 10^6\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX Y", "grammar": {"productions": ["<S>->X <s> Y"], "constraints": ["1<=X<=10^6", "1<=Y<=10^6"]}}
{"name": "p03854 AtCoder Beginner Contest 049 - Daydream", "description": "Constraints\n\n* 1<=|S|<=10^5\n* S consists of lowercase English letters.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>-><T_S>", "<T_i>->[a-z]{1}"], "constraints": ["1<=|S|<=10^5"]}}
{"name": "469_A. I Wanna Be the Guy", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 100). \n\nThe next line contains an integer p (0 <= p <= n) at first, then follows p distinct integers a1, a2, ..., ap (1 <= ai <= n). These integers denote the indices of levels Little X can pass. The next line contains the levels Little Y can pass in the same format. It's assumed that levels are numbered from 1 to n.", "grammar": {"productions": ["<S>->[n] <n> [p] <s> <T_p> <n> [q] <s> <L_q>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=n<=100", "0<=p<=n", "1<=a_i<=n", "0<=q<=n"]}}
{"name": "p03221 AtCoder Beginner Contest 113 - ID", "description": "Constraints\n\n* 1 <= N <= 10^5\n* 1 <= M <= 10^5\n* 1 <= P_i <= N\n* 1 <= Y_i <= 10^9\n* Y_i are all different.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nP_1 Y_1\n:\nP_M Y_M", "grammar": {"productions": ["<S>->[N] <s> [M] <n> <T_M>", "<T_i>-><T_i-1> <n> P_i <s> Y_i", "<T_1>->P_1 <s> Y_1"], "constraints": ["1<=N<=10^5", "1<=M<=10^5", "1<=P_i<=N", "1<=Y_i<=10^9"]}}
{"name": "p03309 AtCoder Beginner Contest 102 - Linear Approximation", "description": "Constraints\n\n* 1 <= N <= 2 * 10^5\n* 1 <= A_i <= 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 A_2 ... A_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_i"], "constraints": ["1<=N<=2*10^5", "1<=A_i<=10^9"]}}
{"name": "148_A. Insomnia cure", "description": "Input\n\nInput data contains integer numbers k, l, m, n and d, each number in a separate line (1 <= k, l, m, n <= 10, 1 <= d <= 10^5).", "grammar": {"productions": ["<S>->k <n> l <n> m <n> n <n> d"], "constraints": ["1<=k<=10", "1<=l<=10", "1<=m<=10", "1<=n<=10", "1<=d<=10^5"]}}
{"name": "1353_B. Two Arrays And Swaps", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 200) --- the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains two integers n and k (1 <= n <= 30; 0 <= k <= n) --- the number of elements in a and b and the maximum number of moves you can do. The second line of the test case contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 30), where a_i is the i-th element of a. The third line of the test case contains n integers b_1, b_2, ..., b_n (1 <= b_i <= 30), where b_i is the i-th element of b.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <s> [k] <n> <L_n> <n> <Z_n>", "<T_1>->[n] <s> [k] <n> <L_n> <n> <Z_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1", "<Z_i>-><Z_i-1> <s> b_i", "<Z_1>->b_1"], "constraints": ["1<=t<=200", "1<=n<=30", "0<=k<=n", "1<=a_i<=30", "1<=b_i<=30"]}}
{"name": "492_B. Vanya and Lanterns", "description": "Input\n\nThe first line contains two integers n, l (1 <= n <= 1000, 1 <= l <= 10^9) --- the number of lanterns and the length of the street respectively. \n\nThe next line contains n integers ai (0 <= ai <= l). Multiple lanterns can be located at the same point. The lanterns may be located at the ends of the street.", "grammar": {"productions": ["<S>->[n] <s> [l] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=1000", "1<=l<=10^9", "0<=a_i<=l"]}}
{"name": "p03076 AtCoder Beginner Contest 123 - Five Dishes", "description": "Constraints\n\n* A, B, C, D and E are integers between 1 and 123 (inclusive).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA\nB\nC\nD\nE", "grammar": {"productions": ["<S>->A <n> B <n> C <n> D <n> E"], "constraints": ["1<=A,B,C,D,E<=123"]}}
{"name": "p02612 AtCoder Beginner Contest 173 - Payment", "description": "Constraints\n\n* 1 <= N <= 10000\n* N is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->[N] <n>"], "constraints": ["1<=N<=10000"]}}
{"name": "p03137 AtCoder Beginner Contest 117 - Streamline", "description": "Constraints\n\n* All values in input are integers.\n* 1 <= N <= 10^5\n* 1 <= M <= 10^5\n* -10^5 <= X_i <= 10^5\n* X_1, X_2, ..., X_M are all different.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nX_1 X_2 ... X_M", "grammar": {"productions": ["<S>->[N] <s> [M] <n> <T_M>", "<T_i>-><T_i-1> <s> X_i", "<T_1>->X_1"], "constraints": ["1<=N<=10^5", "1<=M<=10^5", "-10^5<=X_i<=10^5", "All X_i are different"]}}
{"name": "510_A. Fox And Snake", "description": "Input\n\nThe only line contains two integers: n and m (3 <= n, m <= 50). \n\nn is an odd number.", "grammar": {"productions": ["<S>->[n] <s> [m]"], "constraints": ["3<=n<=50", "n%2==1", "3<=m<=50"]}}
{"name": "p03032 AtCoder Beginner Contest 128 - equeue", "description": "Constraints\n\n* All values in input are integers.\n* 1 <= N <= 50\n* 1 <= K <= 100\n* -10^7 <= V_i <= 10^7\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nV_1 V_2 ... V_N", "grammar": {"productions": ["<S>->[N] <s> [K] <n> <T_N>", "<T_i>-><T_i-1> <s> V_i", "<T_1>->V_i"], "constraints": ["1<=N<=50", "1<=K<=100", "-10000000<=V_i<=10000000"]}}
{"name": "p02973 AtCoder Beginner Contest 134 - Sequence Decomposing", "description": "Constraints\n\n* 1 <= N <= 10^5\n* 0 <= A_i <= 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1\n:\nA_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> A_i", "<T_1>->A_1"], "constraints": ["1<=N<=10^5", "0<=A_i<=10^9"]}}
{"name": "p02675 AtCoder Beginner Contest 168 - ∴ (Therefore)", "description": "Constraints\n\n* N is a positive integer not exceeding 999.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["1<=N<=999"]}}
{"name": "758_A. Holiday Of Equality", "description": "Input\n\nThe first line contains the integer n (1 <= n <= 100) --- the number of citizens in the kingdom.\n\nThe second line contains n integers a1, a2, ..., an, where ai (0 <= ai <= 10^6) --- the welfare of the i-th citizen.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=100", "0<=a_i<=10^6"]}}
{"name": "230_A. Dragons", "description": "Input\n\nThe first line contains two space-separated integers s and n (1 <= s <= 10^4, 1 <= n <= 10^3). Then n lines follow: the i-th line contains space-separated integers xi and yi (1 <= xi <= 10^4, 0 <= yi <= 10^4) --- the i-th dragon's strength and the bonus for defeating it.", "grammar": {"productions": ["<S>->s <s> [n] <n> <T_n>", "<T_i>-><T_i-1> <n> xi <s> yi", "<T_1>->xi <s> yi"], "constraints": ["1<=s<=10^4", "1<=n<=10^3", "1<=xi<=10^4", "0<=yi<=10^4"]}}
{"name": "1095_A. Repeating Cipher", "description": "Input\n\nThe first line contains integer n (1 <= n <= 55) --- the length of the encrypted string. The second line of the input contains t --- the result of encryption of some string s. It contains only lowercase Latin letters. The length of t is exactly n.\n\nIt is guaranteed that the answer to the test exists.", "grammar": {"productions": ["<S>->[n] <n> t", "<T_n>->[a-z]{n}"], "constraints": ["1<=n<=55"]}}
{"name": "1358_A. Park Lighting", "description": "Input\n\nThe first line contains a single integer t (1 <= t <= 10^4) --- the number of test cases in the input. Then t test cases follow.\n\nEach test case is a line containing two integers n, m (1 <= n, m <= 10^4) --- park sizes.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n <s> m", "<T_1>->n <s> m"], "constraints": ["1<=t<=10^4", "1<=n,m<=10^4"]}}
{"name": "p03472 AtCoder Beginner Contest 085 - Katana Thrower", "description": "Constraints\n\n* 1 <= N <= 10^5\n* 1 <= H <= 10^9\n* 1 <= a_i <= b_i <= 10^9\n* All input values are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN H\na_1 b_1\n:\na_N b_N", "grammar": {"productions": ["<S>->[N] <s> H <n> <T_N>", "<T_i>-><T_i-1> <n> a_i <s> b_i", "<T_1>->a_1 <s> b_1"], "constraints": ["1<=N<=10^5", "1<=H<=10^9", "1<=a_i<=10^9", "a_i<=b_i", "1<=b_i<=10^9"]}}
{"name": "1352_C. K-th Not Divisible by n", "description": "Input\n\nThe first line contains an integer t (1 <= t <= 1000) --- the number of test cases in the input. Next, t test cases are given, one per line.\n\nEach test case is two positive integers n (2 <= n <= 10^9) and k (1 <= k <= 10^9).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n <s> k", "<T_1>->n <s> k"], "constraints": ["1<=t<=1000", "2<=n<=10^9", "1<=k<=10^9"]}}
{"name": "1180_A. Alex and a Rhombus", "description": "Input\n\nThe first and only input line contains integer n (1 <= n <= 100) --- order of a rhombus whose numbers of cells should be computed.", "grammar": {"productions": ["<S>->[n]"], "constraints": ["1<=n<=100"]}}
{"name": "p02708 AtCoder Beginner Contest 163 - Sum of Large Numbers", "description": "Constraints\n\n* 1 <= N <= 2* 10^5\n* 1 <= K <= N+1\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K", "grammar": {"productions": ["<S>->[N] <s> K"], "constraints": ["1<=N<=2*10^5", "1<=K<=N+1"]}}
{"name": "p02390 Watch", "description": "Constraints\n\n* $0 <= S <= 86400$\n\nInput\n\nAn integer $S$ is given in a line.", "grammar": {"productions": ["<S>->S"], "constraints": ["0<=S<=86400"]}}
{"name": "1420_A. Cubes Sorting", "description": "Input\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1 <= t <= 1000), denoting the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains one positive integer n (2 <= n <= 5 * 10^4) --- number of cubes.\n\nThe second line contains n positive integers a_i (1 <= a_i <= 10^9) --- volumes of cubes.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_i"], "constraints": ["1<=t<=1000", "2<=n<=5*10^4", "1<=a_i<=10^9", "sum(n)<=10^5"]}}
{"name": "1436_A. Reorder", "description": "Input\n\nThe first line contains a single integer t --- the number of test cases (1 <= t <= 100). The test cases follow, each in two lines.\n\nThe first line of a test case contains two integers n and m (1 <= n <= 100, 0 <= m <= 10^6). The second line contains integers a_1, a_2, ..., a_n (0 <= a_i <= 10^6) --- the elements of the array.", "grammar": {"productions": ["<S>->[t] <n> <L_t>", "<L_i>-><L_i-1> <n> [n] <s> [m] <n> <T_n>", "<L_1>->[n] <s> [m] <n> <T_n>", "<T_i>-><T_i-1> <s> [a_i]", "<T_1>->[a_i]"], "constraints": ["1<=t<=100", "1<=n<=100", "0<=m<=10^6", "0<=a_i<=10^6"]}}
{"name": "835_A. Key races", "description": "Input\n\nThe first line contains five integers s, v1, v2, t1, t2 (1 <= s, v1, v2, t1, t2 <= 1000) --- the number of characters in the text, the time of typing one character for the first participant, the time of typing one character for the the second participant, the ping of the first participant and the ping of the second participant.", "grammar": {"productions": ["<S>->s <s> v1 <s> v2 <s> t1 <s> t2"], "constraints": ["1<=s<=1000", "1<=v1<=1000", "1<=v2<=1000", "1<=t1<=1000", "1<=t2<=1000"]}}
{"name": "1419_A. Digit Game", "description": "Input\n\nFirst line of input contains an integer t (1 <= t <= 100) --- the number of matches.\n\nThe first line of each match description contains an integer n (1 <= n <= 10^3) --- the number of digits of the generated number.\n\nThe second line of each match description contains an n-digit positive integer without leading zeros.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> [1-9]{1} <D_n-1> <n>", "<T_1>->[n] <n> [1-9]{1} <D_n-1> <n>", "<D_i>->[0-9]{1} <D_i-1>", "<D_1>->[0-9]{1}"], "constraints": ["1<=t<=100", "1<=n<=10^3"]}}
{"name": "p03434 AtCoder Beginner Contest 088 - Card Game for Two", "description": "Constraints\n\n* N is an integer between 1 and 100 (inclusive).\n* a_i \\ (1 <= i <= N) is an integer between 1 and 100 (inclusive).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 a_2 a_3 ... a_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=N<=100", "1<=a_i<=100"]}}
{"name": "1294_B. Collecting Packages", "description": "Input\n\nThe first line of the input contains an integer t (1 <= t <= 100) --- the number of test cases. Then test cases follow.\n\nThe first line of a test case contains one integer n (1 <= n <= 1000) --- the number of packages.\n\nThe next n lines contain descriptions of packages. The i-th package is given as two integers x_i and y_i (0 <= x_i, y_i <= 1000) --- the x-coordinate of the package and the y-coordinate of the package.\n\nIt is guaranteed that there are no two packages at the same point. It is also guaranteed that the point (0, 0) doesn't contain a package.\n\nThe sum of all values n over test cases in the test doesn't exceed 1000.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <n> x_i <s> y_i", "<L_1>->x_i <s> y_i"], "constraints": ["1<=t<=100", "1<=n<=1000", "0<=x_i,y_i<=1000", "Sum of all n across all t <= 1000"]}}
{"name": "p03994 CODE FESTIVAL 2016 qual A - Next Letter", "description": "Constraints\n\n* 1<=|s|<=10^5\n* All letters in s are lowercase English letters.\n* 1<=K<=10^9\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\ns\nK", "grammar": {"productions": ["<S>->s <n> K", "s->[a-z]{1,100000}", "K->[0-9]{1,9}"], "constraints": ["1<=|s|<=10^5", "1<=K<=10^9"]}}
{"name": "119_A. Epic Game", "description": "Input\n\nThe only string contains space-separated integers a, b and n (1 <= a, b, n <= 100) --- the fixed numbers Simon and Antisimon have received correspondingly and the initial number of stones in the pile.", "grammar": {"productions": ["<S>->a <s> b <s> n"], "constraints": ["1<=a<=100", "1<=b<=100", "1<=n<=100"]}}
{"name": "p02926 AtCoder Beginner Contest 139 - Engines", "description": "Constraints\n\n* 1 <= N <= 100\n* -1 \\ 000 \\ 000 <= x_i <= 1 \\ 000 \\ 000\n* -1 \\ 000 \\ 000 <= y_i <= 1 \\ 000 \\ 000\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nx_1 y_1\nx_2 y_2\n: :\nx_N y_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> x_i <s> y_i", "<T_1>->x_1 <s> y_1"], "constraints": ["1<=N<=100", "-1000000<=x_i<=1000000", "-1000000<=y_i<=1000000"]}}
{"name": "1430_B. Barrels", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 1000) --- the number of test cases.\n\nThe first line of each test case contains two integers n and k (1 <= k < n <= 2 * 10^5) --- the number of barrels and the number of pourings you can make.\n\nThe second line contains n integers a_1, a_2, ..., a_n (0 <= a_i <= 10^{9}), where a_i is the initial amount of water the i-th barrel has.\n\nIt's guaranteed that the total sum of n over test cases doesn't exceed 2 * 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_T>", "<T_i>-><T_i-1> <n> [n] <s> [k] <n> <L_N>", "<T_1>->[n] <s> [k] <n> <L_N>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_i"], "constraints": ["1<=t<=1000", "1<=k<n<=2*10^5", "0<=a_i<=10^9", "Sum of all n in all t test cases does not exceed 2*10^5"]}}
{"name": "p02811 AtCoder Beginner Contest 150 - 500 Yen Coins", "description": "Constraints\n\n* 1 <= K <= 100\n* 1 <= X <= 10^5\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nK X", "grammar": {"productions": ["<S>->K <s> X"], "constraints": ["1<=K<=100", "1<=X<=10^5"]}}
{"name": "p03293 AtCoder Beginner Contest 103 - String Rotation", "description": "Constraints\n\n* 2 <= |S| <= 100\n* |S| = |T|\n* S and T consist of lowercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS\nT", "grammar": {"productions": ["<S>->[S] <n> <T_S>", "<T_i>->[a-z]{1} <T_i-1>", "<T_1>->[a-z]{1}"], "constraints": ["2<=|S|<=100", "|S|=|T|"]}}
{"name": "999_A. Mishka and Contest", "description": "Input\n\nThe first line of input contains two integers n and k (1 <= n, k <= 100) --- the number of problems in the contest and Mishka's problem-solving skill.\n\nThe second line of input contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 100), where a_i is the difficulty of the i-th problem. The problems are given in order from the leftmost to the rightmost in the list.", "grammar": {"productions": ["<S>->[n] <s> k <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n,k<=100", "1<=a_i<=100"]}}
{"name": "1114_A. Got Any Grapes?", "description": "Input\n\nThe first line contains three integers x, y and z (1 <= x, y, z <= 10^5) --- the number of grapes Andrew, Dmitry and Michal want to eat.\n\nThe second line contains three integers a, b, c (1 <= a, b, c <= 10^5) --- the number of green, purple and black grapes in the box.", "grammar": {"productions": ["<S>->x <s> y <s> z <n> a <s> b <s> c"], "constraints": ["1<=x,y,z<=100000", "1<=a,b,c<=100000"]}}
{"name": "1393_A. Rainbow Dash, Fluttershy and Chess Coloring", "description": "Input\n\nThe first line contains a single integer T (1 <= T <= 100): the number of grids of the games. \n\nEach of the next T lines contains a single integer n (1 <= n <= 10^9): the size of the side of the grid of the game.", "grammar": {"productions": ["<S>->[T] <n> <T_T>", "<T_i>-><T_i-1> <n> [n]", "<T_1>->[n]"], "constraints": ["1<=T<=100", "1<=n<=10^9"]}}
{"name": "1249_B1. Books Exchange (easy version)", "description": "Input\n\nThe first line of the input contains one integer q (1 <= q <= 200) --- the number of queries. Then q queries follow.\n\nThe first line of the query contains one integer n (1 <= n <= 200) --- the number of kids in the query. The second line of the query contains n integers p_1, p_2, ..., p_n (1 <= p_i <= n, all p_i are distinct, i.e. p is a permutation), where p_i is the kid which will get the book of the i-th kid.", "grammar": {"productions": ["<S>->[q] <n> <T_q>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> p_i", "<L_1>->p_1"], "constraints": ["1<=q<=200", "1<=n<=200", "1<=p_i<=n, p_i are distinct"]}}
{"name": "1288_A. Deadline", "description": "Input\n\nThe first line contains a single integer T (1 <= T <= 50) --- the number of test cases.\n\nThe next T lines contain test cases -- one per line. Each line contains two integers n and d (1 <= n <= 10^9, 1 <= d <= 10^9) --- the number of days before the deadline and the number of days the program runs.", "grammar": {"productions": ["<S>->[T] <n> <T_T>", "<T_i>-><T_i-1> <n> n <s> d", "<T_1>->n <s> d"], "constraints": ["1<=T<=50", "1<=n<=10^9", "1<=d<=10^9"]}}
{"name": "p02594 AtCoder Beginner Contest 174 - Air Conditioner", "description": "Constraints\n\n* -40 <= X <= 40\n* X is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX", "grammar": {"productions": ["<S>->X"], "constraints": ["-40<=X<=40"]}}
{"name": "p03105 AtCoder Beginner Contest 120 - Favorite Sound", "description": "Constraints\n\n* All values in input are integers.\n* 1 <= A, B, C <= 100\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B C", "grammar": {"productions": ["<S>->A <s> B <s> C"], "constraints": ["1<=A<=100", "1<=B<=100", "1<=C<=100"]}}
{"name": "1213_B. Bad Prices", "description": "Input\n\nThe first line contains an integer t (1 <= t <= 10000) --- the number of sets of input data in the test. Input data sets must be processed independently, one after another.\n\nEach input data set consists of two lines. The first line contains an integer n (1 <= n <= 150000) --- the number of days. The second line contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 10^6), where a_i is the price on the i-th day.\n\nIt is guaranteed that the sum of n over all data sets in the test does not exceed 150000.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>->[n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=10000", "1<=n<=150000", "1<=a_i<=10^6", "sum of n over all data sets <= 150000"]}}
{"name": "p02628 AtCoder Beginner Contest 171 - Mix Juice", "description": "Constraints\n\n* 1 <= K <= N <= 1000\n* 1 <= p_i <= 1000\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\np_1 p_2 ... p_N", "grammar": {"productions": ["<S>->[N] <s> [K] <n> <T_N>", "<T_i>-><T_i-1> <s> p_i", "<T_1>->p_i"], "constraints": ["1<=K<=N<=1000", "1<=p_i<=1000"]}}
{"name": "1257_B. Magic Stick", "description": "Input\n\nThe first line contains single integer T (1 <= T <= 10^4) --- the number of test cases. Each test case consists of two lines.\n\nThe first line of each test case contains two integers x and y (1 <= x, y <= 10^9) --- the current number and the number that Petya wants to get.", "grammar": {"productions": ["<S>->[T] <n> <T_T>", "<T_i>-><T_i-1> <n> x <s> y", "<T_1>->x <s> y"], "constraints": ["1<=T<=10^4", "1<=x,y<=10^9"]}}
{"name": "p02397 Swapping Two Numbers", "description": "Constraints\n\n* 0 <= x, y <= 10000\n* the number of datasets <= 3000\n\nInput\n\nThe input consists of multiple datasets. Each dataset consists of two integers x and y separated by a single space.\n\nThe input ends with two 0 (when both x and y are zero). Your program should not process for these terminal symbols.", "grammar": {"productions": ["<S>-><D> <Z>", "<D>-><D> <n> <T_xy>", "<D>-><T_xy>", "<T_xy>->x <s> y", "<Z>->0 <s> 0"], "constraints": ["0<=x,y<=10000", "0<=number_of_datasets<=3000"]}}
{"name": "1144_B. Parity Alternated Deletions", "description": "Input\n\nThe first line of the input contains one integer n (1 <= n <= 2000) --- the number of elements of a.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (0 <= a_i <= 10^6), where a_i is the i-th element of a.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=2000", "0<=a_i<=10^6"]}}
{"name": "p02724 AtCoder Beginner Contest 160 - Golden Coins", "description": "Constraints\n\n* 0 <= X <= 10^9\n* X is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX", "grammar": {"productions": ["<S>->X"], "constraints": ["0<=X<=10^9"]}}
{"name": "p03592 CODE FESTIVAL 2017 qual A - fLIP", "description": "Constraints\n\n* 1 <= N,M <= 1000\n* 0 <= K <= NM\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M K", "grammar": {"productions": ["<S>->[N] <s> [M] <s> K"], "constraints": ["1<=N,M<=1000", "0<=K<=NM"]}}
{"name": "1230_B. Ania and Minimizing", "description": "Input\n\nThe first line contains two integers n and k (1 <= n <= 200 000, 0 <= k <= n) --- the number of digits in the decimal representation of S and the maximum allowed number of changed digits.\n\nThe second line contains the integer S. It's guaranteed that S has exactly n digits and doesn't contain any leading zeroes.", "grammar": {"productions": ["<S>->[n] <s> [k] <n> <T_n>", "<T_i>->[1-9]{1} <B_i-1>", "<T_1>->[1-9]{1}", "<B_i>->[0-9]{1} <B_i-1>", "<B_1>->[0-9]{1}"], "constraints": ["1<=n<=200000", "0<=k<=n"]}}
{"name": "p02417 Counting Characters", "description": "Constraints\n\n* The number of characters in the sentence < 1200\n\nInput\n\nA sentence in English is given in several lines.", "grammar": {"productions": ["<S>-><T_i>", "<T_i>->[a-zA-Z .,?!]{1} <T_i-1>", "<T_1>->[a-zA-Z .,?!]{1}"], "constraints": ["The number of characters in the sentence < 1200"]}}
{"name": "598_A. Tricky Sum", "description": "Input\n\nThe first line of the input contains a single integer t (1 <= t <= 100) --- the number of values of n to be processed.\n\nEach of next t lines contains a single integer n (1 <= n <= 10^9).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n", "<T_1>->n"], "constraints": ["1<=t<=100", "1<=n<=10^9"]}}
{"name": "p03219 AtCoder Beginner Contest 113 - Discount Fare", "description": "Constraints\n\n* 1 <= X,Y <= 100\n* Y is an even number.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX Y", "grammar": {"productions": ["<S>->[X] <s> [Y]", "<T_Y>->[0-9]{1} <T_Y-1>", "<T_1>->[02468]{1}"], "constraints": ["1<=X<=100", "1<=Y<=100", "Y%2==0"]}}
{"name": "p03327 AtCoder Beginner Contest 099 - ABD", "description": "Constraints\n\n* 1 <= N <= 1998\n* N is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->[N]"], "constraints": ["1<=N<=1998"]}}
{"name": "p03761 AtCoder Beginner Contest 058 - Dubious Document", "description": "Constraints\n\n* 1 <= n <= 50\n* 1 <= |S_i| <= 50 for every i = 1, ..., n.\n* S_i consists of lowercase English letters (`a` - `z`) for every i = 1, ..., n.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nn\nS_1\n...\nS_n", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> [a-z]{1,50}", "<T_1>->[a-z]{1,50}"], "constraints": ["1<=n<=50", "1<=|S_i|<=50"]}}
{"name": "746_A. Compote", "description": "Input\n\nThe first line contains the positive integer a (1 <= a <= 1000) --- the number of lemons Nikolay has. \n\nThe second line contains the positive integer b (1 <= b <= 1000) --- the number of apples Nikolay has. \n\nThe third line contains the positive integer c (1 <= c <= 1000) --- the number of pears Nikolay has.", "grammar": {"productions": ["<S>->a <n> b <n> c"], "constraints": ["1<=a<=1000", "1<=b<=1000", "1<=c<=1000"]}}
{"name": "766_B. Mahmoud and a Triangle", "description": "Input\n\nThe first line contains single integer n (3 <= n <= 10^5) --- the number of line segments Mahmoud has.\n\nThe second line contains n integers a1, a2, ..., an (1 <= ai <= 10^9) --- the lengths of line segments Mahmoud has.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["3<=n<=10^5", "1<=a_i<=10^9"]}}
{"name": "p02898 AtCoder Beginner Contest 142 - Roller Coaster", "description": "Constraints\n\n* 1 <= N <= 10^5\n* 1 <= K <= 500\n* 1 <= h_i <= 500\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nh_1 h_2 ... h_N", "grammar": {"productions": ["<S>->[N] <s> [K] <n> <T_N>", "<T_i>-><T_i-1> <s> [h_i]", "<T_1>->[h_i]"], "constraints": ["1<=N<=10^5", "1<=K<=500", "1<=h_i<=500"]}}
{"name": "621_A. Wet Shark and Odd and Even", "description": "Input\n\nThe first line of the input contains one integer, n (1 <= n <= 100 000). The next line contains n space separated integers given to Wet Shark. Each of these integers is in range from 1 to 10^9, inclusive.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> x_i", "<T_1>->x_i"], "constraints": ["1<=n<=100000", "1<=x_i<=10^9"]}}
{"name": "1166_A. Silent Classroom", "description": "Input\n\nThe first line contains a single integer n (1<= n <= 100) --- the number of students.\n\nAfter this n lines follow.\n\nThe i-th line contains the name of the i-th student.\n\nIt is guaranteed each name is a string of lowercase English letters of length at most 20. Note that multiple students may share the same name.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> name", "<T_1>->name"], "constraints": ["1<=n<=100", "1<=name.length<=20"]}}
{"name": "p02801 AtCoder Beginner Contest 151 - Next Alphabet", "description": "Constraints\n\n* C is a lowercase English letter that is not `z`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nC", "grammar": {"productions": ["<S>->[a-y]{1}"], "constraints": ["C is a lowercase English letter that is not 'z'"]}}
{"name": "937_A. Olympiad", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 100) --- the number of participants.\n\nThe next line contains a sequence of n integers a1, a2, ..., an (0 <= ai <= 600) --- participants' scores.\n\nIt's guaranteed that at least one participant has non-zero score.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> [a_i]", "<T_1>->[a_1]"], "constraints": ["1<=n<=100", "0<=[a_i]<=600"]}}
{"name": "p03307 AtCoder Beginner Contest 102 - Multiple of 2 and N", "description": "Constraints\n\n* 1 <= N <= 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->[N]"], "constraints": ["1<=N<=10^9"]}}
{"name": "1324_D. Pair of Topics", "description": "Input\n\nThe first line of the input contains one integer n (2 <= n <= 2 * 10^5) --- the number of topics.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 10^9), where a_i is the interestingness of the i-th topic for the teacher.\n\nThe third line of the input contains n integers b_1, b_2, ..., b_n (1 <= b_i <= 10^9), where b_i is the interestingness of the i-th topic for the students.", "grammar": {"productions": ["<S>->[n] <n> <T_A>", "<T_A>->[a_i] <s> <T_A>", "<T_A-i>->[a_i] <s> <T_A-i-1>", "<T_A-1>->[a_i] <n> <T_B>", "<T_B>->[b_i] <s> <T_B>", "<T_B-i>->[b_i] <s> <T_B-i-1>", "<T_B-1>->[b_i]"], "constraints": ["2<=n<=2*10^5", "1<=a_i<=10^9", "1<=b_i<=10^9"]}}
{"name": "p03346 AtCoder Grand Contest 024 - Backfront", "description": "Constraints\n\n* 1 <= N <= 2* 10^5\n* (P_1,P_2,...,P_N) is a permutation of (1,2,...,N).\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nP_1\n:\nP_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> P_i", "<T_1>->P_1"], "constraints": ["1<=N<=200000", "P_i is a permutation of 1 to N"]}}
{"name": "1110_A. Parity", "description": "Input\n\nThe first line contains two integers b and k (2<= b<= 100, 1<= k<= 10^5) --- the base of the number and the number of digits.\n\nThe second line contains k integers a_1, a_2, ..., a_k (0<= a_i < b) --- the digits of n.\n\nThe representation of n contains no unnecessary leading zero. That is, a_1 can be equal to 0 only if k = 1.", "grammar": {"productions": ["<S>->[b] <s> [k] <n> <T_k>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1", "<a_i>->[0-{b-1}]<T_i>", "<a_1>->[1-{b-1}] | [0]{1}"], "constraints": ["2<=b<=100", "1<=k<=10^5", "0<=a_i<b"]}}
{"name": "439_A. Devu, the Singer and Churu, the Joker", "description": "Input\n\nThe first line contains two space separated integers n, d (1 <= n <= 100; 1 <= d <= 10000). The second line contains n space-separated integers: t1, t2, ..., tn (1 <= ti <= 100).", "grammar": {"productions": ["<S>->[n] <s> d <n> <T_n>", "<T_i>-><T_i-1> <s> ti", "<T_1>->ti"], "constraints": ["1<=n<=100", "1<=d<=10000", "1<=ti<=100"]}}
{"name": "903_A. Hungry Student Problem", "description": "Input\n\nThe first line contains one integer n (1 <= n <= 100) --- the number of testcases.\n\nThe i-th of the following n lines contains one integer xi (1 <= xi <= 100) --- the number of chicken chunks Ivan wants to eat.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> xi", "<T_1>->xi"], "constraints": ["1<=n<=100", "1<=xi<=100"]}}
{"name": "950_A. Left-handers, Right-handers and Ambidexters", "description": "Input\n\nThe only line contains three integers l, r and a (0 <= l, r, a <= 100) --- the number of left-handers, the number of right-handers and the number of ambidexters at the training.", "grammar": {"productions": ["<S>->l <s> r <s> a"], "constraints": ["0<=l<=100", "0<=r<=100", "0<=a<=100"]}}
{"name": "p03125 AtCoder Beginner Contest 118 - B +/- A", "description": "Constraints\n\n* All values in input are integers.\n* 1 <= A <= B <= 20\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B", "grammar": {"productions": ["<S>->A <s> B"], "constraints": ["1<=A<=B<=20"]}}
{"name": "p03470 AtCoder Beginner Contest 085 - Kagami Mochi", "description": "Constraints\n\n* 1 <= N <= 100\n* 1 <= d_i <= 100\n* All input values are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nd_1\n:\nd_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> d_i", "<T_1>->d_1"], "constraints": ["1<=N<=100", "1<=d_i<=100"]}}
{"name": "p03369 AtCoder Beginner Contest 095 - Something on It", "description": "Constraints\n\n* S is a string of length 3.\n* Each character in S is `o` or `x`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>->[ox]{3}"], "constraints": ["S is a string of length 3", "Each character in S is `o` or `x`"]}}
{"name": "p02976 AtCoder Grand Contest 035 - Even Degrees", "description": "Constraints\n\n* 2 <= N <= 10^5\n* N-1 <= M <= 10^5\n* 1 <= A_i,B_i <= N (1<= i<= M)\n* The given graph is simple and connected.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nA_1 B_1\n:\nA_M B_M", "grammar": {"productions": ["<S>->[N] <s> [M] <n> <T_M>", "<T_i>-><T_i-1> <n> [A_i] <s> [B_i]", "<T_1>->[A_1] <s> [B_1]"], "constraints": ["2<=N<=10^5", "N-1<=M<=10^5", "1<=A_i,B_i<=N"]}}
{"name": "p03569 CODE FESTIVAL 2017 qual C - Inserting 'x'", "description": "Constraints\n\n* 1 <= |s| <= 10^5\n* s consists of lowercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\ns", "grammar": {"productions": ["<S>->[s] <n> [a-z]{[s]}"], "constraints": ["1<=|s|<=10^5"]}}
{"name": "p03288 AtCoder Beginner Contest 104 - Rated for Me", "description": "Constraints\n\n* 0 <= R <= 4208\n* R is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nR", "grammar": {"productions": ["<S>->R"], "constraints": ["0<=R<=4208"]}}
{"name": "p02680 AtCoder Beginner Contest 168 - . (Single Dot)", "description": "Constraints\n\n* All values in input are integers between -10^9 and 10^9 (inclusive).\n* 1 <= N, M <= 1000\n* A_i < B_i\\ (1 <= i <= N)\n* E_j < F_j\\ (1 <= j <= M)\n* The point (0, 0) does not lie on any of the given segments.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nA_1 B_1 C_1\n:\nA_N B_N C_N\nD_1 E_1 F_1\n:\nD_M E_M F_M", "grammar": {"productions": ["<S>->[N] <s> [M] <n> <T_N> <n> <T_M>", "<T_i>-><T_i-1> <n> A_i <s> B_i <s> C_i", "<T_1>->A_1 <s> B_1 <s> C_1", "<L_i>-><L_i-1> <n> D_i <s> E_i <s> F_i", "<L_1>->D_1 <s> E_1 <s> F_1"], "constraints": ["-10^9 <= A_i, B_i, C_i, D_i, E_i, F_i <= 10^9", "1 <= N, M <= 1000", "A_i < B_i (1 <= i <= N)", "E_j < F_j (1 <= j <= M)", "The point (0, 0) does not lie on any of the given segments"]}}
{"name": "p02271 Exhaustive Search", "description": "Constraints\n\n* n <= 20\n* q <= 200\n* 1 <= elements in A <= 2000\n* 1 <= Mi <= 2000\n\nInput\n\nIn the first line n is given. In the second line, n integers are given. In the third line q is given. Then, in the fourth line, q integers (Mi) are given.", "grammar": {"productions": ["<S>->n <n> <T_n> <n> q <n> <L_q>", "<T_i>-><T_i-1> <s> A", "<T_1>->A", "<L_i>-><L_i-1> <s> Mi", "<L_1>->Mi"], "constraints": ["n<=20", "q<=200", "1<=A<=2000", "1<=Mi<=2000"]}}
{"name": "1016_A. Death Note", "description": "Input\n\nThe first line of the input contains two integers n, m (1 <= n <= 2 * 10^5, 1 <= m <= 10^9) --- the number of days you will write names in the notebook and the number of names which can be written on each page of the notebook.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 10^9), where a_i means the number of names you will write in the notebook during the i-th day.", "grammar": {"productions": ["<S>->[n] <s> m <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=200000", "1<=m<=1000000000", "1<=a_i<=1000000000"]}}
{"name": "1391_C. Cyclic Permutations ", "description": "Input\n\nThe first and only line contains a single integer n (3 <= n <= 10^6).", "grammar": {"productions": ["<S>->[n]"], "constraints": ["3<=n<=10^6"]}}
{"name": "p04019 AtCoder Grand Contest 003 - Wanna go back home", "description": "Constraints\n\n* 1 <= | S | <= 1000\n* S consists of the letters `N`, `W`, `S`, `E`.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>-><T_S>", "<T_i>-><T_i-1> S", "<T_i>-><T_i-1> W", "<T_i>-><T_i-1> N", "<T_i>-><T_i-1> E", "<T_1>->S", "<T_1>->W", "<T_1>->N", "<T_1>->E"], "constraints": ["1<=|S|<=1000"]}}
{"name": "p03338 AtCoder Beginner Contest 098 - Cut and Count", "description": "Constraints\n\n* 2 <= N <= 100\n* |S| = N\n* S consists of lowercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nS", "grammar": {"productions": ["<S>->[N] <n> [a-z]{N}"], "constraints": ["2<=N<=100"]}}
{"name": "p03370 AtCoder Beginner Contest 095 - Bitter Alchemy", "description": "Constraints\n\n* 2 <= N <= 100\n* 1 <= m_i <= 1000\n* m_1 + m_2 + ... + m_N <= X <= 10^5\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN X\nm_1\nm_2\n:\nm_N", "grammar": {"productions": ["<S>->[N] <s> X <n> <T_N>", "<T_i>-><T_i-1> <n> m_i", "<T_1>->m_1"], "constraints": ["2<=N<=100", "1<=m_i<=1000", "m_1+m_2+...+m_N<=X<=10^5"]}}
{"name": "1060_A. Phone Numbers", "description": "Input\n\nThe first line contains an integer n --- the number of cards with digits that you have (1 <= n <= 100).\n\nThe second line contains a string of n digits (characters \"0\", \"1\", ..., \"9\") s_1, s_2, ..., s_n. The string will not contain any other characters, such as leading or trailing spaces.", "grammar": {"productions": ["<S>->[n] <n> [0-9]{n}"], "constraints": ["1<=n<=100"]}}
{"name": "1311_C. Perform the Combo", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 10^4) --- the number of test cases.\n\nThen t test cases follow.\n\nThe first line of each test case contains two integers n and m (2 <= n <= 2 * 10^5, 1 <= m <= 2 * 10^5) --- the length of s and the number of tries correspondingly.\n\nThe second line of each test case contains the string s consisting of n lowercase Latin letters.\n\nThe third line of each test case contains m integers p_1, p_2, ..., p_m (1 <= p_i < n) --- the number of characters pressed right during the i-th try.\n\nIt is guaranteed that the sum of n and the sum of m both does not exceed 2 * 10^5 (sum n <= 2 * 10^5, sum m <= 2 * 10^5).\n\nIt is guaranteed that the answer for each letter does not exceed 2 * 10^9.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <s> [m] <n> <Z_n> <n> <L_m>", "<T_1>->[n] <s> [m] <n> <Z_n> <n> <L_m>", "<Z_i>-><Z_i-1> <s> a", "<Z_1>->a", "<L_i>-><L_i-1> <s> p_i", "<L_1>->p_i"], "constraints": ["1<=t<=10^4", "2<=n<=2*10^5", "1<=m<=2*10^5", "sum n<=2*10^5", "sum m<=2*10^5", "1<=p_i<n"]}}
{"name": "551_A. GukiZ and Contest", "description": "Input\n\nThe first line contains integer n (1 <= n <= 2000), number of GukiZ's students. \n\nThe second line contains n numbers a1, a2, ... an (1 <= ai <= 2000) where ai is the rating of i-th student (1 <= i <= n).", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=2000", "1<=a_i<=2000"]}}
{"name": "p03821 AtCoder Grand Contest 009 - Multiple Array", "description": "Constraints\n\n* All input values are integers.\n* 1 <= N <= 10^5\n* 0 <= A_i <= 10^9(1 <= i <= N)\n* 1 <= B_i <= 10^9(1 <= i <= N)\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN\nA_1 B_1\n:\nA_N B_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> A_i <s> B_i", "<T_1>->A_1 <s> B_1"], "constraints": ["1<=N<=10^5", "0<=A_i<=10^9", "1<=B_i<=10^9"]}}
{"name": "p03168 Educational DP Contest - Coins", "description": "Constraints\n\n* N is an odd number.\n* 1 <= N <= 2999\n* p_i is a real number and has two decimal places.\n* 0 < p_i < 1\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\np_1 p_2 ... p_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> [0].[0-9]{1}[1-9]{1}", "<T_1>->[0].[0-9]{1}[1-9]{1}"], "constraints": ["N is an odd number", "1<=N<=2999", "0<p_i<1"]}}
{"name": "p03003 AtCoder Beginner Contest 130 - Common Subsequence", "description": "Constraints\n\n* 1 <= N, M <= 2 * 10^3\n* The length of S is N.\n* The length of T is M.\n* 1 <= S_i, T_i <= 10^5\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nS_1 S_2 ... S_{N-1} S_{N}\nT_1 T_2 ... T_{M-1} T_{M}", "grammar": {"productions": ["<S>->[N] <s> [M] <n> <T_N> <n> <L_M>", "<T_i>-><T_i-1> <s> S_i", "<T_1>->S_1", "<L_i>-><L_i-1> <s> T_i", "<L_1>->T_1"], "constraints": ["1<=N, M<=2*10^3", "1<=S_i, T_i<=10^5"]}}
{"name": "1054_A. Elevator or Stairs?", "description": "Input\n\nThe only line contains six integers x, y, z, t_1, t_2, t_3 (1 <= x, y, z, t_1, t_2, t_3 <= 1000) --- the floor Masha is at, the floor Masha wants to get to, the floor the elevator is located on, the time it takes Masha to pass between two floors by stairs, the time it takes the elevator to pass between two floors and the time it takes for the elevator to close or open the doors.\n\nIt is guaranteed that x != y.", "grammar": {"productions": ["<S>->x <s> y <s> z <s> t_1 <s> t_2 <s> t_3"], "constraints": ["1<=x<=1000", "1<=y<=1000", "1<=z<=1000", "1<=t_1<=1000", "1<=t_2<=1000", "1<=t_3<=1000", "x!=y"]}}
{"name": "570_B. Simple Game", "description": "Input\n\nThe first line contains two integers n and m (1 <= m <= n <= 10^9) --- the range of numbers in the game, and the number selected by Misha respectively.", "grammar": {"productions": ["<S>->m <s> n"], "constraints": ["1<=m<=n", "1<=n<=10^9"]}}
{"name": "688_B. Lovely Palindromes", "description": "Input\n\nThe only line of the input contains a single integer n (1 <= n <= 10^100 000).", "grammar": {"productions": ["<S>->[n] <n>", "<T_i>->[1-9]{1} <Z_i-1>", "<T_1>->[1-9]{1}", "<Z_i>->[0-9]{1} <Z_i-1>", "<Z_1>->[0-9]{1}"], "constraints": ["1<=n<=10^100000"]}}
{"name": "1028_A. Find Square", "description": "Input\n\nThe first line contains two integers n and m (1 <= n, m <= 115) --- the number of rows and the number of columns in the table.\n\nThe i-th of the next n lines contains a string of m characters s_{i1} s_{i2} ... s_{im} (s_{ij} is 'W' for white cells and 'B' for black cells), describing the i-th row of the table.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_n>", "<T_i>-><T_i-1> <n> <L_m>", "<T_1>-><L_m>", "<L_i>-><L_i-1> <s> S_ij", "<L_1>->S_ij", "S_ij->[WB]{1}"], "constraints": ["1<=n,m<=115"]}}
{"name": "1353_D. Constructing the Array", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 10^4) --- the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains one integer n (1 <= n <= 2 * 10^5) --- the length of a.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 * 10^5 (sum n <= 2 * 10^5).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n]", "<T_1>->[n]"], "constraints": ["1<=t<=10000", "1<=n<=200000", "sum n<=200000"]}}
{"name": "559_B. Equivalent Strings", "description": "Input\n\nThe first two lines of the input contain two strings given by the teacher. Each of them has the length from 1 to 200 000 and consists of lowercase English letters. The strings have the same length.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>->[a-z]{1} <T_i-1>", "<T_1>->[a-z]{1}"], "constraints": ["1<=n<=200000"]}}
{"name": "1140_A. Detective Book", "description": "Input\n\nThe first line contains single integer n (1 <= n <= 10^4) --- the number of pages in the book.\n\nThe second line contains n integers a_1, a_2, ..., a_n (i <= a_i <= n), where a_i is the number of page which contains the explanation of the mystery on page i.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=10^4", "i<=a_i<=n"]}}
{"name": "699_C. Vacations", "description": "Input\n\nThe first line contains a positive integer n (1 <= n <= 100) --- the number of days of Vasya's vacations.\n\nThe second line contains the sequence of integers a1, a2, ..., an (0 <= ai <= 3) separated by space, where: \n\n  * ai equals 0, if on the i-th day of vacations the gym is closed and the contest is not carried out; \n  * ai equals 1, if on the i-th day of vacations the gym is closed, but the contest is carried out; \n  * ai equals 2, if on the i-th day of vacations the gym is open and the contest is not carried out; \n  * ai equals 3, if on the i-th day of vacations the gym is open and the contest is carried out.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_i", "A_i->[0-3]{1}"], "constraints": ["1<=n<=100", "0<=A_i<=3"]}}
{"name": "p03337 AtCoder Beginner Contest 098 - Add Sub Mul", "description": "Constraints\n\n* -1000 <= A,B <= 1000\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B", "grammar": {"productions": ["<S>->A <s> B"], "constraints": ["-1000<=A<=1000", "-1000<=B<=1000"]}}
{"name": "1373_D. Maximum Sum on Even Positions", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 2 * 10^4) --- the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (1 <= n <= 2 * 10^5) --- the length of a. The second line of the test case contains n integers a_0, a_1, ..., a_{n-1} (1 <= a_i <= 10^9), where a_i is the i-th element of a.\n\nIt is guaranteed that the sum of n does not exceed 2 * 10^5 (sum n <= 2 * 10^5).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>->[n] <n> <L_n> <n> <T_i-1>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_i"], "constraints": ["1<=t<=20000", "1<=n<=200000", "1<=a_i<=1000000000", "sum n<=200000"]}}
{"name": "p02600 M-SOLUTIONS Programming Contest 2020 - Kyu in AtCoder", "description": "Constraints\n\n* 400 <= X <= 1999\n* X is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX", "grammar": {"productions": ["<S>->X"], "constraints": ["400<=X<=1999"]}}
{"name": "275_A. Lights Out", "description": "Input\n\nThe input consists of three rows. Each row contains three integers each between 0 to 100 inclusive. The j-th number in the i-th row is the number of times the j-th light of the i-th row of the grid is pressed.", "grammar": {"productions": ["<S>->[i] <n> <T_i>", "<T_i>-><T_i-1> <n> <L_3>", "<T_1>-><L_3>", "<L_i>-><L_i-1> <s> [0-100]{1}", "<L_1>->[0-100]{1}"], "constraints": ["0<=i<=3", "0<=j<=100"]}}
{"name": "1371_D. Grid-00100", "description": "Input\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 <= t <= 100) --- the number of test cases. Next t lines contain descriptions of test cases.\n\nFor each test case the only line contains two integers n, k (1 <= n <= 300, 0 <= k <= n^2).\n\nIt is guaranteed that the sum of n^2 for all test cases does not exceed 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <s> [k] <n>", "<T_1>->[n] <s> [k] <n>"], "constraints": ["1<=t<=100", "1<=n<=300", "0<=k<=n^2", "SUM_OF_ALL_n^2<=10^5"]}}
{"name": "1242_A. Tile Painting", "description": "Input\n\nThe first line of input contains a single integer n (1 <= n <= 10^{12}), the length of the path.", "grammar": {"productions": ["<S>->[n]"], "constraints": ["1<=n<=10^12"]}}
{"name": "1351_C. Skier", "description": "Input\n\nThe first line contains an integer t (1 <= t <= 10^4) --- the number of test cases in the input. Then t test cases follow.\n\nEach set is given by one nonempty string of the characters 'S', 'N', 'W', 'E'. The length of the string does not exceed 10^5 characters.\n\nThe sum of the lengths of t given lines over all test cases in the input does not exceed 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> <L_j>", "<T_1>-><L_j>", "<L_i>-><L_i-1> <s> [SNWE]{1}", "<L_1>->[SNW]{1}"], "constraints": ["1<=t<=10^4", "1<=length(string)<=10^5", "Sum of the lengths of t given lines <= 10^5"]}}
{"name": "1101_A. Minimum Integer", "description": "Input\n\nThe first line contains one integer q (1 <= q <= 500) --- the number of queries.\n\nThen q lines follow, each containing a query given in the format l_i r_i d_i (1 <= l_i <= r_i <= 10^9, 1 <= d_i <= 10^9). l_i, r_i and d_i are integers.", "grammar": {"productions": ["<S>->[L_q] <n> <T_L_q>", "<T_L_q>-><T_L_q-1> <n> <L_3>", "<T_1>-><L_3>", "<L_3>->l_i <s> r_i <s> d_i <L_3-1>", "<L_1>->l_i <s> r_i <s> d_i"], "constraints": ["1<=q<=500", "1<=l_i<=r_i<=10^9", "1<=d_i<=10^9"]}}
{"name": "1189_D1. Add on a Tree", "description": "Input\n\nThe first line contains a single integer n (2 <= n <= 10^5) --- the number of nodes.\n\nEach of the next n-1 lines contains two integers u and v (1 <= u, v <= n, u != v), meaning that there is an edge between nodes u and v. It is guaranteed that these edges form a tree.", "grammar": {"productions": ["<S> -> [n] <n> <T_n>", "<T_i> -> <T_i-1> <n> <L_2>", "<T_1> -> <L_2>", "<L_i> -> <L_i-1> <s> [1-{n}]", "<L_1> -> [1-{n}]"], "constraints": ["2<=n<=10^5"]}}
{"name": "168_A. Wizards and Demonstration", "description": "Input\n\nThe first line contains three space-separated integers, n, x, y (1 <= n, x, y <= 104, x <= n) --- the number of citizens in the city, the number of wizards and the percentage the administration needs, correspondingly.\n\nPlease note that y can exceed 100 percent, that is, the administration wants to see on a demonstration more people that actually live in the city ( > n).", "grammar": {"productions": ["<S>->[n] <s> x <s> y"], "constraints": ["1<=n<=10^4", "1<=x<=10^4", "1<=y<=100"]}}
{"name": "379_A. New Year Candles", "description": "Input\n\nThe single line contains two integers, a and b (1 <= a <= 1000; 2 <= b <= 1000).", "grammar": {"productions": ["<S>->a <s> b"], "constraints": ["1<=a<=1000", "2<=b<=1000"]}}
{"name": "39_H. Multiplication Table", "description": "Input\n\nThe first line contains a single integer k (2 <= k <= 10) --- the radix of the system.", "grammar": {"productions": ["<S>->[k] <n> <T_k>", "<T_i>-><T_i-1> <A_i>", "<T_1>-><A_1>", "<A_i>->[0-9]{1} <A_i-1>", "<A_1>->[0-9]{1}"], "constraints": ["2<=k<=10"]}}
{"name": "44_B. Cola", "description": "Input\n\nThe first line contains four integers --- n, a, b, c (1 <= n <= 10000, 0 <= a, b, c <= 5000).", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> <A_i>", "<T_1>-><A_1>", "<A_i>->a <s> b <s> c"], "constraints": ["1<=n<=10000", "0<=a<=5000", "0<=b<=5000", "0<=c<=5000"]}}
{"name": "545_C. Woodcutters", "description": "Input\n\nThe first line contains integer n (1 <= n <= 105) --- the number of trees.\n\nNext n lines contain pairs of integers xi, hi (1 <= xi, hi <= 109) --- the coordinate and the height of the і-th tree.\n\nThe pairs are given in the order of ascending xi. No two trees are located at the point with the same coordinate.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> <L_xi> <L_hi>", "<T_1>-><L_xi> <L_hi>", "<L_xi>->[1-9]{1} <L_xi>", "<L_hi>->[1-9]{1} <L_hi>", "<L_1>->[1-9]{1}"], "constraints": ["1<=n<=10^5", "1<=xi<=10^9", "1<=hi<=10^9"]}}
{"name": "101_C. Vectors", "description": "Input\n\nThe first line contains integers x1 и y1 --- the coordinates of the vector A ( - 108 <= x1, y1 <= 108). The second and the third line contain in the similar manner vectors B and C (their coordinates are integers; their absolute value does not exceed 108).", "grammar": {"productions": ["S-> [x1 ] <n> [y1 ] <n>  [x2 ] <n> [y2 ] <n>  [x3 ] <n> [y3 ] <n> ", "S->x1 <s> y1 <n> x2 <s> y2 <n>  x3 <s> y3"], "constraints": ["-108<=x1,y1<=108", "-108<=x2, y2<=108", "-108<=x3, y3<=108"]}}
{"name": "151_C. Win or Freeze", "description": "Input\n\nThe first line contains the only integer q (1 <= q <= 1013).\n\nPlease do not use the %lld specificator to read or write 64-bit integers in С++. It is preferred to use the cin, cout streams or the %I64d specificator.", "grammar": {"productions": ["<S>->[q] <n> <T_q>", "<T_i>-><T_i-1> <n> [0-9]{1}"], "constraints": ["1<=q<=10^13"]}}
{"name": "195_A. Let's Watch Football", "description": "Input\n\nThe first line contains three space-separated integers a, b and c (1 <= a, b, c <= 1000, a > b). The first number (a) denotes the size of data needed to watch one second of the video. The second number (b) denotes the size of data Valeric and Valerko can download from the Net per second. The third number (c) denotes the video's length in seconds.", "grammar": {"productions": ["<S>->a <s> b <s> c", "<L_1>->A_1", "<L_i>->L_i-1 <s> A_i", "<T_1>->L_1", "<T_i>->T_i-1 <s> L_2", "<K_4>->[1-9]{1}", "<K_3>->K_4 <B_i-1>", "<K_1>->[1-9]{1}", "<K_3>->K_4 <B_i-1>", "<K_2>->[0-9]{1}", "<K_3>->K_4 <B_i-1>", "<K_i>->K_i-1 K_3", "<B_1>->K_1", "<B_i>->K_i <s> B_i-1"], "constraints": ["1<=a<=1000", "1<=b<=1000", "1<=c<=1000", "a>b"]}}
{"name": "478_A. Initial Bet", "description": "Input\n\nThe input consists of a single line containing five integers c1, c2, c3, c4 and c5 --- the number of coins that the first, second, third, fourth and fifth players respectively have at the end of the game (0 <= c1, c2, c3, c4, c5 <= 100).", "grammar": {"productions": ["<S>->c1 <s> c2 <s> c3 <s> c4 <s> c5"], "constraints": ["0 <= c1, c2, c3, c4, c5 <= 100"]}}
{"name": "526_A. King of Thieves", "description": "Input\n\nThe first line contains integer n (1 <= n <= 100) --- the number of segments on the level.\n\nNext line contains the scheme of the level represented as a string of n characters '*' and '.'.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> [*.]{1}", "<T_1>->[*.]{1}"], "constraints": ["1<=n<=100"]}}
{"name": "716_D. Complete The Graph", "description": "Input\n\nThe first line contains five integers n, m, L, s, t (2 <= n <= 1000, 1 <= m <= 10 000, 1 <= L <= 109, 0 <= s, t <= n - 1, s != t) --- the number of vertices, number of edges, the desired length of shortest path, starting vertex and ending vertex respectively.\n\nThen, m lines describing the edges of the graph follow. i-th of them contains three integers, ui, vi, wi (0 <= ui, vi <= n - 1, ui != vi, 0 <= wi <= 109). ui and vi denote the endpoints of the edge and wi denotes its weight. If wi is equal to 0 then the weight of the corresponding edge was erased.\n\nIt is guaranteed that there is at most one edge between any pair of vertices.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_n>", "<T_i>-><T_i-1> <n> <L_2m>", "<T_1>-><L_2m>", "<L_i>-><L_i-1> <s> [01]{1}", "<L_1>->[01]{1}"], "constraints": ["2<=n<=1000", "1<=m<=10000", "1<=L<=1000000000", "0<=s,t<=n-1", "s != t"]}}
{"name": "805_A. Fake NP", "description": "Input\n\nThe first line contains two integers l and r (2 <= l <= r <= 109).", "grammar": {"productions": ["<S> -> <L_2> <n>"], "constraints": ["2 <= <L_1> <= 10^9", "<L_1> <= <L_2> <= 10^9"]}}
{"name": "1129_A2. Toy Train", "description": "Input\n\nThe first line contains two space-separated integers n and m (2 <= n <= 5 000; 1 <= m <= 20 000) --- the number of stations and the number of candies, respectively.\n\nThe i-th of the following m lines contains two space-separated integers a_i and b_i (1 <= a_i, b_i <= n; a_i != b_i) --- the station that initially contains candy i and the destination station of the candy, respectively.", "grammar": {"productions": ["<S> -> [n] <s> [m] <n> <T_n>", "<T_i> -> <T_i-1> <n> <L_2m>", "<T_1> -> <L_2m>", "<L_i> -> <L_i-1> <s> [a-b]{1}", "<L_1> -> [a-b]{1}"], "constraints": ["2 <= n <= 5000", "1 <= m <= 20000", "1 <= a_i, b_i <= n", "a_i != b_i"]}}
{"name": "1208_A. XORinacci", "description": "Input\n\nThe input contains one or more independent test cases.\n\nThe first line of input contains a single integer T (1 <= T <= 10^3), the number of test cases.\n\nEach of the T following lines contains three space-separated integers a, b, and n (0 <= a, b, n <= 10^9) respectively.", "grammar": {"productions": ["<S>-><T_T> <n>", "<T_i>->a <s> b <s> n <T_i-1>", "<T_1>->a <s> b <n>"], "constraints": ["0<=a<=10^9", "0<=b<=10^9", "0<=n<=10^9"]}}
{"name": "1227_A. Math Problem", "description": "Input\n\nThe first line contains integer number t (1 <= t <= 100) --- the number of test cases in the input. Then t test cases follow.\n\nThe first line of each test case contains one integer n (1 <= n <= 10^{5}) --- the number of segments. The following n lines contain segment descriptions: the i-th of them contains two integers l_i,r_i (1 <= l_i <= r_i <= 10^{9}).\n\nThe sum of all values n over all the test cases in the input doesn't exceed 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> <U_n>", "<T_1>-><U_n>", "<U_i>-><U_i-1> <n> <L_2>", "<U_1>-><L_2>", "<L_i>-><L_i-1> <s> [01]{1}", "<L_1>->[01]{1}"], "constraints": ["1<=t<=100", "1<=n<=10^5", "1<=l_i<=10^9", "l_i<=r_i", "1<=r_i<=10^9"]}}
{"name": "1374_B. Multiply by 2, divide by 6", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 2 * 10^4) --- the number of test cases. Then t test cases follow. \n\nThe only line of the test case contains one integer n (1 <= n <= 10^9).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [1-9]{1}", "<T_1>->[1-9]{1}"], "constraints": ["1<=t<=2*10^4", "1<=n<=10^9"]}}
{"name": "1466_C. Canine poetry", "description": "Input\n\nThe first line of the input contains a single integer t (1 <= t <= 10^5) denoting the number of test cases, then t test cases follow.\n\nThe first and only line of each test case contains a non-empty string of lowercase English letters, Orpheus' poem.\n\nThe sum of the length of Orpheus' poems in all test cases will not exceed 10^5.", "grammar": {"productions": ["<S>->[T]"], "constraints": ["1<=t<=10^5"]}}
{"name": "209_B. Pixels", "description": "Input\n\nThe first line contains three space-separated integers a, b and c (0 <= a, b, c <= 231; a + b + c > 0) --- the number of red, green and blue pixels, correspondingly.", "grammar": {"productions": ["<S>->[a] <s> [b] <s> [c]", "<a>->[0-9]{10}", "<b->[0-9]{10}", "<c->[0-9]{10}"], "constraints": ["0<=a<=2^31-1", "0<=b<=2^31-1", "0<=c<=2^31-1", "a+b+c>0"]}}
{"name": "235_A. LCM Challenge", "description": "Input\n\nThe first line contains an integer n (1 <= n <= 106) --- the n mentioned in the statement.", "grammar": {"productions": ["<S>-><n>"], "constraints": ["1<=n<=10^6"]}}
{"name": "306_C. White, Black and White Again", "description": "Input\n\nThe single line of the input contains integers n, w and b (3 <= n <= 4000, 2 <= w <= 4000, 1 <= b <= 4000) --- the number of days, the number of good events and the number of not-so-good events. It is guaranteed that w + b >= n.", "grammar": {"productions": ["<S>->[n] <s> [w] <s> [b] <n> <T_n>", "<T_i>-><T_i-1> <n> <T_i-1> <n> <T_i-1> <n> <L_n>", "<T_1>-><T_1> <n> <T_1> <n> <T_1> <n> <L_n>", "<L_i>-><L_i-1> <s> [01]{1}", "<L_1>->[01]{1}"], "constraints": ["3<=n<=4000", "2<=w<=4000", "1<=b<=4000", "w+b>=n"]}}
{"name": "425_A. Sereja and Swaps", "description": "Input\n\nThe first line contains two integers n and k (1 <= n <= 200; 1 <= k <= 10). The next line contains n integers a[1], a[2], ..., a[n] ( - 1000 <= a[i] <= 1000).", "grammar": {"productions": ["<S>->[n] <s> k <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=200", "1<=k<=10", "-1000<=a_i<=1000"]}}
{"name": "730_G. Car Repair Shop", "description": "Input\n\nThe first line contains integer n (1 <= n <= 200) --- the number of requests from clients.\n\nThe following n lines contain requests, one request per line. The i-th request is given as the pair of integers si, di (1 <= si <= 109, 1 <= di <= 5·106), where si is the preferred time to start repairing the i-th car, di is the number of days to repair the i-th car.\n\nThe requests should be processed in the order they are given in the input.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> <L_2di>", "<T_1>-><L_2di>", "<L_2di>-><L_2di-1> <s> [si,di]", "<L_2di-1>->[1-109]{1} <s> [1-5*106]{1}", "<L_1>->[1-109]{1} <s> [1-5*106]{1}"], "constraints": ["1<=n<=200", "1<=si<=10^9", "1<=di<=5*10^6"]}}
{"name": "893_A. Chess For Three", "description": "Input\n\nThe first line contains one integer n (1 <= n <= 100) --- the number of games Alex, Bob and Carl played.\n\nThen n lines follow, describing the game log. i-th line contains one integer ai (1 <= ai <= 3) which is equal to 1 if Alex won i-th game, to 2 if Bob won i-th game and 3 if Carl won i-th game.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-> <T_i-1> <n> <L_i>", "<T_1>-><L_i>", "<L_i>-> <L_i-1> <s> [123]{1}", "<L_1>->[123]{1}"], "constraints": ["1<=n<=100"]}}
{"name": "p01970 The Diversity of Prime Factorization", "description": "Constraints\n\n* 1 \\ leq N \\ leq 10 ^ 5\n* 2 \\ leq q_i \\ leq 10 ^ 6 (1 \\ leq i \\ leq N)", "grammar": {"productions": ["<S> -> [N] <n> <T_N>", "<T_i> -> <T_i-1> <m> <L_q_i>", "<T_1> -> <L_q_1>", "<L_i> -> [2-1000000]{1} <L_i-1>", "<L_1> -> [2-1000000]{1}"], "constraints": ["1<=N<=10^5", "2<=q_i<=10^6"]}}
{"name": "p02257 Prime Numbers", "description": "Input\n\nThe first line contains an integer N, the number of elements in the list.\n\nN numbers are given in the following lines.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> <N>", "<T_1>-><N>"], "constraints": ["1<=N<=100"]}}
{"name": "1096_E. The Top Scorer", "description": "Input\n\nThe only line contains three integers p, s and r (1 <= p <= 100, 0 <= r <= s <= 5000) --- the number of players, the sum of scores of all players and Hasan's score, respectively.", "grammar": {"productions": ["<S>->[p] <s> [s] <s> [r <n> <T_p>]", "<T_i>-><T_i-1> <s> [p-i]{1}", "<T_1>[p]{1}"], "constraints": ["1<=p<=100", "0<=r<=s<=5000"]}}
{"name": "442_C. Artem and Array ", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 5·105) --- the number of elements in the array. The next line contains n integers ai (1 <= ai <= 106) --- the values of the array elements.", "grammar": {"productions": ["<S>->[n] <T_n>", "<T_i>-><T_i-1> <s> <A_i>", "<T_1>-><A_1>", "<A_i>->[1-9]{1} <B_i-1>", "<A_1>->[1-9]{1>", "<B_i>->[0-9]{1} <B_i-1>", "<B_1>->[0-9]{1}"], "constraints": ["1<=n<=5*10^5", "1<=a_i<=10^6"]}}
{"name": "630_A. Again Twenty Five!", "description": "Input\n\nThe only line of the input contains a single integer n (2 <= n <= 2·1018) --- the power in which you need to raise number 5.", "grammar": {"productions": ["<S> -> [n] <T_n>", "<T_n -> <T_n-1> 5", "<T_1> -> 5"], "constraints": ["2<=n<=2·1018"]}}
{"name": "1366_A. Shovels and Swords", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 1000) --- the number of test cases.\n\nThe only line of each test case contains two integers a and b (0 <= a, b <= 10^9) --- the number of sticks and the number of diamonds, respectively.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> a <s> b", "<T_1>->a <s> b"], "constraints": ["0<=a,b<=1000000000"]}}
{"name": "1451_D. Circle Game", "description": "Input\n\nThe first line contains a single integer t (1 <= t <= 100) --- the number of test cases.\n\nThe only line of each test case contains two space separated integers d (1 <= d <= 10^5) and k (1 <= k <= d).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> <T_d> <n> <T_k>", "<T_1>-><T_d> <n> <T_k>", "<T_d>->d", "<T_k>->k"], "constraints": ["1<=t<=100", "1<=d<=10^5", "1<=k<=d"]}}
{"name": "223_C. Partial Sums", "description": "Input\n\nThe first line contains two space-separated integers n and k (1 <= n <= 2000, 0 <= k <= 109). The next line contains n space-separated integers a1, a2, ..., an --- elements of the array a (0 <= ai <= 109).", "grammar": {"productions": ["<S>->[n] <s> k <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=2000", "0<=k<=1000000000", "0<=a_i<=1000000000"]}}
{"name": "343_B. Alternating Current", "description": "Input\n\nThe single line of the input contains a sequence of characters \"+\" and \"-\" of length n (1 <= n <= 100000). The i-th (1 <= i <= n) position of the sequence contains the character \"+\", if on the i-th step from the wall the \"plus\" wire runs above the \"minus\" wire, and the character \"-\" otherwise.", "grammar": {"productions": ["<S>-><T_n>", "<T_i>-><T_i-1> <s> [+-]{1}", "<T_1>->[+-]"], "constraints": ["1<=n<=100000"]}}
{"name": "483_B. Friends and Presents", "description": "Input\n\nThe only line contains four positive integers cnt1, cnt2, x, y (1 <= cnt1, cnt2 < 109; cnt1 + cnt2 <= 109; 2 <= x < y <= 3·104) --- the numbers that are described in the statement. It is guaranteed that numbers x, y are prime.", "grammar": {"productions": ["<S> -> <T_1>", "<T_i> -> <L_1> <s> <L_2> <s> <L_3>", "<L_1> -> [cnt1]{1}", "<L_2> -> [cnt2]{1}", "<L_3> -> x <s> y"], "constraints": ["1 <= cnt1, cnt2 < 10^9", "cnt1 + cnt2 <= 10^9", "2 <= x < y <= 3*10^4", "x, y are prime"]}}
{"name": "1036_B. Diagonal Walking v.2", "description": "Input\n\nThe first line of the input contains one integer q (1 <= q <= 10^4) --- the number of queries.\n\nThen q lines follow. The i-th of these q lines contains three integers n_i, m_i and k_i (1 <= n_i, m_i, k_i <= 10^{18}) --- x-coordinate of the destination point of the query, y-coordinate of the destination point of the query and the number of moves in the query, correspondingly.", "grammar": {"productions": ["<S>->[q] <n>", "<T_i>-><T_i-1> <n> <L_3>", "<T_1>-><L_3>", "<L_i>-><L_i-1> <s> [1-9]{1}[0-9]*.{1}[1-9]{1}[0-9]*", "<L_1>->[1-9]{1}[0-9]*.{1}[1-9]{1}[0-9]*", "<Z_i>-><Z_i-1> <s> [1-9]{1}[0-9]*.{1}[1-9]{1}[0-9]*", "<Z_1>->[1-9]{1}[0-9]*.{1}[1-9]{1}[0-9]*"], "constraints": ["1<=q<=10^4", "1<=n_i,m_i,k_i<=10^18"]}}
{"name": "1373_B. 01 Game", "description": "Input\n\nFirst line contains one integer t (1 <= t <= 1000) --- the number of test cases.\n\nOnly line of each test case contains one string s (1 <= |s| <= 100), consisting of only characters 0 and 1.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> s", "<T_1>->s"], "constraints": ["1<=t<=1000", "1<=|s|<=100"]}}
{"name": "166_A. Rank List", "description": "Input\n\nThe first line contains two integers n and k (1 <= k <= n <= 50). Then n lines contain the description of the teams: the i-th line contains two integers pi and ti (1 <= pi, ti <= 50) --- the number of solved problems and the total penalty time of the i-th team, correspondingly. All numbers in the lines are separated by spaces.", "grammar": {"productions": ["<S>->[n] <s> [k] <n> <T_n>", "<T_i>-><T_i-1> <s> <L_n>", "<T_1>-><L_n>", "<L_i>-><L_i-1> <s> <pi> <s> <ti>", "<L_1>-><pi> <s> <ti>"], "constraints": ["1<=k<=n<=50", "1<=pi,ti<=50"]}}
{"name": "56_E. Domino Principle", "description": "Input\n\nThe first line contains integer n (1 <= n <= 105) which is the number of dominoes. Then follow n lines containing two integers xi and hi ( - 108 <= xi <= 108, 2 <= hi <= 108) each, which are the coordinate and height of every domino. No two dominoes stand on one point.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> <D_i>", "<T_1>-><D_1>", "<D_i>-><X_i> <s>  <H_i>", "<X_i>->[0-9]{1} <X_i-1>", "<X_1>->[0-9]{1}", "<H_i>->[0-9]{1} <H_i-1>", "<H_1>->[0-9]{1}"], "constraints": ["1<=n<=100000", "-1<=x_i<=100000", "2<=h_i<=100000"]}}
{"name": "633_A. Ebony and Ivory", "description": "Input\n\nThe first line of the input contains three integers a, b, c (1 <= a, b <= 100, 1 <= c <= 10 000) --- the number of units of damage dealt by Ebony gun and Ivory gun, and the total number of damage required to break the shield, respectively.", "grammar": {"productions": ["<S>->a <s> b", "<T_a>->T_a-1 <s> <S>", "<T_1>-><S>"], "constraints": ["1<=a<=100", "1<=b<=100", "1<=c<=10000"]}}
{"name": "103_C. Russian Roulette", "description": "Input\n\nThe first line contains three integers n, k and p (1 <= n <= 1018, 0 <= k <= n, 1 <= p <= 1000) --- the number of slots in the cylinder, the number of bullets and the number of queries. Then follow p lines; they are the queries. Each line contains one integer xi (1 <= xi <= n) the number of slot to describe.\n\nPlease do not use the %lld specificator to read or write 64-bit numbers in С++. It is preferred to use cin, cout streams or the %I64d specificator.", "grammar": {"productions": ["<S>->[n] <s> [k] <s> [p] <n> <T_n>", "<T_i>-><T_i-1> <n> <L_p>", "<T_1>-><L_p>", "<L_i>-><L_i-1> <s> [1-n]{1}", "<L_1>->[1-n]{1}"], "constraints": ["1<=n<=10^18", "0<=k<=n", "1<=p<=1000"]}}
{"name": "1062_D. Fun with Integers", "description": "Input\n\nA single line contains a single integer n (2 <= n <= 100 000) --- the given integer described above.", "grammar": {"productions": ["<S>->[n] <n>"], "constraints": ["2<=n<=100000"]}}
{"name": "1084_C. The Fair Nut and String", "description": "Input\n\nThe first line contains the string s (1 <= |s| <= 10^5) consisting of lowercase Latin letters.", "grammar": {"productions": ["<S>->[T_s]", "<T_i>-><T_i-1> <s_i>", "<T_1>-><s_1>"], "constraints": ["1<=|s|<=10^5"]}}
{"name": "1131_E. String Multiplication", "description": "Input\n\nThe first line contains a single integer n (2 <= n <= 100 000) --- the number of strings, wroted by Denis.\n\nNext n lines contain non-empty strings p_1, p_2, ..., p_n, consisting of lowercase english letters.\n\nIt's guaranteed, that the total length of the strings p_i is at most 100 000, and that's the beauty of the resulting product is at most 10^9.", "grammar": {"productions": ["<S>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> p_i", "<L_1>->p_1"], "constraints": ["2<=n<=100000"]}}
{"name": "1230_A. Dawid and Bags of Candies", "description": "Input\n\nThe only line contains four integers a_1, a_2, a_3 and a_4 (1 <= a_i <= 100) --- the numbers of candies in each bag.", "grammar": {"productions": ["<S>-><T_a>", "<T_i>->a_i <s> <T_i-1>", "<T_1>->a_1"], "constraints": ["1<=a_i<=100"]}}
{"name": "139_D. Digits Permutations", "description": "Input\n\nThe first line contains a positive integer n --- the original number. The number of digits in this number does not exceed 105. The number is written without any leading zeroes.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> [0-9]{1}", "<T_1>->[0-9]{1}"], "constraints": ["The number of digits in this number does not exceed 105.", "The number is written without any leading zeroes."]}}
{"name": "239_A. Two Bags of Potatoes", "description": "Input\n\nThe first line of input contains three integers y, k, n (1 <= y, k, n <= 109; <image> <= 105).", "grammar": {"productions": ["<S>->[y] <s> [k] <s> [n] <n>", "<T_y>-><T_y-1> <s> [k] <s> [n] <n>", "<T_1>->[k] <s> [n] <n>", "<L_k>-><L_k-1> <s> [n] <n>", "<L_1>->[n] <n>", "<Z_n>-><Z_n-1> <s> [y] <s> [k] <s> [n] <n>", "<Z_1>->[y] <s> [k] <s> [n] <n>"], "constraints": ["1<=y<=109", "1<=k<=109", "1<=n<=109", "n<=10^5"]}}
{"name": "690_A1. Collective Mindsets (easy)", "description": "Input\n\nThe only line of input contains one integer: N, the number of attendees (1 <= N <= 109).", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> [1-9]{1} <A_i>", "<T_1>->[1-9]{1}", "<A_i>->[0-9]{1} <A_i-1>", "<A_1>->[0-9]{1}"], "constraints": ["1<=N<=109"]}}
{"name": "1076_B. Divisor Subtraction", "description": "Input\n\nThe only line contains a single integer n (2 <= n <= 10^{10}).", "grammar": {"productions": ["<S>->[n]"], "constraints": ["2<=n<=10^10"]}}
{"name": "121_C. Lucky Permutation", "description": "Input\n\nThe first line contains two integers n and k (1 <= n, k <= 109) --- the number of elements in the permutation and the lexicographical number of the permutation.", "grammar": {"productions": ["<S>->[n] <s> k"], "constraints": ["1<=n<=10^9", "1<=k<=10^9"]}}
{"name": "1305_B. Kuroni and Simple Strings", "description": "Input\n\nThe only line of input contains a string s (1 <= |s| <= 1000) formed by characters '(' and ')', where |s| is the length of s.", "grammar": {"productions": ["<S>-><T_[s]>"], "constraints": ["1<=|s|<=1000"]}}
{"name": "136_B. Ternary Logic", "description": "Input\n\nThe first line contains two integers a and c (0 <= a, c <= 109). Both numbers are written in decimal notation.", "grammar": {"productions": ["<S>-><T_a> <s> <T_c>", "<T_a>-><T_a-1> [0-9]{1}", "<T_1>->[0-9]{1}", "<T_c>-><T_c-1> [0-9]{1}", "<T_1>->[0-9]{1}"], "constraints": ["0<=a,c<=109"]}}
{"name": "393_C. Blocked Points", "description": "Input\n\nThe first line contains an integer n (0 <= n <= 4·107).", "grammar": {"productions": ["<S>->[n]"], "constraints": ["0<=n<=4·107"]}}
{"name": "513_A. Game", "description": "Input\n\nThe first line contains four integers n1, n2, k1, k2. All numbers in the input are from 1 to 50.\n\nThis problem doesn't have subproblems. You will get 3 points for the correct submission.", "grammar": {"productions": ["<S>->[n1] <s> [n2] <s> [k1] <s> [k2]"], "constraints": ["1<=n1<=50", "1<=n2<=50", "1<=k1<=50", "1<=k2<=50"]}}
{"name": "538_B. Quasi Binary", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 106).", "grammar": {"productions": ["<S>->[n] <n>"], "constraints": ["1<=n<=1000000"]}}
{"name": "680_D. Bear and Tower of Cubes", "description": "Input\n\nThe only line of the input contains one integer m (1 <= m <= 1015), meaning that Limak wants you to choose X between 1 and m, inclusive.", "grammar": {"productions": ["<S>->[m] <n> <T_m>", "<T_i>-><T_i-1> <n> 1", "<T_1>->1"], "constraints": ["1<=m<=1015"]}}
{"name": "110_B. Lucky String", "description": "Input\n\nThe single line contains a positive integer n (1 <= n <= 105) --- the length of the sought string.", "grammar": {"productions": ["<S>->[n] <n>"], "constraints": ["1<=n<=100000"]}}
{"name": "117_B. Very Interesting Game", "description": "Input\n\nThe first line contains three integers a, b, mod (0 <= a, b <= 109, 1 <= mod <= 107).", "grammar": {"productions": ["<S>->a <s> b"], "constraints": ["0 <= a, b <= 109", "1 <= mod <= 107"]}}
{"name": "127_E. E-reader Display", "description": "Input\n\nThe first line contains number n (1 <= n <= 2000).\n\nNext n lines contain n characters each: the description of the picture that needs to be shown. \"0\" represents the white color and \"1\" represents the black color.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> <L_n>", "<T_1>-><L_n>", "<L_i>-><L_i-1> <n> [01]{1}", "<L_1>->[01]{1}"], "constraints": ["1 <= n <= 2000"]}}
{"name": "365_A. Good Number", "description": "Input\n\nThe first line contains integers n and k (1 <= n <= 100, 0 <= k <= 9). The i-th of the following n lines contains integer ai without leading zeroes (1 <= ai <= 109).", "grammar": {"productions": ["<S> -> [n] <s> k <n> <T_n>", "<T_i> -> <T_i-1> <n> <L_i>", "<T_1> -> <L_i>", "<L_i> -> <L_i-1> [1-9]{1}", "<L_1> -> [1-9]{1}"], "constraints": ["1 <= n <= 100", "0 <= k <= 9", "1 <= a_i <= 10000000"]}}
{"name": "625_A. Guest From the Past", "description": "Input\n\nFirst line of the input contains a single integer n (1 <= n <= 1018) --- the number of rubles Kolya has at the beginning.\n\nThen follow three lines containing integers a, b and c (1 <= a <= 1018, 1 <= c < b <= 1018) --- the cost of one plastic liter bottle, the cost of one glass liter bottle and the money one can get back by returning an empty glass bottle, respectively.", "grammar": {"productions": ["<S>->[n] <n> <L_3> <n>", "<L_i>-><L_i-1> <s> <T_3>", "<L_1>-><T_3>", "<T_i>->a <s> b <s> c"], "constraints": ["1<=n<=1018", "1<=a<=1018", "1<=c<b<=1018"]}}
{"name": "12_B. Correct Solution?", "description": "Input\n\nThe first line contains one integer n (0 <= n <= 109) without leading zeroes. The second lines contains one integer m (0 <= m <= 109) --- Bob's answer, possibly with leading zeroes.", "grammar": {"productions": ["<S>->[n] <s> m", "<T_i>->[0-9]{1} <T_i-1>", "<T_1>->[0-9]{1}"], "constraints": ["0<=n<=109", "0<=m<=109"]}}
{"name": "221_C. Little Elephant and Problem", "description": "Input\n\nThe first line contains a single integer n (2 <= n <= 105) --- the size of array a. The next line contains n positive integers, separated by single spaces and not exceeding 109, --- array a.\n\nNote that the elements of the array are not necessarily distinct numbers.", "grammar": {"productions": ["<S>->[n] <s> <T_n>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["2<=n<=105", "A_i<=109"]}}
{"name": "p02174 Power Subsequences", "description": "Input\n\nThe input is given in the following format.\n\n\n$ N $\n$ x_1 $ $ \\ ldots $ $ x_N $\n\n\nThe first line is given the length $ N $. In the second row, the elements of the sequence $ X $ are given, separated by blanks.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> x_i", "<T_1>->x_1"], "constraints": ["$N$"]}}
{"name": "1159_A. A pile of stones", "description": "Input\n\nThe first line contains one positive integer n --- the number of operations, that have been made by Vasya (1 <= n <= 100).\n\nThe next line contains the string s, consisting of n symbols, equal to \"-\" (without quotes) or \"+\" (without quotes). If Vasya took the stone on i-th operation, s_i is equal to \"-\" (without quotes), if added, s_i is equal to \"+\" (without quotes).", "grammar": {"productions": ["<S>-> [n] <n> <T_n>", "<T_i>-><T_i-1> <s> s_i"], "constraints": ["1<= n<=100"]}}
{"name": "1181_A. Chunga-Changa", "description": "Input\n\nThe first line contains three integers x, y and z (0 <= x, y <= 10^{18}, 1 <= z <= 10^{18}) --- the number of chizhics Sasha has, the number of chizhics Masha has and the price of a coconut.", "grammar": {"productions": ["<S>->x <s> y <n> z"], "constraints": ["0<=x,y<=10^18", "1<=z<=10^18"]}}
{"name": "125_A. Measuring Lengths in Baden", "description": "Input\n\nThe only line contains an integer n (1 <= n <= 10000).", "grammar": {"productions": ["<S>->[n] <n> <T_n>"], "constraints": ["1<=n<=10000"]}}
{"name": "40_C. Berland Square", "description": "Input\n\nThe first line contains integers N, x, M, y. (1 <= N, M <= 100000, - 100000 <= x, y <= 100000, x != y).", "grammar": {"productions": ["<S>->[N] <s> [M] <s> x <s> y", "<N>->[N-1]", "<N-1>->1"], "constraints": ["1<=N,M<=100000", "-100000<=x,y<=100000", "x!=y"]}}
{"name": "742_A. Arpa’s hard exam and Mehrdad’s naive cheat", "description": "Input\n\nThe single line of input contains one integer n (0 <= n <= 109).", "grammar": {"productions": [], "constraints": ["0<=n<=10^9"]}}
{"name": "87_C. Interesting Game", "description": "Input\n\nThe single line contains a single integer n (1 <= n <= 105).", "grammar": {"productions": ["<S>->[n] <n>"], "constraints": ["1<=n<=10^5"]}}
{"name": "1191_A. Tokitsukaze and Enhancement", "description": "Input\n\nThe only line contains a single integer x (30 <= x <= 100) --- the value Tokitsukaze's HP currently.", "grammar": {"productions": ["<S>->x"], "constraints": ["30<=x<=100"]}}
{"name": "1251_C. Minimize The Integer", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 10^4) --- the number of test cases in the input.\n\nThe only line of each test case contains the integer a, its length n is between 1 and 3 * 10^5, inclusive.\n\nIt is guaranteed that the sum of all values n does not exceed 3 * 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> <N_n>", "<T_1>-><N_n>", "<N_i>-><N_i-1> <n> a", "<N_1>->a"], "constraints": ["1<=t<=10^4", "1<=n<=3*10^5", "sum of all values of n<=3*10^5"]}}
{"name": "287_B. Pipeline", "description": "Input\n\nThe first line contains two space-separated integers n and k (1 <= n <= 1018, 2 <= k <= 109).\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in С++. It is preferred to use the cin, cout streams or the %I64d specifier.", "grammar": {"productions": ["<S>->[n] <s> k"], "constraints": ["1<=n<=10^18", "2<=k<=10^9"]}}
{"name": "733_A. Grasshopper And the String", "description": "Input\n\nThe first line contains non-empty string consisting of capital English letters. It is guaranteed that the length of the string does not exceed 100.", "grammar": {"productions": ["<S>-><T_S>", "<T_i>->[A-Z]{1} <T_i-1>"], "constraints": []}}
{"name": "1091_C. New Year and the Sphere Transmission", "description": "Input\n\nThe only line consists of a single integer n (2 <= n <= 10^9) --- the number of people playing with the ball.", "grammar": {"productions": ["<S>->[n] <n>"], "constraints": ["2<=n<=10^9"]}}
{"name": "1239_A. Ivan the Fool and the Probability Theory", "description": "Input\n\nThe only line contains two integers n and m (1 <= n, m <= 100 000), the number of rows and the number of columns of the field.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_n>", "<T_i>-><T_i-1> <s> <L_2m>", "<T_1>-><L_2m>", "<L_i>-><L_i-1> <s> [01]{1}", "<L_1>->[01]{1}"], "constraints": ["1<=n,m<=100000"]}}
{"name": "199_C. About Bacteria", "description": "Input\n\nThe first line contains four space-separated integers k, b, n and t (1 <= k, b, n, t <= 106) --- the parameters of bacterial growth, the time Qwerty needed to grow z bacteria in the first experiment and the initial number of bacteria in the second experiment, correspondingly.", "grammar": {"productions": ["<S>->[k] <B_1>", "<B_i>-><B_i-1> <s> k <s> [n] <n> <T_n>", "<T_i>-<T_i-1> <n> <L_t>", "<T_1>-><L_t>", "<L_i>-><L_i-1> <s> [b] <n> <L_i-1> <s> [b]", "<L_1>->[b] <n> [b]"], "constraints": ["1<=k,b,n,t<=1000000"]}}
{"name": "342_C. Cupboard and Balloons", "description": "Input\n\nThe single line contains two integers r, h (1 <= r, h <= 107).", "grammar": {"productions": ["<S>->r <s> h"], "constraints": ["1<=r,h<=10^7"]}}
{"name": "675_A. Infinite Sequence", "description": "Input\n\nThe first line of the input contain three integers a, b and c ( - 109 <= a, b, c <= 109) --- the first element of the sequence, Vasya's favorite number and the difference between any two neighbouring elements of the sequence, respectively.", "grammar": {"productions": ["<S>->a <s> b <s> c"], "constraints": ["-109<=a<=109", "-109<=b<=109", "-109<=c<=109"]}}
{"name": "9_A. Die Roll", "description": "Input\n\nThe only line of the input file contains two natural numbers Y and W --- the results of Yakko's and Wakko's die rolls.", "grammar": {"productions": ["<S>->[Y] <n> [W]"], "constraints": ["Y", "W"]}}
{"name": "626_C. Block Towers", "description": "Input\n\nThe first line of the input contains two space-separated integers n and m (0 <= n, m <= 1 000 000, n + m > 0) --- the number of students using two-block pieces and the number of students using three-block pieces, respectively.", "grammar": {"productions": ["S->[n] <s> [m] <n> <T_n>", "<T_i>-><T_i-1> <s> <L_2>", "<T_1>-><L_2>", "<L_i>-><L_i-1> <s> [01]{1}", "<L_1>->[01]{1}"], "constraints": ["0<=n,m<=1000000", "n+m>0"]}}
{"name": "87_A. Trains", "description": "Input\n\nThe first line contains two integers a and b (a != b, 1 <= a, b <= 106).", "grammar": {"productions": ["<S>->a <s> b"], "constraints": ["1<=a,b<=10^6", "a!=b"]}}
{"name": "1008_A. Romaji", "description": "Input\n\nThe first line of the input contains the string s consisting of |s| (1<= |s|<= 100) lowercase Latin letters.", "grammar": {"productions": ["<S>-> [N] <n> <T_N>", "<T_i>-> <T_i-1> <n> A_i", "<T_1>-> A_1"], "constraints": ["1<=n<=100", "1<=A_i<=1000"]}}
{"name": "1480_A. Yet Another String Game", "description": "Input\n\nEach test contains multiple test cases. The first line contains t (1 <= t <= 1000) --- the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains a single string s (1 <= |s| <= 50) consisting of lowercase English letters.", "grammar": {"productions": ["<S>->[T_t] <n>", "<T_i>-><T_i-1> <s> <S_i>", "<T_1>-><S_1>", "<S_i>->[a-z]{1}", "<S_1>->[a-z]{1}"], "constraints": ["1<=t<=1000", "1<=|s|<=50"]}}
{"name": "1506_G. Maximize the Remaining String", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 10^4). Then t test cases follow.\n\nEach test case is characterized by a string s, consisting of lowercase Latin letters (1 <= |s| <= 2 * 10^5).\n\nIt is guaranteed that the sum of the lengths of the strings in all test cases does not exceed 2 * 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1><s><L_2x10^5>", "<T_1>-><L_2x10^5>", "<L_i>->[a-z]{1} <L_i-1>", "<L_1>->[a-z]{1}"], "constraints": ["1<=t<=10^4"]}}
{"name": "161_C. Abracadabra", "description": "Input\n\nThe input consists of a single line containing four integers l1, r1, l2, r2 (1 <= li <= ri <= 109, i = 1, 2). The numbers are separated by single spaces. li and ri give the indices of the first and the last characters of the i-th chosen substring, correspondingly (i = 1, 2). The characters of string abracadabra are numbered starting from 1.", "grammar": {"productions": ["<S>->[C1] <s> C2 <n> [C3] <s> C4", "<T_C1>-><T_C1-1> [i-1]{1}", "<T_1>->[i-1]{1}<T_C3>-><T_C3-1> [i+1]{1}", "<T_1>->[i+1]{1}"], "constraints": ["1<=C1<=1000000000", "1<=C2, C3, C4<=109", "C1<=C2", "C3<=C4"]}}
{"name": "204_A. Little Elephant and Interval", "description": "Input\n\nThe single line contains a pair of integers l and r (1 <= l <= r <= 1018) --- the boundaries of the interval.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in С++. It is preferred to use cin, cout streams or the %I64d specifier.", "grammar": {"productions": ["<S>->l <s> r"], "constraints": ["1<=l<=r<=10^18"]}}
{"name": "680_A. Bear and Five Cards", "description": "Input\n\nThe only line of the input contains five integers t1, t2, t3, t4 and t5 (1 <= ti <= 100) --- numbers written on cards.", "grammar": {"productions": ["<S>-><T_5>", "<T_i>->t_i <n> <T_i-1>", "<T_1>->t_1"], "constraints": ["1<=t_i<=100"]}}
{"name": "1037_A. Packets", "description": "Input\n\nThe only line contains a single integer n (1 <= n <= 10^9) --- the number of coins you have.", "grammar": {"productions": ["<S>->[n] <s> <n>"], "constraints": ["1<=n<=10^9"]}}
{"name": "124_C. Prime Permutation", "description": "Input\n\nThe only line contains the initial string s, consisting of small Latin letters (1 <= |s| <= 1000).", "grammar": {"productions": ["<S>->[n] <T_n>", "<T_i>-><T_i-1> <s> [a-z]{1}", "<T_1>->[a-z]{1}"], "constraints": ["1<=|s|<=1000"]}}
{"name": "1490_C. Sum of Cubes", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 100) --- the number of test cases. Then t test cases follow.\n\nEach test case contains one integer x (1 <= x <= 10^{12}).\n\nPlease note, that the input for some test cases won't fit into 32-bit integer type, so you should use at least 64-bit integer type in your programming language.", "grammar": {"productions": ["<S>->[t] <n> <T_t>"], "constraints": ["1<= t <=100", "1<= x <=10^{12}"]}}
{"name": "571_A. Lengthening Sticks", "description": "Input\n\nThe single line contains 4 integers a, b, c, l (1 <= a, b, c <= 3·105, 0 <= l <= 3·105).", "grammar": {"productions": ["<S>->a <s> b <s> c <s> l"], "constraints": ["1<=a,b,c<=3·105", "0<=l<=3·105"]}}
{"name": "709_D. Recover the String", "description": "Input\n\nThe only line of the input contains four non-negative integers a00, a01, a10 and a11. Each of them doesn't exceed 109.", "grammar": {"productions": ["<S>->a00 <s> a01 <s> a10 <s> a11"], "constraints": ["0<=a00<=10^9", "0<=a01<=10^9", "0<=a10<=10^9", "0<=a11<=10^9"]}}
{"name": "867_C. Ordering Pizza", "description": "Input\n\nThe first line of input will contain integers N and S (1 <= N <= 105, 1 <= S <= 105), the number of contestants and the number of slices per pizza, respectively. N lines follow.\n\nThe i-th such line contains integers si, ai, and bi (1 <= si <= 105, 1 <= ai <= 105, 1 <= bi <= 105), the number of slices the i-th contestant will eat, the happiness they will gain from each type 1 slice they eat, and the happiness they will gain from each type 2 slice they eat, respectively.", "grammar": {"productions": ["<S>->[N] <n> [S] <n> <T_N>", "<T_i>-><T_i-1> <n> <L_3>", "<T_1>-><L_3>", "<L_i>-><L_i-1> <s> <T_i>", "<L_1>-><T_1>"], "constraints": ["1<=N<=105", "1<=S<=105", "1<=S_i<=105", "1<=A_i<=105", "1<=B_i<=105"]}}
{"name": "1362_A. Johnny and Ancient Computer", "description": "Input\n\nThe input consists of multiple test cases. The first line contains an integer t (1 <= t <= 1000) --- the number of test cases. The following t lines contain a description of test cases.\n\nThe first and only line in each test case contains integers a and b (1 <= a, b <= 10^{18}) --- the initial and target value of the variable, respectively.", "grammar": {"productions": ["<S>->[T_testCases]", "<T_testCases>-><T_testCases-1> <s> <testCases>", "<testCases>->a <s> b", "<T_1>->a <s> b"], "constraints": ["1<=t<=1000", "1<=a,b<=10^18"]}}
{"name": "1471_A. Strange Partition", "description": "Input\n\nThe first input line contains a single integer t --- the number of test cases (1 <= t <= 1000).\n\nThe first line of each test case contains two integers n and x (1 <= n <= 10^5, 1 <= x <= 10^9).\n\nThe next line contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 10^9), the elements of the array a. \n\nIt is guaranteed that the sum of values of n over all test cases does not exceed 10^5.", "grammar": {"productions": ["<S>-><T_t>", "<T_i>-><T_i-1> <n> <s> n <s> x <n> <L_n>"], "constraints": ["1<=t<=1000", "1<=n<=10^5", "1<=x<=10^9"]}}
{"name": "1498_A. GCD Sum", "description": "Input\n\nThe first line of input contains one integer t (1 <= t <= 10^4) --- the number of test cases. \n\nThen t lines follow, each containing a single integer n (1 <= n <= 10^{18}).\n\nAll test cases in one test are different.", "grammar": {"productions": ["<S>->[t] <n> <T_t>"], "constraints": ["1 <=t <= 10^4", "1 <= n <= 10^18"]}}
{"name": "478_C. Table Decorations", "description": "Input\n\nThe single line contains three integers r, g and b (0 <= r, g, b <= 2·109) --- the number of red, green and blue baloons respectively. The numbers are separated by exactly one space.", "grammar": {"productions": ["<S>->[r] <s> [g] <s> [b]"], "constraints": ["0<=r<=2*10^9", "0<=g<=2*10^9", "0<=b<=2*10^9"]}}
{"name": "5_C. Longest Regular Bracket Sequence", "description": "Input\n\nThe first line of the input file contains a non-empty string, consisting of «(» and «)» characters. Its length does not exceed 106.", "grammar": {"productions": ["<S>->[T_i] <T_1>", "<T_i>-><T_i-1> <n> <L_1>", "<T_1>-><L_1>", "<L_1>->(<)", "<L_1>->)"], "constraints": ["1 <= i <= 10^6"]}}
{"name": "622_A. Infinite Sequence", "description": "Input\n\nThe only line contains integer n (1 <= n <= 1014) --- the position of the number to find.\n\nNote that the given number is too large, so you should use 64-bit integer type to store it. In C++ you can use the long long integer type and in Java you can use long integer type.", "grammar": {"productions": ["<S>->[n] <s> <T_n>"], "constraints": ["1<=n<=10^14"]}}
{"name": "784_D. Touchy-Feely Palindromes", "description": "Input\n\nThe only line of the input contains a string of digits. The length of the string is between 1 and 10, inclusive.", "grammar": {"productions": ["<S>-><T_10>", "<T_i>-><T_i-1> [0-9]{1}", "<T_1>->[0-9]{1}"], "constraints": ["1<=len(string)<=10"]}}
{"name": "805_C. Find Amir", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 105) --- the number of schools.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n>"], "constraints": ["1<=n<=10^5"]}}
{"name": "997_B. Roman Digits", "description": "Input\n\nThe only line of the input file contains a single integer n (1 <= n <= 10^9) --- the number of roman digits to use.", "grammar": {"productions": ["<S>->[n] <n>"], "constraints": ["1<=n<=10^9"]}}
{"name": "111_D. Petya and Coloring", "description": "Input\n\nThe first line contains space-separated integers n, m and k (1 <= n, m <= 1000, 1 <= k <= 106) --- the board's vertical and horizontal sizes and the number of colors respectively.", "grammar": {"productions": ["<S>->[n] <s> [m] <s> [k] <n>", "<T_i>-><T_i-1> <s> [L_m] <n>", "<T_1>-><L_m>", "<L_i>-><L_i-1> <s> [C_k] <n>", "<L_1>->[C_k]"], "constraints": ["1<=n<=1000", "1<=m<=1000", "1<=k<=106"]}}
{"name": "1223_A. CME", "description": "Input\n\nThe first line contains one integer q (1 <= q <= 100) --- the number of queries.\n\nThe only line of each query contains one integer n (2 <= n <= 10^9) --- the number of matches.", "grammar": {"productions": ["<S>->[q] <n> <T_q>"], "constraints": []}}
{"name": "1267_B. Balls of Buma", "description": "Input\n\nThe only line contains a non-empty string of uppercase English letters of length at most 3 * 10^5. Each letter represents a ball with the corresponding color.", "grammar": {"productions": ["<S>->[L_2] <T_L>", "<T_i>-><T_i-1> [A-Z]{1}", "<T_1>->[A-Z]{1}", "<L_i>-><L_i-1> [A-Z]{1}", "<L_1>->[A-Z]{1}"], "constraints": ["1 <= length of [L_2] <= 3 * 10^5"]}}
{"name": "32_D. Constellation", "description": "Input\n\nThe first line contains three integers n, m and k (1 <= n, m <= 300, 1 <= k <= 3·107) --- height and width of the map and index of the required constellation respectively. The upper-left corner has coordinates (1, 1), and the lower-right --- (n, m). Then there follow n lines, m characters each --- description of the map. j-th character in i-th line is «*», if there is a star in the corresponding square, and «.» if this square is empty.", "grammar": {"productions": ["<S> -> [n] <s> [m] <s> [k] <n> <T_n>", "<T_i> -> <T_i-1> <n> <L_m> <n>", "<T_1> -> <L_m> <n>", "<L_i> -> <L_i-1> <s> [*.]{1}", "<L_1> -> [*.]{1}"], "constraints": ["1 <= n, m <= 300", "1 <= k <= 3e7"]}}
{"name": "420_A. Start Up", "description": "Input\n\nThe first line contains a non-empty name that needs to be checked. The name contains at most 105 large English letters. The name will be written with the next sans serif font: \n\n<image>", "grammar": {"productions": [], "constraints": []}}
{"name": "74_C. Chessboard Billiard", "description": "Input\n\nThe first line contains two integers n and m (2 <= n, m <= 106).", "grammar": {"productions": ["<S>->[n] <s> [m] <n>"], "constraints": ["2<=n,m<=106"]}}
{"name": "798_A. Mike and palindrome", "description": "Input\n\nThe first and single line contains string s (1 <= |s| <= 15).", "grammar": {"productions": ["<S>-><s> [a,z]{1}"], "constraints": ["1<=|s|<=15"]}}
{"name": "934_D. A Determined Cleanup", "description": "Input\n\nThe only line of input contains two space-separated integers p and k (1 <= p <= 1018, 2 <= k <= 2 000).", "grammar": {"productions": ["<S>->p <s> k"], "constraints": ["1<=p<=10^18", "2<=k<=2000"]}}
{"name": "1146_B. Hate \"A\"", "description": "Input\n\nThe first line of input contains a string t (1 <= |t| <= 10^5) consisting of lowercase English letters.", "grammar": {"productions": ["<S>-><T_1>", "<T_i>->T_i-1 <L_i>", "<T_1>-><L_1>", "<L_i>-><L_i-1> [a-z]{1}", "<L_1>->[a-z]{1}"], "constraints": ["|t|<=10^5"]}}
{"name": "374_A. Inna and Pink Pony", "description": "Input\n\nThe first line of the input contains six integers n, m, i, j, a, b (1 <= n, m <= 106; 1 <= i <= n; 1 <= j <= m; 1 <= a, b <= 106).\n\nYou can assume that the chessboard rows are numbered from 1 to n from top to bottom and the columns are numbered from 1 to m from left to right. Position (i, j) in the statement is a chessboard cell on the intersection of the i-th row and the j-th column. You can consider that the corners are: (1, m), (n, 1), (n, m), (1, 1).", "grammar": {"productions": ["<S> -> [n] <s> [m] <n> <T_n>", "<T_i> -> <T_i-1> <n> <L_m>", "<T_1> -> <L_m>", "<L_i> -> <L_i-1> <s> [a-b]{1}", "<L_1> -> [a-b]{1}"], "constraints": ["1 <= n,m <= 10^6", "1 <= i <= n", "1 <= j <= m", "1 <= a,b <= 10^6"]}}
{"name": "933_B. A Determined Cleanup", "description": "Input\n\nThe only line of input contains two space-separated integers p and k (1 <= p <= 1018, 2 <= k <= 2 000).", "grammar": {"productions": ["<S>->p <s> k"], "constraints": ["1<=p<=1018", "2<=k<=2000"]}}
{"name": "987_B. High School: Become Human", "description": "Input\n\nOn the only line of input there are two integers x and y (1 <= x, y <= 10^{9}).", "grammar": {"productions": ["<S> -> <T_x> <n> <T_y>"], "constraints": ["1 <= x <= 10^9", "1 <= y <= 10^9"]}}
{"name": "p01498 King Slime", "description": "Input\n\nThe first line contains three integers N (2 <= N <= 40,000), W and H (1 <= W, H <= 100,000), which denote the number of slimes, the width and the height of the grid respectively.\n\nThe following N lines describe the initial coordinates of the slimes. The i-th line contains two integers xi (1 <= xi <= W) and yi (1 <= yi <= H), which indicate the coordinates of the i-th slime . All the coordinates are 1-based.\n\nYou may assume that each cell is occupied by at most one slime initially.", "grammar": {"productions": ["<S>->[N] <n> [W] <n> [H] <n> <T_N>", "<T_i>-><T_i-1> <n> <L_2>", "<T_1>-><L_2>", "<L_i>-><L_i-1> <s> <T_xi> <L_yi>", "<L_1>-><T_xi> <s> <T_yi>", "<T_xi> -> [1-100000]{1}", "<T_yi> -> [1-100000]{1}"], "constraints": ["1<=N<=40000", "1<=W,H<=100000"]}}
{"name": "1401_A. Distance and Axis", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 6000) --- the number of test cases.\n\nThe only line of each test case contains two integers n and k (0 <= n, k <= 10^6) --- the initial position of point A and desirable absolute difference.", "grammar": {"productions": ["<S>->[t] <n> <L_t>", "<L_i>-><L_i-1> <s> <T_2>", "<L_1>-><T_2>", "<T_i>-><T_i-1> <s> n", "<T_1>->n"], "constraints": ["1<=t<=6000", "0<=n<=10^6", "0<=k<=10^6"]}}
{"name": "146_D. Lucky Number 2", "description": "Input\n\nThe single line contains four integers a1, a2, a3 and a4 (1 <= a1, a2, a3, a4 <= 106).", "grammar": {"productions": ["<S>->a1 <s> a2 <s> a3 <s> a4"], "constraints": ["1<=a1,a2,a3,a4<=10^6"]}}
{"name": "404_D. Minesweeper 1D", "description": "Input\n\nThe first line contains sequence of characters without spaces s1s2... sn (1 <= n <= 106), containing only characters \"*\", \"?\" and digits \"0\", \"1\" or \"2\". If character si equals \"*\", then the i-th cell of the field contains a bomb. If character si equals \"?\", then Valera hasn't yet decided what to put in the i-th cell. Character si, that is equal to a digit, represents the digit written in the i-th square.", "grammar": {"productions": ["<S>->[n] <s> <S_n>", "<S_i>->[021]{1} <S_i-1>", "<S_1>->[021]{1}", "<T_i>->? <T_i-1>", "<T_1>->?"], "constraints": ["1<=n<=1000000"]}}
{"name": "550_A. Two Substrings", "description": "Input\n\nThe only line of input contains a string s of length between 1 and 105 consisting of uppercase Latin letters.", "grammar": {"productions": ["<S>-><A>"], "constraints": ["1<=|s|<=10^5"]}}
{"name": "690_F1. Tree of Life (easy)", "description": "Input\n\nThe first line of the input contains a single integer n -- the number of vertices in the tree (1 <= n <= 10000). The vertices are labeled with the numbers from 1 to n. Then n - 1 lines follow, each describing one edge using two space-separated numbers a b -- the labels of the vertices connected by the edge (1 <= a < b <= n). It is guaranteed that the input represents a tree.", "grammar": {"productions": ["<S>->[N] <s> <n> <T_N>", "<T_i>-><T_i-1> <s> A_i <s> B_i", "<T_1>->A_1 <s> B_1", "<B_i>-><B_i-1> <s> C_i", "<B_1>->C_1", "<C_i>->[0-1]{1} <C_i-1>", "<C_1>->[0-1]{1}"], "constraints": ["1<=N<=10000", "1<=A_i<=1000", "1<=B_i<=1000"]}}
{"name": "804_A. Find Amir", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 105) --- the number of schools.", "grammar": {"productions": ["<S>->[n] <n>"], "constraints": ["1<=n<=10^5"]}}
{"name": "488_A. Giga Tower", "description": "Input\n\nThe only line of input contains an integer a ( - 109 <= a <= 109).", "grammar": {"productions": ["<S>->a"], "constraints": ["-109<=a<=109"]}}
{"name": "560_B. Gerald is into Art", "description": "Input\n\nThe first line contains two space-separated numbers a1 and b1 --- the sides of the board. Next two lines contain numbers a2, b2, a3 and b3 --- the sides of the paintings. All numbers ai, bi in the input are integers and fit into the range from 1 to 1000.", "grammar": {"productions": ["<S> -> <L_4>", "<L_i> -> a1 <s> b1 <L_i-1>", "<L_1> -> a1 <s> b1", "<L_i> -> a2 <s> b2 <L_i-1>", "<L_2> -> a2 <s> b2", "<L_i> -> a3 <s> b3 <L_i-1>", "<L_3> -> a3 <s> b3"], "constraints": ["1<=a1<=1000", "1<=b1<=1000", "1<=a2<=1000", "1<=b2<=1000", "1<=a3<=1000", "1<=b3<=1000"]}}
{"name": "656_C. Without Text", "description": "Input\n\nThe only line of the input is a string (between 1 and 50 characters long, inclusive). Each character will be an alphanumeric character or a full stop \".\".", "grammar": {"productions": ["<S>-><S1> <n>", "<S1>-><S2> <n>", "<S1>->[A-Z,a-z,0-9,.]{1} <S1>"], "constraints": ["1<=l(string)<=50"]}}
{"name": "886_B. Vlad and Cafes", "description": "Input\n\nIn first line there is one integer n (1 <= n <= 2·105) --- number of cafes indices written by Vlad.\n\nIn second line, n numbers a1, a2, ..., an (0 <= ai <= 2·105) are written --- indices of cafes in order of being visited by Vlad. Vlad could visit some cafes more than once. Note that in numeration, some indices could be omitted.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> <A_i-1>", "<T_1>-><A_1>", "<A_i>->[0-2]{1} <105>{1}", "<A_1>->[0-2]{1} <105>{1}"], "constraints": ["1<=n<=2·105", "0<=ai<=2·105"]}}
{"name": "909_B. Segments", "description": "Input\n\nThe only input line contains a single integer N (1 <= N <= 100).", "grammar": {"productions": ["<S>->[N]"], "constraints": ["1<=n<=100"]}}
{"name": "476_A. Dreamoon and Stairs", "description": "Input\n\nThe single line contains two space separated integers n, m (0 < n <= 10000, 1 < m <= 10).", "grammar": {"productions": ["<S>->[n] <s> [m] <n>"], "constraints": ["0<n<=10000", "1<m<=10"]}}
{"name": "599_A. Patrick and Shopping", "description": "Input\n\nThe first line of the input contains three integers d1, d2, d3 (1 <= d1, d2, d3 <= 108) --- the lengths of the paths. \n\n  * d1 is the length of the path connecting Patrick's house and the first shop; \n  * d2 is the length of the path connecting Patrick's house and the second shop; \n  * d3 is the length of the path connecting both shops.", "grammar": {"productions": ["<S>-><T_d1> <s> <T_d2> <s> <T_d3>", "<T_i>->[1-9]{1}[0-9]{0,8}"], "constraints": ["1<=d1<=100000000", "1<=d2<=100000000", "1<=d3<=100000000"]}}
{"name": "77_E. Martian Food", "description": "Input\n\nThe first line contains integer t (1 <= t <= 104) --- amount of testcases.\n\nEach of the following t lines contain three positive integers: the radii of the plate and a portion of the Golden Honduras R and r (1 <= r < R <= 104) and the number k (1 <= k <= 104).\n\nIn the pretests 1 <= k <= 2.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> <L_3>", "<T_1>-><L_3>", "<L_i>-> R <s> k <s> r", "<L_1>-> R <s> k <s> r"], "constraints": ["1<=t<=100000", "1<=r<R<=100000", "1<=k<=100000", "For pretest: 1<=k<=2"]}}
{"name": "p03975 Kyoto University Programming Contest 2016 - A Barricade", "description": "Input\n\nN, A and B are given on the first line and t_i is given on the (i+1)-th line.\n\n\nN A B\nt1\n:\ntN", "grammar": {"productions": ["<S>->[N] <s> <A> <s> <B> <n> <T_n>", "<T_i>-><T_i-1> <s> <t_i>", "<T_1>-><t_1> <n>"], "constraints": ["1<=N<=1000000", "1<=A,B<=1000000"]}}
{"name": "1185_A. Ropewalkers", "description": "Input\n\nThe only line of the input contains four integers a, b, c, d (1 <= a, b, c, d <= 10^9). It is possible that any two (or all three) ropewalkers are in the same position at the beginning of the performance.", "grammar": {"productions": ["<S>->a <s> b <s> c <s> d"], "constraints": ["1<=a<=10^9", "1<=b<=10^9", "1<=c<=10^9", "1<=d<=10^9"]}}
{"name": "1203_E. Boxers", "description": "Input\n\nThe first line contains an integer n (1 <= n <= 150000) --- the number of boxers. The next line contains n integers a_1, a_2, ..., a_n, where a_i (1 <= a_i <= 150000) is the weight of the i-th boxer.", "grammar": {"productions": ["<S> -> [n] <n> <T_n>", "<T_i> -> <T_i-1> <n> <A_i>", "<T_1> -> <A_1>", "<A_i> -> [1-150000]{1} <A_i-1>", "<A_1> -> [1-150000]{1}"], "constraints": ["1<=n<=150000", "1<=a_i<=150000"]}}
{"name": "1220_C. Substring Game in the Lesson", "description": "Input\n\nThe first line of the input contains a single string s (1 <= |s| <= 5 * 10^5) consisting of lowercase English letters.", "grammar": {"productions": ["<S> -> <T_5*10^5>"], "constraints": ["1 <= |s| <= 5 * 10^5"]}}
{"name": "1485_A. Add and Divide", "description": "Input\n\nThe first line contains a single integer t (1 <= t <= 100) --- the number of test cases.\n\nThe only line of the description of each test case contains two integers a, b (1 <= a,b <= 10^9).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> a <s> b", "<T_1>->a <s> b"], "constraints": ["1<=t<=100", "1<=a,b<=10^9"]}}
{"name": "1535_C. Unstable String", "description": "Input\n\nThe first line contains a single integer t (1 <= t <= 10^4) --- number of test cases.\n\nThe first and only line of each test case contains the string s (1 <= |s| <= 2 * 10^5) consisting of characters 0, 1, and ?.\n\nIt is guaranteed that the sum of the string lengths over all test cases does not exceed 2 * 10^5.", "grammar": {"productions": ["<S>->[T_i]", "<T_i>-><s> s <T_i-1>", "<T_1>-><s> s"], "constraints": ["1<=t<=10^4", "1<=s<=2 * 10^5"]}}
{"name": "255_B. Code Parsing", "description": "Input\n\nThe first line contains a non-empty string s. \n\nIt is guaranteed that the string only consists of characters \"x\" and \"y\". It is guaranteed that the string consists of at most 106 characters. It is guaranteed that as the result of the algorithm's execution won't be an empty string.", "grammar": {"productions": [], "constraints": ["s is not empty"]}}
{"name": "373_A. Collecting Beats is Fun", "description": "Input\n\nThe first line contains a single integer k (1 <= k <= 5) --- the number of panels Cucumber boy can press with his one hand.\n\nNext 4 lines contain 4 characters each (digits from 1 to 9, or period) --- table of panels. If a digit i was written on the panel, it means the boy has to press that panel in time i. If period was written on the panel, he doesn't have to press that panel.", "grammar": {"productions": ["<S>->[k] <n> <T_k>", "<T_i>-><T_i-1> <s> <L_4>", "<T_1>-><L_4>", "<L_i>-><L_i-1> [1-9] {1}", "<L_1>->[1-9]{1}"], "constraints": ["1<=k<=5"]}}
{"name": "727_A. Transformation: from A to B", "description": "Input\n\nThe first line contains two positive integers a and b (1 <= a < b <= 109) --- the number which Vasily has and the number he wants to have.", "grammar": {"productions": ["<S>->a <s> b"], "constraints": ["1<=a,b<=10^9", "a<b"]}}
{"name": "841_B. Godsend", "description": "Input\n\nFirst line of input data contains single integer n (1 <= n <= 106) --- length of the array.\n\nNext line contains n integers a1, a2, ..., an (0 <= ai <= 109).", "grammar": {"productions": ["<S>->[n] <s> <T_n>", "<T_i>-><T_i-1> <s> <A_i>", "<T_1>-><A_1>"], "constraints": ["1<=n<=106", "0<=a_i<=109"]}}
{"name": "959_E. Mahmoud and Ehab and the xor-MST", "description": "Input\n\nThe only line contains an integer n (2 <= n <= 1012), the number of vertices in the graph.", "grammar": {"productions": ["<S>->[n] <n>"], "constraints": ["2<=n<=10^12"]}}
{"name": "1163_C1. Power Transmission (Easy Edition)", "description": "Input\n\nThe first line contains a single integer n (2 <= n <= 50) --- the number of electric poles.\n\nEach of the following n lines contains two integers x_i, y_i (-10^4 <= x_i, y_i <= 10^4) --- the coordinates of the poles.\n\nIt is guaranteed that all of these n points are distinct.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> <L_2>", "<T_1>-><L_2>", "<L_i>-><L_i-1> <s> [x_i,y_i]", "<L_1>->[x_i,y_i]"], "constraints": ["2<=n<=50", "-10^4<=x_i,y_i<=10^4"]}}
{"name": "1328_A. Divisibility Problem", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 10^4) --- the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains two integers a and b (1 <= a, b <= 10^9).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> a <s> b", "<T_1>->a <s> b"], "constraints": ["1<=t<=10^4", "1<=a,b<=10^9"]}}
{"name": "510_B. Fox And Two Dots", "description": "Input\n\nThe first line contains two integers n and m (2 <= n, m <= 50): the number of rows and columns of the board.\n\nThen n lines follow, each line contains a string consisting of m characters, expressing colors of dots in each line. Each character is an uppercase Latin letter.", "grammar": {"productions": [], "constraints": ["2<=n<=50", "2<=m<=50"]}}
{"name": "535_C. Tavas and Karafs", "description": "Input\n\nThe first line of input contains three integers A, B and n (1 <= A, B <= 106, 1 <= n <= 105).\n\nNext n lines contain information about queries. i-th line contains integers l, t, m (1 <= l, t, m <= 106) for i-th query.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> <L_3>", "<T_1>-><L_3>", "<L_i>-><L_i-1> <s> <Z_i>", "<L_1>-><Z_1>"], "constraints": ["1<=A<=10^6", "1<=B<=10^6", "1<=n<=10^5", "1<=l<=10^6", "1<=m<=10^6", "1<=t<=10^6", "A > 0", "B >= 0"]}}
{"name": "1068_B. LCM", "description": "Input\n\nThe only line contains one integer --- b (1 <= b <= 10^{10}).", "grammar": {"productions": ["<S> -> b"], "constraints": ["1<=b<=10000000000"]}}
{"name": "221_A. Little Elephant and Function", "description": "Input\n\nA single line contains integer n (1 <= n <= 1000) --- the size of permutation.", "grammar": {"productions": ["<S>->[n] <n>", "<T_i>-><T_i-1> <s> [1-n]{1}", "<T_1>->[1-n]{1}"], "constraints": ["1<=n<=1000"]}}
{"name": "554_A. Kyoya and Photobooks", "description": "Input\n\nThe first line of input will be a single string s (1 <= |s| <= 20). String s consists only of lowercase English letters.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>->[a-z]{1} <T_i-1>", "<T_1>->[a-z]{1}"], "constraints": ["1<=n<=20"]}}
{"name": "624_B. Making a String", "description": "Input\n\nThe first line of the input contains a single integer n (2 <= n <= 26) --- the number of letters in the alphabet.\n\nThe next line contains n integers ai (1 <= ai <= 109) --- i-th of these integers gives the limitation on the number of occurrences of the i-th character in the string.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> <L_109>", "<T_1>-><L_109>", "<L_i>-><L_i-1> <n> a_i", "<L_1>->a_1"], "constraints": ["2<=n<=26", "1<=a_i<=1000000000"]}}
{"name": "1141_A. Game 23", "description": "Input\n\nThe only line of the input contains two integers n and m (1 <= n <= m <= 5*10^8).", "grammar": {"productions": ["<S>->[n] <s> [m] <n>", "<T_i>-><T_i-1> <s> [m] <Z_i>", "<T_1>->[m] <Z_1>", "<Z_i>-><Z_i-1> [01]{1}", "<Z_1>->[01]{1}"], "constraints": ["1<=n<=5*10^8", "1<=m<=5*10^8", "n<=m"]}}
{"name": "1217_C. The Number Of Good Substrings", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 1000) --- the number of queries.\n\nThe only line of each query contains string s (1 <= |s| <= 2 * 10^5), consisting of only digits 0 and 1.\n\nIt is guaranteed that sum_{i=1}^{t} |s_i| <= 2 * 10^5.", "grammar": {"productions": ["<S>->[t] <s> <T_t>", "<T_i>-><T_i-1> <s> <L_string>", "<T_1>-><L_string>", "<L_i>-><L_i-1> <D_i>", "<L_1>-><D_1>"], "constraints": ["1<=t<=1000", "1<=|s|<=2*10^5"]}}
{"name": "142_A. Help Farmer", "description": "Input\n\nThe only line contains integer n from the problem's statement (1 <= n <= 109).", "grammar": {"productions": ["<S>->[n]"], "constraints": ["1<=n<=109"]}}
{"name": "1526_D. Kill Anton", "description": "Input\n\nThe first line of input contains a single integer t (1 <= t <= 100000) --- the number of testcases.\n\nThe first and only line of each testcase contains 1 string a (1 <= |a| <= 100000). a consists of only the characters \"A\", \"N\", \"O\" and \"T\".\n\nIt is guaranteed that the sum of |a| over all testcases does not exceed 100000.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [ANTO]{1}"], "constraints": ["1<=t<=100000", "1<=|a|<=100000"]}}
{"name": "439_B. Devu, the Dumb Guy", "description": "Input\n\nThe first line will contain two space separated integers n, x (1 <= n, x <= 105). The next line will contain n space separated integers: c1, c2, ..., cn (1 <= ci <= 105).", "grammar": {"productions": ["<S>->[n] <s> x <n> <T_n>", "<T_i>-><T_i-1> <s> c_i", "<T_1>->c_1"], "constraints": ["1<=n,x<=10^5", "1<=c_i<=10^5"]}}
{"name": "1038_D. Slime", "description": "Input\n\nThe first line of the input contains an integer n (1 <= n <= 500 000) denoting the number of slimes.\n\nThe next line contains n integers a_i (-10^9 <= a_i <= 10^9), where a_i is the value of i-th slime.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> <A_i>", "<T_1>-><A_1>", "<A_i>->[a_i]"], "constraints": ["1<=n<=500000", "-1000000000<=a_i<=1000000000"]}}
{"name": "1102_A. Integer Sequence Dividing", "description": "Input\n\nThe first line of the input contains one integer n (1 <= n <= 2 * 10^9).", "grammar": {"productions": ["<S>->[n] <n>"], "constraints": ["1<=n<=2*10^9"]}}
{"name": "118_D. Caesar's Legions", "description": "Input\n\nThe only line contains four space-separated integers n1, n2, k1, k2 (1 <= n1, n2 <= 100, 1 <= k1, k2 <= 10) which represent how many footmen and horsemen there are and the largest acceptable number of footmen and horsemen standing in succession, correspondingly.", "grammar": {"productions": ["<S>->n1 <s> n2 <s> k1 <s> k2", "<T_3>-><T_4> <s> n1", "<T_4>-><T_5> <s> n2", "<T_5>-><T_6> <s> k1", "<T_6>-><T_7> <s> k2", "<T_1>->n1", "<T_2>->n2", "<T_3>->k1", "<T_4>->k2"], "constraints": ["1<=n1,n2<=100", "1<=k1,k2<=10"]}}
{"name": "285_D. Permutation Sum", "description": "Input\n\nThe single line contains integer n (1 <= n <= 16).", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> [1-16]{1}", "<T_1>->[1-16]{1}"], "constraints": ["1<=n<=16"]}}
{"name": "44_I. Toys", "description": "Input\n\nThe first line contains an integer n (1 <= n <= 10) --- the number of toys.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> <T_n>", "<T_1>-><T_n>"], "constraints": ["1<=n<=10"]}}
{"name": "710_E. Generate a String", "description": "Input\n\nThe only line contains three integers n, x and y (1 <= n <= 107, 1 <= x, y <= 109) --- the number of letters 'a' in the input file and the parameters from the problem statement.", "grammar": {"productions": ["<S>->[n] <s> <n> <s> x <s> y", "<T_1>-><n>", "<T_i>-><T_i-1> <s> <n>"], "constraints": ["1 <= n, x, y <=1000000000"]}}
{"name": "822_A. I'm bored with life", "description": "Input\n\nThe first and single line contains two integers A and B (1 <= A, B <= 109, min(A, B) <= 12).", "grammar": {"productions": ["<S>->a <s> b"], "constraints": ["1<=a<=10^9", "1<=b<=10^9"]}}
{"name": "p02127 AABABCAC", "description": "Input\n\nThe input is given in the following format.\n\n\n$ s $\n$ t $\n\n\nThe string $ s $ is given on the first line, and the string $ t $ is given on the second line.", "grammar": {"productions": ["<S>-><s> <T_s> <n> <s> <T_t> <n>"], "constraints": []}}
{"name": "110_C. Lucky Sum of Digits", "description": "Input\n\nThe single line contains an integer n (1 <= n <= 106) --- the sum of digits of the required lucky number.", "grammar": {"productions": ["<S>->[n] <s> <T_n>", "<T_i>-><T_i-1> [0-9]{1}"], "constraints": ["1<=n<=1000000"]}}
{"name": "854_B. Maxim Buys an Apartment", "description": "Input\n\nThe only line of the input contains two integers: n and k (1 <= n <= 109, 0 <= k <= n).", "grammar": {"productions": ["<S>->[n] <s> k", "<T_n>->[n-1] <s> k", "<T_1>->0"], "constraints": ["1<=n<=10^9", "0<=k<=n"]}}
{"name": "99_C. Help Victoria the Wise", "description": "Input\n\nThe first line contains exactly 6 characters without spaces from the set {R, O, Y, G, B, V} --- they are the colors of gems with which the box should be decorated.", "grammar": {"productions": ["<S>->[C] <n> <T_C>", "<T_i>-><T_i-1> <n> <L_6>"], "constraints": ["1<=C<=6"]}}
{"name": "p02320 Knapsack Problem with Limitations", "description": "Input\n\n\nN W\nv1 w1 m1\nv2 w2 m2\n:\nvN wN mN\n\n\nThe first line consists of the integers N and W. In the following N lines, the value, weight and limitation of the i-th item are given.", "grammar": {"productions": ["<S> -> [N] <s> <[W]> <n> <T_N>", "<T_i> -> <T_i-1> <s> <L_3m>", "<T_1> -> <L_3m>", "<L_i> -> <L_i-1> <s> <[vi]> <s> <[wi]> <s> <[mi]>", "<L_1> -> <[vi]> <s> <[wi]> <s> <[mi]>"], "constraints": ["1<= N, W <= 100", "1<= vi <= 10^6", "1<= wi <= 10^7", "0<= mi <= 10^6"]}}
{"name": "1204_D1. Kirk and a Binary String (easy version)", "description": "Input\n\nThe first line contains a binary string of length not more than 2\\: 000.", "grammar": {"productions": ["<S>-><T_n>", "<T_i>-><T_i-1> [01]{1}", "<T_1>->[01]{1}"], "constraints": ["1 <= n <= 2000"]}}
{"name": "65_A. Harry Potter and Three Spells", "description": "Input\n\nThe first line contains 6 integers a, b, c, d, e, f (0 <= a, b, c, d, e, f <= 1000).", "grammar": {"productions": ["<S>->a <s> b <s> c <s> d <s> e <s> f"], "constraints": ["0<=a,b,c,d,e,f<=1000"]}}
{"name": "797_A. k-Factorization", "description": "Input\n\nThe first line contains two integers n and k (2 <= n <= 100000, 1 <= k <= 20).", "grammar": {"productions": ["<S>->[n] <s> k"], "constraints": ["2<=n<=100000", "1<=k<=20"]}}
{"name": "933_C. A Colourful Prospect", "description": "Input\n\nThe first line of input contains one integer n (1 <= n <= 3), denoting the number of circles.\n\nThe following n lines each contains three space-separated integers x, y and r ( - 10 <= x, y <= 10, 1 <= r <= 10), describing a circle whose center is (x, y) and the radius is r. No two circles have the same x, y and r at the same time.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> <z_3>", "<T_1>-><z_3>", "<z_3>->{x}<s_1>{y}<s_1>{r}", "<s_1>-> <s>?{1}"], "constraints": ["1<=n<=3", "-10<=x,y<=10", "1<=r<=10"]}}
{"name": "p01499 Rabbit Game Playing", "description": "Input\n\nThe first line of input contains two integers N and T (1 <= N <= 100,000, 1 <= T <= 10,000). N is the number of stages, and T is the compromise level.\n\nThe following N lines describe the difficulty levels of each stage. The i-th line contains one integer Di (1 <= Di <= 100,000), which is the difficulty level of the i-th stage.", "grammar": {"productions": ["S -> [N] <s> [T] <s> <Z_T>", "Z_T -> Z_T <s> [D{100000}]", "Z_T -> [D{100000}]", "T -> T <s> [D{100000}]", "T -> [D{100000}]", "N -> N <s> [D{100000}]", "N -> [D{100000}]"], "constraints": ["1<=N<=100000", "1<=T<=10000", "1<=D{100000}<=100000"]}}
{"name": "634_B. XOR Equation", "description": "Input\n\nThe first line of the input contains two integers s and x (2 <= s <= 1012, 0 <= x <= 1012), the sum and bitwise xor of the pair of positive integers, respectively.", "grammar": {"productions": ["<S> -> <S_2>", "<S_2> -> <S_3> <T_2>", "<S_3> -> s <s> x", "<T_2> -> <T_2-1> <s> [01]{1}", "<T_1> -> [01]{1}"], "constraints": ["2<=s<=10^12", "0<=x<=10^12"]}}
{"name": "p02259 Bubble Sort", "description": "Input\n\nThe first line of the input includes an integer N, the number of elements in the sequence.\n\nIn the second line, N elements of the sequence are given separated by spaces characters.", "grammar": {"productions": ["<S>->[N] <s> <T_N>"], "constraints": ["1<=N"]}}
{"name": "1047_D. Little C Loves 3 II", "description": "Input\n\nA single line contains two integers n and m (1 <= n,m <= 10^9) --- the number of rows and the number of columns of the chessboard.", "grammar": {"productions": ["<S>->[n] <s> [m] <s> <T_n>", "<T_i>-><T_i-1> <n> <L_2m>", "<T_1>-><L_2m>"], "constraints": ["1<=n<=10^9", "1<=m<=10^9"]}}
{"name": "1409_B. Minimum Product", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 2 * 10^4) --- the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains five integers a, b, x, y and n (1 <= a, b, x, y, n <= 10^9). Additional constraint on the input: a >= x and b >= y always holds.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> <L_5>", "<T_1>-><L_5>", "<L_5>->a <s> b <s> x <s> y <s> n", "<L_4>->a <s> b <s> x <s> y", "<L_3>->a <s> b <s> x", "<L_2>->a <s> b", "<L_1>->a"], "constraints": ["1<=t<=2*10^4", "1<=a,b,x,y,n<=10^9", "a>=x", "b>=y"]}}
{"name": "628_A. Tennis Tournament", "description": "Input\n\nThe only line contains three integers n, b, p (1 <= n, b, p <= 500) --- the number of participants and the parameters described in the problem statement.", "grammar": {"productions": ["S->[n] <s> <L_4>"], "constraints": ["1<=n,b,p<=500"]}}
{"name": "405_A. Gravity Flip", "description": "Input\n\nThe first line of input contains an integer n (1 <= n <= 100), the number of the columns in the box. The next line contains n space-separated integer numbers. The i-th number ai (1 <= ai <= 100) denotes the number of cubes in the i-th column.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["1<=n<=100", "1<=A_i<=100"]}}
{"name": "736_B. Taxes", "description": "Input\n\nThe first line of the input contains a single integer n (2 <= n <= 2·109) --- the total year income of mr. Funt.", "grammar": {"productions": ["<S>->[n] <n>"], "constraints": ["2<=n<=2*10^9"]}}
{"name": "760_B. Frodo and pillows", "description": "Input\n\nThe only line contain three integers n, m and k (1 <= n <= m <= 109, 1 <= k <= n) --- the number of hobbits, the number of pillows and the number of Frodo's bed.", "grammar": {"productions": ["[n] <n> [m] <n> [k]", "<T_n>-><T_i-1> <n> <L_m>", "<T_1>-><L_m>", "<L_m>-><L_i-1> <s> [01]", "<L_1>->[01]"], "constraints": ["1<=n<=m<=10^9", "1<=k<=n", "1<=m<=n"]}}
{"name": "p00357 Trampoline", "description": "Input\n\nThe input is given in the following format.\n\n\nN\nd_1\nd_2\n:\nd_N\n\n\nThe first line provides the number of trampolines N (2 <= N <= 3 × 105). Each of the subsequent N lines gives the maximum allowable jumping distance in integer meters for the i-th trampoline d_i (1 <= d_i <= 106).", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> <D_i>", "<T_1>-><D_1>"], "constraints": ["2<=N<=3e5", "1<=d_i<=1e6"]}}
{"name": "864_C. Bus", "description": "Input\n\nThe first line contains four integers a, b, f, k (0 < f < a <= 106, 1 <= b <= 109, 1 <= k <= 104) --- the endpoint of the first bus journey, the capacity of the fuel tank of the bus, the point where the gas station is located, and the required number of journeys.", "grammar": {"productions": ["<S>->[k] <n> <F_k>", "<F_i>-><F_i-1> <n> [x_i]", "<F_1>->[f]", "<Z_i>-><Z_i-1> <s> [b_i]", "<Z_1>->[b]", "<L_i>-><L_i-1> <s> [01]{1}", "<L_1>->[01]{1}"], "constraints": ["0<f<a<=10^6", "1<=b, k<=10^4"]}}
{"name": "171_D. Broken checker", "description": "Input\n\nThe only line of the input contains an integer between 1 and 5, inclusive. All tests for this problem are different. The contents of the test case doesn't need to be equal to its index.", "grammar": {"productions": ["<S>->[5]"], "constraints": ["1<=n<=5"]}}
