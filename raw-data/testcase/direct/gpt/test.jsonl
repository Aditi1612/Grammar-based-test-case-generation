{"name": "p02936 AtCoder Beginner Contest 138 - Ki", "description": "Constraints\n\n* 2 <= N <= 2 * 10^5\n* 1 <= Q <= 2 * 10^5\n* 1 <= a_i < b_i <= N\n* 1 <= p_j <= N\n* 1 <= x_j <= 10^4\n* The given graph is a tree.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN Q\na_1 b_1\n:\na_{N-1} b_{N-1}\np_1 x_1\n:\np_Q x_Q", "testcase": ["3 2\n1 2\n2 3\n1 100\n2 200", "4 1\n1 2\n2 3\n3 4\n4 500", "5 3\n1 2\n1 3\n2 4\n2 5\n3 100\n4 200\n5 300", "6 2\n1 2\n2 3\n3 4\n4 5\n5 6\n2 50\n5 150", "7 4\n1 2\n2 3\n3 4\n2 5\n5 6\n5 7\n7 10\n6 20\n2 30\n3 40", "8 3\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n3 8\n8 888\n6 666\n5 555", "9 5\n1 2\n1 3\n2 4\n4 5\n5 6\n4 7\n7 8\n8 9\n3 30\n5 50\n7 70\n9 90\n2 20", "10 3\n1 2\n2 3\n3 4\n4 5\n2 6\n6 7\n7 8\n8 9\n9 10\n5 15\n6 60\n10 100", "5 1\n1 2\n2 3\n3 4\n4 5\n1 1234", "10 5\n1 2\n3 4\n4 5\n6 7\n7 8\n8 9\n9 10\n10 11\n5 5\n6 10\n7 15\n8 20\n9 25\n10 30"]}
{"name": "p02696 AtCoder Beginner Contest 165 - Floor Function", "description": "Constraints\n\n* 1 <= A <= 10^{6}\n* 1 <= B <= 10^{12}\n* 1 <= N <= 10^{12}\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B N", "testcase": ["1 1 1", "999999 1000000000000 500000000000", "500000 999999999999 999999999999", "250000 500000000000 250000000000", "1000000 10000000000 100000000000", "1 1000000000000 2", "2 500000000000 10", "999999 1 1000000000000", "1000000 999999999999 1", "123456 789012345678 987654321012"]}
{"name": "p03013 AtCoder Beginner Contest 129 - Typical Stairs", "description": "Constraints\n\n* 1 <= N <= 10^5\n* 0 <= M <= N-1\n* 1 <= a_1 < a_2 < ... < a_M <= N-1\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\na_1\na_2\n.\n.\n.\na_M", "testcase": ["5 2\n1\n3", "10 0\n", "15 3\n2\n7\n14", "100000 4\n1\n50000\n75000\n99999", "7 3\n1\n4\n6", "20 1\n19", "50 5\n10\n20\n30\n40\n49", "100 2\n50\n99", "8 4\n1\n2\n3\n7", "30 3\n10\n20\n29"]}
{"name": "p02953 AtCoder Beginner Contest 136 - Build Stairs", "description": "Constraints\n\n* All values in input are integers.\n* 1 <= N <= 10^5\n* 1 <= H_i <= 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nH_1 H_2 ... H_N", "testcase": ["1\n1", "2\n1000000000 999999999", "5\n1 2 3 4 5", "3\n10 20 30", "10\n5 4 3 2 1 6 7 8 9 10", "6\n123456 789012 345678 901234 567890 234567", "4\n999999999 999999998 999999997 999999996", "7\n10 20 30 40 50 60 70", "8\n100000000 200000000 300000000 400000000 500000000 600000000 700000000 800000000", "9\n9 8 7 6 5 4 3 2 1"]}
{"name": "791_A. Bear and Big Brother", "description": "Input\n\nThe only line of the input contains two integers a and b (1 <= a <= b <= 10) --- the weight of Limak and the weight of Bob respectively.", "testcase": ["1 1", "2 5", "3 3", "1 10", "4 4", "2 8", "5 5", "6 9", "7 7", "1 2"]}
{"name": "p02891 AtCoder Grand Contest 039 - Connection and Disconnection", "description": "Constraints\n\n* 1 <= |S| <= 100\n* S consists of lowercase English letters.\n* 1 <= K <= 10^9\n* K is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS\nK", "testcase": ["a\n1", "abc\n1000000000", "x\n10", "pqrst\n999999999", "hello\n123456789", "programming\n42", "testcase\n987654321", "lowercase\n1000000", "example\n999", "specification\n7"]}
{"name": "p02693 AtCoder Beginner Contest 165 - We Love Golf", "description": "Constraints\n\n* All values in input are integers.\n* 1 <= A <= B <= 1000\n* 1 <= K <= 1000\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nK\nA B", "testcase": ["2\n1 10", "1000\n100 1000", "5\n25 30", "7\n1 1000", "1\n500 500", "15\n200 300", "10\n100 200", "3\n333 999", "25\n10 20", "50\n850 900"]}
{"name": "p02718 AtCoder Beginner Contest 161 - Popular Vote", "description": "Constraints\n\n* 1 <= M <= N <= 100\n* 1 <= A_i <= 1000\n* A_i are distinct.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nA_1 ... A_N", "testcase": ["2 1\n1 1000", "5 3\n10 20 30 40 50", "10 10\n11 22 33 44 55 66 77 88 99 100", "3 2\n123 456 789", "4 1\n998 999 100 500", "7 4\n17 19 23 29 31 37 41", "6 3\n600 700 800 900 300 200", "8 2\n120 121 122 123 124 125 126 127", "9 5\n100 200 300 400 500 600 700 800 900", "2 2\n1 2"]}
{"name": "443_A. Anton and Letters", "description": "Input\n\nThe first and the single line contains the set of letters. The length of the line doesn't exceed 1000. It is guaranteed that the line starts from an opening curved bracket and ends with a closing curved bracket. Between them, small English letters are listed, separated by a comma. Each comma is followed by a space.", "testcase": ["(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z)", "(m, n, o, p, q, r, s, t, u, v, w, x, y, z)", "(a, b, c, d, e, f, g, h)", "(x, y, z)", "(i, j, k, l, m, n)", "(a, c, e, g, i, k, m, o, q, s, u, w, y)", "(b, d, f, h, j, l, n, p, r, t, v, x, z)", "(a, b, c)", "(r, s, t, u, v, w, x)", "(a)"]}
{"name": "p03324 AtCoder Beginner Contest 100 - Ringo's Favorite Numbers", "description": "Constraints\n\n* D is 0, 1 or 2.\n* N is an integer between 1 and 100 (inclusive).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nD N", "testcase": ["0 1", "1 50", "2 100", "0 20", "1 88", "2 75", "0 99", "1 1", "2 45", "0 100"]}
{"name": "p02862 AtCoder Beginner Contest 145 - Knight", "description": "Constraints\n\n* 1 <= X <= 10^6\n* 1 <= Y <= 10^6\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX Y", "testcase": ["1 1", "2 10", "999999 1000000", "500000 500000", "345 678", "17 981", "1000000 999999", "123456 654321", "42 42", "987654 123456"]}
{"name": "p03854 AtCoder Beginner Contest 049 - Daydream", "description": "Constraints\n\n* 1<=|S|<=10^5\n* S consists of lowercase English letters.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nS", "testcase": ["a", "abcdefghijklmnopqrstuvwxyz", "testinput", "randomcase", "example", "stringwithlength", "lowercaseletters", "anotherexampletest", "onecharacter", "thelasttestcase"]}
{"name": "469_A. I Wanna Be the Guy", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 100). \n\nThe next line contains an integer p (0 <= p <= n) at first, then follows p distinct integers a1, a2, ..., ap (1 <= ai <= n). These integers denote the indices of levels Little X can pass. The next line contains the levels Little Y can pass in the same format. It's assumed that levels are numbered from 1 to n.", "testcase": ["3\n1 2\n2 1 3", "5\n3 1 3 5\n2 2 4", "10\n5 1 2 3 4 5\n5 6 7 8 9 10", "6\n0\n3 1 4 6", "4\n4 1 2 3 4\n0", "7\n3 1 5 7\n3 2 4 6", "8\n4 1 4 6 8\n4 2 3 5 7", "9\n5 1 3 5 7 9\n4 2 4 6 8", "2\n1 1\n1 2", "100\n50 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\n50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100"]}
{"name": "p03221 AtCoder Beginner Contest 113 - ID", "description": "Constraints\n\n* 1 <= N <= 10^5\n* 1 <= M <= 10^5\n* 1 <= P_i <= N\n* 1 <= Y_i <= 10^9\n* Y_i are all different.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nP_1 Y_1\n:\nP_M Y_M", "testcase": [""]}
{"name": "p03309 AtCoder Beginner Contest 102 - Linear Approximation", "description": "Constraints\n\n* 1 <= N <= 2 * 10^5\n* 1 <= A_i <= 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 A_2 ... A_N", "testcase": ["1\n1", "2\n2 3", "3\n9 8 7", "4\n1000000000 1000000000 1000000000 1000000000", "5\n435 234 567 78 900", "6\n1 1 1 1 1 1", "7\n8234567 2345678 3456789 4567890 5678901 6789012 7890123", "8\n2 4 6 8 10 12 14 16", "9\n999999999 888888888 777777777 666666666 555555555 444444444 333333333 222222222 111111111", "10\n100 200 300 400 500 600 700 800 900 1000"]}
{"name": "148_A. Insomnia cure", "description": "Input\n\nInput data contains integer numbers k, l, m, n and d, each number in a separate line (1 <= k, l, m, n <= 10, 1 <= d <= 10^5).", "testcase": ["1\n2\n3\n4\n10", "2\n3\n4\n5\n100", "1\n1\n1\n1\n1", "10\n10\n10\n10\n10000", "4\n5\n6\n7\n500", "2\n4\n6\n8\n30000", "1\n2\n2\n2\n12345", "3\n6\n9\n3\n99999", "7\n5\n3\n1\n20000", "8\n9\n5\n3\n85000"]}
{"name": "1353_B. Two Arrays And Swaps", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 200) --- the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains two integers n and k (1 <= n <= 30; 0 <= k <= n) --- the number of elements in a and b and the maximum number of moves you can do. The second line of the test case contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 30), where a_i is the i-th element of a. The third line of the test case contains n integers b_1, b_2, ..., b_n (1 <= b_i <= 30), where b_i is the i-th element of b.", "testcase": ["1\n10 5\n1 2 3 4 5 6 7 8 9 10\n10 9 8 7 6 5 4 3 2 1", "3\n4 1\n4 2 6 8\n5 9 3 1\n2 0\n10 20\n20 10\n5 2\n5 4 1 2 3\n8 1 7 6 5", "1\n6 3\n5 2 3 6 1 4\n10 11 12 13 14 15", "2\n8 0\n11 12 9 5 3 1 2 10\n2 4 6 7 8 13 14 16\n3 2\n15 4 5\n12 8 3", "1\n7 2\n4 5 6 7 8 9 10\n1 3 5 7 9 11 13", "1\n30 10\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "2\n5 4\n3 1 5 7 9\n2 6 4 8 10\n10 7\n10 9 8 7 6 1 2 3 4 5\n5 3 1 2 6 7 8 9 10 11", "1\n15 8\n9 12 6 3 17 14 10 8 2 15 5 7 13 11 4\n5 14 10 1 3 19 20 2 22 8 17 13 9 12 6", "3\n6 2\n4 8 15 16 23 42\n42 23 16 15 8 4\n3 1\n2 4 8\n16 15 23\n4 0\n1 1 2 2\n3 3 4 4", "1\n9 3\n5 7 12 6 4 8 11 13 2\n14 1 3 9 10 6 5 2 8"]}
{"name": "492_B. Vanya and Lanterns", "description": "Input\n\nThe first line contains two integers n, l (1 <= n <= 1000, 1 <= l <= 10^9) --- the number of lanterns and the length of the street respectively. \n\nThe next line contains n integers ai (0 <= ai <= l). Multiple lanterns can be located at the same point. The lanterns may be located at the ends of the street.", "testcase": ["2 10\n0 10", "5 100\n1 22 44 66 88", "3 500000000\n0 250000000 500000000", "4 200\n50 50 150 200", "6 100000\n0 20000 40000 60000 80000 100000", "10 1000\n0 100 200 300 400 500 600 700 800 1000", "7 123456789\n123 45678 123456 789012 345678 901234 1234567", "8 100000000\n1 2 3 4 5 6 7 8", "9 300\n0 33 66 99 132 165 198 231 264", "1 1\n0"]}
{"name": "p03076 AtCoder Beginner Contest 123 - Five Dishes", "description": "Constraints\n\n* A, B, C, D and E are integers between 1 and 123 (inclusive).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA\nB\nC\nD\nE", "testcase": ["1\n2\n3\n4\n5", "123\n1\n2\n3\n4", "5\n11\n23\n45\n67", "117\n116\n115\n114\n113", "22\n33\n44\n55\n66", "99\n98\n97\n96\n95", "13\n26\n39\n52\n65", "100\n90\n80\n70\n60", "8\n16\n24\n32\n40", "77\n88\n99\n110\n121"]}
{"name": "p02612 AtCoder Beginner Contest 173 - Payment", "description": "Constraints\n\n* 1 <= N <= 10000\n* N is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "testcase": ["1", "10000", "543", "9999", "27", "837", "2000", "4096", "1024", "5000"]}
{"name": "p03137 AtCoder Beginner Contest 117 - Streamline", "description": "Constraints\n\n* All values in input are integers.\n* 1 <= N <= 10^5\n* 1 <= M <= 10^5\n* -10^5 <= X_i <= 10^5\n* X_1, X_2, ..., X_M are all different.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nX_1 X_2 ... X_M", "testcase": ["1 2\n-100000 100000", "3 3\n1000 -5000 15000", "10 5\n-310 340 567 -45 123", "100000 1\n99999", "99999 2\n-99999 0", "50000 10\n-40000 -32000 -28000 -15000 -123 1000 12345 67890 99999 100000", "4 4\n-100 0 100 1000", "2 2\n-99999 99998", "100 5\n-345 234 789 -12 -678", "10 10\n-10 -20 -30 -40 -50 60 70 80 90 100"]}
{"name": "510_A. Fox And Snake", "description": "Input\n\nThe only line contains two integers: n and m (3 <= n, m <= 50). \n\nn is an odd number.", "testcase": ["3 4", "5 6", "7 8", "9 10", "11 12", "13 14", "15 16", "17 18", "19 20", "21 22"]}
{"name": "p03032 AtCoder Beginner Contest 128 - equeue", "description": "Constraints\n\n* All values in input are integers.\n* 1 <= N <= 50\n* 1 <= K <= 100\n* -10^7 <= V_i <= 10^7\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nV_1 V_2 ... V_N", "testcase": ["3 5\n-10000000 -9999999 5000000", "1 1\n0", "10 15\n10000000 9999999 8888888 7777777 6666666 5555555 4444444 3333333 2222222 1111111", "50 100\n-5000000 -4000000 -3000000 -2000000 -1000000 0 1000000 2000000 3000000 4000000 5000000 6000000 7000000 8000000 9000000 10000000 -10000000 -9000000 -8000000 -7000000 -6000000 -5000000 -4000000 -3000000 -2000000 -1000000 0 1000000 2000000 3000000 4000000 5000000 6000000 7000000 8000000 9000000 10000000 -10000000 -9000000 -8000000 -7000000 -6000000 -5000000 -4000000 -3000000 -2000000 -1000000", "5 50\n-1 -2 -3 -4 -5", "4 4\n10000000 10000000 10000000 10000000", "7 10\n-10000000 0 10000000 -9999999 9999999 -8888888 8888888", "20 50\n1 -1 2 -2 3 -3 4 -4 5 -5 6 -6 7 -7 8 -8 9 -9 10 -10", "30 80\n500 1000 1500 -2000 -2500 3000 3500 4000 -4500 5000 -5500 6000 -6500 7000 -7500 8000 -8500 9000 -9500 10000 -10500 11000 -11500 12000 -12500 13000 -13500 14000 -14500 15000", "15 20\n-7000000 -6000000 -5000000 -4000000 -3000000 -2000000 -1000000 0 1000000 2000000 3000000 4000000 5000000 6000000 7000000"]}
{"name": "p02973 AtCoder Beginner Contest 134 - Sequence Decomposing", "description": "Constraints\n\n* 1 <= N <= 10^5\n* 0 <= A_i <= 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1\n:\nA_N", "testcase": ["5\n1\n2\n3\n4\n5", "3\n0\n0\n0", "10\n1000000000\n999999999\n888888888\n777777777\n666666666\n555555555\n444444444\n333333333\n222222222\n111111111", "1\n500000000", "2\n0\n1000000000", "6\n23\n68\n99\n12\n45\n77", "8\n1\n1\n2\n3\n5\n8\n13\n21", "4\n999\n1000\n1001\n1002", "7\n345\n6789\n12345\n23456\n78901\n345678\n987654", "9\n123456789\n234567890\n345678901\n456789012\n567890123\n678901234\n789012345\n890123456\n901234567"]}
{"name": "p02675 AtCoder Beginner Contest 168 - ∴ (Therefore)", "description": "Constraints\n\n* N is a positive integer not exceeding 999.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "testcase": ["1", "25", "999", "500", "333", "42", "876", "100", "250", "745"]}
{"name": "758_A. Holiday Of Equality", "description": "Input\n\nThe first line contains the integer n (1 <= n <= 100) --- the number of citizens in the kingdom.\n\nThe second line contains n integers a1, a2, ..., an, where ai (0 <= ai <= 10^6) --- the welfare of the i-th citizen.", "testcase": ["3\n1 2 3", "5\n1000000 1000000 1000000 1000000 1000000", "1\n0", "10\n12345 23456 34567 45678 56789 67890 78901 89012 90123 1234", "7\n500000 600000 700000 800000 300000 200000 100000", "4\n0 0 0 0", "8\n999999 888888 777777 666666 555555 444444 333333 222222", "2\n435 342", "6\n234 567 890 123 345 678", "9\n87654 23456 65432 12345 98765 43210 34567 78901 123456"]}
{"name": "230_A. Dragons", "description": "Input\n\nThe first line contains two space-separated integers s and n (1 <= s <= 10^4, 1 <= n <= 10^3). Then n lines follow: the i-th line contains space-separated integers xi and yi (1 <= xi <= 10^4, 0 <= yi <= 10^4) --- the i-th dragon's strength and the bonus for defeating it.", "testcase": ["100 3\n10 5\n20 10\n30 15", "500 5\n100 20\n200 30\n150 50\n300 60\n50 10", "2000 2\n1500 500\n1000 200", "1 1\n1 0", "9999 10\n1234 150\n2345 100\n3456 200\n4567 300\n5678 400\n6789 500\n7890 600\n8901 700\n9012 800\n150 50", "1234 4\n300 100\n400 200\n500 100\n600 300", "8000 7\n1000 200\n2000 300\n3000 400\n4000 500\n5000 600\n6000 700\n7000 800", "350 5\n100 0\n200 0\n300 0\n400 0\n500 0", "7777 8\n1111 222\n2222 333\n3333 444\n4444 555\n5555 666\n6666 777\n7777 888\n8888 999", "9821 6\n982 198\n2943 0\n735 140\n1842 289\n2367 340\n491 70"]}
{"name": "1095_A. Repeating Cipher", "description": "Input\n\nThe first line contains integer n (1 <= n <= 55) --- the length of the encrypted string. The second line of the input contains t --- the result of encryption of some string s. It contains only lowercase Latin letters. The length of t is exactly n.\n\nIt is guaranteed that the answer to the test exists.", "testcase": ["5\nabcde", "10\nhelloworld", "3\nxyz", "8\npassword", "1\na", "15\nflyingelephant", "4\ntest", "6\nqwerty", "55\npneumonoultramicroscopicsilicovolcanoconiosis", "14\nbrilliantidea"]}
{"name": "1358_A. Park Lighting", "description": "Input\n\nThe first line contains a single integer t (1 <= t <= 10^4) --- the number of test cases in the input. Then t test cases follow.\n\nEach test case is a line containing two integers n, m (1 <= n, m <= 10^4) --- park sizes.", "testcase": ["1\n1 1", "2\n10 100\n20 200", "3\n30 300\n40 400\n50 500", "4\n100 1000\n200 2000\n300 3000\n400 4000", "5\n60 600\n70 700\n80 800\n90 900\n100 1000", "6\n110 1100\n120 1200\n130 1300\n140 1400\n150 1500\n160 1600", "7\n5 5\n6 6\n7 7\n8 8\n9 9\n10 10\n11 11", "8\n150 150\n200 250\n300 350\n400 450\n500 550\n600 650\n700 750\n800 850", "9\n15 150\n25 250\n35 350\n45 450\n55 550\n65 650\n75 750\n85 850\n95 950", "10\n1000 1000\n2000 2000\n3000 3000\n4000 4000\n5000 5000\n6000 6000\n7000 7000\n8000 8000\n9000 9000\n10000 10000"]}
{"name": "p03472 AtCoder Beginner Contest 085 - Katana Thrower", "description": "Constraints\n\n* 1 <= N <= 10^5\n* 1 <= H <= 10^9\n* 1 <= a_i <= b_i <= 10^9\n* All input values are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN H\na_1 b_1\n:\na_N b_N", "testcase": ["2 100\n10 20\n30 40", "3 100000\n1000 10000\n2000 20000\n1500 90999", "1 1000000000\n999999999 1000000000", "4 500\n123 456\n789 888\n1 77\n65 400", "5 123456\n101 202\n303 404\n505 606\n707 808\n909 1000", "6 987654321\n123456789 987654321\n234567890 876543210\n345678901 765432109\n123 321\n456 654\n789 987", "3 300000000\n1000000 100000000\n2000000 200000000\n3000000 300000000", "10 100000\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n9 9\n10 10", "7 7654321\n2000000 5000000\n3000001 6000001\n4000002 7000002\n5000003 8000003\n6000004 9000004\n7000005 10000005\n8000006 11000006", "8 350\n5 95\n10 200\n50 88\n30 99\n22 44\n77 155\n60 120\n8 48"]}
{"name": "1352_C. K-th Not Divisible by n", "description": "Input\n\nThe first line contains an integer t (1 <= t <= 1000) --- the number of test cases in the input. Next, t test cases are given, one per line.\n\nEach test case is two positive integers n (2 <= n <= 10^9) and k (1 <= k <= 10^9).", "testcase": ["1 100", "2 500", "3 999", "4 1500", "5 2000", "6 2500", "7 3000", "8 3500", "9 4000", "10 4500"]}
{"name": "1180_A. Alex and a Rhombus", "description": "Input\n\nThe first and only input line contains integer n (1 <= n <= 100) --- order of a rhombus whose numbers of cells should be computed.", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]}
{"name": "p02708 AtCoder Beginner Contest 163 - Sum of Large Numbers", "description": "Constraints\n\n* 1 <= N <= 2* 10^5\n* 1 <= K <= N+1\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K", "testcase": ["1 2", "200000 200001", "12345 12346", "54321 54322", "16384 16385", "32768 32769", "100000 100001", "150000 150000", "199999 200000", "2 3"]}
{"name": "p02390 Watch", "description": "Constraints\n\n* $0 <= S <= 86400$\n\nInput\n\nAn integer $S$ is given in a line.", "testcase": ["0", "43200", "86400", "12345", "23456", "34567", "45678", "56789", "67890", "78901"]}
{"name": "1420_A. Cubes Sorting", "description": "Input\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1 <= t <= 1000), denoting the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains one positive integer n (2 <= n <= 5 * 10^4) --- number of cubes.\n\nThe second line contains n positive integers a_i (1 <= a_i <= 10^9) --- volumes of cubes.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5.", "testcase": ["3\n2\n1 2\n4\n10 20 30 40\n5\n100 200 300 400 500", "1\n3\n1000000000 1 1000000000", "2\n2\n123456789 987654321\n5\n1 1 2 3 5", "4\n10\n1 1 1 1 1 1 1 1 1 10\n3\n100 200 300\n5\n1 2 3 4 5\n6\n10 9 8 7 6 5", "1\n8\n8 7 6 5 4 3 2 1", "2\n6\n1 1 1 1 1 1\n4\n100000000 99999999 99999998 99999997", "3\n4\n2 4 8 16\n8\n256 256 256 256 256 256 256 256\n10\n1024 512 256 128 64 32 16 8 4 2", "1\n12\n2 3 1 5 4 7 6 10 8 11 9 12", "5\n5\n1 2 2 3 3\n7\n4 4 4 4 4 4 4\n9\n7 8 9 1 2 3 6 5 4\n2\n1 1\n10\n1 3 5 7 9 2 4 6 8 10", "2\n8\n100000000 200000000 300000000 400000000 500000000 600000000 700000000 800000000\n15\n1 3 6 10 15 21 28 36 45 55 66 78 91 105 120"]}
{"name": "1436_A. Reorder", "description": "Input\n\nThe first line contains a single integer t --- the number of test cases (1 <= t <= 100). The test cases follow, each in two lines.\n\nThe first line of a test case contains two integers n and m (1 <= n <= 100, 0 <= m <= 10^6). The second line contains integers a_1, a_2, ..., a_n (0 <= a_i <= 10^6) --- the elements of the array.", "testcase": ["1\n2 500000\n250000 250000", "5\n1 1\n0\n1 1\n1\n1 2\n0\n1 10\n10\n1 1000000\n100000", "3\n10 123456\n12345 23456 34567 45678 56789 67890 78901 89012 90123 1234\n5 654321\n65432 54321 43210 3210 210\n2 999999\n500000 499999", "4\n3 150\n50 50 50\n4 5280\n1320 1320 1320 1320\n6 100000\n10000 20000 30000 40000 0 0\n7 765432\n100000 100000 100000 100000 100000 100000 65432", "1\n8 2468\n123 456 789 101 112 131 415 161\n2 800\n400 400\n5 5000\n1000 1000 1000 1000 1000\n3 400\n133 133 134", "2\n4 400000\n100000 100000 100000 100000\n6 888888\n148148 148148 148148 148148 148148 148148", "1\n7 77\n11 11 11 11 11 11 11\n3 90000\n30000 30000 30000\n2 505050\n252525 252525", "1\n5 0\n0 0 0 0 0\n4 444444\n111111 111111 111111 111111", "2\n3 10\n3 3 4\n4 20\n5 5 5 5", "3\n6 200000\n100000 50000 25000 10000 10000 20000\n7 700000\n100000 100000 100000 100000 100000 100000 100000\n8 800000\n100000 100000 100000 100000 100000 100000 100000 100000"]}
{"name": "835_A. Key races", "description": "Input\n\nThe first line contains five integers s, v1, v2, t1, t2 (1 <= s, v1, v2, t1, t2 <= 1000) --- the number of characters in the text, the time of typing one character for the first participant, the time of typing one character for the the second participant, the ping of the first participant and the ping of the second participant.", "testcase": ["100 5 3 20 15", "250 2 4 5 7", "500 1 1 30 25", "300 6 5 10 12", "450 4 6 8 9", "123 7 8 13 11", "800 9 3 22 20", "350 2 3 15 17", "76 10 3 4 6", "620 5 5 14 18"]}
{"name": "1419_A. Digit Game", "description": "Input\n\nFirst line of input contains an integer t (1 <= t <= 100) --- the number of matches.\n\nThe first line of each match description contains an integer n (1 <= n <= 10^3) --- the number of digits of the generated number.\n\nThe second line of each match description contains an n-digit positive integer without leading zeros.", "testcase": ["1\n3\n123", "2\n1\n5\n2\n89", "1\n4\n1111", "3\n2\n12\n5\n12345\n3\n678", "1\n10\n1234567890", "2\n3\n987\n4\n4567", "1\n5\n54321", "1\n6\n112233", "2\n1\n3\n7\n7654321", "3\n3\n333\n2\n77\n8\n12345678"]}
{"name": "p03434 AtCoder Beginner Contest 088 - Card Game for Two", "description": "Constraints\n\n* N is an integer between 1 and 100 (inclusive).\n* a_i \\ (1 <= i <= N) is an integer between 1 and 100 (inclusive).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 a_2 a_3 ... a_N", "testcase": ["1\n1", "2\n1 2", "5\n10 20 30 40 50", "3\n99 98 97", "4\n1 1 1 1", "6\n54 23 78 56 30 45", "7\n16 87 27 65 12 9 100", "10\n1 1 2 3 5 8 13 21 34 55", "8\n47 11 85 23 16 32 64 128", "9\n3 6 9 12 15 18 21 24 27"]}
{"name": "1294_B. Collecting Packages", "description": "Input\n\nThe first line of the input contains an integer t (1 <= t <= 100) --- the number of test cases. Then test cases follow.\n\nThe first line of a test case contains one integer n (1 <= n <= 1000) --- the number of packages.\n\nThe next n lines contain descriptions of packages. The i-th package is given as two integers x_i and y_i (0 <= x_i, y_i <= 1000) --- the x-coordinate of the package and the y-coordinate of the package.\n\nIt is guaranteed that there are no two packages at the same point. It is also guaranteed that the point (0, 0) doesn't contain a package.\n\nThe sum of all values n over test cases in the test doesn't exceed 1000.", "testcase": ["1\n5\n10 10\n20 20\n30 30\n40 40\n50 50", "2\n2\n5 5\n10 10\n3\n1 2\n3 4\n5 6", "1\n4\n0 1\n1 0\n2 2\n3 3", "3\n1\n100 100\n2\n200 200\n300 300\n3\n400 400\n500 500\n600 600", "1\n7\n0 5\n5 0\n2 2\n8 8\n3 4\n6 6\n7 7", "1\n8\n10 1\n20 2\n30 3\n40 4\n50 5\n60 6\n70 7\n80 8", "1\n10\n9 8\n7 6\n5 4\n3 2\n1 1\n0 2\n2 0\n4 5\n6 7\n8 9", "2\n3\n100 101\n101 100\n102 103\n4\n10 11\n11 10\n12 13\n13 12", "1\n6\n33 44\n55 66\n77 88\n99 111\n222 333\n444 555", "1\n9\n21 22\n23 24\n25 26\n24 27\n0 31\n31 30\n29 28\n35 38\n40 42"]}
{"name": "p03994 CODE FESTIVAL 2016 qual A - Next Letter", "description": "Constraints\n\n* 1<=|s|<=10^5\n* All letters in s are lowercase English letters.\n* 1<=K<=10^9\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\ns\nK", "testcase": ["a\n1", "abcde\n10", "xyzbac\n999", "pqrstuvwxy\n1000000000", "abcdefghij\n12345", "klmnopqrst\n987654321", "z\n50", "yzyzyz\n3", "abcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghij\n678901234", "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\n10000000"]}
{"name": "119_A. Epic Game", "description": "Input\n\nThe only string contains space-separated integers a, b and n (1 <= a, b, n <= 100) --- the fixed numbers Simon and Antisimon have received correspondingly and the initial number of stones in the pile.", "testcase": ["3 5 10", "1 2 50", "6 4 22", "10 1 100", "9 8 37", "5 3 67", "2 7 18", "8 9 45", "3 3 99", "1 1 34"]}
{"name": "p02926 AtCoder Beginner Contest 139 - Engines", "description": "Constraints\n\n* 1 <= N <= 100\n* -1 \\ 000 \\ 000 <= x_i <= 1 \\ 000 \\ 000\n* -1 \\ 000 \\ 000 <= y_i <= 1 \\ 000 \\ 000\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nx_1 y_1\nx_2 y_2\n: :\nx_N y_N", "testcase": ["3\n-999999 500000\n123456 789000\n-111111 222222", "5\n1000000 1000000\n-1000000 -1000000\n0 0\n500 -700\n-300 400", "1\n-1 -1", "4\n0 0\n0 1\n1 0\n1 1", "2\n999999 999999\n-999999 -999999", "6\n432123 -987654\n234567 876543\n-654321 -123456\n99999 -99999\n-50000 50000\n600000 -600000", "7\n1000000 0\n0 1000000\n-1000000 0\n0 -1000000\n500000 500000\n-500000 -500000\n-123456 654321", "10\n1000000 -1000000\n1000000 1000000\n-1000000 1000000\n-1000000 -1000000\n500000 -500000\n-500000 500000\n0 0\n-250000 -250000\n250000 250000\n-999999 999999", "8\n888888 888888\n-888888 888888\n888888 -888888\n-888888 -888888\n444444 444444\n-444444 444444\n444444 -444444\n-444444 -444444", "9\n100 200\n-300 400\n500 -600\n700 800\n-900 1000\n110 -220\n330 440\n-550 660\n770 -880"]}
{"name": "1430_B. Barrels", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 1000) --- the number of test cases.\n\nThe first line of each test case contains two integers n and k (1 <= k < n <= 2 * 10^5) --- the number of barrels and the number of pourings you can make.\n\nThe second line contains n integers a_1, a_2, ..., a_n (0 <= a_i <= 10^{9}), where a_i is the initial amount of water the i-th barrel has.\n\nIt's guaranteed that the total sum of n over test cases doesn't exceed 2 * 10^5.", "testcase": ["3\n2 1\n0 10\n4 3\n1 0 7 6\n5 2\n3 0 4 5 9", "1\n7 3\n0 4 2 6 7 1 3", "2\n3 2\n10 0 10\n4 1\n5 0 5 10", "4\n2 1\n1 2\n2 1\n3 4\n3 2\n0 5 10\n4 2\n1 3 5 7", "1\n6 1\n0 0 0 0 1 0", "3\n9 4\n2 2 2 2 2 2 2 2 19\n8 7\n9 5 1 2 4 6 8 11\n10 3\n5 8 2 6 3 7 4 9 1 6", "2\n5 4\n7 8 4 3 2\n3 1\n1000000000 0 500000000", "1\n12 5\n0 0 0 0 1000 0 0 0 0 0 0 0", "3\n6 3\n1 0 2 0 4 0\n5 2\n0 0 0 0 15\n4 1\n7 8 2 6", "1\n10 4\n100 200 300 400 500 600 700 800 900 1000"]}
{"name": "p02811 AtCoder Beginner Contest 150 - 500 Yen Coins", "description": "Constraints\n\n* 1 <= K <= 100\n* 1 <= X <= 10^5\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nK X", "testcase": ["1 50000", "20 85000", "99 657", "55 12345", "2 99999", "75 76543", "100 100000", "36 36580", "42 42000", "18 18000"]}
{"name": "p03293 AtCoder Beginner Contest 103 - String Rotation", "description": "Constraints\n\n* 2 <= |S| <= 100\n* |S| = |T|\n* S and T consist of lowercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS\nT", "testcase": ["abcd\nbcda", "hello\nohell", "programming\ngrammingpro", "rotation\ntationro", "challenge\nallengech", "example\nampleex", "testcase\nestcaset", "twowords\nowordstw", "shuffle\nffleshu", "keyboard\noardkeyb"]}
{"name": "999_A. Mishka and Contest", "description": "Input\n\nThe first line of input contains two integers n and k (1 <= n, k <= 100) --- the number of problems in the contest and Mishka's problem-solving skill.\n\nThe second line of input contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 100), where a_i is the difficulty of the i-th problem. The problems are given in order from the leftmost to the rightmost in the list.", "testcase": ["5 3\n4 2 7 1 8", "10 10\n10 20 30 40 50 60 70 80 90 100", "2 1\n1 1", "8 4\n3 1 9 12 5 4 8 6", "7 7\n14 15 16 21 22 23 24", "3 2\n2 5 3", "6 5\n10 11 12 13 14 15", "4 4\n9 9 9 9", "9 8\n17 11 25 14 23 19 6 8 27", "1 1\n50"]}
{"name": "1114_A. Got Any Grapes?", "description": "Input\n\nThe first line contains three integers x, y and z (1 <= x, y, z <= 10^5) --- the number of grapes Andrew, Dmitry and Michal want to eat.\n\nThe second line contains three integers a, b, c (1 <= a, b, c <= 10^5) --- the number of green, purple and black grapes in the box.", "testcase": ["3 4 5\n6 7 8", "2 2 2\n3 3 3", "10000 20000 30000\n15000 25000 35000", "99999 88888 77777\n100000 90000 80000", "50000 50000 50000\n50000 50000 50000", "1 1 1\n100000 100000 100000", "43534 23423 64565\n84567 32454 23423", "87654 54321 12345\n98765 67890 54321", "22222 33333 44444\n55555 66666 77777", "10203 30405 50607\n20708 40902 60301"]}
{"name": "1393_A. Rainbow Dash, Fluttershy and Chess Coloring", "description": "Input\n\nThe first line contains a single integer T (1 <= T <= 100): the number of grids of the games. \n\nEach of the next T lines contains a single integer n (1 <= n <= 10^9): the size of the side of the grid of the game.", "testcase": ["1\n100", "2\n1\n1000000000", "3\n999\n500\n250", "4\n10\n20\n30\n40", "5\n87654321\n123456789\n987654321\n123\n4321", "10\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1", "3\n222222222\n333333333\n444444444", "1\n9", "7\n54321\n12345\n67890\n24680\n13579\n86420\n100000", "2\n500000000\n500000000"]}
{"name": "1249_B1. Books Exchange (easy version)", "description": "Input\n\nThe first line of the input contains one integer q (1 <= q <= 200) --- the number of queries. Then q queries follow.\n\nThe first line of the query contains one integer n (1 <= n <= 200) --- the number of kids in the query. The second line of the query contains n integers p_1, p_2, ..., p_n (1 <= p_i <= n, all p_i are distinct, i.e. p is a permutation), where p_i is the kid which will get the book of the i-th kid.", "testcase": ["2\n4\n2 1 4 3\n5\n5 3 1 4 2", "1\n6\n6 4 2 5 3 1", "1\n7\n1 2 3 4 5 6 7", "3\n2\n2 1\n3\n1 3 2\n4\n4 1 2 3", "1\n10\n10 9 8 7 6 5 4 3 2 1", "1\n8\n3 5 6 1 7 8 2 4", "1\n15\n2 5 8 6 4 1 14 11 3 7 10 9 15 13 12", "2\n3\n3 1 2\n9\n9 1 2 3 4 5 6 7 8", "1\n12\n8 4 1 10 5 12 6 3 11 7 2 9", "1\n20\n4 2 5 9 1 16 8 12 7 14 17 10 3 13 18 19 6 20 11 15"]}
{"name": "1288_A. Deadline", "description": "Input\n\nThe first line contains a single integer T (1 <= T <= 50) --- the number of test cases.\n\nThe next T lines contain test cases -- one per line. Each line contains two integers n and d (1 <= n <= 10^9, 1 <= d <= 10^9) --- the number of days before the deadline and the number of days the program runs.", "testcase": ["1\n3 2", "1\n10 5", "1\n1000000000 500000000", "1\n7 3", "1\n999999999 999999998", "1\n123456789 98765432", "1\n500000000 250000000", "1\n800000000 400000000", "1\n350000000 175000000", "1\n234567890 123456789"]}
{"name": "p02594 AtCoder Beginner Contest 174 - Air Conditioner", "description": "Constraints\n\n* -40 <= X <= 40\n* X is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX", "testcase": ["12", "0", "-5", "38", "-40", "27", "-15", "11", "2", "40"]}
{"name": "p03105 AtCoder Beginner Contest 120 - Favorite Sound", "description": "Constraints\n\n* All values in input are integers.\n* 1 <= A, B, C <= 100\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B C", "testcase": ["2 3 4", "1 1 1", "5 10 15", "6 14 25", "22 33 44", "55 60 80", "77 50 30", "100 100 100", "88 76 54", "99 47 83"]}
{"name": "1213_B. Bad Prices", "description": "Input\n\nThe first line contains an integer t (1 <= t <= 10000) --- the number of sets of input data in the test. Input data sets must be processed independently, one after another.\n\nEach input data set consists of two lines. The first line contains an integer n (1 <= n <= 150000) --- the number of days. The second line contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 10^6), where a_i is the price on the i-th day.\n\nIt is guaranteed that the sum of n over all data sets in the test does not exceed 150000.", "testcase": ["1\n5\n1 2 3 4 5", "3\n2\n1000000 1000000\n3\n100 200 300\n5\n999999 123456 234567 345678 456789", "2\n10\n10 20 30 40 50 60 70 80 90 100\n4\n1234 5678 91011 121314", "1\n7\n100000 200000 300000 400000 500000 600000 700000", "2\n3\n45000 45001 45002\n8\n210000 220000 230000 240000 250000 260000 270000 280000", "1\n6\n100000 900000 800000 700000 600000 500000", "4\n1\n500000\n1\n400000\n1\n300000\n1\n200000", "2\n4\n123456 789012 345678 901234\n2\n100000 200000", "3\n3\n1024 2048 4096\n5\n1 1 1 1 1\n2\n999999 1000000", "1\n10\n95000 96000 97000 98000 99000 100000 101000 102000 103000 104000"]}
{"name": "p02628 AtCoder Beginner Contest 171 - Mix Juice", "description": "Constraints\n\n* 1 <= K <= N <= 1000\n* 1 <= p_i <= 1000\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\np_1 p_2 ... p_N", "testcase": ["3 2\n1 2 3", "4 1\n1000 500 250 125", "5 3\n10 20 30 40 50", "6 4\n123 456 789 101 112 131", "7 3\n7 8 9 10 11 12 13", "10 10\n1 1 1 1 1 1 1 1 1 1", "8 5\n56 78 87 65 54 32 21 34", "9 7\n14 15 16 17 18 19 20 21 22", "4 2\n800 700 900 600", "7 2\n300 400 250 350 200 450 500"]}
{"name": "1257_B. Magic Stick", "description": "Input\n\nThe first line contains single integer T (1 <= T <= 10^4) --- the number of test cases. Each test case consists of two lines.\n\nThe first line of each test case contains two integers x and y (1 <= x, y <= 10^9) --- the current number and the number that Petya wants to get.", "testcase": ["1\n3 1000000000", "1\n999999999 1000000000", "1\n500000000 999999999", "1\n100000000 123456789", "1\n250000000 750000000", "1\n10000000 900000000", "1\n9999999 888888888", "1\n12345678 876543210", "1\n987654321 1000000000", "1\n1 2"]}
{"name": "p02397 Swapping Two Numbers", "description": "Constraints\n\n* 0 <= x, y <= 10000\n* the number of datasets <= 3000\n\nInput\n\nThe input consists of multiple datasets. Each dataset consists of two integers x and y separated by a single space.\n\nThe input ends with two 0 (when both x and y are zero). Your program should not process for these terminal symbols.", "testcase": ["123 456", "10000 9999", "780 330", "4567 123", "9999 8888", "894 5678", "2345 6789", "0 1", "100 10000", "12 3456"]}
{"name": "1144_B. Parity Alternated Deletions", "description": "Input\n\nThe first line of the input contains one integer n (1 <= n <= 2000) --- the number of elements of a.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (0 <= a_i <= 10^6), where a_i is the i-th element of a.", "testcase": ["1\n0", "2\n1000000 0", "3\n500000 500000 500000", "4\n0 1 2 3", "5\n999999 999998 999997 999996 999995", "6\n1 2 3 4 5 6", "10\n0 10 20 30 40 50 60 70 80 90", "7\n100 200 300 400 500 600 700", "8\n888888 777777 666666 555555 444444 333333 222222 111111", "9\n9 8 7 6 5 4 3 2 1"]}
{"name": "p02724 AtCoder Beginner Contest 160 - Golden Coins", "description": "Constraints\n\n* 0 <= X <= 10^9\n* X is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX", "testcase": ["0", "123", "999999999", "847364", "2147483647", "10", "505050", "987654321", "42", "999"]}
{"name": "p03592 CODE FESTIVAL 2017 qual A - fLIP", "description": "Constraints\n\n* 1 <= N,M <= 1000\n* 0 <= K <= NM\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M K", "testcase": ["1 1 0", "2 2 4", "1000 1000 1000000", "100 200 15000", "500 500 250000", "300 400 0", "800 600 480000", "50 50 2500", "999 999 998001", "1000 1 1000"]}
{"name": "1230_B. Ania and Minimizing", "description": "Input\n\nThe first line contains two integers n and k (1 <= n <= 200 000, 0 <= k <= n) --- the number of digits in the decimal representation of S and the maximum allowed number of changed digits.\n\nThe second line contains the integer S. It's guaranteed that S has exactly n digits and doesn't contain any leading zeroes.", "testcase": ["2 1\n12", "3 2\n345", "4 0\n9876", "5 3\n12345", "1 0\n9", "6 2\n112233", "7 4\n7654321", "8 1\n87654321", "9 5\n123456789", "10 10\n1029384756"]}
{"name": "p02417 Counting Characters", "description": "Constraints\n\n* The number of characters in the sentence < 1200\n\nInput\n\nA sentence in English is given in several lines.", "testcase": ["Hello, this is a single line sentence without any special complexity or challenges.", "This sentence\nhas a newline character.\nIt is split\nacross several lines.", "Here's a sentence with a variety of punctuation marks: commas, periods, semicolons; and colons: all included!", "Short.", "Despite the seeming complexity of this particular example, it remains comfortably under the maximum character limit prescribed by the constraints, and also it spans multiple lines\nwhich is allowed by the given input specifications.", "1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890.", "Words, words, words. Sentences can be made of many words, or just a few; what really matters is not the number of words, but the message they convey.", "Lists can be included in sentences as well, such as:\n- Apples\n- Bananas\n- Cherries\nThis is especially useful for readability!", "Can a sentence be a question? Of course!\nWhat about exclamatory sentences? Absolutely!", "Talking about code in a sentence should be okay, as long as it's not actual code, for example: 'When writing in Python, don't forget to define your functions clearly.'"]}
{"name": "598_A. Tricky Sum", "description": "Input\n\nThe first line of the input contains a single integer t (1 <= t <= 100) --- the number of values of n to be processed.\n\nEach of next t lines contains a single integer n (1 <= n <= 10^9).", "testcase": ["1\n1", "2\n123\n456789", "4\n87654321\n123456789\n987654321\n12345678", "1"]}
{"name": "p03219 AtCoder Beginner Contest 113 - Discount Fare", "description": "Constraints\n\n* 1 <= X,Y <= 100\n* Y is an even number.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX Y", "testcase": ["1 2", "5 8", "20 22", "33 66", "99 98", "13 14", "42 50", "15 20", "7 16", "88 100"]}
{"name": "p03327 AtCoder Beginner Contest 099 - ABD", "description": "Constraints\n\n* 1 <= N <= 1998\n* N is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "testcase": ["1", "25", "999", "1500", "1998", "42", "127", "1984", "666", "1313"]}
{"name": "p03761 AtCoder Beginner Contest 058 - Dubious Document", "description": "Constraints\n\n* 1 <= n <= 50\n* 1 <= |S_i| <= 50 for every i = 1, ..., n.\n* S_i consists of lowercase English letters (`a` - `z`) for every i = 1, ..., n.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nn\nS_1\n...\nS_n", "testcase": ["3\nabc\ndef\nghi", "1\nz", "2\na\nbc", "5\nabcde\nfghij\nklmno\npqrst\nuvwxyz", "4\na\nbb\nccc\ndddd", "6\ng\nhh\niii\njjjj\nkkkkk\nllllll", "7\nm\nnn\nooo\npppp\nqqqqq\nrrrrrr\nsssssss", "3\nxyz\nab\nqwert", "8\nabac\nbdecf\ncdade\ndeafb\nefacg\nfeggdh\nghie\nhi", "10\ng\nt\na\nb\nr\nl\np\ne\nk\nm"]}
{"name": "746_A. Compote", "description": "Input\n\nThe first line contains the positive integer a (1 <= a <= 1000) --- the number of lemons Nikolay has. \n\nThe second line contains the positive integer b (1 <= b <= 1000) --- the number of apples Nikolay has. \n\nThe third line contains the positive integer c (1 <= c <= 1000) --- the number of pears Nikolay has.", "testcase": ["2\n3\n1", "500\n600\n10", "1000\n1\n500", "1\n1000\n999", "123\n456\n789", "250\n250\n250", "7\n8\n9", "999\n999\n999", "100\n200\n300", "1\n1\n1"]}
{"name": "766_B. Mahmoud and a Triangle", "description": "Input\n\nThe first line contains single integer n (3 <= n <= 10^5) --- the number of line segments Mahmoud has.\n\nThe second line contains n integers a1, a2, ..., an (1 <= ai <= 10^9) --- the lengths of line segments Mahmoud has.", "testcase": ["5\n1 2 3 4 5", "3\n10 20 30", "6\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000", "4\n10 10 10 10", "7\n1 2 3 4 5 6 100", "3\n999999997 999999998 999999999", "5\n100 200 300 400 500", "8\n1 8 27 64 125 216 343 512", "10\n3 1 4 1 5 9 2 6 5 3", "3\n500000000 500000000 500000000"]}
{"name": "p02898 AtCoder Beginner Contest 142 - Roller Coaster", "description": "Constraints\n\n* 1 <= N <= 10^5\n* 1 <= K <= 500\n* 1 <= h_i <= 500\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nh_1 h_2 ... h_N", "testcase": ["5 3\n1 2 3 4 5", "10 10\n10 10 10 10 10 10 10 10 10 10", "100 50\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100", "1 1\n1", "20 7\n13 24 32 45 56 43 21 76 89 90 100 120 130 145 156 170 183 194 200 210", "7 2\n1 3 5 7 9 11 13", "50 25\n250 240 230 220 210 200 190 180 170 160 150 140 130 120 110 100 90 80 70 60 50 40 30 20 10 9 8 7 6 5 4 3 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19", "6 1\n100 200 300 400 500 400", "100000 500\n", "5 5\n5 5 5 5 5"]}
{"name": "621_A. Wet Shark and Odd and Even", "description": "Input\n\nThe first line of the input contains one integer, n (1 <= n <= 100 000). The next line contains n space separated integers given to Wet Shark. Each of these integers is in range from 1 to 10^9, inclusive.", "testcase": ["1\n1", "2\n1000000000 500000000", "5\n1 2 3 4 5", "3\n10 100 1000", "10\n1 1 1 1 1 1 1 1 1 1", "7\n100000000 10000000 1000000 100000 10000 1000 100", "4\n999999999 888888888 777777777 666666666", "6\n123456789 987654321 111111111 222222222 333333333 444444444", "8\n99999999 88888888 77777777 66666666 55555555 44444444 33333333 22222222", "9\n10000000 20000000 30000000 40000000 50000000 60000000 70000000 80000000 90000000"]}
{"name": "1166_A. Silent Classroom", "description": "Input\n\nThe first line contains a single integer n (1<= n <= 100) --- the number of students.\n\nAfter this n lines follow.\n\nThe i-th line contains the name of the i-th student.\n\nIt is guaranteed each name is a string of lowercase English letters of length at most 20. Note that multiple students may share the same name.", "testcase": ["3\nalice\nbob\ncarol", "1\nalice", "2\nbob\nbob", "4\neve\nalice\nmike\njohn", "5\nanna\nanna\nlucas\nlucas\nanna", "6\njake\nliam\nnoah\nemma\nolivia\nava", "7\nmia\nmason\njacob\nwilliam\nethan\njames\nalexander", "2\nsophia\nsophia", "8\ncharlotte\namelia\nisabella\nmila\nharper\nluna\nlayla\nsophie", "10\nzoe\nriley\navery\naubrey\ncamila\nhannah\nscarlett\nnora\nstella\nemily"]}
{"name": "p02801 AtCoder Beginner Contest 151 - Next Alphabet", "description": "Constraints\n\n* C is a lowercase English letter that is not `z`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nC", "testcase": ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]}
{"name": "937_A. Olympiad", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 100) --- the number of participants.\n\nThe next line contains a sequence of n integers a1, a2, ..., an (0 <= ai <= 600) --- participants' scores.\n\nIt's guaranteed that at least one participant has non-zero score.", "testcase": ["3\n100 200 300", "1\n450", "5\n0 0 1 0 0", "4\n600 600 600 600", "10\n0 50 100 150 200 250 300 350 400 450", "7\n10 20 30 40 50 60 70", "2\n300 301", "8\n1 2 3 4 5 6 7 8", "6\n0 100 0 200 0 300", "9\n599 598 1 0 0 0 0 0 0"]}
{"name": "p03307 AtCoder Beginner Contest 102 - Multiple of 2 and N", "description": "Constraints\n\n* 1 <= N <= 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "testcase": ["1", "2", "10", "100", "9999999", "123456789", "987654321", "1000000000", "505050505", "87654321"]}
{"name": "1324_D. Pair of Topics", "description": "Input\n\nThe first line of the input contains one integer n (2 <= n <= 2 * 10^5) --- the number of topics.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 10^9), where a_i is the interestingness of the i-th topic for the teacher.\n\nThe third line of the input contains n integers b_1, b_2, ..., b_n (1 <= b_i <= 10^9), where b_i is the interestingness of the i-th topic for the students.", "testcase": ["2\n1 10\n10 1", "3\n1000000000 1000000000 1000000000\n1 1 1", "5\n1 2 3 4 5\n5 4 3 2 1", "4\n999999999 999999999 999999999 999999999\n888888888 888888888 888888888 888888888", "6\n10 20 30 40 50 60\n60 50 40 30 20 10", "2\n345678910 987654321\n123456789 987654321", "7\n1 1 2 3 5 8 13\n21 34 55 89 144 233 377", "8\n2147483647 2147483647 2147483647 2147483647 2147483647 2147483647 2147483647 2147483647\n1 2 3 4 5 6 7 8", "9\n9 8 7 6 5 4 3 2 1\n1 2 3 4 5 6 7 8 9", "10\n10000000 20000000 30000000 40000000 50000000 60000000 70000000 80000000 90000000 100000000\n100000000 90000000 80000000 70000000 60000000 50000000 40000000 30000000 20000000 10000000"]}
{"name": "p03346 AtCoder Grand Contest 024 - Backfront", "description": "Constraints\n\n* 1 <= N <= 2* 10^5\n* (P_1,P_2,...,P_N) is a permutation of (1,2,...,N).\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nP_1\n:\nP_N", "testcase": ["3\n1\n2\n3", "4\n4\n3\n2\n1", "5\n3\n5\n2\n4\n1", "2\n2\n1", "6\n6\n4\n2\n5\n3\n1", "7\n1\n3\n4\n2\n6\n7\n5", "3\n2\n3\n1", "5\n2\n1\n4\n5\n3", "6\n6\n1\n5\n3\n4\n2", "3\n3\n1\n2"]}
{"name": "1110_A. Parity", "description": "Input\n\nThe first line contains two integers b and k (2<= b<= 100, 1<= k<= 10^5) --- the base of the number and the number of digits.\n\nThe second line contains k integers a_1, a_2, ..., a_k (0<= a_i < b) --- the digits of n.\n\nThe representation of n contains no unnecessary leading zero. That is, a_1 can be equal to 0 only if k = 1.", "testcase": ["2 3\n1 0 1", "10 1\n7", "5 5\n1 2 3 4 0", "100 4\n99 1 45 67", "15 6\n14 8 7 1 1 2", "3 10\n2 1 0 2 1 0 2 1 0 2", "7 4\n6 3 2 5", "8 9\n7 4 2 1 0 6 5 7 3", "20 3\n17 4 3", "23 5\n22 7 6 0 1"]}
{"name": "439_A. Devu, the Singer and Churu, the Joker", "description": "Input\n\nThe first line contains two space separated integers n, d (1 <= n <= 100; 1 <= d <= 10000). The second line contains n space-separated integers: t1, t2, ..., tn (1 <= ti <= 100).", "testcase": ["3 100\n1 2 3", "5 5000\n10 40 30 50 20", "1 10\n5", "4 300\n75 25 100 50", "7 1234\n1 2 3 4 5 6 7", "2 9999\n99 100", "6 500\n10 10 10 10 10 10", "8 8000\n8 88 888 1 2 3 4 5", "10 1000\n5 10 15 20 25 30 35 40 45 50", "9 2345\n11 22 33 44 55 66 77 88 99"]}
{"name": "903_A. Hungry Student Problem", "description": "Input\n\nThe first line contains one integer n (1 <= n <= 100) --- the number of testcases.\n\nThe i-th of the following n lines contains one integer xi (1 <= xi <= 100) --- the number of chicken chunks Ivan wants to eat.", "testcase": ["10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10", "10\n20\n25\n30\n35\n40\n45\n50\n55\n60\n65", "10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20", "10\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30", "10\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40", "10\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50", "10\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60", "10\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70", "10\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80", "10\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90"]}
{"name": "950_A. Left-handers, Right-handers and Ambidexters", "description": "Input\n\nThe only line contains three integers l, r and a (0 <= l, r, a <= 100) --- the number of left-handers, the number of right-handers and the number of ambidexters at the training.", "testcase": ["0 0 0", "10 20 5", "5 5 10", "15 15 15", "0 50 50", "33 33 33", "100 100 100", "42 24 6", "80 20 0", "99 0 1"]}
{"name": "p03125 AtCoder Beginner Contest 118 - B +/- A", "description": "Constraints\n\n* All values in input are integers.\n* 1 <= A <= B <= 20\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B", "testcase": ["1 1", "2 5", "3 10", "4 4", "5 15", "6 20", "7 7", "8 19", "9 9", "10 20"]}
{"name": "p03470 AtCoder Beginner Contest 085 - Kagami Mochi", "description": "Constraints\n\n* 1 <= N <= 100\n* 1 <= d_i <= 100\n* All input values are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nd_1\n:\nd_N", "testcase": ["3\n1\n50\n100", "5\n20\n1\n35\n99\n2", "1\n1", "7\n15\n15\n15\n15\n15\n15\n15", "2\n100\n100", "4\n5\n10\n30\n70", "6\n1\n2\n3\n4\n5\n6", "10\n11\n22\n33\n44\n55\n66\n77\n88\n99\n10", "8\n8\n16\n24\n32\n40\n48\n56\n64", "9\n9\n18\n27\n36\n45\n54\n63\n72\n81"]}
{"name": "p03369 AtCoder Beginner Contest 095 - Something on It", "description": "Constraints\n\n* S is a string of length 3.\n* Each character in S is `o` or `x`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "testcase": ["ooo", "oox", "oxo", "oxx", "xoo", "xox", "xxo", "xxx", "xoo", "oxo"]}
{"name": "p02976 AtCoder Grand Contest 035 - Even Degrees", "description": "Constraints\n\n* 2 <= N <= 10^5\n* N-1 <= M <= 10^5\n* 1 <= A_i,B_i <= N (1<= i<= M)\n* The given graph is simple and connected.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nA_1 B_1\n:\nA_M B_M", "testcase": ["3 2\n1 2\n2 3", "4 3\n1 2\n2 3\n3 4", "5 4\n1 2\n2 3\n3 4\n4 5", "6 5\n1 2\n2 3\n3 4\n4 5\n5 6", "5 5\n1 2\n2 3\n3 4\n4 5\n2 5", "7 6\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7", "10 9\n1 2\n2 3\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n3 10", "4 4\n1 2\n2 3\n3 4\n1 4", "8 7\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n4 8", "10 10\n1 2\n3 4\n5 6\n7 8\n9 10\n2 3\n4 5\n6 7\n8 9\n10 1"]}
{"name": "p03569 CODE FESTIVAL 2017 qual C - Inserting 'x'", "description": "Constraints\n\n* 1 <= |s| <= 10^5\n* s consists of lowercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\ns", "testcase": ["a", "bcdefghijklmnopqrstuvwxyz", "example", "longtestcasetochecktheupperbound", "simpletest", "short", "mediumlength", "lowercaseletters", "anotherexampletestcase", "fulllengthtestcaseaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"]}
{"name": "p03288 AtCoder Beginner Contest 104 - Rated for Me", "description": "Constraints\n\n* 0 <= R <= 4208\n* R is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nR", "testcase": ["0", "4208", "2134", "1", "2048", "1987", "3500", "123", "4096", "3199"]}
{"name": "p02680 AtCoder Beginner Contest 168 - . (Single Dot)", "description": "Constraints\n\n* All values in input are integers between -10^9 and 10^9 (inclusive).\n* 1 <= N, M <= 1000\n* A_i < B_i\\ (1 <= i <= N)\n* E_j < F_j\\ (1 <= j <= M)\n* The point (0, 0) does not lie on any of the given segments.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nA_1 B_1 C_1\n:\nA_N B_N C_N\nD_1 E_1 F_1\n:\nD_M E_M F_M", "testcase": ["2 2\n1 3 5\n-2 4 5\n3 4 3\n0 1 2", "1 1\n-999999999 999999999 -5\n1000000 -100000 1", "3 1\n-10 10 -20\n10 20 30\n-30 -20 15\n-5 5 10", "2 3\n1 2 3\n3 4 -3\n-1 1 0\n2 3 2\n-3 -2 1", "4 2\n100000 200000 150000\n-100000 -50000 0\n50000 150000 100000\n600000 700000 650000\n1 2 3\n2 3 4", "5 2\n-1 -2 -3\n2 3 4\n5 6 7\n8 9 10\n11 12 13\n-3 -2 -1\n3 5 1", "1 3\n-1000000 1000000 500000\n0 3 2\n-2 -1 1\n1 2 -1", "3 3\n0 10 20\n-20 0 15\n10 20 -25\n-3 3 6\n2 4 8\n-10 -5 -7", "2 1\n100 200 150\n-200 -100 -150\n0 2 1", "5 5\n5 6 7\n4 5 9\n-9 -8 1\n-2 -1 2\n-4 -3 3\n-5 -3 -2\n0 1 2\n1 2 3\n2 3 4\n3 4 5"]}
{"name": "p02271 Exhaustive Search", "description": "Constraints\n\n* n <= 20\n* q <= 200\n* 1 <= elements in A <= 2000\n* 1 <= Mi <= 2000\n\nInput\n\nIn the first line n is given. In the second line, n integers are given. In the third line q is given. Then, in the fourth line, q integers (Mi) are given.", "testcase": ["5\n[187, 234, 456, 789, 1234]\n3\n[234, 789, 1235]", "10\n[80, 1, 999, 500, 1500, 675, 200, 432, 987, 1230]\n5\n[2000, 987, 123, 1501, 432]", "20\n[12, 53, 673, 198, 1987, 1390, 145, 76, 364, 2000, 22, 932, 783, 287, 1111, 1456, 1678, 1999, 345, 1000]\n10\n[1999, 673, 783, 364, 22, 198, 932, 1000, 53, 287]", "8\n[39, 435, 802, 1023, 12, 200, 150, 1986]\n2\n[1000, 435]", "15\n[2000, 1020, 50, 678, 999, 1500, 775, 34, 789, 250, 420, 1600, 123, 390, 1980]\n6\n[1020, 678, 50, 999, 2000, 1980]", "7\n[1345, 259, 476, 1995, 986, 15, 275]\n4\n[986, 1345, 259, 15]", "1\n[645]\n1\n[645]", "12\n[123, 456, 789, 1011, 1213, 1415, 1617, 1820, 1001, 202, 303, 404]\n4\n[1001, 1011, 789, 202]", "16\n[2000, 1984, 1678, 1239, 1110, 999, 890, 789, 678, 567, 456, 345, 234, 123, 50, 10]\n5\n[1984, 1110, 50, 123, 10]", "2\n[1, 2000]\n2\n[1, 2000]"]}
{"name": "1016_A. Death Note", "description": "Input\n\nThe first line of the input contains two integers n, m (1 <= n <= 2 * 10^5, 1 <= m <= 10^9) --- the number of days you will write names in the notebook and the number of names which can be written on each page of the notebook.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 10^9), where a_i means the number of names you will write in the notebook during the i-th day.", "testcase": ["2 100\n50 50", "3 1000\n300 300 400", "5 500\n100 200 100 50 50", "1 1000000\n999999", "4 250\n10 20 30 190", "6 300000\n100000 100000 50000 25000 20000 10000", "8 12345\n123 456 789 1011 1213 1415 1617 1819", "2 1000000000\n999999999 1", "7 777777\n111111 222222 333333 44444 55555 66666 77777", "3 333\n333 333 333"]}
{"name": "1391_C. Cyclic Permutations ", "description": "Input\n\nThe first and only line contains a single integer n (3 <= n <= 10^6).", "testcase": ["3", "999999", "123456", "1000000", "98765", "4321", "9999", "500000", "745632", "888888"]}
{"name": "p04019 AtCoder Grand Contest 003 - Wanna go back home", "description": "Constraints\n\n* 1 <= | S | <= 1000\n* S consists of the letters `N`, `W`, `S`, `E`.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nS", "testcase": ["N", "NEESESWNW", "NNNNNNNNNNNNNNNNNNNN", "ESSSSSWWWWNNNNEEEE", "WWWWWWWWWWWWWWWWWWWWW", "ENEWNENEWNENWNESW", "SSSSSSSSSSSEENNNNNWWWW", "E", "SWNWSESWNWWENWE", "SSEENWNW"]}
{"name": "p03338 AtCoder Beginner Contest 098 - Cut and Count", "description": "Constraints\n\n* 2 <= N <= 100\n* |S| = N\n* S consists of lowercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nS", "testcase": ["2\nab", "5\nhello", "10\nabcdefghij", "8\nrainbowx", "6\nplanet", "4\nmood", "7\nfriends", "3\nsky", "9\nchocolate", "100\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwx"]}
{"name": "p03370 AtCoder Beginner Contest 095 - Bitter Alchemy", "description": "Constraints\n\n* 2 <= N <= 100\n* 1 <= m_i <= 1000\n* m_1 + m_2 + ... + m_N <= X <= 10^5\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN X\nm_1\nm_2\n:\nm_N", "testcase": ["3 100\n10\n20\n30", "2 200\n50\n150", "4 300\n40\n60\n80\n100", "5 1000\n200\n200\n200\n200\n200", "10 5000\n100\n200\n300\n400\n500\n600\n700\n800\n900\n1000", "8 800\n100\n90\n80\n70\n60\n50\n40\n30", "6 600\n99\n99\n99\n99\n99\n105", "9 445\n49\n48\n47\n46\n45\n44\n43\n42\n41", "7 1234\n150\n140\n130\n120\n110\n100\n90", "4 987\n250\n245\n244\n248"]}
{"name": "1060_A. Phone Numbers", "description": "Input\n\nThe first line contains an integer n --- the number of cards with digits that you have (1 <= n <= 100).\n\nThe second line contains a string of n digits (characters \"0\", \"1\", ..., \"9\") s_1, s_2, ..., s_n. The string will not contain any other characters, such as leading or trailing spaces.", "testcase": [""]}
{"name": "1311_C. Perform the Combo", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 10^4) --- the number of test cases.\n\nThen t test cases follow.\n\nThe first line of each test case contains two integers n and m (2 <= n <= 2 * 10^5, 1 <= m <= 2 * 10^5) --- the length of s and the number of tries correspondingly.\n\nThe second line of each test case contains the string s consisting of n lowercase Latin letters.\n\nThe third line of each test case contains m integers p_1, p_2, ..., p_m (1 <= p_i < n) --- the number of characters pressed right during the i-th try.\n\nIt is guaranteed that the sum of n and the sum of m both does not exceed 2 * 10^5 (sum n <= 2 * 10^5, sum m <= 2 * 10^5).\n\nIt is guaranteed that the answer for each letter does not exceed 2 * 10^9.", "testcase": ["1\n2 1\nab\n1", "3\n3 2\nabc\n1 2\n4 1\nabcd\n3\n5 3\nabcde\n1 2 4", "1\n5 1\nabcde\n4", "2\n6 2\nfedcba\n2 5\n7 3\nabcdefg\n1 3 6", "1\n8 3\nhgfedcba\n2 3 7", "4\n3 1\nxyz\n1\n4 2\nabcd\n1 3\n5 1\nqwert\n2\n6 3\nuvwxyz\n1 5 6", "1\n9 2\nabcdefghi\n3 7", "2\n4 1\nabab\n2\n10 1\naabbaabbab\n9", "1\n7 4\ncdefghi\n1 3 5 6", "1\n10 3\nzxcvbnmasd\n2 4 8"]}
{"name": "551_A. GukiZ and Contest", "description": "Input\n\nThe first line contains integer n (1 <= n <= 2000), number of GukiZ's students. \n\nThe second line contains n numbers a1, a2, ... an (1 <= ai <= 2000) where ai is the rating of i-th student (1 <= i <= n).", "testcase": ["1\n1", "3\n1234 567 89", "2\n2000 1999", "4\n1 2 3 4", "5\n432 123 555 666 111", "6\n1001 2000 1500 1501 1600 1700", "7\n2000 1999 1998 1997 1996 1995 1994", "8\n10 20 30 40 50 60 70 80", "10\n200 300 400 500 600 700 800 900 1000 1100", "2\n1111 1110"]}
{"name": "p03821 AtCoder Grand Contest 009 - Multiple Array", "description": "Constraints\n\n* All input values are integers.\n* 1 <= N <= 10^5\n* 0 <= A_i <= 10^9(1 <= i <= N)\n* 1 <= B_i <= 10^9(1 <= i <= N)\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN\nA_1 B_1\n:\nA_N B_N", "testcase": ["4\n2 3\n5 6\n1 7\n9 8", "1\n0 1000000000", "3\n234 987654321\n678905 123456789\n100000000 98765432", "5\n4321 1234\n56789 9876\n12345 67890\n98765 43210\n11111 22222", "6\n10000000 99999999\n88888888 11111111\n22222222 33333333\n44444444 55555555\n66666666 77777777\n88888888 99999999", "10\n10 20\n20 30\n30 40\n40 50\n50 60\n60 70\n70 80\n80 90\n90 100\n100 110", "2\n500000000 600000000\n700000000 800000000", "8\n1 100000000\n2 200000000\n3 300000000\n4 400000000\n5 500000000\n6 600000000\n7 700000000\n8 800000000", "7\n99999999 100000000\n88888888 900000000\n77777777 800000000\n66666666 700000000\n55555555 600000000\n44444444 500000000\n33333333 400000000", "3\n100000000 1000000000\n200000000 900000000\n300000000 800000000"]}
{"name": "p03168 Educational DP Contest - Coins", "description": "Constraints\n\n* N is an odd number.\n* 1 <= N <= 2999\n* p_i is a real number and has two decimal places.\n* 0 < p_i < 1\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\np_1 p_2 ... p_N", "testcase": ["3\n0.25 0.33 0.50", "5\n0.10 0.20 0.30 0.40 0.50", "7\n0.15 0.25 0.35 0.45 0.55 0.65 0.75", "1\n0.88", "11\n0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09 0.10 0.11", "9\n0.22 0.44 0.66 0.88 0.21 0.43 0.65 0.87 0.12", "3\n0.68 0.72 0.99", "5\n0.12 0.34 0.56 0.78 0.90", "13\n0.45 0.46 0.47 0.48 0.49 0.50 0.51 0.52 0.53 0.54 0.55 0.56 0.57", "7\n0.31 0.32 0.33 0.34 0.35 0.36 0.37"]}
{"name": "p03003 AtCoder Beginner Contest 130 - Common Subsequence", "description": "Constraints\n\n* 1 <= N, M <= 2 * 10^3\n* The length of S is N.\n* The length of T is M.\n* 1 <= S_i, T_i <= 10^5\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nS_1 S_2 ... S_{N-1} S_{N}\nT_1 T_2 ... T_{M-1} T_{M}", "testcase": ["2 3\n1 100\n1000 10000 100000", "1 1\n54321\n12345", "3 2\n123 234 345\n6789 9876", "4 4\n444 555 666 777\n1234 2345 3456 4567", "5 5\n1000 2000 3000 4000 5000\n6000 7000 8000 9000 10000", "2 2\n1 1\n1 1", "6 3\n10 20 30 40 50 60\n70 80 90", "10 10\n100 200 300 400 500 600 700 800 900 1000\n2000 3000 4000 5000 6000 7000 8000 9000 10000 11000", "7 8\n7777 8888 9999 1010 2020 3030 4040\n5050 6060 7070 8080 9090 1001 2002 3003", "8 6\n1234 2345 3456 4567 5678 6789 7890 8901\n9012 10123 11111 12121 13131 14141"]}
{"name": "1054_A. Elevator or Stairs?", "description": "Input\n\nThe only line contains six integers x, y, z, t_1, t_2, t_3 (1 <= x, y, z, t_1, t_2, t_3 <= 1000) --- the floor Masha is at, the floor Masha wants to get to, the floor the elevator is located on, the time it takes Masha to pass between two floors by stairs, the time it takes the elevator to pass between two floors and the time it takes for the elevator to close or open the doors.\n\nIt is guaranteed that x != y.", "testcase": ["3 10 5 2 1 3", "1 1000 500 10 2 8", "100 200 150 3 5 4", "250 750 600 7 2 6", "999 1 500 4 3 3", "500 400 300 5 1 2", "42 24 13 8 2 5", "1000 1 100 10 10 10", "2 999 333 1 1 1", "123 321 213 6 5 7"]}
{"name": "570_B. Simple Game", "description": "Input\n\nThe first line contains two integers n and m (1 <= m <= n <= 10^9) --- the range of numbers in the game, and the number selected by Misha respectively.", "testcase": ["1 1", "2 1", "100 50", "999999999 500000000", "10^9 1", "123456789 98765", "99999999 88888888", "1000000000 999999999", "10 10", "54321 12345"]}
{"name": "688_B. Lovely Palindromes", "description": "Input\n\nThe only line of the input contains a single integer n (1 <= n <= 10^100 000).", "testcase": ["1", "99999", "123456789123456789123456789", "100000000000000000000000000000000", "2", "567890987654321012345678909876543210987654321234567890", "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999998", "42", "3141592653589793238462643383279502884197169399375105820974944592", "2718281828459045235360287471352662497757247093699959574966967627"]}
{"name": "1028_A. Find Square", "description": "Input\n\nThe first line contains two integers n and m (1 <= n, m <= 115) --- the number of rows and the number of columns in the table.\n\nThe i-th of the next n lines contains a string of m characters s_{i1} s_{i2} ... s_{im} (s_{ij} is 'W' for white cells and 'B' for black cells), describing the i-th row of the table.", "testcase": ["3 4\nWBWB\nBWBW\nWBWB", "1 1\nW", "2 2\nBB\nBB", "5 5\nWBWBW\nBWBWB\nWBWBW\nBWBWB\nWBWBW", "10 10\nBWBWBWBWBW\nWBWBWBWBWB\nBWBWBWBWBW\nWBWBWBWBWB\nBWBWBWBWBW\nWBWBWBWBWB\nBWBWBWBWBW\nWBWBWBWBWB\nBWBWBWBWBW\nWBWBWBWBWB", "7 8\nWBWBWBWB\nBWBWBWBW\nWBWBWBWB\nBWBWBWBW\nWBWBWBWB\nBWBWBWBW\nWBWBWBWB", "4 3\nBBB\nWWW\nBBB\nWWW", "6 7\nWBWBWBW\nBWBWBWB\nWBWBWBW\nBWBWBWB\nWBWBWBW\nBWBWBWB", "8 6\nWBWBWB\nBWBWBW\nWBWBWB\nBWBWBW\nWBWBWB\nBWBWBW\nWBWBWB\nBWBWBW", "9 9\nBBBWWWBBB\nWWWBBBWWW\nBBBWWWBBB\nWWWBBBWWW\nBBBWWWBBB\nWWWBBBWWW\nBBBWWWBBB\nWWWBBBWWW\nBBBWWWBBB"]}
{"name": "1353_D. Constructing the Array", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 10^4) --- the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains one integer n (1 <= n <= 2 * 10^5) --- the length of a.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 * 10^5 (sum n <= 2 * 10^5).", "testcase": ["1\n100000", "2\n150000\n50000", "3\n70000\n80000\n50000", "4\n5000\n40000\n60000\n50000", "5\n12345\n23456\n34567\n45678\n56789", "6\n11111\n22222\n33333\n44444\n55555\n66666", "7\n10000\n20000\n30000\n40000\n50000\n60000\n70000", "8\n2500\n7500\n12500\n17500\n22500\n27500\n32500\n37500", "9\n20000\n18000\n16000\n14000\n12000\n10000\n8000\n6000\n4000", "10\n1000\n2000\n3000\n4000\n5000\n6000\n7000\n8000\n9000\n10000"]}
{"name": "559_B. Equivalent Strings", "description": "Input\n\nThe first two lines of the input contain two strings given by the teacher. Each of them has the length from 1 to 200 000 and consists of lowercase English letters. The strings have the same length.", "testcase": ["a\nb", "hello\nworld", "programming\nlanguages", "consistency\nperfection", "abcdefghij\nklmnopqrst", "patternmatch\nstringsearch", "datastructure\nalgorithmtype", "lowercaseeng\nuppervaseeng", "dynamicprogram\nstaticchecking", "artificialintel\nhumanintelligen"]}
{"name": "1140_A. Detective Book", "description": "Input\n\nThe first line contains single integer n (1 <= n <= 10^4) --- the number of pages in the book.\n\nThe second line contains n integers a_1, a_2, ..., a_n (i <= a_i <= n), where a_i is the number of page which contains the explanation of the mystery on page i.", "testcase": ["1\n1", "5\n2 3 4 5 1", "2\n1 2", "10\n10 1 2 3 4 5 6 7 8 9", "4\n4 3 2 1", "6\n2 4 6 1 3 5", "3\n2 3 1", "7\n1 3 5 7 2 4 6", "8\n5 2 8 6 1 3 7 4", "9\n2 1 4 3 6 5 8 7 9"]}
{"name": "699_C. Vacations", "description": "Input\n\nThe first line contains a positive integer n (1 <= n <= 100) --- the number of days of Vasya's vacations.\n\nThe second line contains the sequence of integers a1, a2, ..., an (0 <= ai <= 3) separated by space, where: \n\n  * ai equals 0, if on the i-th day of vacations the gym is closed and the contest is not carried out; \n  * ai equals 1, if on the i-th day of vacations the gym is closed, but the contest is carried out; \n  * ai equals 2, if on the i-th day of vacations the gym is open and the contest is not carried out; \n  * ai equals 3, if on the i-th day of vacations the gym is open and the contest is carried out.", "testcase": ["5\n1 0 2 1 0", "10\n3 3 3 3 3 3 3 3 3 3", "3\n0 0 0", "1\n2", "7\n2 1 0 2 2 1 3", "4\n3 1 3 2", "6\n2 2 0 1 0 3", "8\n1 1 1 1 2 2 2 2", "9\n0 2 1 3 3 1 0 2 2", "2\n1 3"]}
{"name": "p03337 AtCoder Beginner Contest 098 - Add Sub Mul", "description": "Constraints\n\n* -1000 <= A,B <= 1000\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B", "testcase": ["-1000 -1000", "-500 500", "0 0", "325 -123", "42 42", "999 1000", "-999 -999", "100 -999", "1 -1", "-425 425"]}
{"name": "1373_D. Maximum Sum on Even Positions", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 2 * 10^4) --- the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (1 <= n <= 2 * 10^5) --- the length of a. The second line of the test case contains n integers a_0, a_1, ..., a_{n-1} (1 <= a_i <= 10^9), where a_i is the i-th element of a.\n\nIt is guaranteed that the sum of n does not exceed 2 * 10^5 (sum n <= 2 * 10^5).", "testcase": ["1\n5\n4 2 7 1 3", "2\n3\n9 8 3\n4\n2 4 6 8", "3\n2\n1 1\n4\n5 5 5 5\n6\n12 15 9 8 11 13", "1\n8\n23 45 67 12 34 56 78 90", "2\n3\n2 2 2\n5\n1 3 5 7 9", "1\n7\n10 20 30 40 50 60 70", "3\n2\n1000000000 1000000000\n3\n300 600 900\n4\n123 456 789 1011", "1\n10\n27 53 7 18 1 44 36 52 92 85", "2\n1\n1\n4\n3 8 2 10", "1\n5\n100 101 102 103 104"]}
{"name": "p02600 M-SOLUTIONS Programming Contest 2020 - Kyu in AtCoder", "description": "Constraints\n\n* 400 <= X <= 1999\n* X is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX", "testcase": ["400", "1234", "1500", "1750", "1999", "1800", "1600", "1425", "1876", "1987"]}
{"name": "275_A. Lights Out", "description": "Input\n\nThe input consists of three rows. Each row contains three integers each between 0 to 100 inclusive. The j-th number in the i-th row is the number of times the j-th light of the i-th row of the grid is pressed.", "testcase": ["0 0 0\n0 0 0\n0 0 0", "1 2 3\n4 5 6\n7 8 9", "12 34 56\n78 90 10\n11 12 13", "100 100 100\n100 100 100\n100 100 100", "23 45 67\n89 23 45\n67 89 23", "0 1 0\n2 0 2\n0 3 0", "50 50 50\n25 25 25\n75 75 75", "0 99 0\n0 50 0\n99 0 50", "6 18 24\n36 48 60\n66 78 84", "10 20 30\n40 50 60\n70 80 90"]}
{"name": "1371_D. Grid-00100", "description": "Input\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 <= t <= 100) --- the number of test cases. Next t lines contain descriptions of test cases.\n\nFor each test case the only line contains two integers n, k (1 <= n <= 300, 0 <= k <= n^2).\n\nIt is guaranteed that the sum of n^2 for all test cases does not exceed 10^5.", "testcase": ["3 0", "10 50", "20 400", "5 10", "15 150", "25 600", "8 20", "30 350", "12 144", "18 200"]}
{"name": "1242_A. Tile Painting", "description": "Input\n\nThe first line of input contains a single integer n (1 <= n <= 10^{12}), the length of the path.", "testcase": ["1", "3", "999999999999", "1234567890", "987654321", "100000000000", "500000000000", "102030405060", "99999999999", "100000000001"]}
{"name": "1351_C. Skier", "description": "Input\n\nThe first line contains an integer t (1 <= t <= 10^4) --- the number of test cases in the input. Then t test cases follow.\n\nEach set is given by one nonempty string of the characters 'S', 'N', 'W', 'E'. The length of the string does not exceed 10^5 characters.\n\nThe sum of the lengths of t given lines over all test cases in the input does not exceed 10^5.", "testcase": ["3\nS\nN\nW", "1\nE", "2\nNESS\nSW", "5\nS\nW\nE\nN\nS", "4\nNEWS\nSSSS\nEEEE\nWWWW", "6\nE\nE\nE\nE\nE\nE", "10\nN\nN\nN\nN\nN\nN\nN\nN\nN", "3\nSWNW\nWSEN\nENWS", "7\nSSSW\nWNEN\nESEW\nSWNE\nWE\nSN\nEN", "1\nSSSSSWWWWWNNNNNEEEE"]}
{"name": "1101_A. Minimum Integer", "description": "Input\n\nThe first line contains one integer q (1 <= q <= 500) --- the number of queries.\n\nThen q lines follow, each containing a query given in the format l_i r_i d_i (1 <= l_i <= r_i <= 10^9, 1 <= d_i <= 10^9). l_i, r_i and d_i are integers.", "testcase": ["1\n1 1000000000 500000000", "3\n100 200 50\n300 400 25\n500 600 75", "2\n1 10 1\n20 30 10", "4\n123456789 987654321 123456\n234567890 345678901 234567\n345678901 456789012 345678\n456789012 567890123 456789", "5\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n5 5 5", "2\n500000000 1000000000 250000000\n200000000 800000000 300000000", "1\n100000 999999999 9999999", "3\n215435 98765432 741852\n11111111 22222222 333333\n444444 5555555 666666", "4\n10 20 5\n20 30 5\n30 40 5\n40 50 5", "3\n1 50 1\n50 100 1\n100 150 1"]}
{"name": "1189_D1. Add on a Tree", "description": "Input\n\nThe first line contains a single integer n (2 <= n <= 10^5) --- the number of nodes.\n\nEach of the next n-1 lines contains two integers u and v (1 <= u, v <= n, u != v), meaning that there is an edge between nodes u and v. It is guaranteed that these edges form a tree.", "testcase": ["3\n1 2\n2 3", "4\n1 2\n1 3\n1 4", "5\n1 2\n2 3\n3 4\n4 5", "6\n1 2\n2 3\n3 4\n4 5\n5 6", "7\n1 2\n2 3\n3 4\n1 5\n5 6\n6 7", "8\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8", "9\n1 2\n3 1\n1 4\n4 5\n5 6\n6 7\n1 8\n8 9", "10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10", "5\n1 2\n1 3\n1 4\n1 5", "7\n1 2\n2 3\n2 4\n4 5\n4 6\n4 7"]}
{"name": "168_A. Wizards and Demonstration", "description": "Input\n\nThe first line contains three space-separated integers, n, x, y (1 <= n, x, y <=10^4, x <= n) --- the number of citizens in the city, the number of wizards and the percentage the administration needs, correspondingly.\n\nPlease note that y can exceed 100 percent, that is, the administration wants to see on a demonstration more people that actually live in the city ( > n).", "testcase": ["100 10 50", "5000 50 90", "2000 200 110", "9999 1234 150", "2500 2500 100", "700 700 95", "6000 3000 120", "3500 350 200", "450 450 80", "10000 5000 300"]}
{"name": "379_A. New Year Candles", "description": "Input\n\nThe single line contains two integers, a and b (1 <= a <= 1000; 2 <= b <= 1000).", "testcase": ["1 2", "123 456", "999 1000", "500 501", "1000 100", "12 34", "42 99", "65 65", "100 200", "3 4"]}
{"name": "39_H. Multiplication Table", "description": "Input\n\nThe first line contains a single integer k (2 <= k <= 10) --- the radix of the system.", "testcase": ["2", "3", "4", "5", "6", "7", "8", "9", "10", "2"]}
{"name": "44_B. Cola", "description": "Input\n\nThe first line contains four integers --- n, a, b, c (1 <= n <= 10000, 0 <= a, b, c <= 5000).", "testcase": ["1 0 0 0", "10000 5000 5000 5000", "1234 2345 3456 4567", "9999 999 1999 2999", "5000 2500 2500 2500", "234 123 456 789", "4321 987 654 321", "6789 1230 4560 7890", "3456 1111 2222 3333", "8192 1024 2048 4096"]}
{"name": "545_C. Woodcutters", "description": "Input\n\nThe first line contains integer n (1 <= n <=10^5) --- the number of trees.\n\nNext n lines contain pairs of integers xi, hi (1 <= xi, hi <=10^9) --- the coordinate and the height of the і-th tree.\n\nThe pairs are given in the order of ascending xi. No two trees are located at the point with the same coordinate.", "testcase": ["3\n1 2\n3 4\n6 1", "1\n100000000 100000000", "4\n5 10\n15 3\n30 8\n100 50", "5\n1 1\n2 1\n3 1\n4 1\n5 1", "6\n100 200\n300 150\n400 500\n600 400\n800 350\n900 600", "2\n200000000 300000000\n700000000 800000000", "7\n5 15\n25 45\n50 10\n75 20\n125 35\n250 25\n500 5", "8\n10 100\n20 200\n30 300\n40 400\n50 500\n60 600\n70 700\n80 800", "9\n100000000 99999999\n200000000 88888888\n300000000 77777777\n400000000 66666666\n500000000 55555555\n600000000 44444444\n700000000 33333333\n800000000 22222222\n900000000 11111111", "10\n1 5\n2 15\n3 25\n4 35\n5 45\n6 55\n7 65\n8 75\n9 85\n10 95"]}
{"name": "101_C. Vectors", "description": "Input\n\nThe first line contains integers x1 и y1 --- the coordinates of the vector A ( - 108 <= x1, y1 <=10^8). The second and the third line contain in the similar manner vectors B and C (their coordinates are integers; their absolute value does not exceed 108).", "testcase": ["0 0\n0 0\n0 0", "-100000000 100000000\n-99999999 99999999\n-99999998 99999998", "50000000 -50000000\n40000000 -40000000\n30000000 -30000000", "12345678 87654321\n12345678 87654321\n12345678 87654321", "-1 -1\n-2 -2\n-3 -3", "21474836 21474836\n21474836 21474836\n21474836 21474836", "0 -100000000\n100000000 0\n-100000000 100000000", "435345 65342\n546456 -456456\n324324 -654646", "-9999999 9999999\n8888888 -7777777\n6666666 -5555555", "1 0\n0 1\n-1 -1"]}
{"name": "151_C. Win or Freeze", "description": "Input\n\nThe first line contains the only integer q (1 <= q <=10^13).\n\nPlease do not use the %lld specificator to read or write 64-bit integers in С++. It is preferred to use the cin, cout streams or the %I64d specificator.", "testcase": ["1", "123456789", "100000000001", "123456789012", "987654321098", "4294967296", "9999999999999", "3141592653589", "10000000000000", "7766554433221"]}
{"name": "195_A. Let's Watch Football", "description": "Input\n\nThe first line contains three space-separated integers a, b and c (1 <= a, b, c <= 1000, a > b). The first number (a) denotes the size of data needed to watch one second of the video. The second number (b) denotes the size of data Valeric and Valerko can download from the Net per second. The third number (c) denotes the video's length in seconds.", "testcase": ["10 9 100", "2 1 500", "32 31 200", "1000 999 1000", "500 250 800", "20 15 600", "150 149 300", "100 50 1000", "850 500 900", "750 749 400"]}
{"name": "478_A. Initial Bet", "description": "Input\n\nThe input consists of a single line containing five integers c1, c2, c3, c4 and c5 --- the number of coins that the first, second, third, fourth and fifth players respectively have at the end of the game (0 <= c1, c2, c3, c4, c5 <= 100).", "testcase": ["0 0 0 0 0", "100 100 100 100 100", "23 45 67 89 10", "11 22 33 44 55", "99 88 77 66 55", "5 10 15 20 25", "50 50 50 50 50", "10 20 30 40 50", "82 37 19 6 27", "73 29 58 41 84"]}
{"name": "526_A. King of Thieves", "description": "Input\n\nThe first line contains integer n (1 <= n <= 100) --- the number of segments on the level.\n\nNext line contains the scheme of the level represented as a string of n characters '*' and '.'.", "testcase": ["1\n*", "3\n*.*", "5\n**.**", "10\n*.*.*.*.*.", "2\n.*", "7\n...*...", "4\n*..*", "8\n****....", "6\n*.**..", "9\n.*.*.*.*."]}
{"name": "716_D. Complete The Graph", "description": "Input\n\nThe first line contains five integers n, m, L, s, t (2 <= n <= 1000, 1 <= m <= 10 000, 1 <= L <=10^9, 0 <= s, t <= n - 1, s != t) --- the number of vertices, number of edges, the desired length of shortest path, starting vertex and ending vertex respectively.\n\nThen, m lines describing the edges of the graph follow. i-th of them contains three integers, ui, vi, wi (0 <= ui, vi <= n - 1, ui != vi, 0 <= wi <=10^9). ui and vi denote the endpoints of the edge and wi denotes its weight. If wi is equal to 0 then the weight of the corresponding edge was erased.\n\nIt is guaranteed that there is at most one edge between any pair of vertices.", "testcase": ["5 5 100 0 4\n0 1 50\n1 2 0\n2 3 25\n3 4 25\n0 3 60", "3 3 200 1 2\n0 1 100\n1 2 100\n0 2 0", "4 4 300 2 3\n0 1 0\n1 2 150\n2 3 150\n0 2 200", "4 5 1000 1 3\n0 1 500\n1 2 0\n1 3 500\n2 3 0\n0 3 800", "6 7 120 0 5\n0 1 70\n1 2 50\n1 5 0\n2 3 30\n3 4 20\n4 5 50\n2 5 100", "2 1 1000000000 0 1\n0 1 1000000000", "10 15 12345 0 9\n0 1 1000\n1 2 1500\n2 3 1600\n3 4 2000\n4 5 0\n5 6 1000\n6 7 3000\n7 8 1700\n8 9 0\n5 9 1230\n0 3 5000\n0 2 150\n1 3 200\n1 5 600\n7 9 400", "5 6 500 3 0\n0 1 100\n1 2 200\n2 3 0\n3 4 250\n0 4 300\n1 3 150", "8 8 98765 7 0\n0 1 40000\n1 2 30000\n2 3 20000\n3 4 5000\n4 5 2500\n5 6 12500\n6 7 0\n0 7 98765", "7 10 88888 6 1\n0 1 44444\n1 2 0\n1 3 37000\n2 4 11000\n3 4 22000\n4 5 33000\n5 6 0\n0 2 7000\n0 3 21000\n4 6 40000"]}
{"name": "805_A. Fake NP", "description": "Input\n\nThe first line contains two integers l and r (2 <= l <= r <=10^9).", "testcase": ["2 3", "10 20", "100 200", "250 500", "123456 789012", "999999 1000000", "500000 800000", "234567 345678", "111111 999999", "999999 1000000"]}
{"name": "1129_A2. Toy Train", "description": "Input\n\nThe first line contains two space-separated integers n and m (2 <= n <= 5 000; 1 <= m <= 20 000) --- the number of stations and the number of candies, respectively.\n\nThe i-th of the following m lines contains two space-separated integers a_i and b_i (1 <= a_i, b_i <= n; a_i != b_i) --- the station that initially contains candy i and the destination station of the candy, respectively.", "testcase": ["3 5\n1 2\n2 3\n3 1\n1 3\n2 1", "2 1\n2 1", "4 2\n1 3\n4 2", "5 4\n1 2\n2 3\n3 4\n4 5", "5 8\n1 2\n2 3\n3 4\n4 5\n5 1\n1 3\n2 4\n3 5", "6 10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 1\n1 4\n2 5\n3 6\n4 1", "7 14\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 1\n1 3\n2 4\n3 5\n4 6\n5 7\n6 1\n7 2", "10 20\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 1\n1 5\n2 6\n3 7\n4 8\n5 9\n6 10\n7 1\n8 2\n9 3\n10 4", "8 16\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 1\n1 3\n2 4\n3 5\n4 6\n5 7\n6 8\n7 1\n8 2", "5 6\n5 1\n4 5\n3 4\n2 3\n1 2\n5 3"]}
{"name": "1208_A. XORinacci", "description": "Input\n\nThe input contains one or more independent test cases.\n\nThe first line of input contains a single integer T (1 <= T <= 10^3), the number of test cases.\n\nEach of the T following lines contains three space-separated integers a, b, and n (0 <= a, b, n <= 10^9) respectively.", "testcase": ["1\n0 0 0", "2\n10 20 30\n40 50 60", "3\n100 200 300\n400 500 600\n700 800 900", "1\n123456789 987654321 123456789", "2\n0 1 1000000000\n1 0 999999999", "1\n999999999 999999999 999999999", "3\n345 678 901\n234 567 890\n123 456 789", "4\n111 222 333\n444 555 666\n777 888 999\n100000000 200000000 300000000", "5\n0 0 1\n1 1 0\n2 2 2\n3 3 3\n4 4 4", "1\n100000000 100000000 100000000"]}
{"name": "1227_A. Math Problem", "description": "Input\n\nThe first line contains integer number t (1 <= t <= 100) --- the number of test cases in the input. Then t test cases follow.\n\nThe first line of each test case contains one integer n (1 <= n <= 10^{5}) --- the number of segments. The following n lines contain segment descriptions: the i-th of them contains two integers l_i,r_i (1 <= l_i <= r_i <= 10^{9}).\n\nThe sum of all values n over all the test cases in the input doesn't exceed 10^5.", "testcase": ["3\n2\n1 5\n6 10\n1\n1000000000 1000000000\n4\n1 2\n2 3\n3 4\n4 5", "1\n3\n10 20\n30 40\n50 60", "2\n5\n1 10\n2 9\n3 8\n4 7\n5 6\n2\n20 30\n15 25", "4\n1\n40 50\n1\n60 70\n1\n80 90\n1\n100 110", "1\n6\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6", "2\n2\n100 200\n300 400\n3\n500 600\n600 700\n700 800", "1\n10\n15 25\n25 35\n35 45\n45 55\n55 65\n65 75\n75 85\n85 95\n95 105\n105 115", "5\n1\n123 456\n1\n789 101112\n1\n131415 161718\n1\n192021 222324\n1\n252627 282930", "3\n7\n10 20\n20 30\n30 40\n40 50\n50 60\n60 70\n70 80\n1\n90 100\n3\n110 200\n210 300\n310 400", "4\n2\n111 222\n333 444\n2\n555 666\n777 888\n2\n999 101010\n102030 103040\n2\n104050 105060\n106070 107080"]}
{"name": "1374_B. Multiply by 2, divide by 6", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 2 * 10^4) --- the number of test cases. Then t test cases follow. \n\nThe only line of the test case contains one integer n (1 <= n <= 10^9).", "testcase": ["1", "2", "3", "100", "999999999", "123456789", "100000000", "234567890", "876543210", "10000000"]}
{"name": "1466_C. Canine poetry", "description": "Input\n\nThe first line of the input contains a single integer t (1 <= t <= 10^5) denoting the number of test cases, then t test cases follow.\n\nThe first and only line of each test case contains a non-empty string of lowercase English letters, Orpheus' poem.\n\nThe sum of the length of Orpheus' poems in all test cases will not exceed 10^5.", "testcase": ["1\nabcde", "2\na\nbc", "3\nhello\nworld\nprogramming", "4\napple\nbanana\ncherry\nkiwi", "5\none\ntwo\nthree\nfour\nfive", "2\nquick\nbrownfox", "3\njumped\nover\nthelazydog", "1\nabcdefghij", "2\nk\nlmno", "5\npuzzle\nentity\nsystem\nwiki\nquantum"]}
{"name": "209_B. Pixels", "description": "Input\n\nThe first line contains three space-separated integers a, b and c (0 <= a, b, c <= 231; a + b + c > 0) --- the number of red, green and blue pixels, correspondingly.", "testcase": [""]}
{"name": "235_A. LCM Challenge", "description": "Input\n\nThe first line contains an integer n (1 <= n <=10^6 --- the n mentioned in the statement.", "testcase": ["1", "10", "500", "999999", "1000000", "123456", "654321", "42", "999", "500000"]}
{"name": "306_C. White, Black and White Again", "description": "Input\n\nThe single line of the input contains integers n, w and b (3 <= n <= 4000, 2 <= w <= 4000, 1 <= b <= 4000) --- the number of days, the number of good events and the number of not-so-good events. It is guaranteed that w + b >= n.", "testcase": ["3 2 1", "4 3 2", "4000 2500 1500", "100 99 1", "2500 1250 1250", "4000 2 3998", "3500 1750 1750", "1234 617 617", "2345 1173 1172", "4000 4000 1"]}
{"name": "425_A. Sereja and Swaps", "description": "Input\n\nThe first line contains two integers n and k (1 <= n <= 200; 1 <= k <= 10). The next line contains n integers a[1], a[2], ..., a[n] ( - 1000 <= a[i] <= 1000).", "testcase": ["3 2\n-5 0 7", "5 1\n-1000 -999 -998 -997 -996", "4 5\n10 -10 20 -20", "10 3\n0 1 0 -1 0 1 -1 1 0 -1", "1 1\n1000", "7 4\n-500 300 -200 400 0 -300 100", "6 2\n-1 2 -3 4 -5 6", "8 10\n1000 -1000 999 -999 500 -500 0 250", "2 1\n42 -42", "9 3\n-10 -20 -30 10 20 30 -40 40 0"]}
{"name": "730_G. Car Repair Shop", "description": "Input\n\nThe first line contains integer n (1 <= n <= 200) --- the number of requests from clients.\n\nThe following n lines contain requests, one request per line. The i-th request is given as the pair of integers si, di (1 <= si <=10^9, 1 <= di <= 5.10^6), where si is the preferred time to start repairing the i-th car, di is the number of days to repair the i-th car.\n\nThe requests should be processed in the order they are given in the input.", "testcase": ["3\n1 5000000\n5 1000\n9 2500000", "4\n10000000 100000\n20000000 500000\n30000000 200000\n40000000 1000000", "1\n123456789 2345678", "5\n7 365\n365 3650\n3650 1825\n30 90\n90 30", "2\n987654321 7654321\n123456789 1234567", "6\n1 10\n2 20\n3 30\n4 40\n5 50\n6 60", "10\n5000000 1000\n1000000 2000\n1500000 3000\n2000000 4000\n2500000 5000\n3000000 6000\n3500000 7000\n4000000 8000\n4500000 9000\n5000000 10000", "7\n2222222 1000\n3333333 2000\n4444444 3000\n5555555 4000\n6666666 5000\n7777777 6000\n8888888 7000", "8\n500 100\n1000 100\n1500 100\n2000 100\n2500 100\n3000 100\n3500 100\n4000 100", "9\n100 1000\n200 2000\n300 3000\n400 4000\n500 5000\n600 6000\n700 7000\n800 8000\n900 9000"]}
{"name": "893_A. Chess For Three", "description": "Input\n\nThe first line contains one integer n (1 <= n <= 100) --- the number of games Alex, Bob and Carl played.\n\nThen n lines follow, describing the game log. i-th line contains one integer ai (1 <= ai <= 3) which is equal to 1 if Alex won i-th game, to 2 if Bob won i-th game and 3 if Carl won i-th game.", "testcase": ["3\n1\n2\n3", "5\n1\n1\n1\n1\n1", "1\n2", "10\n2\n3\n1\n3\n2\n1\n2\n2\n3\n1", "2\n3\n3", "4\n1\n1\n2\n2", "6\n2\n3\n1\n3\n2\n1", "7\n1\n2\n3\n1\n2\n3\n1", "9\n3\n2\n3\n1\n3\n3\n2\n2\n1", "8\n2\n1\n2\n3\n3\n2\n1\n1"]}
{"name": "p01970 The Diversity of Prime Factorization", "description": "Constraints\n\n* 1 \\ leq N \\ leq 10 ^ 5\n* 2 \\ leq q_i \\ leq 10 ^ 6 (1 \\ leq i \\ leq N)", "testcase": ["1\n[876543]", "10\n[100000, 500000, 99999, 123456, 234567, 345678, 456789, 567890, 678901, 789012]", "17\n[100001, 200002, 300003, 400004, 500005, 600006, 700007, 800008, 900009]", "5\n[654321, 765432, 876543, 987654, 765432]", "2\n[100002, 999999]", "100000\n[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]", "99999\n[1000000, 999999, 999998, 999997, 999996, 999995, 999994, 999993, 999992, 999991]", "55\n[420000, 430000, 440000, 450000, 460000, 470000, 480000, 490000, 500000, 510000]", "3\n[888888, 777777, 666666]", "7\n[345678, 456789, 234567, 123456, 654321, 543210, 432109]"]}
{"name": "p02257 Prime Numbers", "description": "Input\n\nThe first line contains an integer N, the number of elements in the list.\n\nN numbers are given in the following lines.", "testcase": ["3\n1\n2\n3", "4\n10\n20\n30\n40", "5\n-1\n-2\n-3\n-4\n-5", "2\n100\n200", "1\n0", "6\n-1\n1\n-2\n2\n-3\n3", "10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0", "7\n10\n20\n30\n40\n50\n60\n70", "8\n-8\n7\n-6\n5\n-4\n3\n-2\n1", "2\n2147483647\n-2147483648"]}
{"name": "1096_E. The Top Scorer", "description": "Input\n\nThe only line contains three integers p, s and r (1 <= p <= 100, 0 <= r <= s <= 5000) --- the number of players, the sum of scores of all players and Hasan's score, respectively.", "testcase": ["5 20 5", "10 5000 2500", "50 400 10", "23 1000 50", "77 3000 40", "1 100 100", "99 4999 1", "15 480 120", "3 5 0", "100 200 2"]}
{"name": "442_C. Artem and Array ", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 5.10^5) --- the number of elements in the array. The next line contains n integers ai (1 <= ai <=10^6 --- the values of the array elements.", "testcase": [""]}
{"name": "630_A. Again Twenty Five!", "description": "Input\n\nThe only line of the input contains a single integer n (2 <= n <= 2.10^18) --- the power in which you need to raise number 5.", "testcase": ["2", "3", "4", "5", "10", "1000", "999999999999999999", "15000000000000000", "123456789123456789", "987654321987654321"]}
{"name": "1366_A. Shovels and Swords", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 1000) --- the number of test cases.\n\nThe only line of each test case contains two integers a and b (0 <= a, b <= 10^9) --- the number of sticks and the number of diamonds, respectively.", "testcase": ["1\n500000000 500000000", "2\n0 0\n1000000000 1000000000", "3\n123456789 987654321\n111111111 111111111\n222222222 333333333", "4\n5 10\n15 20\n25 30\n35 40", "5\n345 678\n9012 3456\n78901 23456\n345678 901234\n567890 123456", "2\n0 999999999\n1000000000 0", "3\n444444444 555555555\n666666666 777777777\n888888888 999999999", "1\n123 456", "2\n234 567\n890 123", "4\n1234 5678\n9012 3456\n7890 1234\n5678 9012"]}
{"name": "1451_D. Circle Game", "description": "Input\n\nThe first line contains a single integer t (1 <= t <= 100) --- the number of test cases.\n\nThe only line of each test case contains two space separated integers d (1 <= d <= 10^5) and k (1 <= k <= d).", "testcase": ["1\n100 50", "2\n50000 25000\n1000 500", "1\n99999 50000", "3\n1000 1\n2000 2\n3000 3", "1\n12345 1234", "2\n23456 2345\n34567 3456", "1\n100000 99999", "3\n54321 1234\n78901 5678\n101112 1314", "1\n44444 22222", "2\n80000 40000\n90000 45000"]}
{"name": "223_C. Partial Sums", "description": "Input\n\nThe first line contains two space-separated integers n and k (1 <= n <= 2000, 0 <= k <=10^9). The next line contains n space-separated integers a1, a2, ..., an --- elements of the array a (0 <= ai <=10^9).", "testcase": ["2 500000000\n0 1000000000", "5 20\n4 5 10 15 20", "10 0\n0 0 0 0 0 0 0 0 0 0", "1 123456789\n987654321", "3 1000000000\n1000000000 999999999 888888888", "2000 999999999\n"]}
{"name": "343_B. Alternating Current", "description": "Input\n\nThe single line of the input contains a sequence of characters \"+\" and \"-\" of length n (1 <= n <= 100000). The i-th (1 <= i <= n) position of the sequence contains the character \"+\", if on the i-th step from the wall the \"plus\" wire runs above the \"minus\" wire, and the character \"-\" otherwise.", "testcase": ["+-+++--+-+", "-", "++--++--+", "--------", "++++++++++", "+++-+-+-++", "+-", "+-+-+-+-+-", "-+-+--+", "++"]}
{"name": "483_B. Friends and Presents", "description": "Input\n\nThe only line contains four positive integers cnt1, cnt2, x, y (1 <= cnt1, cnt2 < 109; cnt1 + cnt2 <=10^9; 2 <= x < y <= 3.10^4) --- the numbers that are described in the statement. It is guaranteed that numbers x, y are prime.", "testcase": ["10 15 2 3", "20000000 35000000 17 29", "500 600 7 13", "99999999 1 3 5", "1 99999999 11 23", "987654 123456 5 7", "11111111 22222222 19 31", "345678 987654 13 19", "100000000 9999999 23 37", "87654321 12345678 2 997"]}
{"name": "835_A. Key races", "description": "Input\n\nThe first line contains five integers s, v1, v2, t1, t2 (1 <= s, v1, v2, t1, t2 <= 1000) --- the number of characters in the text, the time of typing one character for the first participant, the time of typing one character for the the second participant, the ping of the first participant and the ping of the second participant.", "testcase": ["1 1 1 1 1", "1000 2 3 10 20", "500 5 3 6 6", "250 1 2 3 4", "333 3 2 7 9", "800 4 1 10 8", "950 2 4 5 7", "625 3 5 8 2", "100 2 2 1 1", "450 1 1 1000 1000"]}
{"name": "1036_B. Diagonal Walking v.2", "description": "Input\n\nThe first line of the input contains one integer q (1 <= q <= 10^4) --- the number of queries.\n\nThen q lines follow. The i-th of these q lines contains three integers n_i, m_i and k_i (1 <= n_i, m_i, k_i <= 10^{18}) --- x-coordinate of the destination point of the query, y-coordinate of the destination point of the query and the number of moves in the query, correspondingly.", "testcase": ["1\n1000000000000000000 1000000000000000000 1000000000000000000", "2\n123456789123456789 987654321987654321 111111111111111111\n222222222222222222 333333333333333333 444444444444444444", "3\n500000000000000000 600000000000000000 700000000000000000\n800000000000000000 900000000000000000 1000000000000000000\n1000000000000000000 2000000000000000000 3000000000000000000", "4\n1 1 1\n2 2 2\n3 3 3\n4 4 4", "5\n10 10 10\n20 20 20\n30 30 30\n40 40 40\n50 50 50", "6\n100000000000 100000000000 100000000000\n200000000000 200000000000 200000000000\n300000000000 300000000000 300000000000\n400000000000 400000000000 400000000000\n500000000000 500000000000 500000000000\n600000000000 600000000000 600000000000", "7\n123456789 987654321 192837465\n234567890 123456789 987654321\n345678901 234567890 123456789\n456789012 345678901 234567890\n567890123 456789012 345678901\n678901234 567890123 456789012\n789012345 678901234 567890123", "8\n111111111 222222222 333333333\n444444444 555555555 666666666\n777777777 888888888 999999999\n1111111110 2222222220 3333333330\n4444444440 5555555550 6666666660\n7777777770 8888888880 9999999990\n11111111100 22222222200 33333333300\n44444444400 55555555500 66666666600", "9\n4289045398102143 1021398102351239 190238102301239\n3210951820395021 3850198203918203 1204918203981209\n2094832109843201 1820394810293840 1203948209384012\n2039849283409823 3928401982012381 3019283049123094\n2039481098238103 1283094810293810 2039481029380192\n1049381029310293 1209839102938931 2304981020398123\n1028391023983091 1290839128391293 2394812039812398\n2093810239812093 1983019820394810 2390481230981230\n1029830198230123 2918391283012931 1982039102938102", "10\n987654987654987654 123456123456123456 234567234567234567\n456789456789456789 567890567890567890 678901678901678901\n789012789012789012 890123890123890123 901234901234901234\n123456712345671234567 234567823456782345678 345678934567893456789\n456789045678904567890 567890156789015678901 678901267890126789012\n789012378901237890123 890123489012348901234 901234590123459012345\n123456712346571234567 234567823457682345678 345678934568793456789\n456789045678904567890 567890156789015678901 678901267890126789012\n789012378901237890123 890123489012348901234 901234590123459012345\n987654321987654321 123456789123456789 987654321987654321"]}
{"name": "1373_B. 01 Game", "description": "Input\n\nFirst line contains one integer t (1 <= t <= 1000) --- the number of test cases.\n\nOnly line of each test case contains one string s (1 <= |s| <= 100), consisting of only characters 0 and 1.", "testcase": ["4", "001101", "111", "0", "1100100100100011001011100011", "3", "111000111000", "01", "1101101101101101", "2", "10101010101010101010101010101010", "0011001100110011", "5", "1", "00", "10101", "11111111", "01010101010101010101010101010101", "1", "1100110011001100110011001100110011001100110011001100110011001100", "7", "00110011", "1010101", "1100", "11111111111111111111111111111111111111111111111111", "00000000000000000000000000000000000000000000", "0101010101", "11100110011001100110011"]}
{"name": "166_A. Rank List", "description": "Input\n\nThe first line contains two integers n and k (1 <= k <= n <= 50). Then n lines contain the description of the teams: the i-th line contains two integers pi and ti (1 <= pi, ti <= 50) --- the number of solved problems and the total penalty time of the i-th team, correspondingly. All numbers in the lines are separated by spaces.", "testcase": ["3 2\n3 10\n3 15\n2 20", "5 3\n5 30\n4 25\n5 40\n3 20\n4 15", "10 5\n6 35\n5 45\n6 20\n7 50\n7 60\n4 15\n5 25\n3 10\n4 45\n2 10", "4 1\n10 8\n10 7\n10 5\n9 6", "7 3\n1 10\n2 20\n2 30\n3 30\n4 30\n5 30\n6 30", "8 4\n8 60\n7 70\n8 80\n5 40\n6 50\n7 60\n8 70\n4 20", "2 1\n50 50\n1 1", "6 6\n8 12\n8 10\n8 14\n7 15\n5 10\n6 20", "9 5\n20 100\n18 50\n20 80\n15 100\n16 150\n17 100\n16 200\n15 300\n20 120", "3 1\n30 40\n30 60\n25 30"]}
{"name": "56_E. Domino Principle", "description": "Input\n\nThe first line contains integer n (1 <= n <=10^5) which is the number of dominoes. Then follow n lines containing two integers xi and hi ( - 108 <= xi <=10^8, 2 <= hi <=10^8) each, which are the coordinate and height of every domino. No two dominoes stand on one point.", "testcase": ["3\n[[-100000000, 20000000], [0, 30000000], [100000000, 40000000]]", "5\n[[-87654321, 50000000], [-12345678, 60000000], [12345678, 70000000], [87654321, 80000000], [10000000, 90000000]]", "1\n[[-50000000, 100000000]]", "4\n[[-90000000, 90000000], [-45000000, 20000000], [45000000, 30000000], [90000000, 80000000]]", "6\n[[-23456789, 23456789], [-1234567, 34567890], [0, 45678901], [1234567, 56789012], [23456789, 67890123], [34567890, 78901234]]", "2\n[[-80000000, 20000000], [80000000, 100000000]]", "7\n[[-70000000, 30000000], [-40000000, 40000000], [-10000000, 50000000], [20000000, 60000000], [50000000, 70000000], [80000000, 80000000], [100000000, 85000000]]", "8\n[[-90000000, 32000000], [-70000000, 43000000], [-50000000, 52000000], [-30000000, 64000000], [-10000000, 75000000], [10000000, 86000000], [30000000, 97000000], [50000000, 108000000]]", "9\n[[-88888888, 20000000], [-55555555, 22000000], [-22222222, 24000000], [11111111, 26000000], [44444444, 28000000], [77777777, 30000000], [10000000, 32000000], [33333333, 34000000], [66666666, 36000000]]", "10\n[[-1000000, 20000000], [-800000, 21000000], [-600000, 22000000], [-400000, 23000000], [-200000, 24000000], [0, 25000000], [200000, 26000000], [400000, 27000000], [600000, 28000000], [800000, 29000000]]"]}
{"name": "633_A. Ebony and Ivory", "description": "Input\n\nThe first line of the input contains three integers a, b, c (1 <= a, b <= 100, 1 <= c <= 10 000) --- the number of units of damage dealt by Ebony gun and Ivory gun, and the total number of damage required to break the shield, respectively.", "testcase": ["10 25 5000", "1 100 10000", "50 50 3000", "99 99 10000", "15 60 7500", "70 30 2000", "33 44 6543", "88 11 9800", "25 75 4500", "100 1 9999"]}
{"name": "103_C. Russian Roulette", "description": "Input\n\nThe first line contains three integers n, k and p (1 <= n <=10^18, 0 <= k <= n, 1 <= p <= 1000) --- the number of slots in the cylinder, the number of bullets and the number of queries. Then follow p lines; they are the queries. Each line contains one integer xi (1 <= xi <= n) the number of slot to describe.\n\nPlease do not use the %lld specificator to read or write 64-bit numbers in С++. It is preferred to use cin, cout streams or the %I64d specificator.", "testcase": ["1 0 1\n1", "10 5 2\n3\n7", "100 20 3\n15\n60\n80", "1000 500 5\n200\n400\n600\n800\n1000", "10000 1000 4\n1000\n2000\n3000\n4000", "100000 50000 6\n15000\n30000\n45000\n60000\n75000\n90000", "1000000 999999 3\n1\n500000\n999999", "1000000000 1 2\n500000000\n1000000000", "123456789101112 222222 10\n111111\n222222\n333333\n444444\n555555\n666666\n777777\n888888\n999999\n101010", "987654321987654 876543 5\n765431\n876542\n987653\n123456\n234567"]}
{"name": "1062_D. Fun with Integers", "description": "Input\n\nA single line contains a single integer n (2 <= n <= 100 000) --- the given integer described above.", "testcase": ["2", "100", "99999", "50000", "35432", "26354", "87654", "11111", "22222", "33333"]}
{"name": "1084_C. The Fair Nut and String", "description": "Input\n\nThe first line contains the string s (1 <= |s| <= 10^5) consisting of lowercase Latin letters.", "testcase": ["abcdefghijklmnopqrstuvwxyz", "a", "hello", "thisismylongteststringtestingthelength", "anotherlargetestcasetocheckboundaries", "x", "maximummaxlengthstringtesttoreachthecharlimitsoftheproblemandcheckingift", "minimal", "justanotherstringofletters", "short"]}
{"name": "1131_E. String Multiplication", "description": "Input\n\nThe first line contains a single integer n (2 <= n <= 100 000) --- the number of strings, wroted by Denis.\n\nNext n lines contain non-empty strings p_1, p_2, ..., p_n, consisting of lowercase english letters.\n\nIt's guaranteed, that the total length of the strings p_i is at most 100 000, and that's the beauty of the resulting product is at most 10^9.", "testcase": ["2\n['abc', 'def']", "3\n['hello', 'world', 'test']", "5\n['quick', 'brown', 'fox', 'jumps', 'lazy']", "4\n['algorithm', 'data', 'structure', 'graph']", "6\n['one', 'two', 'three', 'four', 'five', 'six']", "7\n['rainbow', 'orange', 'purple', 'green', 'blue', 'indigo', 'violet']", "8\n['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday', 'week']", "10\n['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october']", "9\n['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'kiwi']", "2\n['aa', 'bb']"]}
{"name": "1230_A. Dawid and Bags of Candies", "description": "Input\n\nThe only line contains four integers a_1, a_2, a_3 and a_4 (1 <= a_i <= 100) --- the numbers of candies in each bag.", "testcase": ["1 1 1 1", "2 5 4 8", "99 99 99 99", "15 23 45 67", "88 14 63 27", "34 21 56 78", "42 42 42 42", "19 37 84 26", "73 8 47 59", "31 93 74 100"]}
{"name": "139_D. Digits Permutations", "description": "Input\n\nThe first line contains a positive integer n --- the original number. The number of digits in this number does not exceed 105. The number is written without any leading zeroes.", "testcase": ["1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890", "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "123", "847362514253687126354287120398471289347198237491827349871239487123984791283471239471298374912837491283", "2", "111111111111111111111111111111111111111111111111111111111111111111", "8495172958792183459872345897243589274893274892398479238749283749287498274897239823459287349879238497", "17346982374691827346918273649182736491827364918273649182736498273649821736498127364981273649821736498127364", "583719283741982374917234987192387492183749218374198237491823749182374918273491823749182374918237492183749128374912837491823749182374912837491827349182374928374981237491823749182374981273"]}
{"name": "239_A. Two Bags of Potatoes", "description": "Input\n\nThe first line of input contains three integers y, k, n (1 <= y, k, n <=10^9; <image> <=10^5).", "testcase": ["1 2 100000", "10 100 100000", "5 7 99999", "12345 67890 100000000", "11111 22222 333333333", "6 12 345678", "123 456 789012345", "7 8 87654321", "99999 100000 100000000", "42 42 42000000"]}
{"name": "690_A1. Collective Mindsets (easy)", "description": "Input\n\nThe only line of input contains one integer: N, the number of attendees (1 <= N <=10^9).", "testcase": ["1", "10", "100", "123456789", "999999999", "500000000", "87654321", "99999", "1000000000", "17"]}
{"name": "1076_B. Divisor Subtraction", "description": "Input\n\nThe only line contains a single integer n (2 <= n <= 10^{10}).", "testcase": ["2", "9999999999", "5000000000", "1000000000", "123456789", "9876543210", "3141592653", "2718281828", "7062029977", "42"]}
{"name": "121_C. Lucky Permutation", "description": "Input\n\nThe first line contains two integers n and k (1 <= n, k <=10^9) --- the number of elements in the permutation and the lexicographical number of the permutation.", "testcase": ["1 1", "5 1", "8 42", "10 999999", "123456789 987654321", "1000000000 1", "1000000000 999999999", "9 362880", "999999 123456", "100 100000"]}
{"name": "1305_B. Kuroni and Simple Strings", "description": "Input\n\nThe only line of input contains a string s (1 <= |s| <= 1000) formed by characters '(' and ')', where |s| is the length of s.", "testcase": ["()", "(())", "))((", "(()())", "(()()(()))", "(((())))", ")()(()())(", "()()", "(()))(()", "((())())()"]}
{"name": "136_B. Ternary Logic", "description": "Input\n\nThe first line contains two integers a and c (0 <= a, c <=10^9). Both numbers are written in decimal notation.", "testcase": ["0 0", "123456789 987654321", "10 10", "1 999999999", "999999999 1", "500000000 500000000", "9999999 88888888", "2147483647 2147483647", "0 10", "10 0"]}
{"name": "393_C. Blocked Points", "description": "Input\n\nThe first line contains an integer n (0 <= n <= 4.10^7).", "testcase": ["0", "1", "325", "78459", "2097152", "16777216", "34000000", "41000000", "12345678", "40000000"]}
{"name": "513_A. Game", "description": "Input\n\nThe first line contains four integers n1, n2, k1, k2. All numbers in the input are from 1 to 50.\n\nThis problem doesn't have subproblems. You will get 3 points for the correct submission.", "testcase": ["10 20 5 15\n", "1 1 1 1\n", "50 50 50 50\n", "7 42 3 18\n", "23 35 1 50\n", "16 8 10 2\n", "31 27 14 33\n", "50 1 25 1\n", "4 4 2 2\n", "49 2 6 47\n"]}
{"name": "538_B. Quasi Binary", "description": "Input\n\nThe first line contains a single integer n (1 <= n <=10^6.", "testcase": ["1", "123456", "999999", "10", "500000", "987654", "100000", "42", "999", "65536"]}
{"name": "680_D. Bear and Tower of Cubes", "description": "Input\n\nThe only line of the input contains one integer m (1 <= m <=10^15), meaning that Limak wants you to choose X between 1 and m, inclusive.", "testcase": ["1", "2", "100", "999999999999999", "500000000000000", "32767", "100000000000007", "99999999999999", "42", "777777777777777"]}
{"name": "110_B. Lucky String", "description": "Input\n\nThe single line contains a positive integer n (1 <= n <=10^5) --- the length of the sought string.", "testcase": ["1", "99999", "12345", "54321", "10000", "23456", "98765", "11111", "22222", "100"]}
{"name": "117_B. Very Interesting Game", "description": "Input\n\nThe first line contains three integers a, b, mod (0 <= a, b <=10^9, 1 <= mod <=10^7).", "testcase": ["0 0 10000000", "1000000000 1000000000 10000000", "500000000 400000000 1", "999999999 0 123456", "350000000 750000000 98765", "123456789 987654321 10000", "0 999999999 999999", "111111111 222222222 333333", "876543210 123456789 99999", "555555 444444 8888"]}
{"name": "127_E. E-reader Display", "description": "Input\n\nThe first line contains number n (1 <= n <= 2000).\n\nNext n lines contain n characters each: the description of the picture that needs to be shown. \"0\" represents the white color and \"1\" represents the black color.", "testcase": ["2\n00\n01", "3\n010\n111\n001", "1\n1", "4\n0000\n0101\n0010\n0000", "5\n00100\n00100\n11111\n00100\n00100", "6\n000000\n011110\n010010\n010010\n011110\n000000", "7\n0000000\n0001000\n0001000\n0001000\n0001000\n0001000\n0000000", "8\n01111110\n01000010\n01000010\n01000010\n01000010\n01000010\n01000010\n01111110", "9\n0011100\n0100010\n1000001\n1000001\n1000001\n0100010\n0011100\n", "10\n0000000000\n0111111110\n0100000010\n0100000010\n0100000010\n0100000010\n0100000010\n0100000010\n0111111110\n0000000000"]}
{"name": "365_A. Good Number", "description": "Input\n\nThe first line contains integers n and k (1 <= n <= 100, 0 <= k <= 9). The i-th of the following n lines contains integer ai without leading zeroes (1 <= ai <=10^9).", "testcase": ["3 2\n12345\n67890\n24680", "5 0\n100000000\n99999999\n12345678\n87654321\n10000000", "7 5\n55555\n15555\n25555\n35555\n45555\n65555\n75555", "1 4\n4444", "2 1\n10\n11", "6 6\n666666\n66666\n6666\n666\n66\n6", "4 8\n8888\n88888\n888888\n8888888", "8 3\n303030\n33030\n303300\n330030\n30303\n3303\n303\n33", "9 7\n7070707\n7777777\n77777\n7777\n777\n77\n7\n700000000\n70000000", "10 9\n999999999\n99999999\n9999999\n999999\n99999\n9999\n999\n99\n9\n900000000"]}
{"name": "625_A. Guest From the Past", "description": "Input\n\nFirst line of the input contains a single integer n (1 <= n <=10^18) --- the number of rubles Kolya has at the beginning.\n\nThen follow three lines containing integers a, b and c (1 <= a <=10^18, 1 <= c < b <=10^18) --- the cost of one plastic liter bottle, the cost of one glass liter bottle and the money one can get back by returning an empty glass bottle, respectively.", "testcase": ["5\n2\n7\n1", "999999999999999999\n999999999999999998\n999999999999999999\n999999999999999997", "1500000000\n1000000000\n3000000000\n500000000", "123456789012345\n234567890123456\n345678901234567\n12345678901234", "98765432109876\n76543210987654\n87654321098765\n65432109876543", "10000000000\n2000000000\n3000000000\n1500000000", "314159265358979\n271828182845904\n461168601842738\n31415926535897", "7\n6\n8\n1", "1\n1\n2\n1", "100\n50\n75\n25"]}
{"name": "12_B. Correct Solution?", "description": "Input\n\nThe first line contains one integer n (0 <= n <=10^9) without leading zeroes. The second lines contains one integer m (0 <= m <=10^9) --- Bob's answer, possibly with leading zeroes.", "testcase": ["9\n000000009", "100000000\n001", "0\n0000000000", "500000000\n123456789", "999999999\n000098765", "23456789\n023456789", "10\n0000000010", "1\n0000000001", "8463728\n08463728", "1234\n00001234"]}
{"name": "221_C. Little Elephant and Problem", "description": "Input\n\nThe first line contains a single integer n (2 <= n <=10^5) --- the size of array a. The next line contains n positive integers, separated by single spaces and not exceeding 109, --- array a.\n\nNote that the elements of the array are not necessarily distinct numbers.", "testcase": ["3\n1 2 3", "2\n1000000000 100000000", "4\n5 4 3 2", "5\n32 45 67 89 12", "6\n23 14 56 78 90 45", "10\n10 10 10 10 10 10 10 10 10 10", "7\n345 678 901 234 567 890 123", "8\n873 262 716 100 200 300 400 500", "9\n50 50 50 50 50 50 50 50 51", "2\n999999999 500000000"]}
{"name": "p02174 Power Subsequences", "description": "Input\n\nThe input is given in the following format.\n\n\n$ N $\n$ x_1 $ $ \\ ldots $ $ x_N $\n\n\nThe first line is given the length $ N $. In the second row, the elements of the sequence $ X $ are given, separated by blanks.", "testcase": ["3\n1 2 3", "5\n10 20 30 40 50", "4\n111 222 333 444", "2\n-1 -2", "6\n0 0 0 0 0 0", "1\n42", "7\n100 200 300 400 500 600 700", "4\n-5 15 -25 35", "8\n88 77 66 55 44 33 22 11", "10\n9 8 7 6 5 4 3 2 1 0"]}
{"name": "1159_A. A pile of stones", "description": "Input\n\nThe first line contains one positive integer n --- the number of operations, that have been made by Vasya (1 <= n <= 100).\n\nThe next line contains the string s, consisting of n symbols, equal to \"-\" (without quotes) or \"+\" (without quotes). If Vasya took the stone on i-th operation, s_i is equal to \"-\" (without quotes), if added, s_i is equal to \"+\" (without quotes).", "testcase": ["1\n+", "2\n+-", "3\n+++", "4\n-+-+", "5\n++--+", "6\n+-+-+-", "7\n++--+-+", "8\n+-++-+-+", "9\n-+-+-+-++", "10\n++---+--++"]}
{"name": "1181_A. Chunga-Changa", "description": "Input\n\nThe first line contains three integers x, y and z (0 <= x, y <= 10^{18}, 1 <= z <= 10^{18}) --- the number of chizhics Sasha has, the number of chizhics Masha has and the price of a coconut.", "testcase": ["0 0 1", "10 5 2", "999999999999999999 999999999999999999 1000000000000000000", "123456789012345678 987654321098765432 999999999999999", "0 10 1000000000000000000", "500000000000000000 500000000000000000 3", "350000000000000000 700000000000000000 800000000000000000", "1 1 1", "1000000000000000000 1000000000000000000 1000000000000000000", "123 456 789"]}
{"name": "125_A. Measuring Lengths in Baden", "description": "Input\n\nThe only line contains an integer n (1 <= n <= 10000).", "testcase": ["1", "2345", "876", "10000", "4321", "5000", "7698", "9999", "100", "482"]}
{"name": "40_C. Berland Square", "description": "Input\n\nThe first line contains integers N, x, M, y. (1 <= N, M <= 100000, - 100000 <= x, y <= 100000, x != y).", "testcase": ["1 -50000 100000 50000", "100000 99999 1 -99999", "50000 0 50000 -1", "1 -1 100000 1", "100000 -100000 1 100000", "12345 12344 54321 -12344", "99999 48763 2 -48763", "80000 -40000 20000 39999", "75932 -75931 24068 0", "100 50 10000 -50"]}
{"name": "742_A. Arpa’s hard exam and Mehrdad’s naive cheat", "description": "Input\n\nThe single line of input contains one integer n (0 <= n <=10^9).", "testcase": ["0", "1", "987654321", "123456789", "500000000", "999999999", "1000000000", "42", "847", "4096"]}
{"name": "87_C. Interesting Game", "description": "Input\n\nThe single line contains a single integer n (1 <= n <=10^5).", "testcase": ["1", "2", "100", "99999", "12345", "67890", "23456", "98765", "55555", "43210"]}
{"name": "1191_A. Tokitsukaze and Enhancement", "description": "Input\n\nThe only line contains a single integer x (30 <= x <= 100) --- the value Tokitsukaze's HP currently.", "testcase": ["30", "45", "55", "60", "70", "75", "80", "90", "95", "100"]}
{"name": "1251_C. Minimize The Integer", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 10^4) --- the number of test cases in the input.\n\nThe only line of each test case contains the integer a, its length n is between 1 and 3 * 10^5, inclusive.\n\nIt is guaranteed that the sum of all values n does not exceed 3 * 10^5.", "testcase": ["1\n123", "2\n56\n789", "3\n1\n234\n5678", "4\n91011\n1213\n141516\n171819", "2\n202122\n23242526", "1\n2728293031", "3\n3233\n34353637\n383940", "2\n4142434445\n4647484950", "4\n51\n525354\n5556575859\n606162636465", "1\n6667686970717273"]}
{"name": "287_B. Pipeline", "description": "Input\n\nThe first line contains two space-separated integers n and k (1 <= n <=10^18, 2 <= k <=10^9).\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in С++. It is preferred to use the cin, cout streams or the %I64d specifier.", "testcase": ["1 2", "999999999999999999 2", "10000000000000000 999999999", "123456789012345678 200", "987654321987654321 987654321", "1000000000000000000 1000000000", "500000000000000000 98765", "99999999999999998 3", "712345678901234567 201", "350000000000000000 444444444"]}
{"name": "733_A. Grasshopper And the String", "description": "Input\n\nThe first line contains non-empty string consisting of capital English letters. It is guaranteed that the length of the string does not exceed 100.", "testcase": ["A", "X", "HELLOWORLD", "ABCDEFGHIJ", "TESTCASE", "PROBLEM", "STRING", "COMPUTER", "JSONFORMAT", "SPECIFICATION"]}
{"name": "1091_C. New Year and the Sphere Transmission", "description": "Input\n\nThe only line consists of a single integer n (2 <= n <= 10^9) --- the number of people playing with the ball.", "testcase": ["2", "3", "17", "100", "99999999", "150", "987654321", "999999999", "500000000", "42"]}
{"name": "1180_A. Alex and a Rhombus", "description": "Input\n\nThe first and only input line contains integer n (1 <= n <= 100) --- order of a rhombus whose numbers of cells should be computed.", "testcase": ["1", "2", "3", "4", "5", "10", "20", "50", "75", "100"]}
{"name": "1239_A. Ivan the Fool and the Probability Theory", "description": "Input\n\nThe only line contains two integers n and m (1 <= n, m <= 100 000), the number of rows and the number of columns of the field.", "testcase": ["1 1", "2 100000", "100000 2", "12345 67890", "50000 50000", "99999 99999", "100000 100000", "54321 12345", "100 200", "200 100"]}
{"name": "199_C. About Bacteria", "description": "Input\n\nThe first line contains four space-separated integers k, b, n and t (1 <= k, b, n, t <=10^6 --- the parameters of bacterial growth, the time Qwerty needed to grow z bacteria in the first experiment and the initial number of bacteria in the second experiment, correspondingly.", "testcase": ["2 3 100000 500000", "1 1 500000 100000", "123456 234567 345678 456789", "999999 888888 777777 666666", "2345 6789 1000 2000", "6789 2345 98765 54321", "314159 271828 161803 141421", "42 24 4242 2424", "100000 100000 100000 100000", "1 2 3 4"]}
{"name": "342_C. Cupboard and Balloons", "description": "Input\n\nThe single line contains two integers r, h (1 <= r, h <=10^7).", "testcase": ["1 1", "10000000 10000000", "123456 789012", "42 424242", "999999 1234567", "2345678 8765432", "8675309 3141592", "654321 123456", "5067890 5078901", "3141592 2718281"]}
{"name": "675_A. Infinite Sequence", "description": "Input\n\nThe first line of the input contain three integers a, b and c ( - 109 <= a, b, c <=10^9) --- the first element of the sequence, Vasya's favorite number and the difference between any two neighbouring elements of the sequence, respectively.", "testcase": ["-109 0 1", "1000000000 500000000 1000000", "0 -999999999 -100", "-500000000 123456789 987654321", "999999999 -999999999 0", "-999999999 999999999 -999999999", "1 1 -1", "-100000000 42 100000000", "500000000 -500000000 500000000", "123456789 -987654321 -123456789"]}
{"name": "9_A. Die Roll", "description": "Input\n\nThe only line of the input file contains two natural numbers Y and W --- the results of Yakko's and Wakko's die rolls.", "testcase": ["4 5", "6 1", "2 3", "3 4", "5 2", "1 6", "3 3", "4 6", "2 5", "6 6"]}
{"name": "626_C. Block Towers", "description": "Input\n\nThe first line of the input contains two space-separated integers n and m (0 <= n, m <= 1 000 000, n + m > 0) --- the number of students using two-block pieces and the number of students using three-block pieces, respectively.", "testcase": ["2 3", "0 1", "1000000 0", "123456 78910", "999999 1", "300 700000", "500500 500500", "0 1000000", "1 999999", "250000 250000"]}
{"name": "87_A. Trains", "description": "Input\n\nThe first line contains two integers a and b (a != b, 1 <= a, b <=10^6.", "testcase": ["1 2", "17 456789", "345 678", "999999 100000", "254679 847362", "3 999997", "7458 7459", "128 256", "65535 65534", "121 122"]}
{"name": "1008_A. Romaji", "description": "Input\n\nThe first line of the input contains the string s consisting of |s| (1<= |s|<= 100) lowercase Latin letters.", "testcase": ["a", "hello", "programming", "testcase", "jsonformat", "specification", "example", "knowledge", "letters", "abcdefghij"]}
{"name": "1480_A. Yet Another String Game", "description": "Input\n\nEach test contains multiple test cases. The first line contains t (1 <= t <= 1000) --- the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains a single string s (1 <= |s| <= 50) consisting of lowercase English letters.", "testcase": ["z", "example", "testcase", "multipletests", "lowercase", "letters", "string", "abcde", "verification", "jsonformat"]}
{"name": "1506_G. Maximize the Remaining String", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 10^4). Then t test cases follow.\n\nEach test case is characterized by a string s, consisting of lowercase Latin letters (1 <= |s| <= 2 * 10^5).\n\nIt is guaranteed that the sum of the lengths of the strings in all test cases does not exceed 2 * 10^5.", "testcase": ["3", "abc", "defghijk", "z", "2", "xy", "uvwxy", "1", "pqrstuv", "4", "a", "bb", "ccc", "dddd", "5", "mnop", "qrstuv", "wxyz", "abcd", "efgh", "1", "ijklmnopqr", "3", "stuv", "wxyz", "abcdefghij", "2", "klmno", "pqrst", "1", "uvwxyz"]}
{"name": "161_C. Abracadabra", "description": "Input\n\nThe input consists of a single line containing four integers l1, r1, l2, r2 (1 <= li <= ri <=10^9, i = 1, 2). The numbers are separated by single spaces. li and ri give the indices of the first and the last characters of the i-th chosen substring, correspondingly (i = 1, 2). The characters of string abracadabra are numbered starting from 1.", "testcase": ["1 5 2 6", "3 7 1 4", "2 8 5 9", "6 10 3 7", "1 3 4 7", "5 8 9 11", "7 11 2 5", "4 6 8 10", "2 4 6 9", "1 1 10 10"]}
{"name": "204_A. Little Elephant and Interval", "description": "Input\n\nThe single line contains a pair of integers l and r (1 <= l <= r <=10^18) --- the boundaries of the interval.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in С++. It is preferred to use cin, cout streams or the %I64d specifier.", "testcase": ["1 1000000000000000000", "10 20", "99999999999999999 1000000000000000000", "123456789 987654321", "100000000 999999999", "500000000000000000 500000000000000010", "1 10", "999999999999999 999999999999999999", "100000000000000 200000000000000", "900000000000000000 900000000000000100"]}
{"name": "680_A. Bear and Five Cards", "description": "Input\n\nThe only line of the input contains five integers t1, t2, t3, t4 and t5 (1 <= ti <= 100) --- numbers written on cards.", "testcase": ["10 20 30 40 50", "1 1 1 1 1", "99 88 77 66 55", "2 4 6 8 10", "100 100 100 100 100", "34 67 89 23 41", "3 7 11 13 17", "15 15 15 15 15", "73 82 91 47 56", "18 36 54 72 90"]}
{"name": "1037_A. Packets", "description": "Input\n\nThe only line contains a single integer n (1 <= n <= 10^9) --- the number of coins you have.", "testcase": ["1", "10", "123456789", "999999999", "500000000", "234567890", "42", "987654321", "100000000", "76543210"]}
{"name": "124_C. Prime Permutation", "description": "Input\n\nThe only line contains the initial string s, consisting of small Latin letters (1 <= |s| <= 1000).", "testcase": ["abcde", "xyz", "teststring", "a", "pneumonoultramicroscopicsilicovolcanoconiosis", "hello", "abcdefghijklmnopqrstuvwxy", "singlecharacter", "mixedcasesarefun", "lasttestcase"]}
{"name": "1490_C. Sum of Cubes", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 100) --- the number of test cases. Then t test cases follow.\n\nEach test case contains one integer x (1 <= x <= 10^{12}).\n\nPlease note, that the input for some test cases won't fit into 32-bit integer type, so you should use at least 64-bit integer type in your programming language.", "testcase": ["1\n1", "2\n10\n100", "1\n123456789012", "1\n999999999999", "3\n500\n6000000\n700000000000", "1\n4294967296", "1\n987654321098", "2\n1125899906842624\n18", "1\n1000000000000", "1\n2047"]}
{"name": "571_A. Lengthening Sticks", "description": "Input\n\nThe single line contains 4 integers a, b, c, l (1 <= a, b, c <= 3.10^5, 0 <= l <= 3.10^5).", "testcase": ["1 1 1 0", "300000 300000 300000 300000", "12345 67890 23456 123", "100000 200000 150000 250000", "2 2 3 50", "299999 299998 299997 10", "2000 4000 3000 10000", "99999 88888 7777 222222", "234 567 890 12345", "111111 222222 333333 0"]}
{"name": "709_D. Recover the String", "description": "Input\n\nThe only line of the input contains four non-negative integers a00, a01, a10 and a11. Each of them doesn't exceed 109.", "testcase": ["0 0 0 0", "1 2 3 4", "5 8 13 21", "34 55 89 144", "233 377 610 987", "1597 2584 4181 6765", "10946 17711 28657 46368", "75025 121393 196418 317811", "514229 832040 1346269 2178309", "1346269 2178309 3524578 5702887"]}
{"name": "867_C. Ordering Pizza", "description": "Input\n\nThe first line of input will contain integers N and S (1 <= N <=10^5, 1 <= S <=10^5), the number of contestants and the number of slices per pizza, respectively. N lines follow.\n\nThe i-th such line contains integers si, ai, and bi (1 <= si <=10^5, 1 <= ai <=10^5, 1 <= bi <=10^5), the number of slices the i-th contestant will eat, the happiness they will gain from each type 1 slice they eat, and the happiness they will gain from each type 2 slice they eat, respectively.", "testcase": ["2 8\n5 10 20\n3 15 25", "3 6\n4 35 15\n2 20 30\n5 25 5", "1 10\n10 50 40", "4 10\n1 100 200\n3 150 100\n7 80 70\n2 60 90", "5 5\n1 10 20\n2 30 40\n1 15 25\n2 50 60\n3 70 80", "7 10\n9 30 20\n6 40 20\n3 25 35\n5 50 45\n2 10 5\n7 35 25\n1 20 15", "6 4\n1 10 10\n1 20 20\n1 30 30\n1 40 40\n1 50 50\n1 60 60", "8 8\n3 12 6\n2 6 12\n7 14 16\n5 20 10\n6 15 22\n4 8 8\n1 10 10\n8 18 20", "3 12\n6 45 55\n6 60 65\n12 50 45", "10 20\n5 15 10\n10 25 20\n20 30 40\n15 35 30\n10 40 50\n5 20 25\n15 45 50\n5 50 45\n10 60 55\n20 70 65"]}
{"name": "1362_A. Johnny and Ancient Computer", "description": "Input\n\nThe input consists of multiple test cases. The first line contains an integer t (1 <= t <= 1000) --- the number of test cases. The following t lines contain a description of test cases.\n\nThe first and only line in each test case contains integers a and b (1 <= a, b <= 10^{18}) --- the initial and target value of the variable, respectively.", "testcase": ["1\n1000000000000000000 1000000000000000000", "1\n500 999999999999999999", "1\n123456789012345678 234567890123456789", "1\n100000000000000000 200000000000000000", "1\n246802468024680246 135791357913579135", "1\n1 10", "1\n999999999999999999 1000000000000000000", "1\n987654321098765432 123456789012345678", "1\n10000000000000000 999999999999999999", "1\n555555555555555555 777777777777777777"]}
{"name": "1471_A. Strange Partition", "description": "Input\n\nThe first input line contains a single integer t --- the number of test cases (1 <= t <= 1000).\n\nThe first line of each test case contains two integers n and x (1 <= n <= 10^5, 1 <= x <= 10^9).\n\nThe next line contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 10^9), the elements of the array a. \n\nIt is guaranteed that the sum of values of n over all test cases does not exceed 10^5.", "testcase": ["1\n5 10\n2 4 6 8 10", "3\n3 1000000000\n1000000000 1000000000 1000000000\n4 7\n1 3 5 7\n2 5\n2 3", "2\n6 12\n2 7 1 3 3 4\n8 16\n2 4 8 6 4 5 7 3", "1\n4 123456789\n98765432 87654321 76543210 65432109", "2\n1 1\n1\n10 999999999\n100000000 200000000 300000000 400000000 500000000 600000000 700000000 800000000 900000000 999999999", "1\n7 77\n11 22 33 44 55 66 77", "1\n10 500000000\n4353 234234 5464564 2342345 765867 2343234 4564565 567567 678678 123456", "1\n8 88888888\n22222222 44444444 66666666 33333333 55555555 77777777 88888888 99999999", "2\n2 42\n6 36\n3 24\n8 16 32", "1\n5 99999999\n12345678 87654321 12345678 87654321 1234567"]}
{"name": "1498_A. GCD Sum", "description": "Input\n\nThe first line of input contains one integer t (1 <= t <= 10^4) --- the number of test cases. \n\nThen t lines follow, each containing a single integer n (1 <= n <= 10^{18}).\n\nAll test cases in one test are different.", "testcase": ["1\n1000000000000000000", "1\n999999999999999999", "1\n847584875848575849", "1\n123456789123456789", "1\n987654321987654321", "1\n764353789234576234", "1\n111111111111111111", "1\n222222222222222222", "1\n333333333333333333", "1\n444444444444444444"]}
{"name": "478_C. Table Decorations", "description": "Input\n\nThe single line contains three integers r, g and b (0 <= r, g, b <= 2.10^9) --- the number of red, green and blue baloons respectively. The numbers are separated by exactly one space.", "testcase": ["0 0 0", "257 1024 4096", "2000000000 2000000000 2000000000", "123456789 987654321 192837465", "42 42 42", "15 30 45", "1000000 2000000 3000000", "999999999 888888888 777777777", "500 1000 1500", "100 200 300"]}
{"name": "5_C. Longest Regular Bracket Sequence", "description": "Input\n\nThe first line of the input file contains a non-empty string, consisting of «(» and «)» characters. Its length does not exceed 106.", "testcase": ["()", "((()))", "()()()", "(()())", "(())()", "(((())))", "(()(()))", "()(()())", "((())())", "((()()))"]}
{"name": "622_A. Infinite Sequence", "description": "Input\n\nThe only line contains integer n (1 <= n <= 1014) --- the position of the number to find.\n\nNote that the given number is too large, so you should use 64-bit integer type to store it. In C++ you can use the long long integer type and in Java you can use long integer type.", "testcase": ["1", "10", "123456789", "100000000000000", "847502938475102", "99999999999999", "100000000000001", "55555555555555", "98765432101234", "12345678909876"]}
{"name": "784_D. Touchy-Feely Palindromes", "description": "Input\n\nThe only line of the input contains a string of digits. The length of the string is between 1 and 10, inclusive.", "testcase": ["0", "1234567890", "31337", "123", "7", "4815162342", "42", "999999999", "8675309", "2468"]}
{"name": "805_C. Find Amir", "description": "Input\n\nThe first line contains a single integer n (1 <= n <=10^5) --- the number of schools.", "testcase": ["1", "2", "10", "99999", "54321", "100000", "12345", "42", "999", "50000"]}
{"name": "997_B. Roman Digits", "description": "Input\n\nThe only line of the input file contains a single integer n (1 <= n <= 10^9) --- the number of roman digits to use.", "testcase": ["1", "10", "100", "999999999", "500000000", "250000", "123456789", "987654321", "12345", "67890"]}
{"name": "111_D. Petya and Coloring", "description": "Input\n\nThe first line contains space-separated integers n, m and k (1 <= n, m <= 1000, 1 <= k <=10^6 --- the board's vertical and horizontal sizes and the number of colors respectively.", "testcase": ["1 1 1", "2 3 100", "5 5 1000000", "10 10 500", "1000 1000 1000000", "250 750 987654", "100 200 300000", "333 444 123456", "999 888 777666", "500 600 1000"]}
{"name": "1223_A. CME", "description": "Input\n\nThe first line contains one integer q (1 <= q <= 100) --- the number of queries.\n\nThe only line of each query contains one integer n (2 <= n <= 10^9) --- the number of matches.", "testcase": ["3\n2\n100000000\n500", "2\n234567890\n987654321", "1\n999999999", "4\n123456789\n234567890\n345678901\n456789012", "5\n100000002\n200000003\n300000004\n400000005\n500000006", "10\n2\n4\n6\n8\n10\n12\n14\n16\n18\n20", "6\n99999994\n88888885\n77777776\n66666667\n55555558\n44444449", "8\n100\n1000\n10000\n100000\n1000000\n10000000\n100000000\n999999999", "3\n429496729\n214748364\n107374182", "7\n2\n4\n8\n16\n32\n64\n128"]}
{"name": "1267_B. Balls of Buma", "description": "Input\n\nThe only line contains a non-empty string of uppercase English letters of length at most 3 * 10^5. Each letter represents a ball with the corresponding color.", "testcase": ["A", "BCA", "ZZTOP", "QWERTYUIOPASDFGHJKLZXCVBNM", "ABCDEFGHIJKLMNOPQRSTUVWX", "YYXXZZAAABBBCCCDDDEEEFFF", "ABCDEFGHIJKLMNOPQRST", "ABCABCABCABCABCABCABCABCABCABC", "QWERQWERQWERQWERQWERQWERQWERQWERQWERQWER", "ZXCASDQWE"]}
{"name": "32_D. Constellation", "description": "Input\n\nThe first line contains three integers n, m and k (1 <= n, m <= 300, 1 <= k <= 3.10^7) --- height and width of the map and index of the required constellation respectively. The upper-left corner has coordinates (1, 1), and the lower-right --- (n, m). Then there follow n lines, m characters each --- description of the map. j-th character in i-th line is «*», if there is a star in the corresponding square, and «.» if this square is empty.", "testcase": ["3 4 7\n*.*.\n.*.*\n*.*.", "1 5 18\n*****", "5 5 15\n.....\n..*..\n.....\n..*..\n.....", "2 3 4\n*.*\n.*.", "6 1 6\n*\n.\n*\n.\n*\n.", "4 4 10\n*.*.\n.*.*\n*.*.\n.*.*", "7 2 45\n*.\n.*\n*.\n.*\n*.\n.*\n*.", "3 3 9\n*.*\n.*.\n*.*", "8 8 48\n........\n....*...\n........\n........\n...*....\n........\n........\n........", "10 10 273\n..*..*..*.\n*..*..*..\n..*..*..*.\n*..*..*..\n..*..*..*.\n*..*..*..\n..*..*..*.\n*..*..*..\n..*..*..*.\n*..*..*.."]}
{"name": "420_A. Start Up", "description": "Input\n\nThe first line contains a non-empty name that needs to be checked. The name contains at most 105 large English letters. The name will be written with the next sans serif font: \n\n<image>", "testcase": ["ALEXANDER", "VICTORIA", "JONATHAN", "ELIZABETH", "NICHOLAS", "CHARLOTTE", "BENJAMIN", "CHRISTOPHER", "MARGARET", "THEODORE"]}
{"name": "74_C. Chessboard Billiard", "description": "Input\n\nThe first line contains two integers n and m (2 <= n, m <=10^6.", "testcase": ["2 2", "10 1000", "500000 500000", "200000 800000", "100 500", "234567 876543", "1000000 1000000", "678910 123456", "999999 1000000", "2 10"]}
{"name": "798_A. Mike and palindrome", "description": "Input\n\nThe first and single line contains string s (1 <= |s| <= 15).", "testcase": ["a", "Example", "ShortTest", "1234567890", "abcdefghij", "K1tt3n$", "P@ssw0rd", "LongerThan15CharsButLess", "1", "Mixed123"]}
{"name": "934_D. A Determined Cleanup", "description": "Input\n\nThe only line of input contains two space-separated integers p and k (1 <= p <=10^18, 2 <= k <= 2 000).", "testcase": ["1 2", "999999999999999999 2000", "500 100", "10000000000000000 1999", "123456789 1234", "987654321987654321 456", "135791357913579135 789", "246802468024680 1600", "102030405060708090 333", "17 2017"]}
{"name": "1146_B. Hate \"A\"", "description": "Input\n\nThe first line of input contains a string t (1 <= |t| <= 10^5) consisting of lowercase English letters.", "testcase": ["a", "xy", "pqrst", "abcdefgh", "kotlinpython", "java", "abcdefghijklmnopqrst", "testcasegeneration", "maximuminputsizeisonehundredthousandcharacters", "finaltestcaseexample"]}
{"name": "374_A. Inna and Pink Pony", "description": "Input\n\nThe first line of the input contains six integers n, m, i, j, a, b (1 <= n, m <= 106; 1 <= i <= n; 1 <= j <= m; 1 <= a, b <=10^6.\n\nYou can assume that the chessboard rows are numbered from 1 to n from top to bottom and the columns are numbered from 1 to m from left to right. Position (i, j) in the statement is a chessboard cell on the intersection of the i-th row and the j-th column. You can consider that the corners are: (1, m), (n, 1), (n, m), (1, 1).", "testcase": ["2 3 1 2 1 1", "3 4 3 1 1 2", "5 5 2 3 2 2", "10 10 5 5 3 3", "6 8 6 1 1 1", "7 7 4 4 2 3", "8 9 8 9 2 2", "9 6 3 3 3 1", "1000000 1000000 500000 500000 1000000 1000000", "1000000 999999 999999 999998 2 2"]}
{"name": "933_B. A Determined Cleanup", "description": "Input\n\nThe only line of input contains two space-separated integers p and k (1 <= p <=10^18, 2 <= k <= 2 000).", "testcase": ["100 2000", "9999999999999999 1999", "5000000000000000 1500", "800000000000 345", "1234567890123456 678", "1 2", "10 100", "9876543210987654 2020", "31415926535897 2718", "705490000003629 1998"]}
{"name": "987_B. High School: Become Human", "description": "Input\n\nOn the only line of input there are two integers x and y (1 <= x, y <= 10^{9}).", "testcase": ["1 1", "123 456", "999999999 999999999", "500000000 123456789", "12 34", "100000000 200000000", "250000000 750000000", "987654321 123456789", "314159265 271828182", "100000001 100000002"]}
{"name": "p01498 King Slime", "description": "Input\n\nThe first line contains three integers N (2 <= N <= 40,000), W and H (1 <= W, H <= 100,000), which denote the number of slimes, the width and the height of the grid respectively.\n\nThe following N lines describe the initial coordinates of the slimes. The i-th line contains two integers xi (1 <= xi <= W) and yi (1 <= yi <= H), which indicate the coordinates of the i-th slime . All the coordinates are 1-based.\n\nYou may assume that each cell is occupied by at most one slime initially.", "testcase": ["5 10 10\n1 1\n10 10\n5 5\n2 2\n3 3", "2 100000 100000\n99999 100000\n100000 99999", "3 50000 40000\n12345 6789\n23456 9876\n34567 8765", "4 300 300\n150 150\n300 300\n75 75\n1 1", "7 1000 2000\n100 500\n200 600\n300 700\n400 800\n500 900\n600 1000\n700 1100", "8 9999 8888\n1111 2222\n3333 4444\n5555 6666\n7777 8888\n2222 1111\n4444 3333\n6666 5555\n8888 7777", "10 40000 60000\n10000 20000\n15000 25000\n20000 30000\n25000 35000\n12345 23456\n30000 40000\n35000 45000\n40000 50000\n2048 4096\n8192 16384", "6 2000 3000\n500 600\n700 800\n900 1000\n1100 1200\n1300 1400\n1500 1600", "11 42000 37000\n13000 14000\n15000 16000\n17000 18000\n19000 20000\n21000 22000\n23000 24000\n25000 26000\n27000 28000\n29000 30000\n31000 32000\n33000 34000", "9 54321 12345\n4321 1234\n5432 2345\n6543 3456\n7654 4567\n8765 5678\n9876 6789\n10987 7890\n11998 8901\n12999 9012"]}
{"name": "1401_A. Distance and Axis", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 6000) --- the number of test cases.\n\nThe only line of each test case contains two integers n and k (0 <= n, k <= 10^6) --- the initial position of point A and desirable absolute difference.", "testcase": ["1\n500000 250000", "2\n400000 100000\n300000 150000", "3\n999999 0\n600000 300000\n123456 78901", "1\n234567 765432", "2\n1000000 500000\n500000 499999", "4\n12345 54321\n0 0\n100000 10000\n999999 99999", "1\n847362 163729", "3\n222222 333333\n444444 555555\n777777 888888", "5\n135791 246802\n111111 222222\n333333 111111\n666666 222222\n999999 333333", "1\n654321 123456"]}
{"name": "146_D. Lucky Number 2", "description": "Input\n\nThe single line contains four integers a1, a2, a3 and a4 (1 <= a1, a2, a3, a4 <=10^6.", "testcase": ["1 2 3 4", "1000000 999999 888888 777777", "234567 345678 456789 123456", "314159 271828 161803 141421", "42 42 42 42", "505050 606060 707070 808080", "111111 222222 333333 444444", "999999 1000000 1 2", "987654 123456 789123 456789", "543210 654321 765432 876543"]}
{"name": "404_D. Minesweeper 1D", "description": "Input\n\nThe first line contains sequence of characters without spaces s1s2... sn (1 <= n <=10^6, containing only characters \"*\", \"?\" and digits \"0\", \"1\" or \"2\". If character si equals \"*\", then the i-th cell of the field contains a bomb. If character si equals \"?\", then Valera hasn't yet decided what to put in the i-th cell. Character si, that is equal to a digit, represents the digit written in the i-th square.", "testcase": ["1*?02*?*1", "2?*?1*0??", "1?1?*?1*2*", "*0?2*?*?0", "2*1*?0?*?2", "11??*0?*2?", "**?2*0?11?", "0??*?12?*?", "*?*?*?*0?2", "?0?1?*2?*?"]}
{"name": "550_A. Two Substrings", "description": "Input\n\nThe only line of input contains a string s of length between 1 and 105 consisting of uppercase Latin letters.", "testcase": ["A", "BCD", "EFGHIJKL", "MNOPQRSTUVWXYZ", "ABACADAEAF", "QWERTYUIOPASDFGHJKLZXCVBNM", "HELLOWORLD", "COMPUTERSCIENCE", "JAVASCRIPT", "PYTHONPROGRAMMING"]}
{"name": "690_F1. Tree of Life (easy)", "description": "Input\n\nThe first line of the input contains a single integer n -- the number of vertices in the tree (1 <= n <= 10000). The vertices are labeled with the numbers from 1 to n. Then n - 1 lines follow, each describing one edge using two space-separated numbers a b -- the labels of the vertices connected by the edge (1 <= a < b <= n). It is guaranteed that the input represents a tree.", "testcase": ["3\n1 2\n2 3", "4\n1 2\n2 3\n3 4", "5\n1 2\n1 3\n1 4\n1 5", "6\n1 2\n2 3\n3 4\n4 5\n5 6", "7\n1 2\n1 3\n2 4\n2 5\n4 6\n4 7", "8\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8", "9\n1 2\n2 3\n4 5\n5 3\n6 3\n3 7\n7 8\n8 9", "10\n1 2\n2 3\n2 4\n4 5\n4 6\n6 7\n7 8\n8 9\n9 10", "6\n1 2\n1 3\n2 4\n4 5\n4 6", "5\n1 2\n2 3\n2 4\n3 5"]}
{"name": "804_A. Find Amir", "description": "Input\n\nThe first line contains a single integer n (1 <= n <=10^5) --- the number of schools.", "testcase": ["1", "10", "100", "99999", "54321", "12345", "23456", "34567", "45678", "56789"]}
{"name": "488_A. Giga Tower", "description": "Input\n\nThe only line of input contains an integer a ( - 109 <= a <=10^9).", "testcase": ["-500000000", "0", "999999999", "12345", "-12345", "2147483647", "-2147483648", "1987654321", "-987654321", "1000000000"]}
{"name": "560_B. Gerald is into Art", "description": "Input\n\nThe first line contains two space-separated numbers a1 and b1 --- the sides of the board. Next two lines contain numbers a2, b2, a3 and b3 --- the sides of the paintings. All numbers ai, bi in the input are integers and fit into the range from 1 to 1000.", "testcase": ["8 11\n3 2\n4 5", "15 20\n10 2\n5 14", "16 17\n8 8\n8 9", "50 50\n25 25\n25 25", "100 200\n50 100\n150 50", "200 100\n100 50\n100 50", "300 400\n100 300\n200 100", "500 600\n200 150\n400 200", "700 800\n350 450\n450 350", "999 1000\n500 499\n501 500"]}
{"name": "656_C. Without Text", "description": "Input\n\nThe only line of the input is a string (between 1 and 50 characters long, inclusive). Each character will be an alphanumeric character or a full stop \".\".", "testcase": ["A1.B2.C3", "1234567890", "a.b.c.d.e.f", "ZXY0987654.", ".1X2Y3Z.", "abcdefghijklmnopqrstuvwxy", "Hello.World123", "Test.Case.50.Char.Limits.lmnopqrstuv.123", "42", "."]}
{"name": "886_B. Vlad and Cafes", "description": "Input\n\nIn first line there is one integer n (1 <= n <= 2.10^5) --- number of cafes indices written by Vlad.\n\nIn second line, n numbers a1, a2, ..., an (0 <= ai <= 2.10^5) are written --- indices of cafes in order of being visited by Vlad. Vlad could visit some cafes more than once. Note that in numeration, some indices could be omitted.", "testcase": ["3\n1 2 3", "5\n5 3 2 1 3", "6\n10 20 10 20 30 40", "2\n200000 199999", "4\n12345 54321 12345 1", "7\n0 1 2 2 3 3 3", "1\n15", "10\n1000 2000 3000 4000 5000 4000 3000 2000 1000 100", "8\n123 234 345 456 567 678 789 890", "9\n150 300 450 600 750 900 1050 1200 1350"]}
{"name": "909_B. Segments", "description": "Input\n\nThe only input line contains a single integer N (1 <= N <= 100).", "testcase": ["1", "7", "22", "43", "56", "78", "85", "90", "99", "100"]}
{"name": "476_A. Dreamoon and Stairs", "description": "Input\n\nThe single line contains two space separated integers n, m (0 < n <= 10000, 1 < m <= 10).", "testcase": ["1 2", "10000 10", "5000 3", "123 8", "9999 9", "2345 4", "8765 5", "4321 6", "10 7", "8000 2"]}
{"name": "599_A. Patrick and Shopping", "description": "Input\n\nThe first line of the input contains three integers d1, d2, d3 (1 <= d1, d2, d3 <=10^8) --- the lengths of the paths. \n\n  * d1 is the length of the path connecting Patrick's house and the first shop; \n  * d2 is the length of the path connecting Patrick's house and the second shop; \n  * d3 is the length of the path connecting both shops.", "testcase": ["1 1 1", "10 20 30", "100000000 50000000 60000000", "1 100000000 99999999", "12345678 87654321 100000000", "99999999 88888888 77777777", "54321 12345 67890", "9999999 8888888 1234567", "22222222 33333333 44444444", "10000000 20000000 30000000"]}
{"name": "77_E. Martian Food", "description": "Input\n\nThe first line contains integer t (1 <= t <=10^4) --- amount of testcases.\n\nEach of the following t lines contain three positive integers: the radii of the plate and a portion of the Golden Honduras R and r (1 <= r < R <=10^4) and the number k (1 <= k <=10^4).\n\nIn the pretests 1 <= k <= 2.", "testcase": ["3\n1000 500 50\n2000 1500 1\n3000 2500 2", "1\n1234 567 77", "2\n2345 234 2\n3456 1234 1", "4\n8765 4321 122\n1234 432 12\n8524 741 3\n9999 8888 2", "1\n4321 1234 11", "5\n5555 1111 10\n4444 3333 2\n6666 5555 3\n7777 6666 4\n8888 7777 5", "2\n3456 345 2\n2345 123 5", "1\n1234 123 5", "3\n432 123 4\n3245 2345 2\n9876 6789 6", "2\n100 10 5\n200 50 1"]}
{"name": "p03975 Kyoto University Programming Contest 2016 - A Barricade", "description": "Input\n\nN, A and B are given on the first line and t_i is given on the (i+1)-th line.\n\n\nN A B\nt1\n:\ntN", "testcase": ["3 10 20\n5\n15\n25", "2 5 10\n5\n10", "4 1 100\n20\n30\n40\n50", "5 20 30\n25\n25\n25\n25\n25", "6 5 15\n6\n7\n8\n9\n10\n11", "3 0 0\n0\n0\n0", "4 100 200\n150\n160\n170\n180", "1 10 10\n10", "7 5 20\n4\n5\n6\n7\n8\n9\n10", "10 1 50\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10"]}
{"name": "1185_A. Ropewalkers", "description": "Input\n\nThe only line of the input contains four integers a, b, c, d (1 <= a, b, c, d <= 10^9). It is possible that any two (or all three) ropewalkers are in the same position at the beginning of the performance.", "testcase": ["1 2 3 4", "1000000000 1000000000 1000000000 1000000000", "234 234 234 987", "999 1000 1000 1001", "500000000 500000000 500000000 999999999", "1 1 1 1", "856 856 342 475", "123456789 987654321 123456789 987654310", "10203040 40506070 50607080 10203040", "999999999 888888888 777777777 666666666"]}
{"name": "1203_E. Boxers", "description": "Input\n\nThe first line contains an integer n (1 <= n <= 150000) --- the number of boxers. The next line contains n integers a_1, a_2, ..., a_n, where a_i (1 <= a_i <= 150000) is the weight of the i-th boxer.", "testcase": ["3\n1 2 3", "5\n5 5 5 5 5", "2\n12345 12345", "4\n101 102 103 104", "6\n150000 149999 150000 149998 150000 149997", "1\n1", "8\n148 149 150 151 152 153 154 155", "10\n10000 20000 30000 40000 50000 60000 70000 80000 90000 100000", "7\n135790 12345 67890 54321 24680 98765 111213", "9\n1500 2500 3500 4500 5500 6500 7500 8500 9500"]}
{"name": "1220_C. Substring Game in the Lesson", "description": "Input\n\nThe first line of the input contains a single string s (1 <= |s| <= 5 * 10^5) consisting of lowercase English letters.", "testcase": ["a", "bc", "defg", "hijkl", "mnopqr", "stuvwxy", "abcdefgh", "ijklmnopqrst", "uvwxyzabcdefg", "hijklmnopqrstuvwxy"]}
{"name": "1485_A. Add and Divide", "description": "Input\n\nThe first line contains a single integer t (1 <= t <= 100) --- the number of test cases.\n\nThe only line of the description of each test case contains two integers a, b (1 <= a,b <= 10^9).", "testcase": ["1\n100000000 100000000", "2\n500000000 600000000", "3\n10 20", "4\n123456789 987654321", "5\n999999999 1", "6\n1 999999999", "7\n555555555 555555555", "8\n235711131 919293949", "9\n111222333 444555666", "10\n1000000000 999999999"]}
{"name": "1535_C. Unstable String", "description": "Input\n\nThe first line contains a single integer t (1 <= t <= 10^4) --- number of test cases.\n\nThe first and only line of each test case contains the string s (1 <= |s| <= 2 * 10^5) consisting of characters 0, 1, and ?.\n\nIt is guaranteed that the sum of the string lengths over all test cases does not exceed 2 * 10^5.", "testcase": ["2\n0??1\n1?0", "1\n?????", "3\n0\n1\n?", "4\n00??11\n111??00\n??\n0?1", "1\n0?1?0?1?0?1?0?1?0?1", "2\n?0??0??1\n1??1??0?", "1\n1??????0", "3\n0?0?0?0?0\n?1?1?1?1?1\n0?1?0?1?0?1", "5\n1\n0\n?\n1?\n?0", "2\n??0??1??0??1\n1??0??1??0??"]}
{"name": "255_B. Code Parsing", "description": "Input\n\nThe first line contains a non-empty string s. \n\nIt is guaranteed that the string only consists of characters \"x\" and \"y\". It is guaranteed that the string consists of at most 106 characters. It is guaranteed that as the result of the algorithm's execution won't be an empty string.", "testcase": ["xyyxyxyx", "yxxy", "xxxyyyxyx", "xyxyxyxyxyxyx", "yxyxyx", "yxxyxxxyxyy", "xyxyyxxyyxxyy", "yyyyyxyx", "xyx", "xxyyxyyxyxx"]}
{"name": "373_A. Collecting Beats is Fun", "description": "Input\n\nThe first line contains a single integer k (1 <= k <= 5) --- the number of panels Cucumber boy can press with his one hand.\n\nNext 4 lines contain 4 characters each (digits from 1 to 9, or period) --- table of panels. If a digit i was written on the panel, it means the boy has to press that panel in time i. If period was written on the panel, he doesn't have to press that panel.", "testcase": ["2\n....\n....\n....\n....", "1\n1234\n5678\n1234\n5678", "3\n1.3.\n.2.4\n1.3.\n.2.4", "4\n....\n....\n....\n1111", "5\n9.9.\n.8.8\n7.7.\n.6.6", "2\n.2..\n3...\n..4.\n....", "1\n.1..\n..2.\n...3\n....", "2\n....\n....\n....\n2222", "3\n...1\n..2.\n.3..\n4...", "5\n1...1\n12..2\n123.3\n1234"]}
{"name": "727_A. Transformation: from A to B", "description": "Input\n\nThe first line contains two positive integers a and b (1 <= a < b <=10^9) --- the number which Vasily has and the number he wants to have.", "testcase": ["1 2", "3 1000000000", "12345678 87654321", "2 3", "42 560", "100 10001", "99999999 100000000", "314159 2718281", "8 88888888", "234 567890"]}
{"name": "841_B. Godsend", "description": "Input\n\nFirst line of input data contains single integer n (1 <= n <=10^6 --- length of the array.\n\nNext line contains n integers a1, a2, ..., an (0 <= ai <=10^9).", "testcase": ["1\n[0]", "5\n[10, 20, 30, 40, 50]", "2\n[1000000000, 0]", "3\n[123, 456, 789]", "10\n[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]", "6\n[999999999, 888888888, 777777777, 666666666, 555555555, 444444444]", "7\n[0, 0, 0, 0, 0, 0, 0]", "4\n[10, 9, 8, 7]", "8\n[1, 2, 4, 8, 16, 32, 64, 128]", "10\n[100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]"]}
{"name": "959_E. Mahmoud and Ehab and the xor-MST", "description": "Input\n\nThe only line contains an integer n (2 <= n <=10^12), the number of vertices in the graph.", "testcase": ["3", "4", "10", "100", "999", "123456789", "987654321", "999999999", "1000000000", "999999999999"]}
{"name": "1163_C1. Power Transmission (Easy Edition)", "description": "Input\n\nThe first line contains a single integer n (2 <= n <= 50) --- the number of electric poles.\n\nEach of the following n lines contains two integers x_i, y_i (-10^4 <= x_i, y_i <= 10^4) --- the coordinates of the poles.\n\nIt is guaranteed that all of these n points are distinct.", "testcase": ["3\n0 1\n1 2\n2 3", "2\n-100 100\n100 -100", "4\n1000 2000\n3000 4000\n-5000 30\n400 -320", "5\n123 456\n789 1011\n-1213 1415\n1617 1819\n-2021 2223", "6\n-9999 5000\n8888 -2121\n333 -4444\n5555 -666\n7777 8888\n999 -1000", "7\n102 103\n204 205\n306 307\n408 409\n510 511\n612 613\n714 715", "8\n-11 12\n13 -14\n15 16\n-17 18\n19 -20\n21 22\n-23 24\n25 -26", "9\n0 0\n100 200\n-300 400\n500 -600\n700 800\n-900 1000\n-1100 1200\n1300 -1400\n1500 1600", "10\n326 789\n-987 654\n123 -456\n-789 321\n456 -123\n-654 987\n789 -321\n123 456\n-321 789\n987 -654", "5\n111 222\n-333 444\n555 -666\n777 888\n-999 1001"]}
{"name": "1328_A. Divisibility Problem", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 10^4) --- the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains two integers a and b (1 <= a, b <= 10^9).", "testcase": ["1 2", "12 345", "123456789 987654321", "1000000000 1", "2 2", "999999999 999999999", "100 200", "500 500", "234567890 123456789", "10 10"]}
{"name": "510_B. Fox And Two Dots", "description": "Input\n\nThe first line contains two integers n and m (2 <= n, m <= 50): the number of rows and columns of the board.\n\nThen n lines follow, each line contains a string consisting of m characters, expressing colors of dots in each line. Each character is an uppercase Latin letter.", "testcase": ["2 3\nABC\nDEF", "4 4\nABCD\nEFGH\nIJKL\nMNOP", "3 5\nABCDE\nFGHIJ\nKLMNO", "5 6\nABCDEF\nGHIJKL\nMNOPQR\nSTUVWX\nYZABCD", "2 2\nAA\nBB", "6 4\nAXYZ\nBVWT\nCSRP\nDQON\nEMKJ\nFLIH", "3 3\nZZZ\nXXX\nCCC", "7 7\nABCDEFG\nHIJKLMN\nOPQRSTU\nVWXYZAB\nCDEFGHI\nJKLMNOP\nQRSTUVW", "8 8\nABCDABCD\nEFGHEFGH\nIJKLIJKL\nMNOMNOMN\nABCDABCD\nEFGHEFGH\nIJKLIJKL\nMNOMNOMN", "10 10\nABCDEFGHIJ\nKLMNOPQRST\nUVWXYZABCD\nEFGHIJKLMN\nOPQRSTUVWX\nYZABCDEFGHI\nJKLMNOPQRST\nUVWXYZABCD\nEFGHIJKLMN\nOPQRSTUVWX"]}
{"name": "535_C. Tavas and Karafs", "description": "Input\n\nThe first line of input contains three integers A, B and n (1 <= A, B <= 106, 1 <= n <=10^5).\n\nNext n lines contain information about queries. i-th line contains integers l, t, m (1 <= l, t, m <=10^6 for i-th query.", "testcase": ["2 3 5\n1 10 10\n2 15 20\n3 7 9\n4 14 15\n5 22 33", "1 2 3\n1 5 7\n4 10 12\n6 9 8", "1000 500 4\n150 10000 1000\n200 20000 2000\n250 30000 3000\n300 40000 4000", "123 456 2\n100 1000 200\n200 1500 300", "99999 1 3\n12345 98765 789\n23456 87654 678\n34567 76543 567", "10 10 4\n1 50 5\n2 60 6\n3 70 7\n4 80 8", "947 3837 3\n53 530 987\n672 6720 1344\n791 7910 1582", "555 777 5\n60 3000 800\n80 4000 900\n100 5000 1000\n120 6000 1100\n140 7000 1200", "1 100000 2\n50000 99999 50000\n60000 199999 60000", "12345 67890 3\n1234 56789 9876\n2345 67890 8765\n3456 78901 7654"]}
{"name": "1068_B. LCM", "description": "Input\n\nThe only line contains one integer --- b (1 <= b <= 10^{10}).", "testcase": ["1", "2", "100", "9999999999", "9876543210", "123456789", "4294967296", "1048576", "99999999", "100000000"]}
{"name": "221_A. Little Elephant and Function", "description": "Input\n\nA single line contains integer n (1 <= n <= 1000) --- the size of permutation.", "testcase": ["1", "2", "3", "10", "50", "100", "500", "750", "999", "1000"]}
{"name": "554_A. Kyoya and Photobooks", "description": "Input\n\nThe first line of input will be a single string s (1 <= |s| <= 20). String s consists only of lowercase English letters.", "testcase": ["a", "example", "testcase", "lowercase", "string", "jsonformat", "multiplewords", "characters", "appropriate", "specification"]}
{"name": "624_B. Making a String", "description": "Input\n\nThe first line of the input contains a single integer n (2 <= n <= 26) --- the number of letters in the alphabet.\n\nThe next line contains n integers ai (1 <= ai <=10^9) --- i-th of these integers gives the limitation on the number of occurrences of the i-th character in the string.", "testcase": ["3\n1 2 3", "5\n1000000000 999999999 987654321 123456789 1", "6\n15 20 30 25 10 5", "4\n9999999 8888888 7777777 6666666", "8\n10 20 30 40 50 60 70 80", "2\n500000000 500000000", "7\n3 6 9 12 15 18 21", "10\n1 1 1 1 1 1 1 1 1 1", "26\n10 20 30 40 50 60 70 80 90 100 110 120 130 140 150 160 170 180 190 200 210 220 230 240 250 260", "9\n9 8 7 6 5 4 3 2 1"]}
{"name": "1141_A. Game 23", "description": "Input\n\nThe only line of the input contains two integers n and m (1 <= n <= m <= 5*10^8).", "testcase": ["1 5", "1234567 12345678", "25000000 50000000", "350 400", "98765432 123456789", "1 500000000", "500000 500000", "40000000 40000001", "100000 200000", "2345678 23456789"]}
{"name": "1217_C. The Number Of Good Substrings", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 1000) --- the number of queries.\n\nThe only line of each query contains string s (1 <= |s| <= 2 * 10^5), consisting of only digits 0 and 1.\n\nIt is guaranteed that sum_{i=1}^{t} |s_i| <= 2 * 10^5.", "testcase": ["1\n0", "2\n01\n10", "3\n110\n001\n111", "4\n1010\n1001\n0110\n1000", "5\n11111\n00000\n10101\n01010\n11100", "6\n100100\n001001\n110011\n111000\n000111\n101010", "7\n1000000\n0101010\n0011001\n0000001\n1111111\n1101101\n1010101", "8\n10001000\n0110110\n01010101\n11110000\n00001111\n10101010\n10000001\n010101010", "9\n111111111\n000000000\n101010101\n010101010\n111000111\n000111000\n100001000\n011110111\n001100110", "10\n0110110\n1001001\n1011011\n1100110\n1000000\n0111000\n0101010\n0011100\n1111110\n0000001"]}
{"name": "142_A. Help Farmer", "description": "Input\n\nThe only line contains integer n from the problem's statement (1 <= n <=10^9).", "testcase": ["1", "2", "999999999", "500000000", "847", "100000000", "7", "123456789", "987654321", "202020202"]}
{"name": "1526_D. Kill Anton", "description": "Input\n\nThe first line of input contains a single integer t (1 <= t <= 100000) --- the number of testcases.\n\nThe first and only line of each testcase contains 1 string a (1 <= |a| <= 100000). a consists of only the characters \"A\", \"N\", \"O\" and \"T\".\n\nIt is guaranteed that the sum of |a| over all testcases does not exceed 100000.", "testcase": ["1\nA", "2\nAN\nNO", "3\nA\nAA\nAAA", "1\nTANANA", "3\nANT\nTONO\nAANTTOONN", "4\nA\nO\nN\nT", "2\nNANO\nTONTANTO", "1\nONOANTTAA", "5\nA\nN\nO\nT\nNNNAAATTT", "2\nAT\nNA"]}
{"name": "439_B. Devu, the Dumb Guy", "description": "Input\n\nThe first line will contain two space separated integers n, x (1 <= n, x <=10^5). The next line will contain n space separated integers: c1, c2, ..., cn (1 <= ci <=10^5).", "testcase": ["2 99999\n1 99999", "3 50000\n12345 23456 34567", "5 30000\n10000 20000 15000 25000 30000", "4 10000\n9999 8888 7777 6666", "1 50000\n12345", "6 12345\n10001 20002 30003 40004 50005 60006", "10 100000\n10000 20000 30000 40000 50000 60000 70000 80000 90000 100000", "8 85000\n21000 32000 43000 54000 65000 76000 87000 98000", "7 77777\n11111 22222 33333 44444 55555 66666 77777", "9 12321\n1024 2048 4096 8192 16384 32768 65536 13107 26214"]}
{"name": "1038_D. Slime", "description": "Input\n\nThe first line of the input contains an integer n (1 <= n <= 500 000) denoting the number of slimes.\n\nThe next line contains n integers a_i (-10^9 <= a_i <= 10^9), where a_i is the value of i-th slime.", "testcase": ["1\n0", "2\n-1000000000 1000000000", "3\n-3 0 2", "4\n100 200 300 400", "5\n-1000000 -999999 -999998 -999997 -999996", "10\n0 0 0 0 0 0 0 0 0 0", "6\n123456789 -123456789 987654321 -987654321 123456 -123456", "3\n-500000 -400000 300000", "7\n-1 -2 -3 -4 -5 -6 -7", "8\n10000000 -10000000 20000000 -20000000 15000000 -15000000 1234567 -1234567"]}
{"name": "1102_A. Integer Sequence Dividing", "description": "Input\n\nThe first line of the input contains one integer n (1 <= n <= 2 * 10^9).", "testcase": ["1", "2", "100", "999999999", "123456789", "2000000000", "987654321", "1500000000", "42", "172839506"]}
{"name": "118_D. Caesar's Legions", "description": "Input\n\nThe only line contains four space-separated integers n1, n2, k1, k2 (1 <= n1, n2 <= 100, 1 <= k1, k2 <= 10) which represent how many footmen and horsemen there are and the largest acceptable number of footmen and horsemen standing in succession, correspondingly.", "testcase": ["1 1 1 1", "10 20 5 3", "4 7 2 10", "15 5 10 2", "8 12 4 4", "30 25 10 10", "100 50 7 5", "42 42 3 6", "60 75 8 2", "3 99 1 10"]}
{"name": "285_D. Permutation Sum", "description": "Input\n\nThe single line contains integer n (1 <= n <= 16).", "testcase": ["1", "16", "8", "5", "12", "3", "7", "10", "14", "11"]}
{"name": "44_I. Toys", "description": "Input\n\nThe first line contains an integer n (1 <= n <= 10) --- the number of toys.", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]}
{"name": "710_E. Generate a String", "description": "Input\n\nThe only line contains three integers n, x and y (1 <= n <=10^7, 1 <= x, y <=10^9) --- the number of letters 'a' in the input file and the parameters from the problem statement.", "testcase": ["3 10 20", "1 250000000 500000000", "10000000 100000000 999999999", "7 1 1000000000", "999 7654 234567", "1234567 123456 78901234", "5000000 987654321 123456789", "100 1 2", "2500000 333333333 444444444", "42 9999999 1000000000"]}
{"name": "822_A. I'm bored with life", "description": "Input\n\nThe first and single line contains two integers A and B (1 <= A, B <=10^9, min(A, B) <= 12).", "testcase": ["1 2", "12 200000000", "3 999999999", "11 11", "5 123456789", "12 5000000", "8 888888888", "7 76543210", "2 1000000000", "6 654321"]}
{"name": "p02127 AABABCAC", "description": "Input\n\nThe input is given in the following format.\n\n\n$ s $\n$ t $\n\n\nThe string $ s $ is given on the first line, and the string $ t $ is given on the second line.", "testcase": [""]}
{"name": "110_C. Lucky Sum of Digits", "description": "Input\n\nThe single line contains an integer n (1 <= n <=10^6 --- the sum of digits of the required lucky number.", "testcase": ["1", "4", "7", "10", "13", "16", "19", "22", "25", "28"]}
{"name": "854_B. Maxim Buys an Apartment", "description": "Input\n\nThe only line of the input contains two integers: n and k (1 <= n <=10^9, 0 <= k <= n).", "testcase": ["1 0", "10 5", "999999999 123456789", "1000000000 0", "500000000 250000000", "2 1", "100 50", "1000000000 999999999", "123456789 0", "100000000 50000000"]}
{"name": "99_C. Help Victoria the Wise", "description": "Input\n\nThe first line contains exactly 6 characters without spaces from the set {R, O, Y, G, B, V} --- they are the colors of gems with which the box should be decorated.", "testcase": ["ROYGBV", "YGROBV", "BYGROV", "VBROYG", "GRBOVY", "OYVBRG", "RGBVOY", "BROYGV", "YRVGOB", "OVBRGY"]}
{"name": "p02320 Knapsack Problem with Limitations", "description": "Input\n\n\nN W\nv1 w1 m1\nv2 w2 m2\n:\nvN wN mN\n\n\nThe first line consists of the integers N and W. In the following N lines, the value, weight and limitation of the i-th item are given.", "testcase": ["3 50\n10 10 1\n20 20 2\n30 10 1", "4 100\n50 50 1\n60 20 2\n70 60 1\n30 10 3", "2 15\n5 5 3\n10 8 2", "5 200\n100 50 2\n200 100 1\n300 120 1\n150 60 2\n50 30 3", "1 10\n5 5 1", "6 250\n40 20 2\n50 50 4\n60 70 2\n70 40 3\n20 10 4\n10 5 5", "7 300\n20 10 2\n30 15 2\n50 20 1\n60 25 2\n40 30 3\n70 50 1\n100 60 1", "3 40\n10 20 1\n15 25 1\n5 5 2", "4 75\n25 15 2\n35 25 1\n45 20 1\n10 10 3", "8 150\n10 7 3\n20 15 4\n13 8 2\n17 11 2\n25 14 1\n30 20 2\n8 5 3\n45 30 1"]}
{"name": "1204_D1. Kirk and a Binary String (easy version)", "description": "Input\n\nThe first line contains a binary string of length not more than 2\\: 000.", "testcase": ["11010101011101010101", "00000000000000000000", "11111111111111111111", "10101010101010101010", "01010101010101010101", "10000000000000000001", "11100011100010111000", "00011100011100011100", "10110011001100110110", "11001100110011001100"]}
{"name": "65_A. Harry Potter and Three Spells", "description": "Input\n\nThe first line contains 6 integers a, b, c, d, e, f (0 <= a, b, c, d, e, f <= 1000).", "testcase": ["0 0 0 0 0 0", "10 20 30 40 50 60", "1000 999 998 1000 997 996", "1 2 3 4 5 6", "123 456 789 101 202 303", "500 500 500 500 500 500", "200 100 300 400 500 600", "999 1000 0 1 2 3", "777 888 999 111 222 333", "0 1000 500 250 750 800"]}
{"name": "797_A. k-Factorization", "description": "Input\n\nThe first line contains two integers n and k (2 <= n <= 100000, 1 <= k <= 20).", "testcase": ["3 1\n", "100000 20\n", "4567 13\n", "8746 7\n", "22222 5\n", "8421 19\n", "99999 2\n", "23456 10\n", "54321 17\n", "12345 8\n"]}
{"name": "933_C. A Colourful Prospect", "description": "Input\n\nThe first line of input contains one integer n (1 <= n <= 3), denoting the number of circles.\n\nThe following n lines each contains three space-separated integers x, y and r ( - 10 <= x, y <= 10, 1 <= r <= 10), describing a circle whose center is (x, y) and the radius is r. No two circles have the same x, y and r at the same time.", "testcase": ["1\n3 5 2", "2\n-4 3 1\n7 -2 3", "3\n0 0 5\n8 6 2\n-7 -3 4", "3\n-10 10 1\n2 -2 2\n-3 6 3", "2\n4 4 4\n-5 -5 5", "3\n1 1 10\n-1 -1 9\n0 0 8", "1\n0 0 1", "2\n-9 5 3\n9 -5 2", "3\n10 -10 5\n5 5 7\n-5 -5 1", "1\n-3 2 4"]}
{"name": "p01499 Rabbit Game Playing", "description": "Input\n\nThe first line of input contains two integers N and T (1 <= N <= 100,000, 1 <= T <= 10,000). N is the number of stages, and T is the compromise level.\n\nThe following N lines describe the difficulty levels of each stage. The i-th line contains one integer Di (1 <= Di <= 100,000), which is the difficulty level of the i-th stage.", "testcase": ["3 5\n1\n7\n5", "2 3\n2\n8", "5 1000\n234\n567\n789\n345\n123", "4 2\n1\n2\n1\n2", "6 50\n10\n20\n30\n40\n50\n60", "10 20\n15\n10\n20\n15\n10\n20\n15\n10\n20\n15", "7 7000\n7001\n7002\n7003\n7004\n7005\n7006\n7007", "8 800\n100\n200\n300\n400\n500\n600\n700\n800", "9 500\n1000\n900\n800\n700\n600\n500\n400\n300\n200", "1 1\n1"]}
{"name": "634_B. XOR Equation", "description": "Input\n\nThe first line of the input contains two integers s and x (2 <= s <=10^12, 0 <= x <=10^12), the sum and bitwise xor of the pair of positive integers, respectively.", "testcase": ["3 1", "15 5", "1024 16", "1000000000000 999999999999", "500000000000 123456789", "987654321098 123456789", "4294967296 2147483648", "99999999999 88888888888", "666666666666 333333333333", "314159265359 271828182845"]}
{"name": "p02259 Bubble Sort", "description": "Input\n\nThe first line of the input includes an integer N, the number of elements in the sequence.\n\nIn the second line, N elements of the sequence are given separated by spaces characters.", "testcase": ["3\n4 5 6", "5\n1 2 3 4 5", "2\n-1 0", "4\n10 20 30 40", "6\n-3 -2 -1 1 2 3", "1\n42", "7\n3 1 4 1 5 9 2", "8\n2 4 6 8 10 12 14 16", "10\n0 0 0 0 0 0 0 0 0 0", "9\n-9 -8 -7 -6 -5 -4 -3 -2 -1"]}
{"name": "1047_D. Little C Loves 3 II", "description": "Input\n\nA single line contains two integers n and m (1 <= n,m <= 10^9) --- the number of rows and the number of columns of the chessboard.", "testcase": ["1 1", "2 2", "1000000000 1000000000", "999999999 1", "123456789 987654321", "10 50", "500 500", "999 888", "300000000 700000000", "1 999999999"]}
{"name": "1409_B. Minimum Product", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 2 * 10^4) --- the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains five integers a, b, x, y and n (1 <= a, b, x, y, n <= 10^9). Additional constraint on the input: a >= x and b >= y always holds.", "testcase": ["1\n10 20 5 10 5", "2\n100 200 50 100 75\n150 120 60 110 30", "3\n1000000000 1000000000 500000000 500000000 999999999\n999999999 888888888 444444444 333333333 888888888\n123456789 987654321 12345678 87654321 333333333", "1\n500000000 500000000 250000000 250000000 250000000", "1\n234567890 123456789 12345678 23456789 100000000", "4\n10 10 1 1 9\n20 20 2 2 18\n30 30 3 3 5\n40 40 4 4 10", "2\n123456789 987654321 111111111 222222222 333333333\n987654321 123456789 222222222 111111111 444444444", "1\n444444444 555555555 444444444 555555555 444444444", "1\n1000000000 999999999 1 1 999999998", "1\n1 1 1 1 0"]}
{"name": "628_A. Tennis Tournament", "description": "Input\n\nThe only line contains three integers n, b, p (1 <= n, b, p <= 500) --- the number of participants and the parameters described in the problem statement.", "testcase": ["1 1 1", "500 500 500", "250 123 456", "128 64 32", "299 299 299", "89 67 45", "432 111 222", "365 250 125", "12 8 5", "111 49 350"]}
{"name": "791_A. Bear and Big Brother", "description": "Input\n\nThe only line of the input contains two integers a and b (1 <= a <= b <= 10) --- the weight of Limak and the weight of Bob respectively.", "testcase": ["1 1", "3 4", "2 10", "1 10", "5 5", "8 9", "10 10", "7 8", "4 6", "2 2"]}
{"name": "405_A. Gravity Flip", "description": "Input\n\nThe first line of input contains an integer n (1 <= n <= 100), the number of the columns in the box. The next line contains n space-separated integer numbers. The i-th number ai (1 <= ai <= 100) denotes the number of cubes in the i-th column.", "testcase": ["3\n4 5 6", "1\n100", "5\n1 2 3 4 5", "2\n50 50", "10\n10 20 30 40 50 60 70 80 90 100", "6\n15 15 15 15 15 15", "4\n32 45 67 89", "7\n21 1 43 2 85 3 7", "9\n9 8 1 5 6 3 2 7 4", "8\n11 22 33 44 55 66 77 88"]}
{"name": "736_B. Taxes", "description": "Input\n\nThe first line of the input contains a single integer n (2 <= n <= 2.10^9) --- the total year income of mr. Funt.", "testcase": ["2", "2000000000", "150000000", "984353299", "300000000", "678905432", "789012345", "123456789", "2147483647", "2001000000"]}
{"name": "760_B. Frodo and pillows", "description": "Input\n\nThe only line contain three integers n, m and k (1 <= n <= m <=10^9, 1 <= k <= n) --- the number of hobbits, the number of pillows and the number of Frodo's bed.", "testcase": ["10 20 1", "5 10 2", "15 30 15", "100000000 200000000 50000000", "7 14 3", "10000000 15000000 123456", "55 110 13", "234 468 117", "500 1000 250", "33333 66666 11111"]}
{"name": "p00357 Trampoline", "description": "Input\n\nThe input is given in the following format.\n\n\nN\nd_1\nd_2\n:\nd_N\n\n\nThe first line provides the number of trampolines N (2 <= N <= 3 × 105). Each of the subsequent N lines gives the maximum allowable jumping distance in integer meters for the i-th trampoline d_i (1 <= d_i <=10^6.", "testcase": ["3\n1\n3\n2", "2\n1000000\n1000000", "4\n500\n400\n300\n200", "5\n1\n2\n1\n2\n1", "3\n123456\n789012\n345678", "6\n999999\n888888\n777777\n666666\n555555\n444444", "3\n900\n800\n700", "7\n1\n2\n3\n4\n5\n6\n7", "5\n100\n200\n300\n400\n500", "10\n10\n20\n30\n40\n50\n60\n70\n80\n90\n100"]}
{"name": "1352_C. K-th Not Divisible by n", "description": "Input\n\nThe first line contains an integer t (1 <= t <= 1000) --- the number of test cases in the input. Next, t test cases are given, one per line.\n\nEach test case is two positive integers n (2 <= n <= 10^9) and k (1 <= k <= 10^9).", "testcase": ["3 5", "287 1", "999999999 999999999", "56789 12345", "2 17", "100000000 2", "478 356", "234567890 987654321", "101 101", "999 1000"]}
{"name": "864_C. Bus", "description": "Input\n\nThe first line contains four integers a, b, f, k (0 < f < a <= 106, 1 <= b <=10^9, 1 <= k <=10^4) --- the endpoint of the first bus journey, the capacity of the fuel tank of the bus, the point where the gas station is located, and the required number of journeys.", "testcase": ["10 50 5 2", "1000000 500000 250000 10", "500 1000 250 7", "999999 1000000000 499999 10000", "100 10 1 15", "300 500 150 3", "5000 2000 499 40", "850000 900000 425000 999", "450 800 225 8", "999 5000 100 1000"]}
{"name": "171_D. Broken checker", "description": "Input\n\nThe only line of the input contains an integer between 1 and 5, inclusive. All tests for this problem are different. The contents of the test case doesn't need to be equal to its index.", "testcase": ["1", "5", "2", "4", "3", "1", "3", "2", "5", "4"]}
{"name": "402_A. Nuts", "description": "Input\n\nThe first line contains four space-separated integers k, a, b, v (2 <= k <= 1000; 1 <= a, b, v <= 1000) --- the maximum number of sections in the box, the number of nuts, the number of divisors and the capacity of each section of the box.", "testcase": ["2 100 50 200", "5 500 300 600", "3 150 75 80", "10 50 25 10", "4 400 200 500", "1000 1 500 1000", "450 300 150 450", "2 1 1 1", "999 999 500 750", "100 100 50 100"]}
{"name": "597_A. Divisibility", "description": "Input\n\nThe only line contains three space-separated integers k, a and b (1 <= k <=10^18; - 1018 <= a <= b <=10^18).", "testcase": ["1 -1000000000000000000 1000000000000000000", "1000000000000000000 -1000000000000000000 0", "10 -20 30", "123456789 987654321 1234567899876543210", "999999999999999999 -999999999999999999 999999999999999999", "500000000000000000 1 1000000000000000000", "1 -1 1", "1000 -100000 100000", "500 -1000000000000 1000000000000", "999999999999999 -500000000000000000 500000000000000000"]}
{"name": "690_A2. Collective Mindsets (medium)", "description": "Input\n\nThe only line of input contains one integer: N, the number of attendees (1 <= N <=10^9).", "testcase": ["1", "10", "999999999", "54321", "123456789", "100000000", "8675309", "42", "999", "505050505"]}
{"name": "779_B. Weird Rounding", "description": "Input\n\nThe only line of the input contains two integer numbers n and k (0 <= n <= 2 000 000 000, 1 <= k <= 9).\n\nIt is guaranteed that the answer exists. All numbers in the input are written in traditional notation of integers, that is, without any extra leading zeros.", "testcase": ["123 3", "2000000000 1", "0 9", "149 2", "385 4", "1729 7", "999999999 8", "987654321 6", "13579 5", "24680 9"]}
{"name": "825_F. String Compression", "description": "Input\n\nThe only line of input contains one string s consisting of lowercase Latin letters (1 <= |s| <= 8000).", "testcase": ["a", "bcdef", "abcdefghijklmnopqrstuvwxyz", "pqrstuvwxyzaabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz", "hello", "thequickbrownfoxjumpsoverthelazydog", "x", "compute", "rainydayz", "supercalifragilisticexpialidocious"]}
{"name": "1225_C. p-binary", "description": "Input\n\nThe only line contains two integers n and p (1 <= n <= 10^9, -1000 <= p <= 1000).", "testcase": ["1 -1000", "999999999 1000", "100 0", "500000000 -500", "123456789 987", "17 -17", "999 -333", "88888888 888", "10 -100", "2 1"]}
{"name": "570_B. Simple Game", "description": "Input\n\nThe first line contains two integers n and m (1 <= m <= n <=10^9) --- the range of numbers in the game, and the number selected by Misha respectively.", "testcase": ["1 1", "7 3", "1000000000 500000000", "20 10", "500 250", "999999999 999999999", "123456789 123456", "100000 10", "9999999 8888888", "10 9"]}
{"name": "81_A. Plug-in", "description": "Input\n\nThe input data consists of a single line to be processed. The length of the line is from 1 to 2.10^5 characters inclusive. The string contains only lowercase Latin letters.", "testcase": ["a", "bcdefghijklmnopqrstuvwxyz", "pneumonoultramicroscopicsilicovolcanoconiosis", "x", "hello", "rhythms", "supercalifragilisticexpialidocious", "computer", "abcdefghijklmnopqrstuvwxyz", "qwertyuiopasdfghjklzxcvbnm"]}
{"name": "98_B. Help King", "description": "Input\n\nThe first line contains a single integer n from the problem's statement (1 <= n <= 10000).", "testcase": ["1", "10000", "5000", "9999", "123", "42", "9876", "2345", "6789", "1001"]}
{"name": "1070_A. Find a Number", "description": "Input\n\nThe first line contains two positive integers d and s (1 <= d <= 500, 1 <= s <= 5000) separated by space.", "testcase": ["1 1", "2 10", "500 5000", "32 2000", "15 100", "150 4500", "300 3000", "250 1234", "499 4999", "100 2500"]}
{"name": "1199_C. MP3", "description": "Input\n\nThe first line contains two integers n and I (1 <= n <= 4 * 10^{5}, 1 <= I <= 10^{8}) --- the length of the array and the size of the disk in bytes, respectively.\n\nThe next line contains n integers a_{i} (0 <= a_{i} <= 10^{9}) --- the array denoting the sound file.", "testcase": ["3 500\n1 2 3", "1 10000000\n999999999", "4 1000\n10 20 30 40", "5 15000\n300 150 600 750 1200", "2 2000\n0 0", "6 30000\n10000 20000 30000 40000 50000 60000", "7 9999\n111 222 333 444 555 666 777", "10 100000\n100000 200000 300000 400000 500000 600000 700000 800000 900000 1000000", "8 88888\n888 777 666 555 444 333 222 111", "9 123456\n9 8 7 6 5 4 3 2 1"]}
{"name": "14_E. Camels", "description": "Input\n\nThe first line contains a pair of integers n and t (3 <= n <= 20, 1 <= t <= 10).", "testcase": ["3 1", "4 2", "5 3", "6 4", "7 5", "8 6", "9 7", "10 1", "15 8", "20 10"]}
{"name": "626_B. Cards", "description": "Input\n\nThe first line of the input contains a single integer n (1 <= n <= 200) --- the total number of cards.\n\nThe next line contains a string s of length n --- the colors of the cards. s contains only the characters 'B', 'G', and 'R', representing blue, green, and red, respectively.", "testcase": [""]}
{"name": "765_B. Code obfuscation", "description": "Input\n\nIn the only line of input there is a string S of lowercase English letters (1 <= |S| <= 500) --- the identifiers of a program with removed whitespace characters.", "testcase": ["a", "variable", "functionname", "aquickbrownfoxjumpsoverthelazydog", "exampleidentifier", "justanotherlongidentifierforatestcase", "onemoretestcase", "lowercasestring", "mixedbagofcharacters", "thelasttestcase"]}
{"name": "1424_G. Years", "description": "Input\n\nThe first line contains an integer n (1 <= n <= 10^5) --- the number of people.\n\nEach of the following n lines contain two integers b and d (1 <= b < d <= 10^9) representing birth and death year (respectively) of each individual.", "testcase": ["3\n1 10\n2 9\n5 15", "4\n100 200\n150 250\n300 400\n350 450", "5\n234 567\n890 1234\n345 789\n123 456\n678 901", "2\n1 1000000000\n500000000 999999999", "1\n1 2", "6\n10 20\n30 40\n50 60\n70 80\n90 100\n110 120", "3\n800000000 900000000\n850000000 950000000\n900000000 1000000000", "5\n12 34\n56 78\n23 45\n67 89\n34 56", "4\n1000000 2000000\n2000000 3000000\n3000000 4000000\n4000000 5000000", "7\n1 5\n2 6\n3 7\n4 8\n5 9\n6 10\n7 11"]}
{"name": "1445_C. Division", "description": "Input\n\nThe first line contains an integer t (1 <= t <= 50) --- the number of pairs.\n\nEach of the following t lines contains two integers p_i and q_i (1 <= p_i <= 10^{18}; 2 <= q_i <= 10^{9}) --- the i-th pair of integers.", "testcase": ["1\n1000000000000000000 999999999", "2\n500000000000000000 200000000\n10000000000000000 500000000", "3\n123456789012345678 234567890\n987654321098765432 345678901\n123456789098765432 456789012", "4\n234567890123456789 987654321\n345678901234567890 123456789\n456789012345678901 234567890\n567890123456789012 345678901", "5\n111111111111111111 222222222\n333333333333333333 444444444\n555555555555555555 666666666\n777777777777777777 888888888\n999999999999999999 999999999", "3\n100000000000 20000000\n10000000000 30000000\n100000000 40000000", "2\n123456789 23456789\n987654321 87654321", "1\n1000000000000000000 2", "4\n17283950617283950 345679012\n12345678901234567 23456789\n87654321098765432 123456789\n98765432109876543 98765432", "1\n1000000000000000000 123456789"]}
{"name": "1519_B. The Cake Is a Lie", "description": "Input\n\nThe first line contains the single integer t (1 <= t <= 100) --- the number of test cases.\n\nThe first and only line of each test case contains three integers n, m, and k (1 <= n, m <= 100; 0 <= k <= 10^4) --- the sizes of grid and the exact amount of money you need to spend.", "testcase": ["6\n1 1 0\n2 2 100\n3 3 200\n4 4 300\n5 5 400\n6 6 500", "3\n10 10 1000\n20 20 2000\n30 30 3000", "1\n100 100 10000", "4\n12 8 500\n7 9 600\n14 14 800\n13 13 900", "2\n22 22 444\n33 33 777", "7\n1 2 10\n1 3 20\n1 4 30\n1 5 40\n1 6 50\n1 7 60\n1 8 70", "5\n8 8 640\n9 9 810\n10 10 1000\n11 11 1210\n12 12 1440", "8\n16 10 800\n17 11 935\n18 12 1080\n19 13 1235\n20 14 1400\n21 15 1575\n22 16 1760\n23 17 1955", "10\n5 5 10\n5 5 20\n5 5 30\n5 5 40\n5 5 50\n5 5 60\n5 5 70\n5 5 80\n5 5 90\n5 5 100", "9\n3 15 100\n6 10 200\n9 5 300\n12 20 400\n15 25 500\n18 30 600\n21 35 700\n24 40 800\n27 45 900"]}
{"name": "577_A. Multiplication Table", "description": "Input\n\nThe single line contains numbers n and x (1 <= n <=10^5, 1 <= x <=10^9) --- the size of the table and the number that we are looking for in the table.", "testcase": ["3 15", "100000 1000000000", "50000 999999", "847 123456", "100 1", "1 1", "99999 987654", "2023 2023", "56789 765432", "2 2"]}
{"name": "599_D. Spongebob and Squares", "description": "Input\n\nThe first line of the input contains a single integer x (1 <= x <=10^18) --- the number of squares inside the tables Spongebob is interested in.", "testcase": ["1", "999999999999999999", "274", "500000000000000000", "987654321098765432", "10", "100", "999", "10000000000000000", "4294967296"]}
{"name": "690_E2. Photographs (II)", "description": "Input\n\nThe input format is the same as in the previous version, except that the first line of every question now contains three space-separated numbers h, w and k (1 <= h, w <= 600, 2 <= k <= 16) -- the height (number of rows) and width (number of columns) of the photograph and the number of pieces, respectively. The number of pieces evenly divides the height, and each piece is of the same height h / k.\n\nAgain, there is only one input file to be processed, and the same resources are provided to you as in the previous version (except that now you are given all input images in .bmp format, rather than the first 50).", "testcase": ["3 10 2\n...##...##\n..####....\n##.......#", "1 600 2\nn####\n..##\n####\n##..\n####\n....", "4 4 4\n#...\n.##.\n..#.\n...#", "10 10 5\n##########\n#........#\n#..####..#\n#..####..#\n#..####..#\n#..####..#\n#..####..#\n#..####..#\n#........#\n##########", "12 5 4\n#####\n#...#\n#####\n#####\n#...#\n#####\n#####\n#...#\n#####\n#####\n#...#\n#####", "8 8 4\n#......#\n.#....#.\n..#..#..\n...##...\n...##...\n..#..#..\n.#....#.\n#......#", "600 600 16\n...................................................................................[600x600 grid of dots representing the image]...................................................................................", "5 15 5\n#######.......#\n#.....#.#####..\n#.....#.#####..\n#.....#.#####..\n#######.......#", "2 6 2\n......\n######"]}
{"name": "735_D. Taxes", "description": "Input\n\nThe first line of the input contains a single integer n (2 <= n <= 2.10^9) --- the total year income of mr. Funt.", "testcase": ["2", "100", "2000000000", "999999999", "987654321", "123456789", "1500000000", "2100000000", "750000000", "1600000000"]}
{"name": "1073_E. Segment Sum", "description": "Input\n\nThe only line of the input contains three integers l, r and k (1 <= l <= r < 10^{18}, 1 <= k <= 10) --- the borders of the segment and the maximum number of different digits.", "testcase": ["1 100 2", "1000000000000000 1000000000000100 5", "123456789 9876543210 3", "1 999999999999999999 1", "234567890 234567890123456 4", "1000000000 2000000000 8", "1 9 9", "1 10000000 10", "500000000000 600000000000 7", "123456789012345 1234567890123456 6"]}
{"name": "1143_B. Nirvana", "description": "Input\n\nThe only input line contains the integer n (1 <= n <= 2*10^9).", "testcase": ["1", "2", "2000000000", "105", "123456789", "987654321", "55555", "999999999", "1000000001", "178264736"]}
{"name": "227_C. Flying Saucer Segments", "description": "Input\n\nThe first line contains two space-separated integers: n and m (1 <= n, m <=10^9) --- the number of aliens on the saucer and the number, modulo which you should print the answer, correspondingly.", "testcase": ["1 1000000000", "123456789 987654321", "999999999 123456789", "500000000 99999999", "234567890 111111111", "10 1000000000", "99999999 98765432", "100000000 1000000000", "1000000000 999999999", "12345678 87654321"]}
{"name": "322_B. Ciel and Flowers", "description": "Input\n\nThe first line contains three integers r, g and b (0 <= r, g, b <=10^9) --- the number of red, green and blue flowers.", "testcase": ["0 0 0", "10 20 30", "1000000000 1000000000 1000000000", "999999999 888888888 777777777", "234567890 123456789 987654321", "465 392 781", "1 2 3", "1234567 2345678 3456789", "99999 88888 77777", "500000000 600000000 700000000"]}
{"name": "510_A. Fox And Snake", "description": "Input\n\nThe only line contains two integers: n and m (3 <= n, m <= 50). \n\nn is an odd number.", "testcase": ["3 4", "5 10", "7 8", "9 3", "11 50", "13 6", "15 9", "17 20", "19 11", "21 48"]}
{"name": "119_C. Education Reform", "description": "Input\n\nThe first line contains three integers n, m, k (1 <= n <= m <= 50, 1 <= k <= 100) which represent the number of days in an academic year, the number of subjects and the k parameter correspondingly. Each of the following m lines contains the description of a subject as three integers ai, bi, ci (1 <= ai <= bi <=10^16, bi - ai <= 100, 1 <= ci <= 100) --- two limitations to the number of exercises on the i-th subject and the complexity of the i-th subject, correspondingly. Distinct subjects can have the same complexity. The subjects are numbered with integers from 1 to m. \n\nPlease do not use the %lld specificator to read or write 64-bit numbers in С++. It is preferred to use the cin stream or the %I64d specificator.", "testcase": ["1 1 1\n1 2 1", "2 2 5\n1 50 10\n100 150 20", "3 3 10\n123456789012345 123456789012445 30\n2 102 15\n10000 10100 40", "4 4 15\n999999999999999 1000000000000099 70\n50000000 50000100 35\n10 110 5\n1234567890 1234567899 25", "5 5 20\n1 2 10\n3 103 15\n200 299 40\n888888888888888 888888888888988 50\n40000000 40000100 65", "6 6 25\n987654321098764 987654321098864 75\n4500 4600 20\n234 334 10\n111111111111111 111111111111211 45\n1000000000 1000000100 60\n3000000 3000100 35", "7 7 30\n1 1 5\n2 102 10\n500 600 15\n100000000000000 100000000000200 40\n1234567890123 1234567890223 50\n999999999000000 99999999900100 60\n333333333333333 333333333334333 70", "10 10 40\n250 350 35\n500 590 10\n800 900 78\n3 4 12\n450000000000000 45000000000100 56\n560 660 22\n3400 3500 8\n750000000000000 75000000000100 63\n90000 90100 17\n430 530 25", "15 20 50\n900000000000000 90000000000100 99\n55555 55655 8\n3333 3433 15\n7777777 7777877 70\n12 112 10\n444444 445544 65\n10 20 5\n25 125 20\n300 400 75\n7000 7100 25\n500000 500100 45\n23232323 23232423 33\n20000 200100 55\n250000000000000 25000000000100 90\n500 600 12\n10000000000000 10000000000100 88\n34000 34100 11\n2500 2600 6\n50 150 30\n100000000000 100000000200 79", "20 25 75\n10000000000000 10000000000100 45\n4000 4099 7\n8000 8100 25\n99999999999999 100000000000099 80\n1 2 3\n10 11 8\n20 21 7\n40 140 15\n600 700 30\n3000 3100 25\n500000000000000 50000000000100 99\n222 322 45\n50 60 6\n70 80 5\n90 100 4\n110 120 7\n130 140 9\n150 160 11\n170 180 6\n190 200 7\n8000000000000 8000000000100 85\n90 190 12\n66 166 9\n333 433 14\n77777 77877 20"]}
{"name": "460_B. Little Dima and Equation", "description": "Input\n\nThe first line contains three space-separated integers: a, b, c (1 <= a <= 5; 1 <= b <= 10000; - 10000 <= c <= 10000).", "testcase": ["1 1000 5000", "5 500 0", "2 9999 -9999", "4 1234 2345", "3 9876 -1234", "1 4321 6789", "5 8765 -5678", "2 1111 2222", "4 2222 -3333", "3 3333 4444"]}
{"name": "627_A. XOR Equation", "description": "Input\n\nThe first line of the input contains two integers s and x (2 <= s <=10^12, 0 <= x <=10^12), the sum and bitwise xor of the pair of positive integers, respectively.", "testcase": ["2 0", "10 2", "1000000000000 999999999999", "1234567890 987654321", "4294967295 123456789", "9876543210 246813579", "742617000027 741853001748", "1000000 0", "123123123 321321321", "500000000000 250000000000"]}
{"name": "651_A. Joysticks", "description": "Input\n\nThe first line of the input contains two positive integers a1 and a2 (1 <= a1, a2 <= 100), the initial charge level of first and second joystick respectively.", "testcase": ["1 1", "2 5", "50 50", "99 1", "15 84", "100 100", "23 77", "88 14", "32 68", "71 29"]}
{"name": "1020_C. Elections", "description": "Input\n\nThe first line of input contains two integers n and m (1 <= n, m <= 3000) --- the number of voters and the number of parties respectively.\n\nEach of the following n lines contains two integers p_i and c_i (1 <= p_i <= m, 1 <= c_i <= 10^9) --- the index of this voter's preferred party and the number of bytecoins needed for him to reconsider his decision.\n\nThe United Party of Berland has the index 1.", "testcase": ["2 2\n1 250000\n2 300000", "3 3\n1 500000\n2 600000\n3 700000", "4 2\n1 300000\n2 400000\n1 350000\n2 450000", "5 4\n1 800000\n2 500000\n3 600000\n4 500000\n1 900000", "1 1\n1 1000000000", "2 1\n1 900000\n1 850000", "6 3\n1 200000\n2 250000\n3 300000\n1 400000\n2 500000\n3 600000", "3 5\n1 100000\n5 200000\n4 300000", "8 2\n1 777777\n2 888888\n1 333333\n2 444444\n1 111111\n2 222222\n1 999999\n2 666666", "5 3\n3 99999999\n1 88888888\n2 77777777\n1 66666666\n3 55555555"]}
{"name": "1178_C. Tiles", "description": "Input\n\nThe only line contains two space separated integers w, h (1 <= w,h <= 1 000) --- the width and height of the kitchen, measured in tiles.", "testcase": ["1 1", "1000 1000", "500 250", "999 999", "12 34", "123 456", "42 42", "300 700", "768 512", "800 600"]}
{"name": "196_A. Lexicographically Maximum Subsequence", "description": "Input\n\nThe single line contains a non-empty string s, consisting only of lowercase English letters. The string's length doesn't exceed 105.", "testcase": ["abcde", "teststring", "lowercase", "example", "randomtext", "justletters", "smallalphabets", "twentycharacterss", "mediumsizedstring", "thisisfortesting"]}
{"name": "479_A. Expression", "description": "Input\n\nThe input contains three integers a, b and c, each on a single line (1 <= a, b, c <= 10).", "testcase": ["1\n2\n3", "4\n5\n6", "3\n1\n2", "6\n9\n10", "2\n2\n5", "7\n3\n1", "8\n6\n4", "10\n8\n7", "5\n7\n2", "9\n4\n3"]}
{"name": "501_A. Contest", "description": "Input\n\nThe first line contains four integers a, b, c, d (250 <= a, b <= 3500, 0 <= c, d <= 180). \n\nIt is guaranteed that numbers a and b are divisible by 250 (just like on any real Codeforces round).", "testcase": ["250 500 0 180", "1000 3250 90 45", "750 1750 180 0", "1000 2000 10 150", "1250 3000 134 67", "1500 2500 82 16", "1750 3500 121 179", "2000 3000 45 90", "2250 2750 180 0", "2500 3250 12 168"]}
{"name": "552_B. Vanya and Books", "description": "Input\n\nThe first line contains integer n (1 <= n <=10^9) --- the number of books in the library.", "testcase": ["1", "999999999", "500000000", "100000000", "42", "847584", "123456789", "987654321", "7054321", "1357911"]}
{"name": "600_A. Extract Numbers", "description": "Input\n\nThe only line of input contains the string s (1 <= |s| <=10^5). The string contains only symbols '.' (ASCII 46), ',' (ASCII 44), ';' (ASCII 59), digits, lowercase and uppercase latin letters.", "testcase": ["abc123...", "hello,world;42", "X.Y.Z;1,2,3", "8675309.jenny;", ";,;..abCD..;,", "...,,;;;123ABCabc", "aA1.;bB2,;cC3..", "1a.2b,3c;4d5e6f", ";.,;.,;.,;.,;.,;.", "Test,Case;123;XYZ..."]}
{"name": "876_C. Classroom Watch", "description": "Input\n\nThe first line contains integer n (1 <= n <=10^9).", "testcase": ["1", "1000000000", "123456789", "42", "857", "999999999", "7", "500000000", "987654321", "17"]}
{"name": "922_B. Magic Forest", "description": "Input\n\nThe only line contains a single integer n (1 <= n <= 2500).", "testcase": ["1", "2500", "123", "495", "1789", "2001", "572", "2222", "999", "37"]}
{"name": "1455_E. Four Points", "description": "Input\n\nThe first line contains a single integer t (1 <= t <= 10^4) --- the number of test cases.\n\nEach test case consists of four lines. Each line contains two integers x and y (0 <= x, y <= 10^9) --- coordinates of one of the points p_i = (x, y).\n\nAll points are different in one test case.", "testcase": ["1\n0 0\n0 1\n1 0\n1 1", "1\n2 3\n3 2\n2 2\n3 3", "1\n100 100\n100 101\n101 100\n101 101", "1\n1000000000 0\n0 1000000000\n500000000 500000000\n1000000000 1000000000", "1\n0 0\n0 1000000000\n1000000000 0\n1000000000 1000000000", "1\n250 250\n250 750\n750 250\n750 750", "1\n123456789 987654321\n987654321 123456789\n123123123 321321321\n321321321 123123123", "1\n0 0\n999999999 0\n0 999999999\n999999999 999999999", "1\n435 567\n890 123\n234 345\n678 901", "1\n10 20\n20 30\n30 40\n40 50"]}
{"name": "180_C. Letter", "description": "Input\n\nThe only line of the input contains a non-empty string consisting of uppercase and lowercase letters. The string's length does not exceed 105.", "testcase": ["AbcDE", "Xyz", "TestStringWithMixedCASE", "QwErTy", "a", "LONGERexampleStringToTest", "Short", "ExampleInput", "JustAnotherTestCase", "LastOneToMakeTen"]}
{"name": "702_D. Road to Post Office", "description": "Input\n\nThe first line contains 5 positive integers d, k, a, b, t (1 <= d <=10^12; 1 <= k, a, b, t <= 106; a < b), where:\n\n  * d --- the distance from home to the post office; \n  * k --- the distance, which car is able to drive before breaking; \n  * a --- the time, which Vasiliy spends to drive 1 kilometer on his car; \n  * b --- the time, which Vasiliy spends to walk 1 kilometer on foot; \n  * t --- the time, which Vasiliy spends to repair his car.", "testcase": ["1 1 1 2 1", "10 2 5 10 2", "1000000000000 100000 1 2 5", "999999999999 999999 100 200 50", "500 100 3 4 10", "300 50 7 8 2", "123456789012 98765 3 6 30", "987654321 111111 5 9 4", "444444444444 222222 10 20 15", "77777777777 33333 2 3 1"]}
{"name": "122_E. Lucky Permutation", "description": "Input\n\nThe first line contains two integers n and k (1 <= n, k <=10^9) --- the number of elements in the permutation and the lexicographical number of the permutation.", "testcase": ["5 10", "3 6", "7 24", "1000000000 999999999", "10 1", "20 100000", "8 30", "9 362880", "6 120", "100 10000"]}
{"name": "1543_A. Exciting Bets", "description": "Input\n\nThe first line of input contains a single integer t (1<= t<= 5* 10^3) --- the number of test cases.\n\nThe first and the only line of each test case contains two integers a and b (0<= a, b<= 10^{18}).", "testcase": ["1\n0 0", "2\n1 2\n3 4", "3\n10 20\n30 40\n50 60", "4\n100 200\n300 400\n500 600\n700 800", "5\n1000 2000\n3000 4000\n5000 6000\n7000 8000\n9000 10000", "1\n123456789 987654321", "2\n999999999999999999 999999999999999999\n0 999999999999999999", "3\n456789123456789 789123456789123\n123123123123123 321321321321321\n987654321987654 654321987654321", "4\n18273645 82736455\n123456789 98765432\n192837465 564738291\n111111111 222222222", "5\n10 80\n2345678901 1234567890123456789\n99999999999999999 888888888888888888\n777777777777777777 666666666666666666\n55555555555555 44444444444444"]}
{"name": "618_A. Slime Combining", "description": "Input\n\nThe first line of the input will contain a single integer, n (1 <= n <= 100 000).", "testcase": ["1", "98765", "45678", "100000", "99999", "50000", "1234", "23456", "80000", "54321"]}
{"name": "666_A. Reberland Linguistics", "description": "Input\n\nThe only line contains a string s (5 <= |s| <=10^4) consisting of lowercase English letters.", "testcase": ["house", "characteristic", "programming", "puzzle", "supercalifragilisticexpialidocious", "encyclopedia", "photosynthesis", "microorganism", "transcription", "aesthetic"]}
{"name": "p01855 Checkered Pattern", "description": "input\n\n\nT\nh_1 \\ w_1\n...\nh_T \\ w_T\n\n\nOne file contains T inputs. The T in the first line and the vertical and horizontal lengths h_i and w_i in the Tth input are input in the 1 + i line.\n\nConstraint\n\n* An integer\n* 1 <= T <= 1000\n* 1 <= h_i, w_i <=10^9", "testcase": ["5\n1 \\ 2\n2 \\ 3\n3 \\ 4\n4 \\ 5\n5 \\ 6", "2\n10 \\ 20\n30 \\ 40", "1\n1000000000 \\ 1000000000", "3\n123 \\ 456\n789 \\ 101\n112 \\ 131", "4\n5 \\ 9\n8 \\ 7\n6 \\ 5\n3 \\ 2", "1\n500 \\ 500", "6\n12 \\ 34\n56 \\ 78\n90 \\ 12\n34 \\ 56\n78 \\ 90\n12 \\ 34", "7\n100 \\ 200\n300 \\ 400\n500 \\ 600\n700 \\ 800\n900 \\ 1000\n1500 \\ 1600\n1700 \\ 1800", "2\n100000 \\ 200000\n300000 \\ 400000", "8\n1 \\ 1\n2 \\ 2\n3 \\ 3\n4 \\ 4\n5 \\ 5\n6 \\ 6\n7 \\ 7\n8 \\ 8"]}
{"name": "1054_A. Elevator or Stairs?", "description": "Input\n\nThe only line contains six integers x, y, z, t_1, t_2, t_3 (1 <= x, y, z, t_1, t_2, t_3 <= 1000) --- the floor Masha is at, the floor Masha wants to get to, the floor the elevator is located on, the time it takes Masha to pass between two floors by stairs, the time it takes the elevator to pass between two floors and the time it takes for the elevator to close or open the doors.\n\nIt is guaranteed that x != y.", "testcase": ["2 5 3 1 2 4", "6 8 7 1 4 3", "10 2 6 3 5 8", "1 100 50 2 6 7", "1 2 3 3 3 3", "1 999 998 10 10 10", "100 200 150 5 2 1", "700 500 600 8 4 2", "999 1000 1 1 1 1", "500 400 450 7 10 5"]}
{"name": "1202_F. You Are Given Some Letters...", "description": "Input\n\nThe first line contains two integers a and b (1 <= a, b <= 10^9) --- the number of letters 'A' and 'B', respectively.", "testcase": ["1 1", "10 1000000000", "123456789 987654321", "999999999 999999999", "500000000 500000000", "100000000 250000000", "99999999 888888888", "100000001 100000000", "333333333 444444444", "900000000 100000000"]}
{"name": "1508_B. Almost Sorted", "description": "Input\n\nThe first line contains a single integer t (1<= t<= 1000) --- the number of test cases.\n\nEach test case consists of a single line containing two integers n and k (1 <= n <= 10^5, 1 <= k <= 10^{18}).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5.", "testcase": ["1\n10 500000000000000000", "2\n20 10000000000000000\n30 20000000000000000", "1\n100000 100000000000000000", "3\n500 123456789101112\n1000 131415161718192\n1500 212223242526272", "1\n36789 987654321012345678", "2\n99999 999999999999999999\n88888 888888888888888888", "1\n4356 564738291056473829", "1\n23456 1234567891234567", "2\n6789 34567890123456789\n11111 987654321098765432", "1\n10000 100000000000000000"]}
{"name": "538_A. Cutting Banner", "description": "Input\n\nThe single line of the input contains the word written on the banner. The word only consists of upper-case English letters. The word is non-empty and its length doesn't exceed 100 characters. It is guaranteed that the word isn't word CODEFORCES.", "testcase": ["HELLOWORLD", "PROBLEMSET", "TOURNAMENT", "PROGRAMMING", "ALGORITHMS", "DATASTRUCTURES", "INTERVIEWPREP", "CODINGPRACTICE", "TIMECOMPLEXITY", "SPACECOMPLEXITY"]}
{"name": "630_D. Hexagons!", "description": "Input\n\nThe only line of the input contains one integer n (0 <= n <=10^9).", "testcase": ["0", "999999999", "1000000000", "500000000", "123456789", "987654321", "555555555", "404040404", "808080808", "252525252"]}
{"name": "76_E. Points", "description": "Input\n\nThe first line of input contains one integer number N (1 <= N <= 100 000) --- the number of points. Each of the following N lines contain two integer numbers X and Y ( - 10 000 <= X, Y <= 10 000) --- the coordinates of points. Two or more points may coincide.", "testcase": ["6\n0 0\n1 1\n2 2\n3 3\n4 4\n5 5", "1\n-10000 -10000", "3\n9999 9999\n9999 9998\n9998 9999", "5\n0 1\n-1 0\n0 -1\n1 0\n0 0", "4\n-5000 5000\n5000 -5000\n6000 6000\n-6000 -6000", "2\n10 -10\n-10 10", "8\n1 2\n3 4\n5 6\n7 8\n-1 -2\n-3 -4\n-5 -6\n-7 -8", "7\n100 100\n200 200\n300 300\n400 400\n500 500\n600 600\n700 700", "10\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0", "9\n-432 234\n566 -342\n234 432\n-432 -234\n345 678\n-678 -345\n456 123\n-123 678\n123 -456"]}
{"name": "887_A. Div. 64", "description": "Input\n\nIn the only line given a non-empty binary string s with length up to 100.", "testcase": ["1101", "01010101", "0000", "11111111", "1010101010", "00110011", "11001100", "1000000001", "01101", "101"]}
{"name": "90_A. Cableway", "description": "Input\n\nThe first line contains three integers r, g and b (0 <= r, g, b <= 100). It is guaranteed that r + g + b > 0, it means that the group consists of at least one student.", "testcase": [""]}
{"name": "985_D. Sand Fortress", "description": "Input\n\nThe only line contains two integer numbers n and H (1 <= n, H <=10^18) --- the number of sand packs you have and the height of the fence, respectively.", "testcase": ["1 1", "2 10", "999999999999999 1000000000000000", "123456789123456 987654321987654", "500000000000000 1000000000000000", "10 500", "1000000000000000 1", "999999999999999 999999999999999", "7 7777", "1000000000000000 1000000000000000"]}
{"name": "114_D. Petr#", "description": "Input\n\nThe input file consists of three lines. The first line contains string t. The second and the third lines contain the sbegin and send identificators, correspondingly. All three lines are non-empty strings consisting of lowercase Latin letters. The length of each string doesn't exceed 2000 characters.", "testcase": ["abcdefghijklmnopqrstuvwxyz\nabc\nxyz", "hello\nhel\nlo", "exampletestcase\nexam\ncase", "testinput\ninput\ntest", "short\nshor\nt", "consistentstring\nconsiste\ntring", "singleletter\ns\nr", "lowcaseletters\nlowca\ntters", "thelongestsubstring\nlongest\nstring", "anotherexample\nanot\nmple"]}
{"name": "118_A. String Task", "description": "Input\n\nThe first line represents input string of Petya's program. This string only consists of uppercase and lowercase Latin letters and its length is from 1 to 100, inclusive.", "testcase": ["HelloWorld", "a", "B", "TestString", "AnotherExample", "Short", "XYZ", "Complexity", "Algorithm", "DataStructure"]}
{"name": "1227_F2. Wrong Answer on test 233 (Hard Version)", "description": "Input\n\nThe first line contains two integers n, k (1 <= n <= 2*10^5, 1 <= k <= 10^9) --- the number of questions and the number of possible answers to each question.\n\nThe following line contains n integers h_1, h_2, ..., h_n, (1 <= h_{i} <= k) --- answers to the questions.", "testcase": ["2 3\n1 2", "3 4\n1 2 4", "5 7\n3 1 5 7 2", "4 10\n2 2 8 5", "1 1000000000\n999999999", "6 22\n1 3 7 21 13 5", "8 8\n2 3 4 5 6 7 8 1", "7 9\n1 1 2 2 3 3 4", "10 20\n5 5 7 8 13 17 19 2 3 11", "9 100\n20 10 30 40 50 60 70 80 90"]}
{"name": "1312_D. Count the Arrays", "description": "Input\n\nThe first line contains two integers n and m (2 <= n <= m <= 2 * 10^5).", "testcase": ["2 2", "3 6", "4 8", "5 10", "6 12", "7 14", "8 16", "9 18", "10 20", "11 22"]}
{"name": "236_C. LCM Challenge", "description": "Input\n\nThe first line contains an integer n (1 <= n <=10^6 --- the n mentioned in the statement.", "testcase": ["1", "2", "10", "100", "999999", "123456", "654321", "1000000", "500000", "42"]}
{"name": "615_E. Hexagons", "description": "Input\n\nThe only line of the input contains integer n (0 <= n <=10^18) --- the number of Ayrat's moves.", "testcase": ["0", "1", "123", "999999999999999999", "500000000000000000", "10", "987654321", "10000000000000000", "18", "420420420420420420"]}
{"name": "776_E. The Holmes Children", "description": "Input\n\nA single line of input contains two space separated integers n (1 <= n <=10^12) and k (1 <= k <=10^12) indicating that Eurus asks Sherlock and Mycroft to find the value of Fk(n) modulo 1000000007.", "testcase": ["123456789 987654321", "1000000000 500000000", "999999999999 1000000000000", "1020304050 55667788", "1 1", "999 1000000000000", "123456789123 999999999999", "500000000000 123456789", "1000000000000 1000000000000", "4294967296 2147483648"]}
{"name": "801_A. Vicious Keyboard", "description": "Input\n\nThe first line will contain a string s consisting only of uppercase English letters \"V\" and \"K\" with length not less than 1 and not greater than 100.", "testcase": ["V", "K", "VK", "KV", "VVVKKK", "KVVK", "VVVKVK", "KVVVK", "VKVKVKVK", "VVKKVKVKVV"]}
{"name": "847_C. Sum of Nestings", "description": "Input\n\nThe first line contains two integers n and k (1 <= n <= 3.10^5, 0 <= k <=10^18) --- the number of opening brackets and needed total nesting.", "testcase": ["1 0", "2 1", "3 4", "4 10", "5 6", "6 15", "7 28", "8 36", "9 45", "10 55"]}
{"name": "964_A. Splits", "description": "Input\n\nThe first line contains one integer n (1 <= n <= 10^9).", "testcase": ["1", "999999999", "500000000", "100000000", "42", "87654321", "123456789", "100", "2", "987654321"]}
{"name": "p00500 Unique number", "description": "input\n\nThe input consists of 1 + N lines.\n\nThe integer N (2 <= N <= 200) is written on the first line, which indicates the number of players.\n\nIn the i-th line (1 <= i <= N) of the following N lines, three integers from 1 to 100 are written separated by blanks, and the i-th player is the first, second, and third times, respectively. Represents the number written in the game of.", "testcase": ["3\n10 20 30\n40 50 60\n70 80 90", "2\n1 1 1\n2 2 2", "4\n34 67 89\n10 49 20\n90 30 60\n71 51 41", "5\n12 23 34\n45 56 67\n1 2 3\n4 5 6\n7 8 9", "6\n99 100 100\n88 45 67\n32 33 34\n21 22 23\n44 55 66\n77 88 99", "7\n5 15 25\n30 20 10\n40 50 60\n70 80 90\n11 22 33\n44 55 66\n77 66 55", "8\n3 6 9\n8 5 2\n7 4 1\n16 17 18\n19 20 21\n22 23 24\n25 26 27\n28 29 30", "9\n100 99 98\n97 96 95\n94 93 92\n91 90 89\n88 87 86\n85 84 83\n82 81 80\n79 78 77\n76 75 74", "10\n52 34 63\n84 95 29\n81 78 74\n66 54 90\n33 21 59\n10 17 23\n44 55 52\n39 48 57\n73 88 92\n27 36 45", "2\n1 100 50\n50 50 50"]}
{"name": "1351_A. A+B (Trial Problem)", "description": "Input\n\nThe first line contains an integer t (1 <= t <= 10^4) --- the number of test cases in the input. Then t test cases follow.\n\nEach test case is given as a line of two integers a and b (-1000 <= a, b <= 1000).", "testcase": ["1 -10", "2 20", "3 900", "4 -500", "5 0", "6 450", "7 -800", "8 350", "9 -999", "10 1000"]}
{"name": "27_E. Number With The Given Amount Of Divisors", "description": "Input\n\nThe first line of the input contains integer n (1 <= n <= 1000).", "testcase": ["1", "2", "999", "500", "1000", "17", "42", "333", "678", "825"]}
{"name": "397_A. On Segment's Own Points", "description": "Input\n\nThe first line contains a positive integer n (1 <= n <= 100). The (i + 1)-th line contains integers li and ri (0 <= li < ri <= 100) --- the endpoints of the corresponding segment for the i-th student.", "testcase": ["3\n1 2\n3 5\n10 20", "5\n0 10\n15 20\n25 30\n35 40\n45 50", "2\n0 1\n99 100", "4\n10 15\n20 25\n30 35\n40 45", "1\n0 50", "10\n5 10\n15 20\n25 30\n35 40\n45 50\n55 60\n65 70\n75 80\n85 90\n95 100", "6\n1 5\n6 10\n11 15\n16 20\n21 25\n26 30", "7\n2 7\n8 14\n15 22\n23 30\n31 38\n39 46\n47 54", "8\n3 6\n7 11\n12 18\n19 25\n26 32\n33 38\n39 44\n45 49", "9\n0 9\n10 19\n20 29\n30 39\n40 49\n50 59\n60 69\n70 79\n80 89"]}
{"name": "41_B. Martian Dollar", "description": "Input\n\nThe first line contains two integers n and b (1 <= n, b <= 2000) --- the number of days and the initial number of money in bourles. The next line contains n integers ai (1 <= ai <= 2000) --- the prices of Martian dollars.", "testcase": ["2 1500\n1000 1500", "3 200\n1 2 3", "5 500\n10 20 30 40 50", "1 1000\n999", "4 1234\n1234 567 89 10", "10 1500\n100 200 150 250 350 400 450 300 550 600", "6 2000\n2000 1500 1600 1700 1800 1900", "7 420\n69 420 368 256 128 640 1024", "8 1337\n100 200 400 800 1600 32 64 128", "9 1984\n1984 987 654 321 432 543 654 765 876"]}
{"name": "514_A. Chewbaсca and Number", "description": "Input\n\nThe first line contains a single integer x (1 <= x <=10^18) --- the number that Luke Skywalker gave to Chewbacca.", "testcase": ["1", "42", "8675309", "999999999999999999", "123456789012345678", "10", "999", "1099511627776", "888888888888888888", "123456789"]}
{"name": "630_R. Game", "description": "Input\n\nThe only line of the input contains one integer n (1 <= n <=10^18) --- the size of the field.", "testcase": ["1", "2", "10", "100", "123456789", "987654321", "999999999999999999", "1000000000000000000", "500000000000", "847362514897361"]}
{"name": "797_C. Minimal string", "description": "Input\n\nFirst line contains non-empty string s (1 <= |s| <=10^5), consisting of lowercase English letters.", "testcase": ["abcde", "x", "pneumonoultramicroscopicsilicovolcanoconiosis", "hello", "testcase", "a", "longestpossiblestringwithoutspacesjusttochecktheboundarycondition", "short", "anotherone", "lasttestcase"]}
{"name": "1064_A. Make a triangle!", "description": "Input\n\nThe only line contains tree integers a, b and c (1 <= a, b, c <= 100) --- the lengths of sticks Masha possesses.", "testcase": ["1 1 1", "2 5 10", "3 4 5", "6 7 8", "14 15 16", "20 21 29", "30 40 50", "13 22 31", "55 60 65", "88 97 100"]}
{"name": "131_A. cAPS lOCK", "description": "Input\n\nThe first line of the input data contains a word consisting of uppercase and lowercase Latin letters. The word's length is from 1 to 100 characters, inclusive.", "testcase": ["a", "Zebra", "Algorithm", "TestCasesAreFun", "Validation123", "BoundaryTest", "Short", "ALongerExampleOfAWord", "mixedCASEinput", "LastOneToCheck"]}
{"name": "289_C. Polo the Penguin and Strings", "description": "Input\n\nA single line contains two positive integers n and k (1 <= n <= 106, 1 <= k <= 26) --- the string's length and the number of distinct letters.", "testcase": ["10\n1", "999999\n26", "500000\n20", "100\n10", "2500\n5", "123456\n13", "654321\n22", "34567\n8", "98765\n16", "43210\n2"]}
{"name": "430_E. Guess the Tree", "description": "Input\n\nThe first line of the input contains integer n (1 <= n <= 24). Next line contains n positive integers: the i-th number represents ci (1 <= ci <= n).", "testcase": ["3\n1 2 3", "5\n5 3 1 2 4", "1\n1", "6\n6 1 3 4 2 5", "8\n2 4 6 8 1 3 5 7", "9\n1 2 3 4 5 6 7 8 9", "10\n10 9 8 7 6 5 4 3 2 1", "7\n3 1 4 1 5 9 2", "4\n2 4 3 1", "12\n12 1 2 3 4 5 6 7 8 9 10 11"]}
{"name": "669_A. Little Artem and Presents", "description": "Input\n\nThe only line of the input contains a single integer n (1 <= n <=10^9) --- number of stones Artem received on his birthday.", "testcase": ["1", "2", "10", "999999999", "500000000", "324", "847", "123456789", "987654321", "100000000"]}
{"name": "758_F. Geometrical Progression", "description": "Input\n\nThe first and the only line cotains three integers n, l and r (1 <= n <=10^7, 1 <= l <= r <=10^7).", "testcase": ["3 1 4", "10000000 5000000 10000000", "2345678 1234567 7654321", "8765432 2345678 8765432", "100000 100000 200000", "10 1 10", "7 2 9", "999 500 999", "5555 1111 5555", "1 1 1"]}
{"name": "803_C. Maximal GCD", "description": "Input\n\nThe first line consists of two numbers n and k (1 <= n, k <= 10^10).", "testcase": ["1 1", "1000 2000", "10 9999999999", "9999999999 10", "1234567890 9876543210", "5000000000 5000000000", "10000000000 1", "1 10000000000", "4294967295 4294967296", "999999999 888888888"]}
{"name": "p02287 Complete Binary Tree", "description": "Input\n\nIn the first line, an integer $H$, the size of the binary heap, is given. In the second line, $H$ integers which correspond to values assigned to nodes of the binary heap are given in order of node id (from $1$ to $H$).", "testcase": ["3\n1 2 3", "5\n10 5 3 2 4", "7\n50 30 20 10 25 15 5", "4\n100 50 40 30", "6\n70 45 50 20 30 10", "8\n80 40 60 20 30 10 50 5", "2\n2 1", "9\n88 44 55 22 28 33 11 9 5", "10\n100 50 90 25 45 80 70 15 20 10", "1\n1"]}
{"name": "1208_B. Uniqueness", "description": "Input\n\nThe first line of the input contains a single integer n (1 <= n <= 2000) --- the number of elements in the given array.\n\nThe next line contains n spaced integers a_{1}, a_{2}, ..., a_{n} (1 <= a_{i} <= 10^{9}) --- the elements of the array.", "testcase": ["1\n1", "5\n10 20 30 40 50", "3\n999999997 999999998 999999999", "4\n1 1 1 1", "2\n1000000000 500000000", "6\n5 10 15 20 25 30", "8\n100 200 300 400 500 600 700 800", "10\n1 1 1 1 1 1 1 1 1 1", "7\n10 10 10 10 10 10 10", "11\n2 4 6 8 10 12 14 16 18 20 22"]}
{"name": "70_A. Cookies", "description": "Input\n\nThe first line contains a single integer n (0 <= n <= 1000).", "testcase": ["0", "1000", "500", "42", "999", "1", "753", "246", "333", "824"]}
{"name": "893_B. Beautiful Divisors", "description": "Input\n\nThe only line of input contains one number n (1 <= n <=10^5) --- the number Luba has got.", "testcase": ["1", "12345", "99999", "54321", "10000", "83746", "22222", "76453", "48259", "100000"]}
{"name": "p00491 Pasta", "description": "input\n\nThe input consists of K + 1 lines.\n\nOn the first line, two integers N and K (3 <= N <= 100, 1 <= K <= N) are written with a blank as a delimiter.\n\nOn the 1 + i line (1 <= i <= K), two integers Ai and Bi (1 <= Ai <= N, 1 <= Bi <= 3) are written with a blank as a delimiter. This means that the pasta on the Ai day has already been decided, and when Bi = 1, it is a tomato sauce, when Bi = 2, it is a cream sauce, and when Bi = 3, it is a basil sauce. Ai (1 <= i <= K) are all different. It is guaranteed that there will be at least one plan to meet the conditions in the given input data.", "testcase": ["5 2\n1 1\n4 3", "10 3\n2 2\n5 1\n7 3", "6 1\n3 2", "8 4\n1 3\n4 1\n6 2\n8 1", "7 2\n2 1\n6 3", "3 1\n1 2", "9 2\n5 1\n9 3", "4 1\n4 2", "20 5\n3 3\n7 2\n11 1\n13 2\n17 3", "15 3\n6 1\n12 2\n14 3"]}
{"name": "p02258 Maximum Profit", "description": "Input\n\nThe first line contains an integer $n$. In the following $n$ lines, $R_t$ ($t = 0, 1, 2, ... n-1$) are given in order.", "testcase": ["1\n0\n", "2\n0\n1\n", "3\n0\n1\n2\n", "4\n0\n1\n2\n3\n", "5\n0\n1\n2\n3\n4\n", "6\n0\n1\n2\n3\n4\n5\n", "7\n0\n1\n2\n3\n4\n5\n6\n", "8\n0\n1\n2\n3\n4\n5\n6\n7\n", "9\n0\n1\n2\n3\n4\n5\n6\n7\n8\n", "10\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n"]}
{"name": "118_B. Present from Lena", "description": "Input\n\nThe first line contains the single integer n (2 <= n <= 9).", "testcase": ["2", "3", "4", "5", "6", "7", "8", "9", "2", "3"]}
{"name": "1514_B. AND 0, Sum Big", "description": "Input\n\nThe first line contains an integer t (1 <= t <= 10) --- the number of test cases you need to solve.\n\nEach test case consists of a line containing two integers n and k (1 <= n <= 10^{5}, 1 <= k <= 20).", "testcase": [""]}
{"name": "471_C. MUH and House of Cards", "description": "Input\n\nThe single line contains integer n (1 <= n <=10^12) --- the number of cards.", "testcase": ["1", "999999999999", "500000000000", "123456789012", "987654321098", "100000000000", "9999999", "857463", "100", "42"]}
{"name": "664_A. Complicated GCD", "description": "Input\n\nThe only line of the input contains two integers a and b (1 <= a <= b <= 10100).", "testcase": ["1 10", "2 50", "3 100", "99 100", "12345678901234567890 1234567890123456789012345", "1 10100", "99999999999999999999999999999999999 100000000000000000000000000000000000", "42 42", "3141592653589793238462643383279502884197169399375105820974944592 31415926535897932384626433832795028841971693993751058209749445920", "10000000000000000000000000000000000000000000000000000000000000000 10000000000000000000000000000000000000000000000000000000000000001"]}
{"name": "847_D. Dog Show", "description": "Input\n\nTwo integer numbers are given in the first line - n and T (1 <= n <= 200 000, 1 <= T <= 2.10^9) --- the number of bowls of food and the time when the dog is stopped.\n\nOn the next line numbers t1, t2, ..., tn (1 <= ti <=10^9) are given, where ti is the moment of time when the i-th bowl of food is ready for eating.", "testcase": ["2 5\n1 4", "5 100\n1 2 3 4 5", "3 2000000000\n1000000000 1000000000 1000000000", "4 10\n1 2 8 9", "6 15\n3 4 5 6 7 8", "7 123456789\n1 23456789 34567890 45678901 56789012 67890123 78901234", "5 200\n55 67 89 123 157", "8 1500000000\n99999 199999 299999 399999 500000 600000 700000 800000", "10 20\n2 4 6 8 10 12 14 16 18 20", "4 9\n2 3 5 7"]}
{"name": "868_F. Yet Another Minimization Problem", "description": "Input\n\nThe first line contains two integers n and k (2 <= n <=10^5, 2 <= k <= min (n, 20)) --- the length of the array and the number of segments you need to split the array into.\n\nThe next line contains n integers a1, a2, ..., an (1 <= ai <= n) --- the elements of the array.", "testcase": ["3 2\n1 2 3", "4 2\n1 2 2 4", "5 3\n1 1 2 3 5", "6 3\n1 2 3 3 4 6", "7 4\n1 3 5 2 4 6 7", "8 5\n1 1 1 1 2 2 2 2", "9 4\n1 2 3 3 4 5 6 6 9", "10 5\n1 2 2 1 3 3 4 4 5 5", "6 2\n1 2 3 4 5 6", "6 4\n1 1 2 2 3 3"]}
{"name": "964_B. Messages", "description": "Input\n\nThe first line contains five integers n, A, B, C and T (1 <= n, A, B, C, T <= 1000).\n\nThe second string contains n integers ti (1 <= ti <= T).", "testcase": ["1 2 3 4 5\n1", "5 10 20 30 40\n5 10 15 20 25", "3 100 200 300 400\n50 100 150", "4 1 1 1 1000\n1 1000 500 250", "2 999 500 250 750\n1 750", "6 123 456 789 1000\n10 20 30 40 50 60", "7 300 150 450 600\n100 200 300 400 500 600 700", "8 888 777 666 555\n8 88 888 80 800 808 888 888", "9 50 100 150 200\n25 50 75 100 125 150 175 200 225", "10 987 654 321 432\n111 222 333 444 555 666 777 888 999 1010"]}
{"name": "991_C. Candies", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 10^{18}) --- the initial amount of candies in the box.", "testcase": ["1", "2", "999999999999999999", "100000000000000000", "123456789123456789", "987654321098765432", "10", "500000000000000000", "999999999999999998", "42"]}
{"name": "1255_A. Changing Volume", "description": "Input\n\nEach test contains multiple test cases. The first line contains the number of test cases T (1 <= T <= 1 000). Then the descriptions of the test cases follow.\n\nEach test case consists of one line containing two integers a and b (0 <= a, b <= 10^{9}) --- the current volume and Bob's desired volume, respectively.", "testcase": ["1\n0 1000000000", "1\n500000000 500000000", "1\n999999999 0", "1\n123456789 987654321", "1\n1000000 1000000", "1\n850000000 200000000", "1\n429496729 372036854", "1\n0 0", "1\n1 999999999", "1\n50000000 40000000"]}
{"name": "600_C. Make Palindrome", "description": "Input\n\nThe only line contains string s (1 <= |s| <= 2.10^5) consisting of only lowercase Latin letters.", "testcase": ["a", "xyz", "example", "longerinputstring", "t", "testcase", "thisisateststring", "anotherexampleinput", "short", "maximumsizestringmaximumsizestringmaximumsizestringmaximumsizestringmaximumsizestringmaximumsizestringmaximumsizestringmaximumsizestringmaximumsizestringmaximumsizestring"]}
{"name": "762_A. k-th divisor", "description": "Input\n\nThe first line contains two integers n and k (1 <= n <=10^15, 1 <= k <=10^9).", "testcase": ["1 1", "1000000000000000 1000000000", "123456789012345 123456789", "999999999999999 987654321", "500000000000000 500000000", "234567890123456 345678901", "800000000000000 800000000", "99999999999999 999999999", "100000000000001 100000001", "765432109876543 234567890"]}
{"name": "807_B. T-Shirt Hunt", "description": "Input\n\nThe only line contains three integers p, x and y (26 <= p <= 500; 1 <= y <= x <= 20000) --- your place in Codecraft-17, your current score in the elimination round of 8VC Venture Cup 2017, and the smallest number of points you consider sufficient for winning the current round.", "testcase": ["50 1500 500", "30 2000 1000", "100 4000 2500", "45 3500 3300", "26 1500 1200", "150 10000 9000", "300 12000 5000", "76 5000 4500", "200 18000 17000", "500 20000 19000"]}
{"name": "1246_A. p-binary", "description": "Input\n\nThe only line contains two integers n and p (1 <= n <= 10^9, -1000 <= p <= 1000).", "testcase": ["1 -1000", "1000000000 0", "500000000 1000", "87456321 -333", "123456789 -987", "999999999 123", "2 500", "987654321 321", "100 42", "235790 666"]}
{"name": "1370_D. Odd-Even Subsequence", "description": "Input\n\nThe first line contains two integers n and k (2 <= k <= n <= 2 * 10^5) --- the size of the array a and the size of the subsequence.\n\nThe next line contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 10^9) --- the elements of the array a.", "testcase": ["5\n3\n[1, 2, 3, 4, 5]", "4\n2\n[1000000000, 200000000, 300000000, 400000000]", "10\n5\n[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]", "7\n4\n[5, 15, 25, 35, 45, 55, 65]", "3\n2\n[9, 99, 999]", "8\n2\n[1, 1, 1, 1, 1, 1, 1, 1]", "6\n6\n[123, 456, 789, 101112, 131415, 161718]", "15\n8\n[34, 67, 23, 70, 12, 89, 45, 68, 91, 24, 73, 81, 2, 8, 77]", "9\n4\n[546, 457, 678, 345, 432, 231, 123, 678, 891]", "12\n5\n[102, 304, 506, 708, 910, 1112, 1314, 1516, 1718, 1920, 2122, 2324]"]}
{"name": "255_D. Mr. Bender and Square", "description": "Input\n\nThe first line contains four space-separated integers n, x, y, c (1 <= n, c <=10^9; 1 <= x, y <= n; c <= n2).", "testcase": ["3 1 1 1", "5 2 3 7", "7 4 4 20", "10 5 5 50", "1000000000 500000000 500000000 999999999", "999999999 250000000 750000000 800000000", "1000 123 456 230984", "150 37 44 10000", "351 89 150 123456", "10 10 10 100"]}
{"name": "328_A. IQ Test", "description": "Input\n\nThe first line contains exactly four integer numbers between 1 and 1000, inclusively.", "testcase": ["4 17 999 243", "56 102 401 678", "1 1 1 1000", "123 456 789 10", "321 654 987 100", "222 333 444 555", "999 888 777 666", "1000 1000 1000 1000", "2 4 8 16", "42 84 168 336"]}
{"name": "418_A. Football", "description": "Input\n\nThe first line contains two integers --- n and k (1 <= n, k <= 1000).", "testcase": ["1 1", "2 5", "1000 1000", "500 250", "999 1", "33 33", "876 123", "100 10", "640 480", "42 42"]}
{"name": "682_A. Alyona and Numbers", "description": "Input\n\nThe only line of the input contains two integers n and m (1 <= n, m <= 1 000 000).", "testcase": ["1 1", "12345 67890", "999999 1000000", "500000 500000", "2 999999", "100 200", "40000 123456", "99999 88888", "800000 900000", "222222 333333"]}
{"name": "888_C. K-Dominant Character", "description": "Input\n\nThe first line contains string s consisting of lowercase Latin letters (1 <= |s| <= 100000).", "testcase": ["a", "abc", "teststring", "longerinputstringtotest", "short", "somekindofstringforinput", "thisisareallylongstringtestcasefortheinputvalidation", "l", "anotherexample", "stringwithletters"]}
{"name": "104_A. Blackjack", "description": "Input\n\nThe only line contains n (1 <= n <= 25) --- the required sum of points.", "testcase": ["1", "5", "10", "15", "20", "25", "3", "7", "13", "22"]}
{"name": "1409_D. Decrease the Sum of Digits", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 2 * 10^4) --- the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains two integers n and s (1 <= n <= 10^{18}; 1 <= s <= 162).", "testcase": ["1\n1000000000000000000 162", "2\n8 10\n123456789123 150", "3\n7 15\n999999999999999999 162\n1 1", "4\n100 2\n200 30\n300 70\n400 100", "5\n500000000000000000 10\n300000000000000000 60\n100000000000000000 90\n200000000000000000 120\n700000000000000000 150", "1\n123456789012345678 162", "2\n10 7\n52 27", "3\n99999 89\n1000000 121\n777777777777777777 140", "4\n444444444444444444 111\n222222222222222222 123\n888888888888888888 145\n999999999999999999 162", "2\n653 83\n4294967296 126"]}
{"name": "201_A. Clear Symmetry", "description": "Input\n\nThe only line contains a single integer x (1 <= x <= 100) --- the required sharpness of the matrix.", "testcase": ["1", "2", "42", "100", "15", "99", "75", "23", "88", "56"]}
{"name": "225_E. Unsolvable", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 40).", "testcase": ["1", "2", "3", "10", "20", "21", "30", "35", "39", "40"]}
{"name": "858_C. Did you mean...", "description": "Input\n\nThe only line contains a non-empty word consisting of small English letters. The length of the word is between 1 and 3000 letters.", "testcase": ["a", "alphabet", "testcase", "championship", "programming", "abcdefghij", "smallword", "pneumonoultramicroscopicsilicovolcanoconiosis", "z", "kitten"]}
{"name": "109_A. Lucky Sum of Digits", "description": "Input\n\nThe single line contains an integer n (1 <= n <=10^6 --- the sum of digits of the required lucky number.", "testcase": ["1", "2", "3", "10", "100", "999", "12345", "54321", "999999", "482763"]}
{"name": "1395_A. Boboniu Likes to Color Balls", "description": "Input\n\nThe first line contains one integer T (1<= T<= 100) denoting the number of test cases.\n\nFor each of the next T cases, the first line contains four integers r, g, b and w (0<= r,g,b,w<= 10^9).", "testcase": ["1\n0 0 0 0", "3\n1000000000 1000000000 1000000000 1000000000\n0 0 0 1\n123456789 987654321 192837465 918273645", "2\n500000000 500000000 500000000 500000000\n0 1 0 2", "4\n123 456 789 101112\n0 0 1 0\n999999999 888888888 777777777 666666666\n0 0 0 999999999", "5\n234567890 234567890 234567890 234567890\n0 0 0 3\n987654321 123456789 987654321 123456789\n1 1 1 1\n100000000 200000000 300000000 400000000", "2\n99999999 88888888 77777777 66666666\n1234567 8901234 5678901 2345678", "1\n1 1 1 1", "3\n100000000 200000000 300000000 400000000\n0 999999999 0 999999999\n123123123 456456456 789789789 321321321", "2\n0 1 2 3\n1 0 3 2", "1\n500000 600000 700000 800000"]}
{"name": "258_A. Little Elephant and Bits", "description": "Input\n\nThe single line contains integer a, written in the binary notation without leading zeroes. This number contains more than 1 and at most 105 digits.", "testcase": ["10", "1101", "1010101010101", "111000111000111", "101101101101101101", "11001100110011001100", "1011101110111011101110", "1111111111111111111111111", "10000000000000000000000000000", "101010101010101010101010101010101010"]}
{"name": "281_A. Word Capitalization", "description": "Input\n\nA single line contains a non-empty word. This word consists of lowercase and uppercase English letters. The length of the word will not exceed 103.", "testcase": ["Apple", "banana", "Cherry", "mango", "STRAWBERRY", "Kiwi", "Papaya123", "Peaches", "ApricoT", "Jackfruit"]}
{"name": "447_A. DZY Loves Hash", "description": "Input\n\nThe first line contains two integers, p and n (2 <= p, n <= 300). Then n lines follow. The i-th of them contains an integer xi (0 <= xi <=10^9).", "testcase": ["2 2\n1\n2", "3 4\n0\n1000000000\n500000000\n250000000", "5 5\n1234\n4321\n56789\n98765\n13579", "2 3\n123456\n234567\n345678", "10 10\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9", "7 3\n43534\n24324\n34243", "2 5\n999999999\n888888888\n777777777\n666666666\n555555555", "8 6\n0\n145678\n234567\n345678\n456789\n567890", "4 4\n0\n1\n999999999\n500000000", "9 9\n84320\n200\n389299\n49500\n12888\n76333\n2345\n678123\n999"]}
{"name": "569_D. Symmetric and Transitive", "description": "Input\n\nA single line contains a single integer n (1 <= n <= 4000).", "testcase": ["1", "4000", "123", "2048", "3500", "1999", "178", "3333", "42", "789"]}
{"name": "935_A. Fafa and his Company", "description": "Input\n\nThe input consists of a single line containing a positive integer n (2 <= n <=10^5) --- the number of employees in Fafa's company.", "testcase": ["2", "99999", "54321", "100000", "3", "48976", "20000", "67890", "12345", "10001"]}
{"name": "1168_A. Increasing by Modulo", "description": "Input\n\nThe first line contains two integers n and m (1 <= n, m <= 300 000) --- the number of integers in the array and the parameter m.\n\nThe next line contains n space-separated integers a_1, a_2, ..., a_n (0 <= a_i < m) --- the given array.", "testcase": ["1 1\n0", "2 100\n99 0", "3 300000\n299999 299998 299997", "4 10\n1 2 3 4", "5 12345\n123 234 345 456 567", "6 300\n10 20 30 40 50 60", "7 2500\n0 500 1000 1500 2000 250 1750", "8 99999\n0 12345 23456 34567 45678 56789 67890 78901", "9 50000\n11111 22222 33333 44444 55555 66666 77777 88888 99999", "10 300000\n299999 0 150000 75000 225000 112500 262500 131250 65625 32812"]}
{"name": "1288_C. Two Arrays", "description": "Input\n\nThe only line contains two integers n and m (1 <= n <= 1000, 1 <= m <= 10).", "testcase": ["1 1", "2 5", "1000 10", "500 3", "250 2", "333 1", "999 4", "42 7", "123 8", "100 9"]}
{"name": "1437_A. Marketing Scheme", "description": "Input\n\nThe first line contains a single integer t (1 <= t <= 1000) --- the number of test cases.\n\nThe first and only line of each test case contains two integers l and r (1 <= l <= r <= 10^9) --- the range of the number of cans customers can buy.", "testcase": ["1\n1 1000000000", "3\n200 300\n400 500\n650 700", "2\n150 2000\n5 10000", "5\n123 4567\n7890 12345\n678 789\n1 2\n3333 99999", "4\n1000 2000\n2001 3000\n3001 4000\n4001 5000", "1\n999999000 1000000000", "3\n100000 500000\n600000 700000\n800000 900000", "2\n500000 600000\n123456 789101", "6\n10 20\n30 40\n50 60\n70 80\n90 100\n110 120", "2\n250000 750000\n850000 950000"]}
{"name": "1461_E. Water Level", "description": "Input\n\nThe first line of the input contains six integers k, l, r, t, x and y (1 <= l <= k <= r <= 10^{18}; 1 <= t <= 10^{18}; 1 <= x <= 10^6; 1 <= y <= 10^{18}) --- initial water level, the required range, the number of days, daily water usage and the exact amount of water that can be added, respectively.", "testcase}
{"name": "32_C. Flea", "description": "Input\n\nThe first line contains three integers n, m, s (1 <= n, m, s <=10^6 --- length of the board, width of the board and length of the flea's jump.", "testcase": ["3 5 2\n", "10 10 5\n", "7 4 3\n", "100 200 150\n", "999999 1000000 500000\n", "1 1 1\n", "500000 500000 499999\n", "100000 100 1000\n", "9 8 7\n", "888888 999999 100000\n"]}
{"name": "569_A. Music", "description": "Input\n\nThe single line contains three integers T, S, q (2 <= q <=10^4, 1 <= S < T <=10^5).", "testcase": [""]}
{"name": "p00015 National Budget", "description": "Input\n\nInput consists of several datasets. In the first line, the number of datasets N (1 <= N <= 50) is given. Each dataset consists of 2 lines:\n\n\nThe first integer\nThe second integer\n\n\nThe integer has at most 100 digits.", "testcase": ["1\n123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789\n987654321987654321987654321987654321987654321987654321987654321987654321987654321987654321987654321987654321", "2\n1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\n2222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222\n3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333\n4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444", "3\n1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010\n202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020\n303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030\n404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040\n505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050", "4\n999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888\n777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666\n555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555\n444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444", "5\n123\n456\n789\n101112\n131415\n161718\n192021\n222324\n252627\n282930\n313233", "1\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001\n123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123", "2\n9876543210123456789123456789012345678912345678901234567890123456789012345678901234567890123456789\n1111111110987654321234567891234567890987654321987654321234567890123456789123456789012345678901234\n2222222222999999999888888888777777777666666666555555555444444444333333333222222222111111111000000000", "3\n1\n2\n3\n4\n5\n6\n7\n8\n9\n0", "4\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\n121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212\n131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313\n141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414", "2\n1234567890987654321234567890987654321234985761349857613495876134958761234587361234875612039487501923845\n5432109876543210987654321098765432109876543210987654321098765432109876543210987654321098765432109876543\n6789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678\n0987654321098765432109876543210987654321098765432109876543210987654321098765432109876543210987654321098765"]}
{"name": "p00298 Mighty Man", "description": "input\n\nThe input is given in the following format.\n\n\nN\nc1 w1\nc2 w2\n::\ncN wN\n\n\nThe number of powerful people N (1 <= N <= 1000) is given in the first line. The following N lines give the maximum weight ci (1 <= ci <= 100000) and the weight wi (1 <= wi <= 100000) that the i-th power can have.", "testcase": ["3\n10 5\n20 5\n15 10", "1\n100000 50000", "2\n12345 54321\n23456 65432", "4\n99999 88888\n50000 40000\n60000 50000\n70000 60000", "5\n1 1\n2 2\n3 3\n4 4\n5 5", "6\n11111 11110\n22222 21112\n33333 12345\n44444 23456\n55555 34567\n66666 45678", "7\n999 999\n888 888\n777 777\n666 666\n555 555\n444 444\n333 333", "8\n5000 4000\n6000 5000\n7000 3000\n8000 2000\n9000 1000\n10000 6000\n11000 7000\n12000 8000", "9\n100000 1000\n99999 2000\n88888 3000\n77777 4000\n66666 5000\n55555 6000\n44444 7000\n33333 8000\n22222 9000", "10\n12345 12344\n23456 23455\n34567 34566\n45678 45677\n56789 56788\n67890 67889\n78901 78900\n89012 89011\n90123 90122\n100000 99999"]}
{"name": "1025_C. Plasticine zebra", "description": "Input\n\nThe only line contains a string s (1 <= |s| <= 10^5, where |s| denotes the length of the string s) comprised of lowercase English letters 'b' and 'w' only, where 'w' denotes a white piece and 'b' denotes a black piece.", "testcase": ["b", "w", "bb", "ww", "wbwbwbwb", "bbbwbb", "wwwbwwwb", "bw", "bwbwbwbwbwbw", "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"]}
{"name": "110_A. Nearly Lucky Number", "description": "Input\n\nThe only line contains an integer n (1 <= n <=10^18).\n\nPlease do not use the %lld specificator to read or write 64-bit numbers in С++. It is preferred to use the cin, cout streams or the %I64d specificator.", "testcase": ["1", "123456789", "1000000000000000000", "999999999999999999", "987654321987654321", "10000000000000000", "555555555555555555", "182736451827364518", "762345987234098723", "2"]}
{"name": "1353_D. Constructing the Array", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 10^4) --- the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains one integer n (1 <= n <= 2 * 10^5) --- the length of a.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 * 10^5 (sum n <= 2 * 10^5).", "testcase": ["1\n1", "1\n2", "2\n1\n3", "4\n5\n2\n7\n3", "3\n4\n4\n4", "2\n200000\n199999", "1\n12345", "1\n34567", "3\n11111\n22222\n33333", "5\n123\n234\n345\n456\n567"]}
{"name": "1242_A. Tile Painting", "description": "Input\n\nThe first line of input contains a single integer n (1 <= n <= 10^{12}), the length of the path.", "testcase": ["1\n", "999999999999\n", "500000000000\n", "123456789012\n", "987654321098\n", "100000000000\n", "777777777777\n", "847362514938\n", "135792468135\n", "246801357924\n"]}
{"name": "p01060 Product Sale Lines", "description": "Input\n\nThe input is given in the following format.\n\n\nW H\nN\np1 p2 ... pN\n\n\nThe integers W and H that represent the size of the column are given in the first row, separated by blanks. W represents the number of people on the outside arranged horizontally in a U-shape, and H represents the number of people on the outside arranged vertically. The second row is given the number of times N a person can pull out of either column. In the third row, information about how to remove columns p1 ... pN is given separated by blanks. pi is '0' or '1', and when it is '0', it means that one person on the outside can get rid of it, and when it is '1', it means that one person on the inside can get rid of it. However, Uniqlo Uzuki or Rin Meguro will not leave the line.", "testcase": ["4 5\n1\n0", "4 5\n2\n0 1", "7 4\n4\n0 0 1 1", "8 6\n3\n1 0 1", "3 3\n2\n0 1", "5 5\n5\n0 0 1 1 0", "2 2\n1\n1", "6 8\n4\n1 1 0 0", "9 7\n3\n0 1 1", "4 6\n6\n0 0 1 1 0 1", "5 3\n2\n1 0", "10 2\n5\n0 1 0 1 1", "7 9\n6\n1 0 0 1 1 0", "2 5\n3\n0 1 1", "8 4\n2\n1 0", "6 7\n5\n1 0 1 0 1", "5 6\n3\n0 1 0", "3 8\n4\n1 0 0 1", "10 10\n10\n0 1 1 0 0 1 1 0 0 1", "1 4\n2\n1 0", "2 3\n1\n0", "4 2\n3\n1 1 0", "9 3\n4\n0 0 0 1", "3 7\n5\n1 1 1 0 0", "5 8\n7\n0 1 0 1 0 1 0", "7 2\n3\n1 0 1", "8 1\n1\n0", "6 5\n6\n1 1 0 0 1 1", "2 2\n2\n0 1", "3 6\n4\n1 0 1 1"]}
{"name": "p01497 Bubble Puzzle", "description": "Input\n\nThe input consists of 4 lines, each contains 4 nonnegative integers smaller than 5. Each integer describes the initial states of bubbles on grid squares. 0 indicates that the corresponding square is empty.", "testcase": ["0 0 0 0\n0 0 0 0\n0 0 0 0\n0 0 0 0", "1 0 2 0\n0 1 0 2\n2 0 1 0\n0 2 0 1", "3 4 1 2\n4 3 2 1\n1 2 3 4\n2 1 4 3", "4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4", "0 1 0 2\n1 0 2 0\n0 2 0 1\n2 0 1 0", "2 3 1 4\n3 2 4 1\n1 4 2 3\n4 1 3 2", "1 1 1 1\n2 2 2 2\n3 3 3 3\n4 4 4 4", "0 1 2 3\n1 0 3 2\n2 3 0 1\n3 2 1 0", "2 2 0 0\n1 1 0 0\n2 2 0 0\n1 1 0 0", "4 3 2 1\n3 4 1 2\n2 1 4 3\n1 2 3 4", "3 0 3 0\n0 3 0 3\n3 0 3 0\n0 3 0 3", "1 2 1 2\n2 1 2 1\n1 2 1 2\n2 1 2 1", "4 0 4 0\n0 4 0 4\n4 0 4 0\n0 4 0 4", "1 3 2 4\n4 2 3 1\n2 4 1 3\n3 1 4 2", "0 2 3 4\n2 0 4 3\n3 4 0 2\n4 3 2 0", "4 1 2 3\n1 4 3 2\n2 3 4 1\n3 2 1 4", "3 1 4 2\n1 3 2 4\n4 2 3 1\n2 4 1 3", "2 4 1 3\n4 2 3 1\n1 3 2 4\n3 1 4 2", "0 0 1 1\n0 0 2 2\n1 1 0 0\n2 2 0 0", "1 2 1 1\n2 1 2 2\n1 1 1 2\n2 2 2 1", "3 4 3 4\n4 3 4 3\n3 4 3 4\n4 3 4 3", "2 2 3 3\n2 2 3 3\n3 3 2 2\n3 3 2 2", "1 1 4 4\n4 4 1 1\n1 1 4 4\n4 4 1 1", "0 0 1 1\n2 2 3 3\n1 1 0 0\n3 3 2 2", "1 3 4 2\n2 4 3 1\n4 2 1 3\n3 1 2 4", "0 2 1 3\n2 0 3 1\n1 3 0 2\n3 1 2 0", "3 3 1 1\n1 1 3 3\n3 3 1 1\n1 1 3 3", "4 2 2 4\n2 4 4 2\n4 2 2 4\n2 4 4 2", "0 1 4 2\n1 0 2 4\n4 2 0 1\n2 4 1 0", "1 4 3 2\n4 1 2 3\n3 2 1 4\n2 3 4 1"]}
{"name": "p01810 Jail", "description": "Input\n\n4 2", "testcase": ["4 2", "5 2", "6 3", "7 4", "8 2", "9 3", "10 4", "11 2", "12 3", "13 4", "14 2", "15 3", "16 4", "17 2", "18 3", "19 4", "20 2", "21 3", "22 4", "23 2", "24 3", "25 4", "26 2", "27 3", "28 4", "29 2", "30 3", "31 4", "32 2", "33 3"]}
{"name": "p01945 Star in Parentheses", "description": "Input\n\nThe input consists of a single test case formatted as follows.\n\n\n$S$\n\n\n$S$ is balanced parentheses with exactly one '*' inserted somewhere. The length of $S$ is between 1 and 100, inclusive.", "testcase": ["()*", "(*))", "(()*)", "(*())", "(*)()", "((*)())", "(()(*))", "(((*)))", "((()))*", "(()*())", "(*(()))", "(*(()))", "(()())*", "(())*()", "(*(()))", "(*()())", "(**)", "(()*(()))", "((())*())", "(()(**))", "(())(*)", "((*)()())", "((*))()", "(()((*)))", "(()*(())())", "((())*(()))", "(((()*))())", "(()(*())())", "((*(())))", "((((*)())))"]}
{"name": "p02378 Bipartite Matching", "description": "Input\n\n\n|X| |Y| |E|\nx0 y0\nx1 y1\n:\nx|E|-1 y|E|-1\n\n\n|X| and |Y| are the number of vertices in X and Y respectively, and |E| is the number of edges in the graph G. The vertices in X are named with the numbers 0, 1,..., |X|-1, and vertices in Y are named with the numbers 0, 1,..., |Y|-1, respectively.\n\nxi and yi are the node numbers from X and Y respectevely which represent the end-points of the i-th edge.", "testcase": ["|2| |2| |1| 0 0", "|3| |3| |2| 0 1 2 2", "|3| |2| |3| 0 0 1 1 2 0", "|4| |4| |4| 0 1 1 2 2 3 3 0", "|5| |5| |5| 0 1 2 0 1 3 3 4 4 2", "|2| |3| |2| 0 0 1 2", "|6| |6| |7| 0 1 1 2 2 3 3 4 4 5 5 0 0 3", "|3| |3| |4| 0 0 1 1 2 2 0 2", "|8| |8| |12| 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 0 0 2 1 3 2 4 3 5", "|4| |4| |5| 0 1 1 2 2 3 3 0 0 3", "|6| |4| |4| 0 0 1 1 2 2 3 3", "|2| |3| |2| 0 0 1 1", "|3| |5| |5| 0 1 1 2 1 3 2 4 0 4", "|4| |3| |3| 0 0 1 1 2 2", "|7| |7| |10| 0 1 1 2 2 3 3 4 4 5 5 6 6 0 0 3 1 4 2 5", "|5| |4| |6| 0 1 1 2 2 0 3 0 3 1 4 3", "|4| |2| |3| 0 0 1 0 2 1", "|3| |6| |5| 0 1 1 2 2 3 0 4 0 5", "|8| |3| |7| 0 0 1 0 2 0 3 1 4 1 5 2 6 2", "|4| |4| |5| 0 1 1 2 1 0 2 3 3 1", "|5| |6| |8| 0 0 1 1 2 2 3 1 3 3 4 4 1 5 2 5", "|7| |3| |9| 0 0 1 1 2 1 3 2 4 2 5 0 6 0 0 2", "|6| |7| |13| 0 1 1 2 2 3 3 4 4 5 5 1 0 6 1 3 2 4 3 5 2 6 3 6", "|3| |2| |2| 0 0 1 1", "|2| |5| |4| 0 0 0 1 1 2 1 3", "|9| |4| |12| 0 0 1 1 2 2 3 3 4 0 5 0 6 1 7 1 8 2", "|10| |10| |15| 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 0 0 3 1 4 2 5", "|11| |6| |16| 0 0 1 0 2 1 3 1 4 2 5 2 6 3 7 3 8 4 9 4 10 5 0 5 1 3", "|12| |12| |18| 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11 11 0 0 4 1 5 2 6", "|5| |10| |14| 0 0 0 1 1 2 1 3 2 4 2 5 3 6 4 7 3 8 4 9"]}
{"name": "1015_D. Walking Between Houses", "description": "Input\n\nThe first line of the input contains three integers n, k, s (2 <= n <= 10^9, 1 <= k <= 2 * 10^5, 1 <= s <= 10^{18}) --- the number of houses, the number of moves and the total distance you want to walk.", "testcase": ["2 1 1", "3 2 5", "4 10 20", "5 200000 123456789012345", "6 150000 98765432109876", "7 1 1000", "8 8 64", "9 100 900", "10 50000 1000000000000", "11 200 48400", "12 1500 800000000000", "13 250000 62500000000", "14 20 196", "15 40000 90000000000", "16 1000 16000", "17 222222 39204488888", "18 300 2916", "19 2000 722000", "20 9 180", "21 99999 209999790000", "22 100000 220000000000", "23 12345 151851250", "24 54321 1176497494400", "25 11111 123456789100000", "26 66666 351258964656", "27 55555 826146801630", "28 43210 1868687056820", "29 33333 333339999888", "30 77777 6048179275228", "31 543 1679616"]}
{"name": "1061_D. TV Shows", "description": "Input\n\nThe first line contains integers n, x and y (1 <= n <= 10^5, 1 <= y < x <= 10^9) --- the number of TV shows, the cost to rent a TV for the first minute and the cost to rent a TV for every subsequent minute.\n\nEach of the next n lines contains two integers l_i and r_i (1 <= l_i <= r_i <= 10^9) denoting the start and the end minute of the i-th TV show.", "testcase": ["5 10 1\n1 5\n10 15\n20 25\n50 55\n60 65", "3 1000000000 999999999\n100000000 100000005\n200000000 200000010\n300000000 300000015", "2 123456789 1000000\n1 1\n2 2", "4 50000000 1\n100000 100010\n200000 200020\n300000 300030\n400000 400040", "6 350 50\n15 20\n30 35\n70 80\n160 165\n230 240\n310 320", "10 150000000 145000000\n10000 10001\n20000 20002\n30000 30003\n40000 40004\n50000 50005\n60000 60006\n70000 70007\n80000 80008\n90000 90009\n100000 100010", "8 600 10\n300000000 300000010\n600000000 600000020\n900000000 900000030\n400 450\n800 850\n1200 1250\n1600 1650\n2000 2050", "1 20 19\n15 16", "3 1000 999\n250000000 250000001\n500000000 500000002\n750000000 750000003", "7 2 1\n7 14\n24 28\n31 37\n40 40\n55 60\n63 63\n75 80", "5 10 2\n1 3\n7 8\n14 17\n25 26\n34 35", "3 100000000 10\n99999990 100000000\n100000000 100000050\n900000000 900000060", "2 88888888 1\n222222200 222222230\n444444400 444444445", "6 7 4\n100 110\n200 215\n330 360\n450 460\n750 760\n820 830", "9 640 320\n1 2\n6 7\n13 14\n20 21\n28 29\n36 37\n45 47\n54 55\n63 64", "7 1000000 10000\n5 8\n15 19\n27 29\n38 39\n40 44\n53 59\n70 77", "9 430 8\n10 20\n30 40\n55 60\n75 77\n90 93\n100 102\n120 130\n140 150\n170 172", "4 500 2\n234567 234570\n345678 345681\n456789 456791\n567890 567894", "2 900 100\n1 10\n950 960", "10 9 1\n1 1\n3 3\n5 5\n7 7\n9 9\n20 20\n30 30\n40 40\n50 50\n60 60", "5 10000 9999\n100000000 100000010\n200000000 200000020\n300000000 300000030\n400000000 400000040\n500000000 500000050", "8 70000000 6000000\n2 5\n15 22\n50 55\n88 92\n123 132\n150 160\n185 193\n250 266", "1 500000 450000\n100000000 100000005", "3 10000000 987654\n321 330\n654 660\n987 990", "4 350 7\n10000 10003\n20000 20006\n30000 30009\n40000 40012", "6 12 3\n1000000 1000002\n2000000 2000005\n3000000 3000007\n4000000 4000010\n5000000 5000015\n6000000 6000020", "10 4500000 2500\n50 52\n150 154\n250 255\n350 356\n450 451\n550 553\n650 652\n750 757\n850 853\n950 960", "3 400000000 300000000\n10 12\n24 27\n38 45", "7 800000 10\n1234567 1234577\n2469134 2469145\n3703701 3703715\n4938268 4938275\n6172835 6172842\n7407402 7407410\n8641970 8641975", "9 400000 350000\n5000000 5000003\n6000000 6000005\n7000000 7000010\n8000000 8000012\n9000000 9000017\n10000000 10000020\n15000000 15000025\n20000000 20000030\n25000000 25000033"]}
{"name": "1102_E. Monotonic Renumeration", "description": "Input\n\nThe first line contains one integer n (2 <= n <= 2 * 10^5) --- the number of elements in a.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 10^9).", "testcase": ["2\n1 2", "3\n10 20 30", "4\n1 2 3 4", "5\n1000000000 1000000000 1000000000 1000000000 1000000000", "6\n1 3 2 6 4 5", "7\n12345678 87654321 13579246 24680975 11223344 55667788 99887766", "8\n99999999 88888888 77777777 66666666 55555555 44444444 33333333 22222222", "9\n21 34 55 89 144 233 377 610 987", "10\n17 17 17 17 17 17 17 17 17 17", "11\n121 132 151 165 198 111 123 142 156 189 212", "12\n7 9 11 13 17 19 23 29 31 37 41 43", "13\n50 49 48 47 46 45 44 43 42 41 40 39 38", "14\n3 6 9 12 15 18 21 24 27 30 33 36 39 42", "15\n108 107 106 105 104 103 102 101 100 99 98 97 96 95 94", "16\n40320 362880 3265920 47900160 622702080 87178291200 1307674368000 20922789888000 355687428096000 6402373705728000 121645100408832000 2432902008176640000 51090942171709440000 1124000727777607680000 25852016738884976640000 620448401733239439360000", "17\n2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59", "18\n1000000000 999999999 999999998 999999997 999999996 999999995 999999994 999999993 999999992 999999991 999999990 999999989 999999988 999999987 999999986 999999985 999999984 999999983", "19\n216 215 214 213 212 211 210 209 208 207 206 205 204 203 202 201 200 199 198", "20\n83 167 251 335 419 503 587 671 755 839 923 1007 1091 1175 1259 1343 1427 1511 1595 1679", "21\n512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1048576 2097152 4194304 8388608 16777216 33554432 67108864 134217728 268435456 536870912", "22\n5 10 20 40 80 160 320 640 1280 2560 5120 10240 20480 40960 81920 163840 327680 655360 1310720 2621440 5242880 10485760", "23\n233 144 89 55 34 21 13 8 5 3 2 1 1 2 3 5 8 13 21 34 55 89 144", "24\n37 74 111 148 185 222 259 296 333 370 407 444 481 518 555 592 629 666 703 740 777 814 851 888", "25\n500000000 400000000 300000000 200000000 100000000 50000000 40000000 30000000 20000000 10000000 5000000 4000000 3000000 2000000 1000000 500000 400000 300000 200000 100000 50000 40000 30000 20000 10000", "26\n1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1048576 2097152 4194304 8388608 16777216 33554432", "27\n1001 2002 3003 4004 5005 6006 7007 8008 9009 10010 11011 12012 13013 14014 15015 16016 17017 18018 19019 20020 21021 22022 23023 24024 25025 26026 27027", "28\n900000000 800000000 700000000 600000000 500000000 400000000 300000000 200000000 100000000 90000000 80000000 70000000 60000000 50000000 40000000 30000000 20000000 10000000 9000000 8000000 7000000 6000000 5000000 4000000 3000000 2000000 1000000 900000", "29\n999999941 999999942 999999943 999999944 999999945 999999946 999999947 999999948 999999949 999999950 999999951 999999952 999999953 999999954 999999955 999999956 999999957 999999958 999999959 999999960 999999961 999999962 999999963 999999964 999999965 999999966 999999967 999999968 999999969", "30\n33 65 97 129 161 193 225 257 289 321 353 385 417 449 481 513 545 577 609 641 673 705 737 769 801 833 865 897 929 961"]}
{"name": "1130_D2. Toy Train", "description": "Input\n\nThe first line contains two space-separated integers n and m (2 <= n <= 5 000; 1 <= m <= 20 000) --- the number of stations and the number of candies, respectively.\n\nThe i-th of the following m lines contains two space-separated integers a_i and b_i (1 <= a_i, b_i <= n; a_i != b_i) --- the station that initially contains candy i and the destination station of the candy, respectively.", "testcase": ["3 5\n1 3\n2 3\n1 2\n3 1\n3 2", "2 1\n1 2", "4 6\n1 3\n2 4\n3 1\n4 2\n3 2\n1 4", "5 10\n1 5\n2 5\n3 1\n4 2\n5 3\n1 4\n2 3\n3 4\n4 1\n5 2", "2 2\n1 2\n2 1", "7 10\n1 2\n3 4\n5 6\n7 1\n2 3\n4 5\n6 7\n1 3\n3 2\n2 6", "5 5\n1 2\n2 3\n3 4\n4 5\n5 1", "8 20\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 1\n1 3\n2 4\n3 5\n4 6\n5 7\n6 8\n7 1\n8 2\n1 4\n2 5\n3 6\n4 7", "6 15\n1 2\n2 3\n3 1\n4 5\n5 6\n6 4\n1 5\n2 6\n3 4\n4 2\n5 3\n6 1\n1 6\n2 4\n3 5", "9 12\n1 2\n3 4\n5 6\n7 8\n9 1\n2 3\n4 5\n6 7\n8 9\n1 4\n2 5\n3 6", "10 10\n1 10\n2 9\n3 8\n4 7\n5 6\n6 5\n7 4\n8 3\n9 2\n10 1", "11 15\n1 2\n3 4\n5 6\n7 8\n9 10\n11 1\n2 3\n4 5\n6 7\n8 9\n10 11\n1 3\n2 4\n3 5\n4 6", "12 18\n1 2\n3 4\n5 6\n7 8\n9 10\n11 12\n2 1\n4 3\n6 5\n8 7\n10 9\n12 11\n1 4\n2 5\n3 6\n4 7\n5 8\n6 9", "13 20\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 1\n2 4\n3 5\n4 6\n5 7\n6 8\n7 9\n8 10", "14 20\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 1\n1 3\n2 4\n3 5\n4 6\n5 7\n6 8", "15 19\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n1 15\n2 14\n3 13\n4 12\n5 11", "16 20\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 1\n1 5\n2 6\n3 7\n4 8", "17 20\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 1\n1 4\n2 5\n3 6", "18 20\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 1\n1 3\n2 4", "19 20\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 1\n1 5", "20 20\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 1", "21 20\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21", "22 20\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21", "23 20\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21", "24 20\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21", "25 20\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21", "26 20\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21", "27 20\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21", "28 20\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21", "29 20\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21", "30 20\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21"]}
{"name": "1172_F. Nauuo and Bug", "description": "Input\n\nThe first line contains three integers n, m, p (1 <= n <= 10^6, 1 <= m <= 2 * 10^5, 1 <= p <= 10^9) --- the length of the given array, the number of queries and the modulus. Note that the modulus is used only in the ModAdd function.\n\nThe second line contains n integers a_1,a_2,...,a_n (-10^9<= a_i<=10^9) --- the given array.\n\nIn the following m lines, each line contains two integers l, r (1<= l<= r<= n) --- you have to calculate the result of Sum(a,l,r,p).", "testcase": ["3 2 100\n1 2 3\n1 3\n2 3", "5 3 1000\n-10 20 0 30 -40\n1 5\n2 4\n3 3", "4 1 123456789\n1000000000 -1000000000 500000000 -500000000\n1 4", "10 5 99999989\n10 20 30 40 50 60 70 80 90 100\n1 10\n2 5\n3 6\n4 4\n5 9", "6 2 202020\n1 -1 2 -2 3 -3\n1 6\n2 5", "7 3 987654321\n0 0 0 0 0 0 0\n1 1\n1 7\n3 5", "8 4 44444444\n-8 7 -6 5 -4 3 -2 1\n1 8\n2 7\n3 6\n4 5", "9 3 2147483647\n1 -1 2 -2 3 -3 4 -4 5\n1 9\n3 7\n5 5", "2 1 100000\n1000000000 -1000000000\n1 2", "1 1 1\n0\n1 1", "11 3 2020123\n-10000 20000 -30000 40000 -50000 60000 -70000 80000 -90000 0 100000\n1 11\n5 9\n6 6", "12 3 303030\n123456 -654321 234567 -765432 345678 -876543 456789 -987654 567890 -123456 678901\n1 12\n4 8\n9 12", "13 5 456789123\n1 2 3 4 5 6 7 8 9 10 11 12 13\n1 13\n2 6\n7 11\n3 9\n4 8", "14 3 2222222\n-14 13 -12 11 -10 9 -8 7 -6 5 -4 3 -2 1\n2 14\n1 7\n6 13", "15 6 77777777\n15 -14 13 -12 11 -10 9 -8 7 -6 5 -4 3 -2 1\n2 15\n1 8\n3 12\n4 11\n5 10\n6 9", "16 4 565656\n30 -25 20 -15 10 -5 0 5 10 -15 20 -25 30 -35 40 -45\n3 16\n1 4\n5 12\n13 16", "17 7 919191\n100001 -100001 100002 -100002 100003 -100003 100004 -100004 100005 -100005 100006 -100006 100007 -100007 100008 -100008 100009\n1 17\n2 9\n10 17\n4 13\n5 7\n8 14\n11 16", "18 5 121212\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n1 18\n3 8\n9 14\n15 18\n2 5", "19 3 987123\n111 222 333 444 555 666 777 888 999 -111 -222 -333 -444 -555 -666 -777 -888 -999 0\n4 19\n1 7\n7 13", "20 4 898989\n-1 1 -1 1 -1 1 -1 1 -1 1 -1 1 -1 1 -1 1 -1 1 -1 1\n5 20\n1 10\n11 20\n2 19", "21 5 232323\n-1000 1000 -2000 2000 -3000 3000 -4000 4000 -5000 5000 -6000 6000 -7000 7000 -8000 8000 -9000 9000 -10000 10000 -11000\n2 21\n1 11\n6 16\n12 21\n3 5", "22 6 600600\n-222222 222221 -222220 222219 -222218 222217 -222216 222215 -222214 222213 -222212 222211 -222210 222209 -222208 222207 -222206 222205\n1 22\n5 14\n3 17\n7 8\n9 22\n2 13", "23 2 424242\n23 -22 21 -20 19 -18 17 -16 15 -14 13 -12 11 -10 9 -8 7 -6 5 -4 3 -2 1\n6 23\n1 5", "24 7 989898\n100 -100 200 -200 300 -300 400 -400 500 -500 600 -600 700 -700 800 -800 900 -900 1000 -1000 1100 -1100 1200 -1200\n2 24\n1 12\n3 24\n4 15\n7 18\n10 21\n13 24", "25 5 656565\n-25000 24000 -23000 22000 -21000 20000 -19000 18000 -17000 16000 -15000 14000 -13000 12000 -11000 10000 -9000 8000 -7000 6000 -5000 4000 -3000 2000 -1000\n1 25\n4 20\n5 15\n10 17\n2 12", "26 4 131313\n-260000 250000 -240000 230000 -220000 210000 -200000 190000 -180000 170000 -160000 150000 -140000 130000 -120000 110000 -100000 90000 -80000 70000 -60000 50000 -40000 30000 -20000 10000\n1 26\n3 14\n8 19\n15 22", "27 3 123123\n1234567 -1234567 2345678 -2345678 3456789 -3456789 4567890 -4567890 5678901 -5678901 6789012 -6789012 7890123 -7890123 8901234\n1 27\n4 15\n16 27", "28 2 787878\n28 -27 26 -25 24 -23 22 -21 20 -19 18 -17 16 -15 14 -13 12 -11 10 -9 8 -7 6 -5 4 -3 2 -1\n7 28\n1 6", "29 2 212121\n145678 134567 -123456 112345 -101234 112345 -123456 134567 -145678 156789 -167890 178901 -189012 190123 -201234 212345 -223456 234567 -245678 256789 -267890 278901 -289012 290123 -301234\n10 29\n2 19", "30 1 357357\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n1 30"]}
{"name": "1190_C. Tokitsukaze and Duel", "description": "Input\n\nThe first line contains two integers n and k (1 <= k <= n <= 10^5).\n\nThe second line contains a single string of length n that only consists of 0 and 1, representing the situation of these n cards, where the color side of the i-th card faces up if the i-th character is 1, or otherwise, it faces down and the i-th character is 0.", "testcase": ["3 1\n010", "4 2\n1101", "5 1\n00000", "6 3\n010101", "10 5\n1100110011", "7 2\n1010101", "8 4\n11110000", "13 1\n0000000000000", "15 7\n011101110111011", "20 2\n10101010101010101010", "25 10\n1100110011001100110011001", "30 15\n111100001111000011110000111100", "35 1\n00000000000000000000000000000000000", "40 5\n1010101010101010101010101010101010101010", "45 10\n1100111000110011001100111000110011001100111", "50 20\n11110000111100001111000011110000111100001111000011", "55 11\n101010101010101010101010101010101010101010101010101010", "60 15\n110011001100110011001100110011001100110011001100110011", "65 5\n0000000000000000000000000000000000000000000000000000000000000", "70 7\n1010101010101010101010101010101010101010101010101010101010101010", "75 35\n1111000011110000111100001111000011110000111100001111000011110000111", "80 40\n10101010101010101010101010101010101010101010101010101010101010101010101010", "85 42\n11001100110011001100110011001100110011001100110011001100110011001100110011001", "90 45\n111111111111111111111111111111111111111111111111111111111111111111111111111111", "95 21\n1010101010101010101010101010101010101010101010101010101010101010101010101010101", "100 50\n1100110011001100110011001100110011001100110011001100110011001100110011001100110011", "105 10\n000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "110 55\n10101010101010101010101010101010101010101010101010101010101010101010101010101010101010", "115 57\n110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011", "120 60\n111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"]}
{"name": "1209_F. Koala and Notebook", "description": "Input\n\nThe first line contains two integers n and m (2 <= n <= 10^5, n - 1 <= m <= 10^5), the number of cities and the number of roads, respectively.\n\nThe i-th of the following m lines contains integers x_i and y_i (1 <= x_i, y_i <= n, x_i != y_i), representing a bidirectional road between cities x_i and y_i.\n\nIt is guaranteed, that for any pair of cities there is at most one road connecting them, and that one can reach any city from every other city.", "testcase": ["2 1\n1 2", "3 2\n1 2\n2 3", "3 3\n1 2\n2 3\n1 3", "4 3\n1 2\n2 3\n3 4", "4 4\n1 2\n2 3\n3 4\n4 1", "4 5\n1 2\n1 3\n1 4\n2 3\n2 4", "5 4\n1 2\n2 3\n3 4\n4 5", "5 5\n1 2\n1 3\n2 4\n3 5\n4 5", "5 6\n1 2\n2 3\n3 4\n4 5\n1 5\n2 5", "6 5\n1 2\n2 3\n3 4\n4 5\n5 6", "6 6\n1 2\n2 3\n3 4\n4 5\n5 6\n1 3", "6 7\n1 2\n2 3\n3 4\n4 5\n5 6\n1 3\n2 4", "6 8\n1 2\n2 3\n3 4\n4 5\n5 6\n1 3\n2 4\n3 5", "6 9\n1 2\n2 3\n3 4\n4 5\n5 6\n1 3\n2 4\n3 5\n1 4", "7 6\n1 2\n1 3\n2 4\n3 5\n4 6\n5 7", "7 7\n1 2\n1 3\n2 4\n3 5\n4 6\n5 7\n2 5", "7 8\n1 2\n1 3\n2 4\n3 5\n4 6\n5 7\n2 5\n3 6", "7 9\n1 2\n1 3\n2 4\n3 5\n4 6\n5 7\n2 5\n3 6\n4 7", "7 10\n1 2\n1 3\n2 4\n3 5\n4 6\n5 7\n2 5\n3 6\n4 7\n1 4", "8 7\n1 2\n1 3\n2 4\n3 5\n4 6\n5 7\n6 8", "8 8\n1 2\n1 3\n2 4\n3 5\n4 6\n5 7\n6 8\n1 4", "8 9\n1 2\n1 3\n2 4\n3 5\n4 6\n5 7\n6 8\n1 4\n2 5", "8 10\n1 2\n1 3\n2 4\n3 5\n4 6\n5 7\n6 8\n1 4\n2 5\n3 6", "8 11\n1 2\n1 3\n2 4\n3 5\n4 6\n5 7\n6 8\n1 4\n2 5\n3 6\n7 8", "9 8\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9", "9 9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n1 5", "9 10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n1 5\n2 6", "9 11\n1 2\n1 3\n2 4\n3 5\n4 6\n5 7\n6 8\n7 9\n2 5\n3 6\n4 7", "10 9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10", "10 10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n1 5", "10 11\n1 2\n1 3\n2 4\n3 5\n4 6\n5 7\n6 8\n7 9\n8 10\n2 5\n3 6"]}
{"name": "1270_F. Awesome Substrings", "description": "Input\n\nThe first line contains the string s (1 <= |s|<= 200 000) consisting only of zeros and ones.", "testcase": ["0", "1", "01", "10", "001", "110", "111", "000", "101", "010", "1001", "1100", "1111", "0000", "1010", "0101", "10001", "11001", "11110", "00001", "10101", "01010", "100101", "110011", "111111", "000000", "101010", "010101", "1001001", "11001100"]}
{"name": "1293_D. Aroma's Search", "description": "Input\n\nThe first line contains integers x_0, y_0, a_x, a_y, b_x, b_y (1 <= x_0, y_0 <= 10^{16}, 2 <= a_x, a_y <= 100, 0 <= b_x, b_y <= 10^{16}), which define the coordinates of the data nodes.\n\nThe second line contains integers x_s, y_s, t (1 <= x_s, y_s, t <= 10^{16}) -- the initial Aroma's coordinates and the amount of time available.", "testcase": ["1 1 2 2 0 0\n1 1 10", "2 2 10 10 10000 10000\n10000 10000 50000", "5 3 3 4 7 2\n8 9 40", "9999999999999999 9999999999999999 100 100 1 1\n9999999999999999 9999999999999999 100", "1234567890123456 9876543210987654 50 60 10 20\n5555555555555555 4444444444444444 7777777777777777", "10 10 2 3 100000000000000 100000000000000\n10 20 30", "500 800 4 5 6 7\n450 850 300", "100000000000000 999999999999999 70 80 123456789 987654321\n100000000001000 999999999999000 1000000000000000", "1500 2500 6 7 8 9\n1600 2600 100", "1 1000000000000000 20 25 500000000000000 500000000000000\n500000000000000 1000000000000000 2000000000000000", "4294967296 4294967296 2 2 0 0\n4294967296 4294967296 4294967296", "18446744073709551615 18446744073709551614 100 99 1000000000000000 1000000000000000\n18446744073709551610 18446744073709551614 50000", "123456789987654321 987654321123456789 50 40 999999999999999 888888888888888\n555555555555555555 666666666666666666 777777777777777777", "333 777 3 9 333333333333333 777777777777777\n333 777 1234", "1987 5629 10 100 1987 5629\n10000 25333 2048", "99999999999990 99999999999930 60 90 999999999990 999999999930\n99999999999960 99999999999990 99999999999999", "1024 2048 32 64 512 256\n3072 4096 8192", "100000000000000 10000000000000 5 10 900000000000000 800000000000000\n200000000000000 300000000000000 999999999999999", "9876543210 1234567890 15 25 3456789012 2345678901\n5678901234 6789012345 234567890123", "20000 40000 9 12 1 2000\n50000 60000 7000", "66666666666666 77777777777777 6 8 9999999 999999\n700000000000000 800000000000000 900000000000000", "300000000000000 200000000000000 7 11 0 1\n100000000000000 200000000000000 300000000000000", "98765432 87654321 6 12 1000 2000\n12345678 87654321 123456789", "5000000000 7000000000 80 90 555555 666666\n5555550000 6666660000 7777770000", "1000000000000000 1000000000000000 25 35 123456 654321\n1000000000000000 1000000000000000 999999999999999", "888888888888888 222222222222222 40 40 2222 8888\n999999999999999 111111111111111 123456789012345", "1 2 10 20 100000000000 200000000000\n3 4 500000000000", "3141592653589793 2718281828459045 75 85 123456789 987654321\n3141592653589792 2718281828459044 10000000000000000", "17 81 2 3 987 654\n17 82 900", "467867867555556 467867867555557 8 9 3 5\n467867867555558 467867867555559 1300"]}
{"name": "1313_C2. Skyscrapers (hard version)", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 500 000) --- the number of plots.\n\nThe second line contains the integers m_1, m_2, ..., m_n (1 <= m_i <= 10^9) --- the limit on the number of floors for every possible number of floors for a skyscraper on each plot.", "testcase": ["1\n1", "2\n1 2", "3\n3 2 1", "4\n1 1 1 1", "5\n2 2 2 2 2", "6\n6 5 4 3 2 1", "7\n10 9 8 7 6 5 4", "8\n1 2 3 4 5 6 7 8", "9\n9 8 7 6 5 4 3 2 1", "10\n10 20 30 40 50 60 70 80 90 100", "11\n11 22 33 44 55 66 77 88 99 110 121", "12\n12 11 10 9 8 7 6 5 4 3 2 1", "13\n1 1 1 1 1 1 1 1 1 1 1 1 1", "14\n14 13 12 11 10 9 8 7 6 5 4 3 2 1", "15\n15 30 45 60 75 90 105 120 135 150 165 180 195 210 225", "16\n16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "17\n17 34 51 68 85 102 119 136 153 170 187 204 221 238 255 272 289", "18\n18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "19\n19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19", "20\n20 40 60 80 100 120 140 160 180 200 220 240 260 280 300 320 340 360 380 400", "21\n21 41 61 81 101 121 141 161 181 201 221 241 261 281 301 321 341 361 381 401 421", "22\n22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "23\n23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23", "24\n24 48 72 96 120 144 168 192 216 240 264 288 312 336 360 384 408 432 456 480 504 528 552 576", "25\n25 50 75 100 125 150 175 200 225 250 275 300 325 350 375 400 425 450 475 500 525 550 575 600 625", "26\n26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "27\n27 54 81 108 135 162 189 216 243 270 297 324 351 378 405 432 459 486 513 540 567 594 621 648 675 702 729", "28\n28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28", "29\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29", "30\n30 60 90 120 150 180 210 240 270 300 330 360 390 420 450 480 510 540 570 600 630 660 690 720 750 780 810 840 870 900"]}
{"name": "1336_A. Linova and Kingdom", "description": "Input\n\nThe first line contains two integers n and k (2<= n<= 2 * 10^5, 1<= k< n) --- the number of cities and industry cities respectively.\n\nEach of the next n-1 lines contains two integers u and v (1<= u,v<= n), denoting there is a road connecting city u and city v.\n\nIt is guaranteed that from any city, you can reach any other city by the roads.", "testcase": ["2 1\n1 2", "3 2\n1 2\n2 3", "4 1\n1 2\n2 3\n3 4", "5 2\n1 2\n2 3\n3 4\n4 5", "6 1\n1 2\n1 3\n1 4\n2 5\n2 6", "7 3\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7", "8 2\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8", "9 4\n1 2\n2 3\n2 4\n4 5\n5 6\n5 7\n7 8\n7 9", "10 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10", "11 5\n1 2\n1 3\n2 4\n3 5\n3 6\n4 7\n4 8\n5 9\n6 10\n6 11", "12 2\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12", "13 6\n1 2\n2 3\n2 4\n4 5\n4 6\n5 7\n6 8\n7 9\n7 10\n8 11\n9 12\n10 13", "14 3\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n8 13\n13 14", "15 7\n1 2\n1 3\n2 4\n3 5\n4 6\n5 7\n5 8\n6 9\n8 10\n9 11\n9 12\n10 13\n11 14\n12 15", "16 4\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16", "17 8\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17", "18 2\n1 2\n2 3\n3 4\n4 5\n5 6\n1 7\n7 8\n8 9\n9 10\n1 11\n11 12\n12 13\n13 14\n14 15\n11 16\n16 17\n17 18", "19 9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n1 9\n9 10\n10 11\n11 12\n12 13\n9 14\n14 15\n15 16\n16 17\n17 18\n18 19", "20 5\n1 2\n2 3\n3 4\n1 5\n5 6\n6 7\n7 8\n8 9\n9 10\n1 11\n11 12\n12 13\n13 14\n14 15\n11 16\n16 17\n17 18\n18 19\n19 20", "21 10\n1 2\n2 3\n3 4\n4 5\n5 6\n2 7\n7 8\n8 9\n9 10\n10 11\n7 12\n12 13\n13 14\n14 15\n12 16\n16 17\n17 18\n18 19\n19 20\n20 21", "22 3\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n1 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22", "23 11\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n1 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23", "24 6\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n1 20\n20 21\n21 22\n22 23\n23 24", "25 12\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n1 21\n21 22\n22 23\n23 24\n24 25", "26 7\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n1 23\n23 24\n24 25\n25 26", "27 13\n1 2\n2 3\n3 4\n4 5\n4 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n5 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26\n26 27", "28 8\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n1 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26\n26 27\n27 28", "29 14\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26\n26 27\n27 28\n28 29", "30 9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26\n26 27\n27 28\n28 29\n29 30"]}
{"name": "1358_D. The Best Vacation", "description": "Input\n\nThe first line of input contains two integers n and x (1 <= n <= 2 * 10^5) --- the number of months in the year and the number of days you can spend with your friend.\n\nThe second line contains n integers d_1, d_2, ..., d_n, d_i is the number of days in the i-th month (1 <= d_i <= 10^6).\n\nIt is guaranteed that 1 <= x <= d_1 + d_2 + ... + d_n.", "testcase": ["2 3\n30 30", "5 15\n28 30 31 30 31", "3 50\n10 20 30", "4 100\n25 25 25 25", "6 200\n30 30 30 30 30 30", "7 300\n45 45 45 45 45 45 45", "2 60\n59 1", "8 80\n10 10 10 10 10 10 10 10", "9 90\n10 10 10 10 10 10 10 10 10", "10 100\n10 10 10 10 10 10 10 10 10 10", "11 110\n10 10 10 10 10 10 10 10 10 10 10", "12 365\n31 28 31 30 31 30 31 31 30 31 30 31", "2 2\n1 1", "3 3\n1 1 1", "4 4\n1 1 1 1", "5 5\n1 1 1 1 1", "6 6\n1 1 1 1 1 1", "2 1200000\n600000 600000", "2 999999\n500000 499999", "3 100\n33 33 34", "4 200\n50 50 50 50", "5 210\n42 42 42 42 42", "6 200\n33 33 34 33 33 34", "7 350\n50 50 50 50 50 50 50", "8 400\n50 50 50 50 50 50 50 50", "9 450\n50 50 50 50 50 50 50 50 50", "10 500\n50 50 50 50 50 50 50 50 50 50", "11 550\n50 50 50 50 50 50 50 50 50 50 50", "12 600\n50 50 50 50 50 50 50 50 50 50 50 50", "10 1000\n100 100 100 100 100 100 100 100 100 100"]}
{"name": "1399_E1. Weights Division (easy version)", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 2 * 10^4) --- the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains two integers n and S (2 <= n <= 10^5; 1 <= S <= 10^{16}) --- the number of vertices in the tree and the maximum possible sum of weights you have to obtain. The next n-1 lines describe edges of the tree. The edge i is described as three integers v_i, u_i and w_i (1 <= v_i, u_i <= n; 1 <= w_i <= 10^6), where v_i and u_i are vertices the edge i connects and w_i is the weight of this edge.\n\nIt is guaranteed that the sum of n does not exceed 10^5 (sum n <= 10^5).", "testcase": ["1\n2 10\n1 2 5", "1\n3 15\n1 2 5\n2 3 4", "1\n4 40\n1 2 10\n2 3 20\n3 4 30", "1\n3 50\n1 2 25\n1 3 20", "1\n5 100\n1 2 20\n2 3 30\n2 4 25\n1 5 15", "1\n4 150\n1 2 40\n1 3 50\n1 4 30", "1\n6 200\n1 2 30\n2 3 40\n2 4 50\n4 5 20\n4 6 30", "1\n2 1000000000000000\n1 2 999999", "1\n3 1000000000000000\n1 2 500000\n2 3 499999", "1\n4 1000000000000000\n1 2 200000\n2 3 300000\n3 4 500000", "1\n5 2000000000000000\n1 2 100000\n1 3 100000\n3 4 100000\n3 5 100000", "1\n4 300\n1 2 100\n2 3 100\n2 4 80", "1\n3 123456789\n1 2 12345\n2 3 67890", "1\n2 1000\n1 2 999", "1\n10 10000\n1 2 1000\n2 3 900\n3 4 800\n4 5 700\n5 6 600\n6 7 500\n7 8 400\n8 9 300\n9 10 200", "1\n4 5000\n1 2 2000\n2 3 1500\n2 4 1000", "1\n3 9999999\n1 2 5000000\n1 3 4999999", "1\n6 123456\n1 2 12345\n1 3 23456\n3 4 34567\n4 5 45678\n4 6 56789", "1\n5 987654\n1 2 87654\n2 3 76543\n3 4 65432\n2 5 54321", "1\n7 1000000\n1 2 100000\n1 3 200000\n2 4 300000\n3 5 100000\n4 6 200000\n5 7 100000", "1\n8 500\n1 2 50\n2 3 60\n3 4 70\n4 5 80\n5 6 90\n6 7 100\n7 8 50", "1\n9 888888\n1 2 111111\n1 3 111111\n3 4 111111\n3 5 111111\n5 6 111111\n6 7 111111\n6 8 111111\n8 9 111111", "1\n5 777777\n1 2 100000\n1 3 200000\n2 4 300000\n3 5 177777", "1\n8 250000\n1 2 30000\n1 3 30000\n2 4 40000\n2 5 50000\n3 6 30000\n3 7 30000\n5 8 10000", "1\n6 10000000000000\n1 2 1000000\n1 3 2000000\n2 4 3000000\n3 5 4000000\n5 6 5000000", "1\n11 789456\n1 2 90000\n2 3 80000\n3 4 70000\n4 5 60000\n5 6 50000\n6 7 40000\n7 8 30000\n8 9 20000\n9 10 10000\n10 11 9000", "1\n7 9999999\n1 2 1400000\n1 3 1300000\n3 4 1200000\n3 5 1100000\n5 6 1000000\n6 7 900000", "1\n10 555555\n1 2 50000\n2 3 60000\n3 4 70000\n4 5 80000\n5 6 85000\n6 7 75000\n7 8 65000\n8 9 55000\n9 10 45000", "1\n3 1000000\n1 2 400000\n1 3 500000", "1\n12 300000\n1 2 25000\n1 3 25000\n1 4 30000\n2 5 20000\n2 6 15000\n3 7 10000\n4 8 5000\n4 9 2500\n5 10 1000\n6 11 500\n7 12 100"]}
{"name": "1442_A. Extreme Subtraction", "description": "Input\n\nThe first line contains one positive integer t (1 <= t <= 30000) --- the number of test cases. Then t test cases follow.\n\nEach test case begins with a line containing one integer n (1 <= n <= 30000) --- the number of elements in the array.\n\nThe second line of each test case contains n integers a_1 ... a_n (1 <= a_i <= 10^6).\n\nThe sum of n over all test cases does not exceed 30000.", "testcase": ["1\n5\n1 2 3 4 5", "2\n3\n1 1 1\n4\n3 4 5 6", "1\n7\n1000000 999999 500000 600000 700000 800000 900000", "3\n2\n10 20\n2\n2 3\n5\n4 5 6 7 8", "4\n10\n1 2 3 4 5 6 7 8 9 10\n5\n100000 10000 1000 100 10\n3\n6 7 8\n7\n50 40 30 20 10 0 60", "2\n6\n123456 654321 234567 765432 345678 876543\n8\n20 20 30 30 40 40 50 50", "1\n10\n1000000 2 3 4 5 6 7 8 9 10", "1\n8\n111 1234 5678 9876 5432 12349 67890 999999", "1\n12\n1 1000000 2 999999 3 999998 4 999997 5 999996 6 999995", "1\n11\n34 67 89 123 456 789 234 567 890 1234 5678", "1\n9\n999999 888888 777777 666666 555555 444444 333333 222222 111111", "2\n3\n321 654 987\n4\n10000 20000 30000 40000", "1\n5\n10 20 30 40 50", "2\n2\n1 1000000\n2\n500000 500001", "1\n13\n13 12 11 10 9 8 7 6 5 4 3 2 1", "1\n7\n950000 960000 970000 980000 990000 995000 999000", "2\n4\n1111 2222 3333 4444\n6\n123 456 789 1011 1213 1415", "1\n6\n30000 25000 20000 15000 10000 5000", "3\n2\n1000 2000\n3\n3000 2000 1000\n5\n500 400 300 200 100", "1\n15\n15000 15001 15002 15003 15004 15005 15006 15007 15008 15009 15010 15011 15012 15013 15014", "2\n8\n8 7 6 5 4 3 2 1\n9\n9 8 7 6 5 4 3 2 1", "1\n14\n233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393", "1\n10\n1024 2048 4096 8192 16384 32768 65536 131072 262144 524288", "1\n9\n15 14 13 12 11 10 9 8 7", "1\n16\n1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987", "3\n3\n999 1000 1001\n4\n888 889 900 901\n5\n777 778 779 780 781", "1\n11\n99000 98000 97000 96000 95000 94000 93000 92000 91000 90000 89500", "1\n20\n2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1048576", "1\n5\n999996 999997 999998 999999 1000000", "3\n3\n1 1 1\n6\n6 7 8 9 10 11\n10\n10 9 8 7 6 5 4 3 2 1"]}
{"name": "1542_B. Plus and Multiply", "description": "Input\n\nThe input consists of multiple test cases. The first line contains an integer t (1<= t<= 10^5) --- the number of test cases. The description of the test cases follows.\n\nThe only line describing each test case contains three integers n, a, b (1<= n,a,b<= 10^9) separated by a single space.", "testcase": ["1\n123 456 789", "2\n1000000000 999999999 888888888\n2 3 5", "3\n234567890 345678901 123456789\n10 11 12\n987654321 123456789 987654321", "4\n100000 10000 1000\n1000 10000 100000\n1234567 8901234 5678901\n7654321 1234567 8901234", "5\n100000 123456 654321\n10000 20000 30000\n1 1 1\n12345 67890 54321\n67890 12345 54321", "6\n500000000 400000000 300000000\n600000000 700000000 800000000\n1 2 3\n4 5 6\n7 8 9\n999999999 1000000000 987654321", "7\n123456789 987654321 111111111\n222222222 333333333 444444444\n555555555 666666666 777777777\n888888888 999999999 1000000000\n1 1 1\n2 2 2\n3 3 3", "8\n100 200 300\n400 500 600\n700 800 900\n1000 2000 3000\n4000 5000 6000\n7000 8000 9000\n10000 20000 30000\n40000 50000 60000", "9\n10 9 8\n7 6 5\n4 3 2\n98765 87654 76543\n23456 34567 45678\n56789 67890 78901\n80123 91234 102345\n234567 345678 456789\n567890 678901 789012", "10\n101 202 303\n404 505 606\n707 808 909\n1001 2002 3003\n4004 5005 6006\n7007 8008 9009\n10010 20020 30030\n40040 50050 60060\n70070 80080 90090\n12345 23456 34567", "11\n24680 13579 97531\n86420 75310 64210\n53101 42013 31024\n20913 10832 92108\n83219 74111 65021\n57931 46842 35753\n24664 13575 24", "12\n100000021 100000032 100000043\n100000054 100000065 100000076\n100000087 100000098 100000009\n123456789 987654321 11121314\n1516171819 2021222324 2526272829\n3031323334 3536373839 4041424344", "13\n100000045 100000056 100000067\n100000078 100000089 100000091\n123456788 987654322 11121315\n1516171820 2021222325 2526272820\n3031323335 3536373840 4041424345", "14\n100000096 100000007 100000018\n100000029 100000031 100000042\n100000053 100000064 100000075\n123456787 987654323 11121316\n1516171821 2021222326 2526272811", "15\n3031323336 3536373841 4041424346\n100000095 100000006 100000017\n100000028 100000039 100000041\n100000052 100000063 100000074\n123456786 987654324", "16\n1516171822 2021222327 2526272812\n3031323337 3536373842 4041424347\n100000094 100000005 100000016\n100000027 100000038 100000040\n100000051 100000062", "17\n100000073 123456785 987654325\n1516171823 2021222328 2526272813\n3031323338 3536373843 4041424348\n100000093 100000004 100000015\n100000026 100000037", "18\n100000049 100000050 100000061\n100000072 123456784 987654326\n1516171824 2021222329 2526272814\n3031323339 3536373844 4041424349", "19\n100000092 100000003 100000014\n100000025 100000036 100000048\n100000059 100000060 100000071\n123456783 987654327 1516171825", "20\n2021222330 2526272815 3031323340\n3536373845 4041424350 100000091\n100000002 100000013 100000024\n100000035 100000047 100000058", "21\n100000069 100000070 123456782\n987654328 1516171826 2021222331\n2526272816 3031323341 3536373846\n4041424351 100000090 100000001", "22\n100000012 100000023 100000034\n100000046 100000057 100000068\n123456781 987654329 1516171827\n2021222332 2526272817 3031323342", "23\n3536373847 4041424352 100000089\n100000000 100000011 100000022\n100000033 100000045 100000056\n100000067 123456780 987654330", "24\n1516171828 2021222333 2526272818\n3031323343 3536373848 4041424353\n100000088 99999999 100000010\n100000021 100000032 100000044", "25\n100000055 100000066 123456779\n987654331 1516171829 2021222334\n2526272819 3031323344 3536373849\n4041424354 100000087", "26\n99999998 100000009 100000020\n100000031 100000043 100000054\n100000065 123456778 987654332\n1516171830 2021222335 2526272820", "27\n3031323345 3536373850 4041424355\n100000086 99999997 100000008\n100000019 100000030 100000042\n100000053 100000064 123456777", "28\n987654333 1516171831 2021222336\n2526272821 3031323346 3536373851\n4041424356 100000085 99999996\n100000007 100000018 100000029", "29\n100000041 100000052 100000063\n123456776 987654334 1516171832\n2021222337 2526272822 3031323347\n3536373852 4041424357 100000084", "30\n99999995 100000006 100000017\n100000028 100000040 100000051\n100000062 123456775 987654335\n1516171833 2021222338 2526272823"]}
{"name": "237_E. Build String", "description": "Input\n\nThe first line of the input contains string t --- the string that you need to build.\n\nThe second line contains a single integer n (1 <= n <= 100) --- the number of strings to which you are allowed to apply the described operation. Each of the next n lines contains a string and an integer. The i-th line contains space-separated string si and integer ai (0 <= ai <= 100). Number ai represents the maximum number of characters that can be deleted from string si.\n\nAll strings in the input only consist of lowercase English letters. All strings are non-empty. The lengths of all strings do not exceed 100 characters.", "testcase": ["abcd\n1\na 1", "hello\n2\nhe 1\nllo 2", "algorithm\n3\nalgo 2\nrith 1\nm 0", "datastructure\n4\ndata 2\nst 1\nruc 1\nture 3", "programming\n1\npro 0", "stringmanipulation\n3\nst 1\nring 3\nmanipulation 5", "concatenation\n2\ncon 2\ncatenation 5", "pneumonoultramicroscopicsilicovolcanoconiosis\n4\npneu 1\nmonoultra 5\nmicroscopic 6\nsilicovolcanoconiosis 10", "super\n1\nsu 2", "elementary\n3\nele 1\nmen 1\ntary 2", "basketball\n2\nbasket 2\nball 1", "characteristic\n3\nchar 1\nacte 2\nristic 3", "beautiful\n3\nbeau 1\nti 1\nful 0", "architecture\n2\narch 1\nitecture 3", "xylophone\n2\nxy 1\nlophone 3", "parallel\n2\npar 1\nallel 2", "mysterious\n2\nmyste 2\nrious 1", "university\n1\nuni 2", "encyclopedia\n3\nency 1\nclop 1\ndia 1", "revolutionary\n2\nrevo 1\nlutionary 4", "networking\n2\nnet 0\nworking 4", "infrastructure\n3\ninfra 2\nstructure 3", "hypothesis\n2\nhypo 1\nthesis 2", "microprocessor\n3\nmicro 2\nprocessor 3", "keyboard\n2\nkey 1\nboard 2", "photosynthesis\n2\nphotos 3\nthesis 4", "astronomy\n1\nastro 3", "biotechnology\n2\nbio 1\ntechnology 5", "civilization\n3\ncivil 2\niza 1\ntion 2", "communication\n4\ncommu 2\nnica 1\ntion 2"]}
{"name": "262_C. Maxim and Discounts", "description": "Input\n\nThe first line contains integer m (1 <= m <= 105) --- the number of discount types. The second line contains m integers: q1, q2, ..., qm (1 <= qi <= 105). \n\nThe third line contains integer n (1 <= n <= 105) --- the number of items Maxim needs. The fourth line contains n integers: a1, a2, ..., an (1 <= ai <= 104) --- the items' prices.\n\nThe numbers in the lines are separated by single spaces.", "testcase": ["1\n1\n1\n50", "1\n2\n3\n150 200 50", "2\n3 5\n4\n300 600 150 200", "1\n10\n5\n10 20 30 40 50", "3\n2 4 8\n7\n100 200 300 400 500 600 700", "2\n1 100\n10\n1000 2000 3000 4000 5000 6000 7000 8000 9000 10000", "1\n50\n6\n10 20 30 100 200 300", "2\n1 10\n8\n1500 1600 1700 1800 1900 2000 2100 2200", "1\n5\n9\n950 1000 1050 1100 1150 1200 1250 1300 1350", "2\n7 3\n11\n123 456 789 1001 1202 1303 1404 1505 1606 1707 1808", "1\n20\n2\n4444 8888", "4\n10 20 30 40\n12\n432 543 654 765 876 987 1098 1209 1320 1431 1542 1653", "1\n100\n13\n12 23 34 45 56 67 78 89 90 123 234 345 456", "3\n25 50 75\n14\n600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900", "1\n15\n15\n111 222 333 444 555 666 777 888 999 1111 2222 3333 4444 5555 6666", "2\n1 1\n16\n1234 2345 3456 4567 5678 6789 7890 8901 9012 10123 20234 30345 40456 50567 60678 70789", "1\n5\n17\n2000 2100 2200 2300 2400 2500 2600 2700 2800 2900 3000 3100 3200 3300 3400 3500 3600", "3\n2 7 14\n18\n111 211 311 411 511 611 711 811 911 1011 1111 1211 1311 1411 1511 1611 1711 1811", "1\n50\n19\n50 100 150 200 250 300 350 400 450 500 550 600 650 700 750 800 850 900 950", "2\n3 9\n20\n2001 2102 2203 2304 2405 2506 2607 2708 2809 2900 3001 3102 3203 3304 3405 3506 3607 3708 3809 3900", "1\n100\n21\n10 20 30 40 50 60 70 80 90 100 110 120 130 140 150 160 170 180 190 200 210", "3\n10 30 60\n22\n4050 4150 4250 4350 4450 4550 4650 4750 4850 4950 5050 5150 5250 5350 5450 5550 5650 5750 5850 5950 6050 6150", "1\n25\n23\n1230 1240 1250 1260 1270 1280 1290 1300 1310 1320 1330 1340 1350 1360 1370 1380 1390 1400 1410 1420 1430 1440 1450", "4\n5 10 20 25\n24\n50 100 120 140 160 180 200 220 240 260 280 300 320 340 360 380 400 420 440 460 480 500 520 540", "1\n50\n25\n150 200 250 300 350 400 450 500 550 600 650 700 750 800 850 900 950 1000 1050 1100 1150 1200 1250 1300 1350", "2\n19 99\n26\n5050 5150 5250 5350 5450 5550 5650 5750 5850 5950 6050 6150 6250 6350 6450 6550 6650 6750 6850 6950 7050 7150 7250 7350 7450 7550", "1\n40\n27\n202 404 606 808 1010 1212 1414 1616 1818 2020 2222 2424 2626 2828 3030 3232 3434 3636 3838 4040 4242 4444 4646 4848 5050 5252 5454", "3\n4 8 16\n28\n560 570 580 590 600 610 620 630 640 650 660 670 680 690 700 710 720 730 740 750 760 770 780 790 800 810 820 830", "1\n10\n29\n2100 2200 2300 2400 2500 2600 2700 2800 2900 3000 3100 3200 3300 3400 3500 3600 3700 3800 3900 4000 4100 4200 4300 4400 4500 4600 4700 4800 4900", "2\n5 15\n30\n120 240 360 480 600 720 840 960 1080 1200 1320 1440 1560 1680 1800 1920 2040 2160 2280 2400 2520 2640 2760 2880 3000 3120 3240 3360 3480 3600"]}
{"name": "400_D. Dima and Bacteria", "description": "Input\n\nThe first line contains three integers n, m, k (1 <= n <= 105; 0 <= m <= 105; 1 <= k <= 500). The next line contains k integers c1, c2, ..., ck (1 <= ci <= n). Each of the next m lines contains three integers ui, vi, xi (1 <= ui, vi <= 105; 0 <= xi <= 104). It is guaranteed that <image>.", "testcase": ["2 1 1\n1\n1 2 3", "3 2 2\n1 2\n1 3 100\n2 3 200", "3 0 1\n3\n", "4 3 2\n1 4\n1 2 10\n3 4 20\n2 3 30", "5 3 2\n1 3\n1 2 7\n2 4 8\n3 5 9", "6 4 3\n1 3 5\n1 2 10\n2 3 11\n4 5 12\n5 6 13", "7 5 3\n1 5 7\n1 2 1\n2 3 2\n3 4 3\n5 6 4\n6 7 5", "6 3 1\n6\n1 3 7\n3 4 0\n4 6 9", "8 5 4\n1 3 5 7\n1 2 6\n2 5 12\n4 6 13\n5 8 8\n7 8 15", "10 6 2\n2 9\n1 3 18\n3 6 17\n2 5 16\n4 7 15\n8 10 14\n6 9 13", "4 1 2\n1 4\n2 3 4", "5 4 2\n2 3\n1 5 10\n2 3 20\n3 4 30\n4 5 40", "10 9 5\n1 3 5 7 9\n1 2 1\n2 3 2\n3 4 3\n4 5 4\n5 6 5\n6 7 6\n7 8 7\n8 9 8\n9 10 9", "11 10 1\n7\n1 2 5\n2 3 6\n3 4 7\n4 5 8\n5 6 9\n6 7 10\n7 8 11\n8 9 12\n9 10 13\n10 11 14", "12 11 2\n3 8\n1 2 22\n2 3 21\n3 4 20\n4 5 19\n5 6 18\n6 7 17\n7 8 16\n8 9 15\n9 10 14\n10 11 13\n11 12 12", "13 7 2\n5 12\n1 2 12\n2 4 23\n5 7 34\n6 8 45\n9 11 56\n10 12 67\n12 13 78", "14 8 4\n1 6 10 14\n1 2 33\n2 5 44\n6 9 55\n10 13 66\n3 4 22\n4 7 33\n7 8 11\n11 14 22", "9 4 2\n2 8\n1 3 500\n4 6 400\n7 9 300\n2 5 200", "15 9 3\n2 7 14\n1 3 32\n3 5 21\n5 8 43\n8 12 23\n10 15 56\n4 9 12\n11 14 34\n6 13 20", "16 7 2\n4 15\n1 3 123\n2 6 234\n5 9 345\n8 10 456\n11 13 567\n12 14 678\n7 16 789", "3 2 1\n2\n1 2 4\n2 3 3", "20 19 4\n5 10 15 20\n1 2 12\n2 3 23\n3 4 34\n4 5 45\n5 6 56\n6 7 67\n7 8 78\n8 9 89\n9 10 90\n10 11 101\n11 12 111\n12 13 121\n13 14 131\n14 15 141\n15 16 151\n16 17 161\n17 18 171\n18 19 181\n19 20 191", "7 4 3\n2 4 6\n1 3 10\n2 3 20\n4 5 30\n6 7 40", "15 14 5\n1 2 4 8 16\n1 2 100\n2 3 200\n3 4 300\n4 5 400\n5 6 500\n6 7 600\n7 8 700\n8 9 800\n9 10 900\n10 11 1000\n11 12 1100\n12 13 1200\n13 14 1300\n14 15 1400", "17 6 2\n8 16\n1 4 234\n3 5 567\n6 9 890\n10 12 321\n13 15 654\n16 17 987", "18 9 3\n9 12 18\n1 2 234\n2 3 345\n3 4 456\n4 5 567\n5 6 678\n6 7 789\n7 8 890\n8 9 901\n10 18 111", "23 11 4\n1 5 10 15\n1 4 33\n5 8 66\n8 12 99\n9 13 123\n14 17 246\n10 15 369\n16 20 492\n20 23 615\n3 7 738\n11 19 861", "24 12 5\n2 6 10 14 18\n1 5 58\n4 8 74\n7 11 89\n10 14 35\n13 17 42\n16 20 59\n19 23 76\n2 6 94\n5 9 111\n8 12 127\n11 15 143\n14 18 159", "21 9 2\n9 19\n1 2 50\n3 4 150\n5 6 250\n7 8 350\n9 10 450\n11 12 550\n13 14 650\n15 16 750\n17 21 850", "25 5 3\n7 19 25\n1 5 12\n6 10 23\n11 15 34\n16 20 45\n21 25 56", "26 8 4\n8 16 24 26\n1 6 44\n5 10 88\n9 14 132\n13 18 176\n17 22 220\n21 25 264\n2 7 308\n12 26 352"]}
{"name": "427_E. Police Patrol", "description": "Input\n\nThe first line of the input will have two integers n (1 <= n <= 106) and m (1 <= m <= 106) separated by spaces. The next line will contain n integers separated by spaces. The ith integer is the position of the ith criminal on the x-axis. Absolute value of positions will not exceed 109. If a criminal has position x, he/she is located in the point (x, 0) of the plane. \n\nThe positions of the criminals will be given in non-decreasing order. Note, that there can be more than one criminal standing at some point of the plane.\n\nNote: since the size of the input/output could be very large, don't use slow input/output techniques in your language. For example, do not use input/output streams (cin, cout) in C++.", "testcase": ["1 1\n0", "2 1\n-1000000000 1000000000", "3 2\n-999999999 -999999998 -999999997", "4 2\n0 0 1 1", "5 3\n-500000000 0 500000000 1000000000 1000000000", "6 1\n-1 -1 0 0 1 1", "7 4\n-999999998 -999999997 -999999996 -999999995 -999999994 -999999993 -999999992", "8 5\n1 2 3 4 5 6 7 8", "9 2\n100000000 200000000 300000000 400000000 500000000 600000000 700000000 800000000 900000000", "10 6\n-10 -9 -8 -7 -6 -5 -4 -3 -2 -1", "11 7\n-1000000 -900000 -800000 -700000 -600000 -500000 -400000 -300000 -200000 -100000 0", "12 3\n123456789 -987654321 234567890 -876543210 345678901 -765432109 456789012", "13 10\n0 1 1 1 2 2 3 3 3 3 4 4 4 5 5 5 5", "14 2\n-14 -13 -12 -11 -10 -9 -8 -7 -6 -5 -4 -3 -2 -1", "15 8\n-15 -15 -14 -14 -13 -12 -11 -11 -10 -9 -8 -7 -7 -6 -5", "16 4\n-4 -3 -2 -1 0 1 2 3 4 5 6 7 8 9 10 11", "17 5\n-17 -16 -15 -14 -13 -12 -11 -10 -9 -8 -7 -6 -5 -4 -3 -2 -1 0", "18 6\n0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000 16000 17000", "19 7\n-19 -18 -17 -16 -15 -14 -13 -12 -11 -10 -9 -8 -7 -6 -5 -4 -3 -2 -1 0 1", "20 8\n-199999999 -189999999 -179999999 -169999999 -159999999 -149999999 -139999999 -129999999 -119999999 -109999999 -99999999", "21 9\n-210000 -200000 -190000 -180000 -170000 -160000 -150000 -140000 -130000 -120000 -110000 -100000 -90000 -80000 -70000 -60000 -50000 -40000 -30000 -20000 -10000 0", "22 10\n-220 -210 -200 -190 -180 -170 -160 -150 -140 -130 -120 -110 -100 -90 -80 -70 -60 -50 -40 -30 -20 -10 0 10 20 30 40 50 60 70 80 90 100 110 120 130 140 150 160 170 180 190 200 210 220", "23 11\n23 46 69 92 115 138 161 184", "24 12\n-24 -23 -22 -21 -20 -19 -18 -17 -16 -15 -14 -13 -12 -11 -10 -9 -8 -7 -6 -5 -4 -3 -2 -1", "25 20\n-200 -195 -190 -185 -180 -175 -170 -165 -160 -155 -150 -145 -140 -135 -130 -125 -120 -115 -110 -105 -100 -95 -90 -85 -80 -75 -70 -65 -60 -55 -50 -45 -40 -35 -30 -25 -20 -15 -10 -5 0", "26 15\n1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000", "27 13\n-10000000 -10000000 -10000000 -10000000 -10000000 -10000000 -10000000 -9000000 -8000000 -7000000 -6000000 -5000000 -4000000 -3000000 -2000000 -1000000 0 1000000 2000000 3000000 4000000 5000000 6000000 7000000 8000000 9000000 10000000", "28 14\n28 56 84 112 140 168 196 224 252 280 308 336 364 392 420 448 476 504 532 560 588 616 644 672 700 728 756 784", "29 16\n1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29", "30 17\n300 600 900 1200 1500 1800 2100 2400 2700 3000 3300 3600 3900 4200 4500 4800 5100 5400 5700 6000 6300 6600 6900 7200 7500 7800 8100 8400 8700 9000"]}
{"name": "450_C. Jzzhu and Chocolate", "description": "Input\n\nA single line contains three integers n, m, k (1 <= n, m <= 109; 1 <= k <= 2\u00b7109).", "testcase": ["1 1 1", "2 2 2", "3 3 3", "4 4 4", "5 5 5", "6 6 6", "7 7 7", "8 8 8", "9 9 9", "10 10 10", "100000000 100000000 2000000000", "123456789 987654321 100000000", "500 500 1500", "999999 999999 1999999999", "888888 999999 888888", "8756 847362 847362", "1 1000000000 1000000000", "1000000000 1 123456789", "542 675 1967", "10 1000 100000", "999999999 999999999 2000000000", "987654321 123456789 192837465", "314159265 271828182 161803399", "505050 1010101 2020202", "111111111 999999999 1000000000", "222222222 333333333 444444444", "777777777 888888888 999999999", "1234567 89101112 131415161", "562 781 200000000", "42 42 42"]}
{"name": "520_B. Two Buttons", "description": "Input\n\nThe first and the only line of the input contains two distinct integers n and m (1 <= n, m <= 104), separated by a space .", "testcase": ["1 2", "2 3", "3 4", "4 5", "5 6", "6 7", "7 8", "8 9", "9 10", "10 11", "11 12", "12 13", "13 14", "14 15", "15 16", "16 17", "17 18", "18 19", "19 20", "20 21", "21 22", "22 23", "23 24", "24 25", "25 26", "26 27", "27 28", "28 29", "29 30", "30 31"]}
{"name": "547_D. Mike and Fish", "description": "Input\n\nThe first line of input contains integer n (1 <= n <= 2 \u00d7 105).\n\nThe next n lines contain the information about the points, i-th line contains two integers xi and yi (1 <= xi, yi <= 2 \u00d7 105), the i-th point coordinates.\n\nIt is guaranteed that there is at least one valid answer.", "testcase": ["3\n1 1\n2 2\n3 3", "4\n1 1\n1 2\n2 1\n2 2", "5\n1 1\n2 2\n3 3\n4 4\n5 5", "2\n200000 200000\n199999 199998", "6\n10 10\n20 20\n30 30\n40 40\n50 50\n60 60", "7\n100000 100000\n150000 150000\n200000 200000\n150001 150001\n100001 100001\n50000 50000\n1 1", "8\n12345 54321\n23456 65432\n34567 76543\n45678 87654\n56789 98765\n67890 98765\n78901 87654\n89012 76543", "3\n2 3\n3 2\n4 5", "9\n1 2\n3 4\n5 6\n7 8\n9 10\n2 2\n4 4\n6 6\n8 8", "10\n100 100\n101 101\n102 102\n103 103\n104 104\n105 105\n106 106\n107 107\n108 108\n109 109", "2\n1 200000\n200000 1", "11\n1000 2000\n2000 3000\n3000 4000\n4000 5000\n5000 6000\n6000 7000\n7000 8000\n8000 9000\n9000 10000\n10000 11000\n11000 12000", "4\n111 111\n222 222\n333 333\n444 444", "5\n32123 32123\n12321 12321\n23132 23132\n13213 13213\n21321 21321", "6\n16384 16384\n8192 8192\n4096 4096\n2048 2048\n1024 1024\n512 512", "7\n16384 32768\n8192 16384\n4096 8192\n2048 4096\n1024 2048\n512 1024\n256 512", "12\n1234 5678\n5678 1234\n2468 1357\n1357 2468\n1111 2222\n2222 3333\n3333 4444\n4444 5555\n5555 6666\n6666 7777\n7777 8888\n8888 9999", "3\n10101 10101\n20202 20202\n30303 30303", "4\n121 121\n343 343\n565 565\n787 787", "5\n10000 20000\n20000 10000\n15000 15000\n25000 25000\n35000 35000", "6\n54321 12345\n23456 34567\n45678 56789\n98765 76543\n87654 54321\n76543 32123", "7\n11111 11111\n22222 22222\n33333 33333\n44444 44444\n55555 55555\n66666 66666\n77777 77777", "8\n321 321\n432 432\n543 543\n654 654\n765 765\n876 876\n987 987\n198 198", "9\n1 10\n10 20\n20 30\n30 40\n40 50\n50 60\n60 70\n70 80\n80 90", "10\n99999 88888\n88888 77777\n77777 66666\n66666 55555\n55555 44444\n44444 33333\n33333 22222\n22222 11111\n11111 99999\n99999 11111", "3\n123 456\n456 789\n789 123", "4\n200 300\n400 500\n600 700\n800 900", "5\n159 753\n357 951\n951 357\n753 159\n456 654", "6\n123456 654321\n234567 765432\n345678 876543\n456789 987654\n567890 876543\n678901 765432", "7\n22222 55555\n44444 77777\n66666 99999\n88888 22222\n11111 44444\n33333 66666\n55555 88888", "8\n333 666\n666 333\n999 999\n666 999\n333 666\n999 333\n666 999\n333 999"]}
{"name": "574_A. Bear and Elections", "description": "Input\n\nThe first line contains single integer n (2 <= n <= 100) - number of candidates.\n\nThe second line contains n space-separated integers a1, a2, ..., an (1 <= ai <= 1000) - number of votes for each candidate. Limak is candidate number 1.\n\nNote that after bribing number of votes for some candidate might be zero or might be greater than 1000.", "testcase": ["2\n1 1000", "3\n900 600 750", "4\n50 55 60 45", "5\n500 400 300 200 100", "6\n99 98 97 96 95 94", "7\n1 2 3 4 5 6 7", "8\n100 200 300 400 500 600 700 800", "9\n20 20 20 20 20 20 20 20 20", "10\n250 250 250 250 250 250 250 250 250 250", "4\n1000 999 998 997", "5\n100 200 300 400 500", "3\n300 200 100", "4\n25 50 75 100", "2\n500 500", "6\n100 90 80 70 60 50", "7\n10 20 30 40 50 60 70", "10\n123 234 345 456 567 678 789 890 901 1000", "2\n1 999", "5\n800 800 800 800 800", "4\n100 100 100 100", "3\n70 60 50", "7\n100 200 150 130 120 110 100", "8\n300 250 200 150 100 50 25 10", "5\n800 600 400 200 100", "9\n120 130 140 150 160 170 180 190 200", "10\n10 20 30 40 50 60 70 80 90 100", "4\n1000 200 300 400", "6\n222 333 444 555 666 777", "3\n333 333 333", "8\n125 250 375 500 625 750 875 1000"]}
{"name": "595_D. Max and Bike", "description": "Input\n\nThe first line contains three integers n, r and v (1 <= n <= 100 000, 1 <= r, v <= 109) --- the number of competitions, the radius of the front wheel of Max's bike and his maximum speed, respectively. \n\nNext n lines contain the descriptions of the contests. The i-th line contains two integers si and fi (1 <= si < fi <= 109) --- the coordinate of the start and the coordinate of the finish on the i-th competition.", "testcase": ["1 10 100\n20 100", "2 5 200\n10 50\n100 1000", "3 15 500\n100 200\n250 300\n400 600", "4 7 300\n1 10\n20 30\n40 50\n60 70", "5 12 800\n300 400\n500 600\n700 800\n900 1000\n1100 1200", "6 2 100\n1000 2000\n2000 3000\n3000 4000\n4000 5000\n5000 6000\n6000 7000", "7 20 150\n10 20\n30 40\n50 60\n70 80\n90 100\n110 120\n130 140", "8 9 450\n150 250\n350 450\n550 650\n750 850\n950 1050\n1150 1250\n1350 1450\n1550 1650", "9 30 900\n20 100\n200 300\n400 500\n600 700\n800 900\n1000 1100\n1200 1300\n1400 1500\n1600 1700", "10 6 200\n100 200\n200 300\n300 400\n400 500\n500 600\n600 700\n700 800\n800 900\n900 1000\n1000 1100", "11 11 1000\n20 30\n40 50\n60 70\n80 90\n100 110\n120 130\n140 150\n160 170\n180 190\n200 210\n220 230", "12 8 360\n800 900\n900 1000\n1000 1100\n1100 1200\n1200 1300\n1300 1400\n1400 1500\n1500 1600", "13 25 700\n10 20\n20 30\n30 40\n40 50\n50 60\n60 70\n70 80\n80 90\n90 100\n100 110\n110 120\n120 130\n130 140\n140 150\n150 160\n160 170\n170 180\n180 190\n190 200\n200 210\n210 220\n220 230\n230 240\n240 250\n250 260", "14 13 800\n1 100\n100 200\n200 300\n300 400\n400 500\n500 600\n600 700\n700 800\n800 900\n900 1000\n1000 1100\n1100 1200\n1200 1300", "15 17 500\n10 100\n100 200\n200 300\n300 400\n400 500\n500 600\n600 700\n700 800\n800 900\n900 1000\n1000 1100\n1100 1200\n1200 1300\n1300 1400\n1400 1500\n1500 1600\n1600 1700", "16 14 480\n3 10\n10 20\n20 30\n30 40\n40 50\n50 60\n60 70\n70 80\n80 90\n90 100\n100 110\n110 120\n120 130\n130 140", "17 21 650\n1000 2000\n2000 3000\n3000 4000\n4000 5000\n5000 6000\n6000 7000\n7000 8000\n8000 9000\n9000 10000\n10000 11000\n11000 12000", "18 18 750\n5 15\n25 35\n45 55\n65 75\n85 95\n105 115\n125 135\n145 155\n165 175\n185 195\n205 215\n225 235\n245 255\n265 275\n285 295\n305 315\n325 335\n345 355", "19 22 850\n500 600\n600 700\n700 800\n800 900\n900 1000\n1000 1100\n1100 1200\n1200 1300\n1300 1400\n1400 1500\n1500 1600\n1600 1700\n1700 1800\n1800 1900\n1900 2000\n2000 2100\n2100 2200\n2200 2300\n2300 2400\n2400 2500\n2500 2600\n2600 2700", "20 16 920\n15 25\n35 45\n55 65\n75 85\n95 105\n115 125\n135 145\n155 165\n175 185\n195 205\n215 225\n235 245\n255 265\n275 285\n295 305\n315 325", "21 24 1000\n1 2\n3 4\n5 6\n7 8\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n29 30\n31 32\n33 34\n35 36\n37 38\n39 40\n41 42\n43 44\n45 46\n47 48", "22 28 450\n5000 5100\n5200 5300\n5400 5500\n5600 5700\n5800 5900\n6000 6100\n6200 6300\n6400 6500\n6600 6700\n6800 6900\n7000 7100\n7200 7300\n7400 7500\n7600 7700\n7800 7900\n8000 8100\n8200 8300\n8400 8500\n8600 8700\n8800 8900\n9000 9100\n9200 9300\n9400 9500\n9600 9700\n9800 9900\n10000 10100\n10200 10300", "23 26 380\n1 100\n200 300\n300 400\n400 500\n500 600\n600 700\n700 800\n800 900\n900 1000\n1000 1100\n1100 1200\n1200 1300\n1300 1400\n1400 1500\n1500 1600\n1600 1700\n1700 1800\n1800 1900\n1900 2000\n2000 2100\n2100 2200\n2200 2300\n2300 2400\n2400 2500\n2500 2600\n2600 2700", "24 19 370\n10 20\n30 40\n50 60\n70 80\n90 100\n110 120\n130 140\n150 160\n170 180\n190 200\n210 220\n230 240\n250 260\n270 280\n290 300\n310 320\n330 340\n350 360\n370 380", "25 27 600\n100 200\n300 400\n500 600\n700 800\n900 1000\n1100 1200\n1300 1400\n1500 1600\n1700 1800\n1900 2000\n2100 2200\n2300 2400\n2500 2600\n2700 2800\n2900 3000\n3100 3200\n3300 3400\n3500 3600\n3700 3800\n3900 4000\n4100 4200\n4300 4400\n4500 4600\n4700 4800\n4900 5000\n5100 5200\n5300 5400", "26 23 320\n1000 2000\n2000 3000\n3000 4000\n4000 5000\n5000 6000\n6000 7000\n7000 8000\n8000 9000\n9000 10000\n10000 11000\n11000 12000\n12000 13000\n13000 14000\n14000 15000\n15000 16000\n16000 17000\n17000 18000\n18000 19000\n19000 20000\n20000 21000\n21000 22000\n22000 23000\n23000 24000", "27 29 420\n1 10\n20 30\n40 50\n60 70\n80 90\n100 110\n120 130\n140 150\n160 170\n180 190\n200 210\n220 230\n240 250\n260 270\n280 290\n300 310\n320 330\n340 350\n360 370\n380 390\n400 410\n420 430\n440 450\n460 470\n480 490\n500 510\n520 530\n540 550\n560 570", "28 31 530\n20 30\n40 50\n60 70\n80 90\n100 110\n120 130\n140 150\n160 170\n180 190\n200 210\n220 230\n240 250\n260 270\n280 290\n300 310\n320 330\n340 350\n360 370\n380 390\n400 410\n420 430\n440 450\n460 470\n480 490\n500 510\n520 530\n540 550\n560 570\n580 590\n600 610\n620 630", "29 32 470\n5 15\n25 35\n45 55\n65 75\n85 95\n105 115\n125 135\n145 155\n165 175\n185 195\n205 215\n225 235\n245 255\n265 275\n285 295\n305 315\n325 335\n345 355\n365 375\n385 395\n405 415\n425 435\n445 455\n465 475\n485 495\n505 515\n525 535\n545 555\n565 575\n585 595\n605 615\n625 635", "30 33 410\n10 100\n100 200\n200 300\n300 400\n400 500\n500 600\n600 700\n700 800\n800 900\n900 1000\n1000 1100\n1100 1200\n1200 1300\n1300 1400\n1400 1500\n1500 1600\n1600 1700\n1700 1800\n1800 1900\n1900 2000\n2000 2100\n2100 2200\n2200 2300\n2300 2400\n2400 2500\n2500 2600\n2600 2700\n2700 2800\n2800 2900\n2900 3000\n3000 3100\n3100 3200\n3200 3300"]}
{"name": "617_A. Elephant", "description": "Input\n\nThe first line of the input contains an integer x (1 <= x <= 1 000 000) --- The coordinate of the friend's house.", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "100", "1000", "10000", "100000", "1000000", "500", "5000", "50000", "500000", "250", "2500", "25000", "250000", "750", "7500"]}
{"name": "689_E. Mike and Geometry Problem", "description": "Input\n\nThe first line contains two integers n and k (1 <= k <= n <= 200 000) --- the number of segments and the number of segments in intersection groups respectively.\n\nThen n lines follow, the i-th line contains two integers li, ri ( - 109 <= li <= ri <= 109), describing i-th segment bounds.", "testcase": ["2 1\n-1000000000 1000000000\n-1000000000 1000000000", "3 2\n-1000000000 -999999990\n-1000000000 -999999980\n-999999990 -999999970", "4 2\n0 10\n10 20\n20 30\n30 40", "5 3\n10 20\n20 30\n30 40\n40 50\n50 60", "6 2\n-1 1\n-2 2\n-3 3\n-4 4\n-5 5\n-6 6", "2 2\n0 1\n1 2", "10 5\n-20 -10\n-15 -5\n0 5\n5 15\n10 20\n25 30\n-10 0\n-5 10\n-30 -25\n15 25", "8 4\n10 20\n30 40\n50 60\n70 80\n90 100\n110 120\n130 140\n150 160", "2 1\n-200 200\n300 400", "3 3\n-1000 -500\n-600 -200\n-300 100", "5 1\n100 200\n150 250\n300 400\n350 450\n0 50", "7 2\n100 200\n200 300\n300 400\n400 500\n500 600\n600 700\n700 800", "10 10\n-10 0\n0 10\n10 20\n20 30\n30 40\n40 50\n-50 -40\n-40 -30\n-30 -20\n-20 -10", "2 2\n0 1000000\n1000000 2000000", "5 2\n-1000 0\n-500 500\n-250 750\n0 1000\n250 1250", "20 10\n-1000 -500\n-500 0\n0 500\n500 1000\n1000 1500\n1500 2000\n2000 2500\n2500 3000\n3000 3500\n3500 4000\n4000 4500\n4500 5000\n5000 5500\n5500 6000\n6000 6500\n6500 7000\n7000 7500\n7500 8000\n8000 8500\n8500 9000", "15 5\n0 10\n10 20\n20 30\n30 40\n40 50\n50 60\n60 70\n70 80\n80 90\n90 100\n100 110\n110 120\n120 130\n130 140\n140 150", "4 1\n-100 0\n0 100\n200 300\n300 400", "3 1\n-50000 -40000\n-40000 -30000\n-30000 -20000", "10 2\n10 20\n30 40\n50 60\n70 80\n90 100\n110 120\n130 140\n150 160\n170 180\n190 200", "6 6\n-100 -90\n-80 -70\n-60 -50\n-40 -30\n-20 -10\n0 10", "17 8\n-9 -7\n-5 -3\n-1 1\n3 5\n7 9\n11 13\n15 17\n19 21\n23 25\n27 29\n31 33\n35 37\n39 41\n43 45\n47 49\n51 53\n55 57", "8 8\n-4000 -3000\n-2000 -1000\n0 1000\n2000 3000\n4000 5000\n6000 7000\n8000 9000\n10000 11000", "5 5\n-20 -10\n0 10\n20 30\n40 50\n60 70", "7 3\n10 20\n20 30\n30 40\n40 50\n50 60\n60 70\n70 80", "12 4\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13", "13 6\n-130 -120\n-110 -100\n-90 -80\n-70 -60\n-50 -40\n-30 -20\n-10 0\n10 20\n30 40\n50 60\n70 80\n90 100\n110 120", "16 8\n-40 -30\n-30 -20\n-20 -10\n-10 0\n0 10\n10 20\n20 30\n30 40\n40 50\n50 60\n60 70\n70 80\n80 90\n90 100\n100 110\n110 120", "9 3\n-900 -800\n-700 -600\n-500 -400\n-300 -200\n-100 0\n100 200\n300 400\n500 600\n700 800", "18 9\n-180 -170\n-160 -150\n-140 -130\n-120 -110\n-100 -90\n-80 -70\n-60 -50\n-40 -30\n-20 -10\n0 10\n20 30\n40 50\n60 70\n80 90\n100 110\n120 130\n140 150\n160 170", "11 5\n11 22\n22 33\n33 44\n44 55\n55 66\n66 77\n77 88\n88 99\n99 110\n110 121\n121 132"]}
{"name": "732_C. Sanatorium", "description": "Input\n\nThe only line contains three integers b, d and s (0 <= b, d, s <= 1018, b + d + s >= 1) --- the number of breakfasts, dinners and suppers which Vasiliy had during his vacation in the sanatorium.", "testcase": ["1 1 1", "0 0 1", "0 1 0", "1 0 0", "123456789123456789 987654321987654321 123456789012345678", "500 500 500", "1018 1018 1018", "500000000000000000 400000000000000000 300000000000000000", "1 2 3", "10 9 8", "20 30 40", "17 17 17", "10000000000000000 10000000000000000 10000000000000000", "18 1 17", "2023 2023 2023", "111 333 222", "999999999999999999 999999999999999999 999999999999999999", "254 102 409", "657 349 703", "153 153 153", "900000000000000000 800000000000000000 700000000000000000", "563 781 347", "2 1 2", "0 1 1", "1 0 1", "12345 67890 12345", "67890 12345 67890", "102030405060708090 908070605040302010 123456789987654321", "101 202 303", "1018 100 100"]}
{"name": "777_E. Hanoi Factory", "description": "Input\n\nThe first line of the input contains a single integer n (1 <= n <= 100 000) --- the number of rings in factory's stock.\n\nThe i-th of the next n lines contains three integers ai, bi and hi (1 <= ai, bi, hi <= 109, bi > ai) --- inner radius, outer radius and the height of the i-th ring respectively.", "testcase": ["3\n2 3 4\n1 2 5\n6 7 2", "4\n10 15 6\n1 3 4\n4 6 3\n2 4 5", "1\n1 2 3", "5\n11 20 30\n2 5 1\n8 10 2\n1 6 7\n6 9 3", "2\n100 200 300\n50 100 150", "10\n1 2 1\n2 3 1\n3 4 1\n4 5 1\n5 6 1\n6 7 1\n7 8 1\n8 9 1\n9 10 1\n10 11 1", "3\n100000000 200000000 10000000\n50000000 100000000 1000000\n25000000 50000000 100000", "7\n1 2 10\n3 5 20\n10 15 15\n7 8 12\n9 14 8\n20 25 9\n30 35 5", "8\n1000 2000 3000\n2000 3001 3500\n2500 2700 2600\n1000 1100 1200\n1100 1200 1300\n1500 1600 1450\n345 789 239\n800 1000 678", "6\n1999 2999 4999\n1888 2555 3333\n2222 2777 100\n3245 4321 500\n324 567 234\n10000 10200 500", "9\n123 456 789\n234 567 890\n900 1000 1001\n1 3 4\n8 10 2\n100 200 300\n300 400 500\n500 600 700\n600 700 800", "3\n234567 234568 1000000\n1000000 1000001 2000000\n222222 333333 444444", "5\n5 10 20\n10 15 30\n15 20 40\n20 25 50\n25 30 60", "6\n3 4 5\n6 7 8\n9 10 11\n12 13 14\n15 16 17\n18 19 20", "4\n1 2 100\n2 3 200\n3 4 300\n4 5 400", "2\n99999 199999 299999\n88888 188888 288888", "7\n100 101 102\n101 102 103\n102 103 104\n103 104 105\n104 105 106\n105 106 107\n106 107 108", "8\n2 4 10\n4 8 20\n8 16 30\n16 32 40\n32 64 50\n64 128 60\n128 256 70\n256 512 80", "3\n10000 20000 30000\n20000 30000 40000\n30000 40000 50000", "10\n9 10 11\n8 9 10\n7 8 9\n6 7 8\n5 6 7\n4 5 6\n3 4 5\n2 3 4\n1 2 3\n10 11 12", "6\n500 600 700\n600 700 800\n700 800 900\n800 900 1000\n900 1000 1100\n1000 1100 1200", "3\n150 300 450\n500 1000 1500\n2000 4000 6000", "7\n12345 23456 34567\n23456 34567 45678\n34567 45678 56789\n45678 56789 67890\n56789 67890 78901\n67890 78901 89012\n78901 89012 90123", "5\n50000 60000 70000\n60000 70000 80000\n70000 80000 90000\n80000 90000 100000\n90000 100000 110000", "3\n7000000 8000000 9000000\n8000000 9000000 10000000\n9000000 10000000 11000000", "8\n98765 198765 298765\n87654 187654 287654\n76543 176543 276543\n65432 165432 265432\n54321 154321 254321\n43210 143210 243210\n32109 132109 232109\n21098 121098 221098", "5\n11111 22222 33333\n99999 111111 222222\n22222 33333 44444\n44444 55555 66666\n66666 77777 88888", "4\n16 17 18\n17 18 19\n18 19 20\n19 20 21", "10\n99 199 299\n199 299 399\n299 399 499\n399 499 599\n499 599 699\n599 699 799\n699 799 899\n799 899 999\n899 999 1099\n999 1099 1199", "3\n800 1600 2400\n1600 3200 4800\n3200 6400 9600", "5\n3 5 7\n5 7 9\n7 9 11\n9 11 13\n11 13 15"]}
{"name": "802_C. Heidi and Library (hard)", "description": "Input\n\nThe first line of input will contain two integers n and k (<image>). The second line will contain n integers a1, a2, ..., an (1 <= ai <= n) -- the sequence of book requests. The third line contains n integers c1, c2, ..., cn (0 <= ci <= 106) -- the costs of the books.", "testcase": ["2 1\n1 2\n10 20", "3 2\n1 2 3\n5 5 5", "4 3\n2 4 1 3\n100 200 300 400", "5 2\n3 3 1 2 5\n2 8 6 3 1", "6 3\n6 5 4 3 2 1\n10 20 30 40 50 60", "7 1\n1 2 3 4 5 6 7\n500 400 300 200 100 50 25", "8 4\n4 3 2 1 8 7 6 5\n3 3 2 8 1 0 4 3", "9 3\n2 3 1 5 4 7 6 9 8\n1 1 1 1 1 1 1 1 1", "10 5\n10 9 8 7 6 5 4 3 2 1\n9 8 7 6 5 4 3 2 1 0", "3 1\n3 1 2\n1 0 2", "4 1\n1 3 2 4\n3 2 1 0", "5 3\n5 3 1 4 2\n4 3 2 1 0", "6 2\n2 4 6 1 3 5\n60 50 40 30 20 10", "7 3\n3 2 1 4 5 7 6\n10 10 10 10 10 10 10", "8 4\n8 6 4 2 1 3 5 7\n80 60 40 20 10 30 50 70", "9 2\n1 2 3 4 5 6 7 8 9\n99 88 77 66 55 44 33 22 11", "10 7\n10 8 9 7 6 5 4 3 2 1\n1000 900 800 700 600 500 400 300 200 100", "11 5\n6 4 7 9 10 3 2 11 1 8 5\n23 54 33 47 95 18 19 87 45 66 32", "12 6\n1 3 5 7 9 11 2 4 6 8 10 12\n123 234 345 456 567 678 789 890 901 112 223 334", "13 4\n13 12 11 10 9 8 7 6 5 4 3 2 1\n1000 2000 3000 4000 5000 6000 7000 8000 9000 1000 1100 1200 1300", "14 7\n7 14 3 10 6 2 9 5 1 13 4 12 11 8\n777 888 333 1010 666 222 999 555 111 1313 444 1212 1111 818", "15 1\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\n1500 1400 1300 1200 1100 1000 900 800 700 600 500 400 300 200 100", "16 8\n16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\n1600 1500 1400 1300 1200 1100 1000 900 800 700 600 500 400 300 200 100", "17 5\n9 5 1 10 3 17 2 14 4 16 8 13 6 15 7 11 12\n170 123 65 432 321 567 234 678 345 789 890 801 567 901 234 678 543", "18 6\n12 6 3 15 9 2 14 7 4 17 10 1 16 8 5 18 13 11\n184 92 46 369 278 23 369 184 92 461 369 5 554 277 138 666 416 277", "19 3\n7 14 2 9 16 5 12 3 10 17 1 8 15 4 11 18 6 13 19\n1900 1800 1700 1600 1500 1400 1300 1200 1100 1000 1900 1800 1700 1600 1500 1400 1300 1200 1100", "20 10\n20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\n2000 1900 1800 1700 1600 1500 1400 1300 1200 1100 1000 900 800 700 600 500 400 300 200 100", "5 1\n5 4 3 2 1\n10 9 8 7 6", "6 4\n6 5 4 3 2 1\n12 11 10 9 8 7", "7 2\n1 3 5 7 2 4 6\n70 30 50 10 40 20 60", "8 3\n8 7 6 5 4 3 2 1\n80 70 60 50 40 30 20 10"]}
{"name": "822_E. Liar", "description": "Input\n\nThe first line contains single integer n (1 <= n <= 105) --- length of sausage bought by Leha, i.e. the length of the string s.\n\nThe second line contains string s of the length n consisting of lowercase English letters.\n\nThe third line contains single integer m (1 <= m <= n) --- length of sausage bought by Noora, i.e. the length of the string t.\n\nThe fourth line contains string t of the length m consisting of lowercase English letters.\n\nThe fifth line contains single integer x (1 <= x <= 30) --- the maximum number of pieces of sausage that Leha can glue so that Noora doesn't notice anything.", "testcase": ["3\nabc\n1\na\n1", "4\nabcd\n2\nbc\n2", "5\nabcde\n3\ncde\n3", "6\nfghijk\n4\nghij\n4", "7\nklmnopq\n3\npqr\n5", "8\nrstuvwxy\n4\tuvwx\n6", "9\nabcdefghi\n5\nbcdef\n7", "10\njklmnopqrs\n6\nopqrs\n8", "11\nstuvwxyzabc\n7\nvwxyzab\n9", "12\nbcdefghijklm\n3\ndef\n10", "13\nnopqrstuvwxyz\n8\ntuvwxyz\n11", "14\nabcdefghijklmn\n9\nijklmno\n12", "15\nopqrstuvwxyza\n10\nqrstuvwxy\n13", "16\nbcdefghijklmnop\n7\nfghijkl\n14", "17\nqrstuvwxyzabcde\n5\nrstuv\n15", "18\nfghijklmnopqrs\n11\nklmnopqrs\n16", "19\nstuvwxyabcdefgh\n13\nwxyabcdefg\n17", "20\nijklmnopqrstuvwx\n8\nmnopqrst\n18", "21\nyzabcdefghijklmno\n10\nbcdefghij\n19", "22\npqrstuvwxyzabcdef\n12\nrstuvwxyzab\n20", "23\nghijklmnopqrstuvw\n14\nijklmnopqrst\n21", "24\nxyzabcdefghijklmnop\n9\nabcdefghi\n22", "25\nrstuvwxyzabcdefghi\n15\nklmnopqrstuv\n23", "26\nwxyzabcdefghijklmnop\n10\ndefghijklmno\n24", "27\npqrstuvwxyabcdefghijkl\n17\npqrstuvwxyabcdefgh\n25", "28\nmnopqrstuvwxyzabcdefgh\n18\ntuvmnopqrstuvwxyzab\n26", "29\nbcdefghijklmnopqrstuvwxy\n19\nghijklmnopqrstuvwxy\n27", "30\nzabcdefghijklmnopqrstuvwxy\n20\nabcdefghijklmnopqrstuvwxy\n28", "31\nabcdefg\n7\nabcdefg\n29", "32\nhijklmnopqrstuvwxyzabcde\n10\nhijklmnop\n30"]}
{"name": "939_F. Cutlet", "description": "Input\n\nThe first line contains two integers n and k (1 <= n <= 100 000, 1 <= k <= 100) --- the number of seconds the cutlet should be cooked on each side and number of periods of time in which Arkady can flip it.\n\nThe next k lines contain descriptions of these intervals. Each line contains two integers li and ri (0 <= li <= ri <= 2\u00b7n), meaning that Arkady can flip the cutlet in any moment starting from li seconds after the beginning of cooking and finishing at ri seconds after beginning of cooking. In particular, if li = ri then Arkady can flip the cutlet only in the moment li = ri. It's guaranteed that li > ri - 1 for all 2 <= i <= k.", "testcase": ["1 1\n0 2", "5 3\n0 5\n5 7\n7 10", "7 1\n0 7", "2 2\n0 1\n1 4", "100000 2\n0 50000\n50000 100000", "20 5\n0 5\n5 10\n11 14\n14 17\n17 20", "15 1\n0 30", "100 5\n0 10\n15 25\n30 45\n55 65\n70 80", "99999 3\n0 99999\n40000 60000\n80000 99999", "8 4\n0 3\n3 6\n6 10\n10 16", "500 2\n0 250\n250 500", "42 4\n0 21\n21 36\n36 42\n42 84", "1000 10\n0 100\n120 220\n240 320\n330 430\n440 540\n550 650\n660 760\n770 870\n880 980\n990 2000", "33333 3\n0 10000\n10000 20000\n20000 33333", "1234 1\n0 1234", "10 10\n0 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10", "55 5\n0 11\n11 22\n23 34\n34 45\n46 55", "999 5\n0 199\n200 399\n400 599\n600 799\n800 999", "60 10\n0 6\n6 12\n12 18\n18 24\n24 30\n30 36\n36 42\n42 48\n48 54\n54 60", "540 3\n0 180\n180 360\n360 540", "3000 5\n0 600\n600 1200\n1200 1800\n1800 2400\n2400 3000", "10000 4\n0 2500\n2500 5000\n5000 7500\n7500 10000", "400 10\n0 40\n40 80\n80 120\n120 160\n160 200\n200 240\n240 280\n280 320\n320 360\n360 400", "250 4\n0 50\n100 150\n200 250\n250 500", "25 5\n0 5\n5 10\n10 15\n15 20\n20 25", "9999 10\n0 999\n999 1998\n1998 2997\n2997 3996\n3996 4995\n4995 5994\n5994 6993\n6993 7992\n7992 8991\n8991 9990", "1997 8\n0 250\n250 500\n500 750\n750 1000\n1000 1250\n1250 1500\n1500 1750\n1750 1994", "40 2\n0 15\n25 40", "800 5\n0 160\n160 320\n320 480\n480 640\n640 800", "110 3\n0 40\n40 60\n60 110"]}
{"name": "992_C. Nastya and a Wardrobe", "description": "Input\n\nThe only line contains two integers x and k (0 <= x, k <= 1018), where x is the initial number of dresses and k + 1 is the number of months in a year in Byteland.", "testcase": ["0 0", "1 0", "2 1", "3 2", "4 3", "5 4", "6 5", "7 6", "8 7", "9 8", "10 9", "100000 100", "200000 200", "300000 300", "400000 400", "500000 500", "600000 600", "700000 700", "800000 800", "900000 900", "1000000 1000", "5000000 5000", "10000000 10000", "50000000 50000", "100000000 100000", "500000000 500000", "1000000000 1000000", "5000000000 5000000", "10000000000 10000000", "1018000000000 1000000000"]}
{"name": "p02890 AtCoder Beginner Contest 143 - Distinct Numbers", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 A_2 ... A_N", "testcase": ["1\n1", "2\n1 2", "3\n2 3 5", "4\n10 20 30 40", "5\n1 2 3 4 5", "6\n-1 -2 -3 -4 -5 -6", "7\n0 0 0 0 0 0 0", "8\n100000 -100000 99999 -99999 1 -1 123456 -123456", "3\n5 5 5", "10\n1 1 1 1 1 1 1 1 1 1", "11\n-10 20 -30 40 -50 60 -70 80 -90 100 -110", "12\n0 1 0 1 0 1 0 1 0 1 0 1", "13\n100 200 300 400 500 600 700 800 900 1000 1100 1200", "14\n13 26 39 52 65 78 91 104 117 130 143 156 169 182", "15\n-3 6 -9 12 -15 18 -21 24 -27 30 -33 36 -39 42 -45", "16\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8", "17\n-1 2 -3 4 -5 6 -7 8 -9 10 -11 12 -13 14 -15 16 -17", "18\n0 -1 1 -2 2 -3 3 -4 4 -5 5 -6 6 -7 7 -8 8", "19\n123 -456 789 -101112 131415 -161718 192021 -222324 252627 -282930 313233 -343536 373839", "20\n111 -222 333 -444 555 -666 777 -888 999 -101010 111111 -121212 131313 -141414 151515 -161616 171717 -181818", "4\n1 -1 2 -2", "6\n-100000 100000 -100000 100000 -100000 100000", "5\n12345 23456 34567 45678 56789", "8\n-1 -2 -3 -4 -5 -6 -7 -8", "3\n999999 999999 999999", "9\n-999999 -888888 -777777 -666666 -555555 -444444 -333333 -222222 -111111", "10\n1 2 3 4 5 6 7 8 9 10", "7\n0 2 4 6 8 10 12", "12\n1 -1 2 -2 3 -3 4 -4 5 -5 6 -6", "14\n14 28 42 56 70 84 98 112 126 140 154 168 182 196"]}
{"name": "p03025 M-SOLUTIONS Programming Contest - Best-of-(2n-1)", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nN A B C", "testcase": ["1 10 20 30", "2 1 2 3", "3 5 5 5", "4 9 2 1", "5 0 0 100", "6 99 10 1", "7 35 45 55", "8 100 200 300", "9 11 22 33", "10 3 6 9", "11 13 26 39", "12 23 46 69", "13 31 41 51", "14 7 14 21", "15 20 30 40", "16 25 50 75", "17 60 80 100", "18 81 27 45", "19 2 4 8", "20 14 28 56", "21 250 500 750", "22 123 456 789", "23 333 666 999", "24 47 94 141", "25 150 300 450", "26 222 444 666", "27 75 150 225", "28 49 98 147", "29 365 730 1095", "30 88 176 264"]}
{"name": "p03166 Educational DP Contest - Longest Path", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nN M\nx_1 y_1\nx_2 y_2\n:\nx_M y_M", "testcase": ["2 1\n1 2", "3 2\n1 2\n2 3", "4 3\n1 2\n2 3\n3 4", "5 2\n1 2\n4 5", "6 3\n1 3\n2 4\n5 6", "7 4\n1 2\n2 3\n3 4\n4 5", "8 5\n1 2\n2 3\n3 4\n4 5\n6 7", "9 3\n1 3\n4 6\n7 9", "10 5\n1 2\n3 4\n5 6\n7 8\n9 10", "3 1\n1 3", "5 4\n1 2\n2 3\n3 4\n4 5", "6 5\n1 2\n2 3\n3 4\n4 5\n5 6", "7 3\n1 7\n2 6\n3 5", "8 4\n1 5\n2 6\n3 7\n4 8", "9 5\n1 2\n2 4\n4 6\n6 8\n8 9", "10 5\n1 6\n2 7\n3 8\n4 9\n5 10", "4 1\n1 4", "5 3\n1 2\n3 5\n2 4", "6 4\n1 3\n2 4\n4 6\n5 6", "7 5\n1 2\n2 3\n3 4\n4 5\n5 6", "8 3\n1 4\n5 8\n3 6", "9 4\n1 5\n2 6\n3 7\n4 8", "10 5\n1 5\n2 6\n3 7\n4 8\n5 9", "11 5\n1 2\n3 4\n5 6\n7 8\n9 10", "12 6\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7", "13 5\n1 3\n4 6\n5 7\n8 10\n9 11", "14 4\n1 3\n3 5\n5 7\n7 9", "15 5\n1 2\n3 4\n5 6\n7 8\n9 10", "16 4\n1 8\n2 9\n3 10\n4 11", "17 6\n1 2\n3 4\n5 6\n7 8\n9 10\n11 12"]}
{"name": "p03630 AtCoder Regular Contest 081 - Flip and Rectangles", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nH W\nS_1\nS_2\n:\nS_H", "testcase": ["3 4\n....\n.##.\n....", "2 2\n.#\n#.", "5 5\n#####\n#...#\n#.#.#\n#...#\n#####", "1 10\n..........", "6 3\n.#.\n.#.\n...\n.#.\n.#.\n...", "2 3\n###\n###", "7 7\n.......\n.#####.\n.#...#.\n.#.#.#.\n.#...#.\n.#####.\n.......", "4 5\n.....\n.###.\n.###.\n.....", "3 3\n###\n#.#\n###", "8 8\n........\n.######.\n.#....#.\n.#.##.#.\n.#.#..#.\n.#....#.\n.######.\n........", "10 1\n.\n.\n.\n#\n.\n.\n#\n.\n.\n.", "2 9\n.........\n.#######.", "1 5\n#####", "3 3\n#.#\n.#.\n#.#", "5 5\n...#.\n##...\n.#.##\n...#.\n#....", "7 7\n..###..\n.#...#.\n#.....#\n.#...#.\n#.....#\n.#...#.\n..###..", "3 10\n..........\n.####.####\n..........", "6 6\n......\n......\n.####.\n.####.\n......\n......", "4 8\n........\n.######.\n.######.\n........", "2 2\n..\n..", "9 9\n.#.......#\n..#.....#.\n...#...#..\n....#.#...\n.....#....\n....#.#...\n...#...#..\n..#.....#.\n.#.......#", "5 3\n.#.\n#.#\n.#.\n#.#\n.#.", "8 4\n....\n.##.\n.##.\n....\n....\n.##.\n.##.\n....", "5 7\n..#.#..\n.#####.\n#.....#\n.#####.\n..#.#..", "7 2\n..\n.#\n.#\n..\n.#\n.#\n..", "3 8\n.#....#.\n..####..\n.#....#.", "10 10\n..........\n..######..\n.#......#.\n.#.####.#.\n.#.#..#.#.\n.#.#..#.#.\n.#.####.#.\n.#......#.\n..######..\n..........", "1 4\n####", "2 5\n#####\n..#..", "4 6\n......\n.##.##\n.##.##\n......"]}
{"name": "p03788 AtCoder Grand Contest 011 - Half Reflector", "description": "Input\n\nThe input is given from Standard Input in the following format:\n\n\nN K\nS", "testcase": ["2 1\nAB", "3 2\nABA", "4 2\nAABB", "5 3\nAAAAB", "6 2\nAABBAA", "7 1\nABCABCA", "8 3\nAABBAABB", "9 4\nABABABABA", "10 5\nAAABBBAAAB", "11 2\nAABAAABAAAB", "12 6\nABABABABABAB", "13 3\nAAABBBAAABBBB", "14 7\nAABBAABBAABBAABB", "15 5\nABABABABABABABA", "16 4\nAAAABBBBAAAABBBB", "17 8\nABABABABABABABABABAB", "18 9\nAAABBBAAABBBAAABBBAAA", "19 3\nABABABABABABABABABABABA", "20 10\nAAAAAAAAAABBBBBBBBBB", "21 7\nACACACACACACACACACACACA", "22 8\nAABBAABBAABBAABBAABBAABB", "23 5\nABABABABABABABABABABABABA", "24 6\nAAAABBBBAAAABBBBAAAABBBB", "25 12\nABABABABABABABABABABABABABAB", "26 13\nAAABBBAAABBBAAABBBAAABBBAAABB", "27 2\nABCABCABCABCABCABCABCABCABCABC", "28 7\nACACACACACACACACACACACACACACACAC", "29 14\nAABBAABBAABBAABBAABBAABBAABBAABBAAA", "30 1\nABCDEFGHIJKLMNOPQRSTUVWXYZABCDE", "31 15\nABABABABABABABABABABABABABABABABABAB"]}
{"name": "p03956 AtCoder Grand Contest 006 - Blackout", "description": "Input\n\nThe input is given from Standard Input in the following format:\n\n\nN M\na_1 b_1\na_2 b_2\n:\na_M b_M", "testcase": ["2 1\n1 2", "3 2\n1 2\n2 3", "4 3\n1 2\n2 3\n3 4", "5 4\n1 2\n2 3\n3 4\n4 5", "6 5\n1 2\n2 3\n3 4\n4 5\n5 6", "7 6\n1 2\n2 3\n4 5\n5 6\n6 7\n3 7", "8 7\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8", "9 8\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9", "10 9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10", "3 3\n1 2\n1 3\n2 3", "4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4", "5 10\n1 2\n1 3\n1 4\n1 5\n2 3\n2 4\n2 5\n3 4\n3 5\n4 5", "6 4\n1 2\n2 3\n3 4\n5 6", "7 7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 6", "8 5\n1 8\n2 7\n3 6\n4 5\n1 4", "9 4\n1 5\n2 6\n3 7\n8 9", "10 6\n1 10\n2 9\n3 8\n4 7\n5 6\n2 5", "11 10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11", "12 11\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12", "13 12\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13", "14 13\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14", "15 14\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15", "16 15\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16", "17 16\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17", "18 17\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18", "19 18\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19", "20 19\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20", "21 20\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21", "22 21\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22", "23 22\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23"]}
{"name": "p00965 Starting a Scenic Railroad Service", "description": "Input\n\nThe input consists of a single test case of the following format.\n\n\n$n$\n$a_1$ $b_1$\n...\n$a_n$ $b_n$\n\n\nHere, the first line has an integer $n$, the number of the passengers in the estimated list of passengers' travel sections ($1 <= n <= 200 000$). The stations are numbered starting from 1 in their order along the route. Each of the following $n$ lines describes the travel for each passenger by two integers, the boarding and the alighting station numbers, $a_i$ and $b_i$, respectively ($1 <= a_i < b_i <= 100 000$). Note that more than one passenger in the list may have the same boarding and alighting stations.", "testcase": ["1\n1 2\n", "2\n1 3\n2 4\n", "3\n1 5\n2 6\n3 7\n", "4\n10 20\n15 25\n30 40\n45 50\n", "5\n100 200\n200 300\n300 400\n400 500\n500 600\n", "6\n123 456\n789 1011\n1213 1415\n1617 1819\n2021 2223\n2425 2627\n", "7\n1000 2000\n3000 4000\n5000 6000\n7000 8000\n9000 10000\n11000 12000\n13000 14000\n", "8\n111 222\n333 444\n555 666\n777 888\n999 1110\n1211 1332\n1443 1554\n1665 1776\n", "9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n", "10\n101 102\n103 104\n105 106\n107 108\n109 110\n111 112\n113 114\n115 116\n117 118\n119 120\n", "11\n999 1000\n1001 1002\n1003 1004\n1005 1006\n1007 1008\n1009 1010\n1011 1012\n1013 1014\n1015 1016\n1017 1018\n1019 1020\n", "12\n1 20000\n400 500\n200 3000\n500 6000\n3000 4000\n6000 7000\n7000 8000\n8000 9000\n9000 10000\n9999 10000\n10000 12000\n12000 13000\n", "13\n10 20\n30 40\n50 60\n70 80\n90 100\n110 120\n130 140\n150 160\n170 180\n190 200\n210 220\n230 240\n250 260\n", "14\n300 301\n302 303\n304 305\n306 307\n308 309\n310 311\n312 313\n314 315\n316 317\n318 319\n320 321\n322 323\n324 325\n326 327\n", "15\n327 328\n329 330\n331 332\n333 334\n335 336\n337 338\n339 340\n341 342\n343 344\n345 346\n347 348\n349 350\n351 352\n353 354\n355 356\n", "16\n1 10000\n1000 2000\n2000 3000\n3000 4000\n4000 5000\n5000 6000\n6000 7000\n7000 8000\n8000 9000\n9000 10000\n10001 11000\n11000 12000\n12000 13000\n13000 14000\n14000 15000\n15000 16000\n", "17\n500 600\n601 700\n701 800\n801 900\n901 1000\n1001 1100\n1101 1200\n1201 1300\n1301 1400\n1401 1500\n1501 1600\n1601 1700\n1701 1800\n1801 1900\n1901 2000\n2001 2100\n2101 2200\n", "18\n999 1999\n1999 2999\n2999 3999\n3999 4999\n4999 5999\n5999 6999\n6999 7999\n7999 8999\n8999 9999\n9999 10999\n10999 11999\n11999 12999\n12999 13999\n13999 14999\n14999 15999\n15999 16999\n16999 17999\n17999 18999\n", "19\n4950 4949\n4951 4952\n4953 4954\n4955 4956\n4957 4958\n4959 4960\n4961 4962\n4963 4964\n4965 4966\n4967 4968\n4969 4970\n4971 4972\n4973 4974\n4975 4976\n4977 4978\n4979 4980\n4981 4982\n4983 4984\n4985 4986\n", "20\n1234 2345\n3456 4567\n5678 6789\n7890 8901\n9012 10123\n10123 11134\n11134 12145\n12145 13156\n13156 14167\n14167 15178\n15178 16189\n16189 17190\n17190 18191\n18191 19192\n19192 20193\n20193 21194\n21194 22195\n22195 23196\n23196 24197\n24197 25198\n", "21\n1 10\n11 20\n21 30\n31 40\n41 50\n51 60\n61 70\n71 80\n81 90\n91 100\n101 110\n111 120\n121 130\n131 140\n141 150\n151 160\n161 170\n171 180\n181 190\n191 200\n201 210\n", "22\n10000 10001\n10002 10003\n10004 10005\n10006 10007\n10008 10009\n10010 10011\n10012 10013\n10014 10015\n10016 10017\n10018 10019\n10020 10021\n10022 10023\n10024 10025\n10026 10027\n10028 10029\n10030 10031\n10032 10033\n10034 10035\n10036 10037\n10038 10039\n10040 10041\n", "23\n200 201\n202 203\n204 205\n206 207\n208 209\n210 211\n212 213\n214 215\n216 217\n218 219\n220 221\n222 223\n224 225\n226 227\n228 229\n230 231\n232 233\n234 235\n236 237\n238 239\n240 241\n242 243\n244 245\n", "24\n10000 10001\n10001 10002\n10002 10003\n10003 10004\n10004 10005\n10005 10006\n10006 10007\n10007 10008\n10008 10009\n10009 10010\n10010 10011\n10011 10012\n10012 10013\n10013 10014\n10014 10015\n10015 10016\n10016 10017\n10017 10018\n10018 10019\n10019 10020\n10020 10021\n10021 10022\n10022 10023\n10023 10024\n", "25\n5000 5001\n5001 5002\n5002 5003\n5003 5004\n5004 5005\n5005 5006\n5006 5007\n5007 5008\n5008 5009\n5009 5010\n5010 5011\n5011 5012\n5012 5013\n5013 5014\n5014 5015\n5015 5016\n5016 5017\n5017 5018\n5018 5019\n5019 5020\n5020 5021\n5021 5022\n5022 5023\n5023 5024\n5024 5025\n", "26\n3000 3100\n3200 3300\n3400 3500\n3600 3700\n3800 3900\n4000 4100\n4200 4300\n4400 4500\n4600 4700\n4800 4900\n5000 5100\n5200 5300\n5400 5500\n5600 5700\n5800 5900\n6000 6100\n6200 6300\n6400 6500\n6600 6700\n6800 6900\n7000 7100\n7200 7300\n7400 7500\n7600 7700\n7800 7900\n8000 8100\n", "27\n200 210\n220 230\n240 250\n260 270\n280 290\n300 310\n320 330\n340 350\n360 370\n380 390\n400 410\n420 430\n440 450\n460 470\n480 490\n500 510\n520 530\n540 550\n560 570\n580 590\n600 610\n620 630\n640 650\n660 670\n680 690\n700 710\n720 730\n", "28\n50 51\n51 52\n52 53\n53 54\n54 55\n55 56\n56 57\n57 58\n58 59\n59 60\n60 61\n61 62\n62 63\n63 64\n64 65\n65 66\n66 67\n67 68\n68 69\n69 70\n70 71\n71 72\n72 73\n73 74\n74 75\n75 76\n76 77\n77 78\n", "29\n100 200\n200 300\n300 400\n400 500\n500 600\n600 700\n700 800\n800 900\n900 1000\n1000 1100\n1100 1200\n1200 1300\n1300 1400\n1400 1500\n1500 1600\n1600 1700\n1700 1800\n1800 1900\n1900 2000\n2000 2100\n2100 2200\n2200 2300\n2300 2400\n2400 2500\n2500 2600\n2600 2700\n2700 2800\n2800 2900\n2900 3000\n", "30\n10000 10001\n10002 10003\n10004 10005\n10006 10007\n10008 10009\n10010 10011\n10012 10013\n10014 10015\n10016 10017\n10018 10019\n10020 10021\n10022 10023\n10024 10025\n10026 10027\n10028 10029\n10030 10031\n10032 10033\n10034 10035\n10036 10037\n10038 10039\n10040 10041\n10042 10043\n10044 10045\n10046 10047\n10048 10049\n10050 10051\n10052 10053\n10054 10055\n10056 10057\n10058 10059\n"]}
{"name": "p02272 Merge Sort", "description": "Input\n\nIn the first line n is given. In the second line, n integers are given.", "testcase": ["1\n1", "2\n1 2", "3\n1 2 3", "4\n4 3 2 1", "5\n5 4 3 2 1", "6\n1 2 3 4 5 6", "7\n7 6 5 4 3 2 1", "8\n1 1 1 1 1 1 1 1", "9\n9 8 7 6 5 4 3 2 1", "10\n1 2 3 4 5 6 7 8 9 10", "2\n100 200", "3\n300 600 900", "4\n-1 -2 -3 -4", "5\n-5 0 5 -10 15", "6\n1 1 2 2 3 3", "7\n7 -7 14 -14 21 -21 28", "8\n0 -1 0 1 0 -1 0 1", "9\n-9 8 -7 6 -5 4 -3 2 -1", "10\n10 9 8 7 6 5 4 3 2 1", "3\n1000 -1000 0", "5\n12345 54321 -12345 -54321 12321", "4\n1111 2222 3333 4444", "6\n-600 -500 -400 -300 -200 -100", "9\n1 -1 2 -2 3 -3 4 -4 5", "7\n0 0 0 0 0 0 0", "8\n8 7 6 5 4 3 2 1", "10\n-10 10 -10 10 -10 10 -10 10 -10 10", "2\n2147483647 -2147483648", "3\n0 0 1", "4\n-2 -4 -6 -8", "7\n3 1 4 1 5 9 2", "8\n2 4 6 8 10 12 14 16", "5\n0 1 0 1 0", "6\n-1 -2 -3 -4 -5 -6", "9\n0 0 0 0 0 0 0 0 0"]}
{"name": "1017_H. The Films", "description": "Input\n\nThe first line contains three integers n, m, and q (1 <= n, m, q <= 10^5, n+q<= 10^5) --- the number of films on the shelf initially, the number of endings, and the number of months.\n\nThe second line contains n integers e_1, e_2, ..., e_n (1<= e_i<= m) --- the ending of the i-th film on the shelf.\n\nEach of the next q lines contains three integers l_i, r_i, and k_i (1 <= l_i <= r_i <= n, 0 <= k_i <= 10^5) --- the i-th query.\n\nIt is guaranteed that there will be only no more than 100 different k values.", "testcase": ["3 7 4\n5 2 4\n1 2 3\n2 3 0\n1 3 5\n1 1 1", "4 10 5\n3 8 2 7\n1 2 1\n2 4 10\n3 4 5\n1 3 0\n1 4 3", "5 5 3\n1 2 3 2 1\n1 3 2\n2 5 1\n1 5 3", "2 4 2\n4 1\n1 1 0\n2 2 4", "6 3 4\n2 2 1 3 3 1\n1 3 2\n4 6 0\n1 6 2\n2 5 1", "8 10 3\n10 1 3 6 8 10 5 7\n1 5 4\n6 8 6\n2 7 9", "9 20 10\n11 6 19 14 8 9 4 2 5\n1 4 5\n5 9 10\n2 8 15\n3 6 7\n4 4 0\n1 9 3\n2 7 8\n6 9 1\n3 8 12\n2 5 20", "7 4 2\n1 4 3 1 2 2 3\n2 6 3\n1 7 0", "10 8 7\n4 7 1 6 8 2 5 3 5 2\n1 5 2\n2 7 0\n3 8 5\n4 9 1\n5 10 4\n6 10 3\n1 4 7", "4 4 2\n3 2 1 4\n2 4 0\n1 3 3", "6 15 6\n1 5 14 15 2 10\n1 6 7\n2 5 1\n1 2 0\n3 4 5\n4 6 10\n1 3 14", "12 25 5\n5 17 24 8 3 4 25 16 7 11 6 13\n1 6 0\n5 12 10\n3 9 25\n7 11 5\n2 10 15", "8 5 4\n1 4 5 3 2 5 1 4\n1 4 3\n5 8 1\n2 7 0\n3 8 4", "15 40 8\n26 7 37 12 33 8 13 14 20 39 30 6 28 16 35\n1 7 37\n8 15 26\n4 10 7\n2 5 33\n3 9 40\n6 14 12\n1 8 13\n5 11 20", "9 5 3\n2 4 3 5 5 1 4 3 2\n2 5 0\n3 7 2\n4 9 4", "10 8 3\n3 6 2 8 5 7 4 1 6 2\n1 6 2\n4 9 3\n3 10 0", "18 60 6\n33 26 21 52 60 13 7 48 59 35 8 23 17 45 16 58 40 30\n1 9 20\n10 18 30\n6 15 33\n4 12 48\n2 8 60\n3 17 58", "20 50 5\n35 10 50 17 23 5 11 13 40 45 29 12 26 37 28 34 6 33 21 14\n1 10 10\n5 15 20\n10 20 30\n15 20 40\n1 20 50", "7 15 3\n5 13 7 10 9 8 14\n1 4 3\n3 7 10\n2 6 8", "11 50 4\n11 48 3 50 17 22 29 31 2 35 42\n1 6 11\n5 11 17\n2 7 22\n4 10 48", "13 30 5\n9 12 5 14 19 2 27 8 17 22 28 13 16\n1 7 9\n8 13 12\n3 9 20\n2 5 3\n4 12 16", "6 12 2\n7 11 10 8 12 6\n1 4 7\n3 6 11", "17 25 6\n20 23 4 19 6 2 5 14 10 12 11 18 1 25 17 9 3\n1 8 20\n9 17 21\n2 7 14\n6 14 19\n3 10 5\n7 17 11", "19 39 10\n34 17 20 19 36 21 5 11 28 29 33 32 27 6 10 37 13 39 16\n1 6 3\n7 14 14\n5 13 12\n10 19 28\n2 9 17\n6 15 21\n4 11 5\n3 12 22\n8 17 33\n1 10 37", "14 45 8\n29 13 10 26 20 4 40 32 34 21 7 35 41 15\n1 10 28\n2 11 16\n3 12 6\n4 13 17\n5 14 36\n6 11 20\n7 12 4\n8 14 29", "8 40 4\n14 31 4 27 18 39 9 22\n1 5 14\n3 8 22\n2 6 27\n4 7 18", "12 10 6\n1 3 8 10 6 2 7 4 5 9 1 10\n1 6 3\n4 10 8\n5 12 10\n2 9 6\n3 11 7\n1 12 4", "16 35 6\n18 5 22 14 25 32 3 10 6 16 20 29 1 7 33 35\n1 6 18\n3 12 14\n4 9 22\n6 15 5\n2 8 32\n5 13 6", "13 16 5\n11 5 13 6 14 3 1 9 16 12 8 4 10\n1 5 10\n2 8 11\n4 10 3\n6 13 14\n3 11 16", "21 80 10\n21 58 4 67 44 10 12 72 50 22 37 60 29 41 63 24 80 5 39 53 27\n1 8 20\n4 13 41\n2 10 31\n5 17 60\n3 15 72\n7 21 67\n6 16 80\n2 9 38\n10 21 45\n1 11 50", "22 65 7\n41 58 22 34 49 61 23 60 8 38 6 32 25 3 9 14 42 16 65 47 55 19\n1 10 22\n5 15 41\n2 12 38\n4 20 64\n3 17 9\n6 22 47\n9 18 55"]}
{"name": "1041_E. Tree Reconstruction", "description": "Input\n\nThe first line contains one integer n (2 <= n <= 1 000) --- the number of vertices in the tree.\n\nEach of the next n-1 lines contains two integers a_i and b_i each (1 <= a_i < b_i <= n) --- the maximal indices of vertices in the components formed if the i-th edge is removed.", "testcase": ["2\n1 2", "3\n1 2\n2 3", "3\n2 3\n1 2", "4\n1 2\n2 3\n3 4", "4\n1 2\n2 4\n3 4", "5\n1 2\n2 3\n3 4\n4 5", "5\n1 2\n1 3\n1 4\n1 5", "6\n1 2\n2 3\n3 4\n4 5\n5 6", "6\n2 3\n3 4\n4 5\n2 6\n1 2", "7\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7", "7\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7", "8\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8", "8\n1 2\n2 8\n3 8\n4 8\n5 8\n6 8\n7 8", "9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9", "9\n2 9\n3 9\n4 9\n5 9\n6 9\n7 9\n8 9\n1 2", "10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10", "10\n1 2\n2 10\n3 10\n4 10\n5 10\n6 10\n7 10\n8 10\n9 10", "11\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11", "11\n1 11\n2 11\n3 11\n4 11\n5 11\n6 11\n7 11\n8 11\n9 11\n10 11", "12\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12", "12\n2 12\n3 12\n4 12\n5 12\n6 12\n7 12\n8 12\n9 12\n10 12\n11 12\n1 2", "13\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13", "13\n1 2\n2 13\n3 13\n4 13\n5 13\n6 13\n7 13\n8 13\n9 13\n10 13\n11 13\n12 13", "14\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14", "14\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n1 2", "15\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15", "15\n1 2\n2 15\n3 15\n4 15\n5 15\n6 15\n7 15\n8 15\n9 15\n10 15\n11 15\n12 15\n13 15\n14 15", "16\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16", "16\n1 2\n2 16\n3 16\n4 16\n5 16\n6 16\n7 16\n8 16\n9 16\n10 16\n11 16\n12 16\n13 16\n14 16\n15 16", "17\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17", "17\n1 17\n2 17\n3 17\n4 17\n5 17\n6 17\n7 17\n8 17\n9 17\n10 17\n11 17\n12 17\n13 17\n14 17\n15 17\n16 17"]}
{"name": "1064_D. Labyrinth", "description": "Input\n\nThe first line contains two integers n, m (1 <= n, m <= 2000) --- the number of rows and the number columns in the labyrinth respectively.\n\nThe second line contains two integers r, c (1 <= r <= n, 1 <= c <= m) --- index of the row and index of the column that define the starting cell.\n\nThe third line contains two integers x, y (0 <= x, y <= 109) --- the maximum allowed number of movements to the left and to the right respectively.\n\nThe next n lines describe the labyrinth. Each of them has length of m and consists only of symbols '.' and '*'. The j-th character of the i-th line corresponds to the cell of labyrinth at row i and column j. Symbol '.' denotes the free cell, while symbol '*' denotes the cell with an obstacle.\n\nIt is guaranteed, that the starting cell contains no obstacles.", "testcase": ["1 1\n1 1\n0 0\n.", "2 2\n1 1\n1 1\n.*\n*.", "2 2\n2 2\n1 1\n.*\n*.", "3 3\n2 2\n2 2\n...\n.*.\n...", "3 4\n3 4\n3 3\n....\n*.*.\n....", "4 3\n1 3\n2 2\n...\n.*.\n.*.\n...", "5 5\n3 3\n5 5\n.....\n..*..\n.....\n..*..\n.....", "5 5\n5 5\n10 10\n.....\n.....\n.*.*.\n.....\n.....", "6 6\n1 1\n4 4\n......\n*....*\n.*.*..\n......\n......\n......", "6 7\n4 4\n2 5\n.......\n...*...\n.......\n...*.*.\n.......\n.......", "7 7\n7 1\n7 7\n*******\n*.....*\n*.***.*\n*.....*\n*.***.*\n*.....*\n*******", "8 8\n8 8\n8 8\n........\n........\n........\n........\n..****..\n........\n........\n........", "9 9\n5 5\n9 9\n.........\n.........\n..******.\n.........\n....*....\n.........\n.........\n.........\n.........", "10 10\n6 6\n50 50\n..........\n..******..\n..........\n..........\n....**....\n.....*....\n....**....\n..........\n..........\n..........", "10 15\n10 15\n100 100\n...............\n...............\n...............\n...*********...\n...............\n...............\n...*********...\n...............\n...............\n...............", "11 11\n1 1\n15 10\n...........\n.......*...\n.*.........\n.......*...\n...........\n...........\n...........\n...*...*...\n...........\n...........\n...*.......", "12 12\n6 6\n12 12\n............\n............\n..******....\n............\n..******....\n......*.....\n.....**.....\n..******....\n............\n..******....\n............\n............", "13 13\n7 7\n20 20\n.............\n.............\n.....*****...\n.............\n.............\n....*******..\n.......*.....\n....*******..\n.............\n.....*****...\n.............\n.............\n.............", "14 14\n14 14\n30 30\n..............\n..............\n..............\n..............\n..**********..\n..............\n...********...\n..**********..\n..............\n..............\n..............\n..............\n..............\n..............", "15 15\n8 8\n15 15\n...............\n....*****......\n.......*.......\n.......*.......\n.......*.......\n....*******....\n....*******....\n...............\n....*******....\n....*******....\n.......*.......\n.......*.......\n.......*.......\n....*****......\n...............", "16 16\n16 16\n40 40\n................\n................\n................\n................\n....********....\n....********....\n....********....\n....********....\n....********....\n....********....\n....********....\n....********....\n................\n................\n................\n................", "17 17\n9 9\n25 25\n.................\n.................\n.....*******.....\n.....*******.....\n.....*******.....\n.....*******.....\n.....*******.....\n.....*******.....\n.........*.......\n.....*******.....\n.....*******.....\n.....*******.....\n.....*******.....\n.....*******.....\n.....*******.....\n.................\n.................", "5 5\n3 3\n4 2\n.....\n.***.\n.*.*.\n.***.\n.....", "20 20\n10 10\n5 100\n....................\n....................\n....................\n....................\n....................\n.....**********.....\n......********......\n......********......\n.....**********.....\n....................\n....................\n....................\n....................\n....................\n....................\n....................\n....................\n....................\n....................\n....................", "20 20\n1 1\n0 1000\n********************\n*..................*\n*..................*\n*..................*\n*..................*\n*..................*\n*..................*\n*..................*\n*..................*\n*..................*\n*..................*\n*..................*\n*..................*\n*..................*\n*..................*\n*..................*\n*..................*\n*..................*\n*..................*\n********************", "2 5\n2 3\n10 10\n.....\n.....", "3 3\n2 2\n0 2\n.*.\n.*.\n.*.", "50 50\n25 25\n1000 1000\n"]}
{"name": "1086_B. Minimum Diameter Tree", "description": "Input\n\nThe first line contains two integer numbers n and s (2 <= n <= 10^5, 1 <= s <= 10^9) --- the number of vertices in the tree and the sum of edge weights.\n\nEach of the following n-1 lines contains two space-separated integer numbers a_i and b_i (1 <= a_i, b_i <= n, a_i != b_i) --- the indexes of vertices connected by an edge. The edges are undirected.\n\nIt is guaranteed that the given edges form a tree.", "testcase": ["3 6\n1 2\n2 3", "4 10\n1 2\n2 3\n3 4", "5 15\n1 2\n2 3\n3 4\n4 5", "5 20\n1 2\n2 3\n3 4\n2 5", "6 18\n1 2\n2 3\n2 4\n4 5\n5 6", "7 12\n1 2\n2 3\n2 4\n4 5\n5 6\n2 7", "7 23\n1 2\n1 3\n3 4\n3 5\n4 6\n4 7", "8 50\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8", "9 31\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9", "5 25\n1 2\n1 3\n1 4\n1 5", "5 30\n1 2\n1 3\n2 4\n2 5", "10 100\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10", "11 40\n1 2\n2 3\n3 4\n4 5\n4 6\n6 7\n7 8\n8 9\n7 10\n7 11", "12 36\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8\n5 9\n6 10\n7 11\n11 12", "13 65\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n4 13", "14 105\n1 2\n2 3\n2 4\n4 5\n5 6\n6 7\n6 8\n8 9\n9 10\n10 11\n11 12\n12 13\n7 14", "15 150\n1 2\n2 3\n3 4\n4 5\n1 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15", "16 200\n1 2\n1 3\n3 4\n3 5\n5 6\n5 7\n7 8\n7 9\n9 10\n9 11\n11 12\n11 13\n13 14\n13 15\n15 16", "17 85\n1 2\n2 3\n3 4\n4 5\n5 6\n5 7\n7 8\n8 9\n8 10\n10 11\n10 12\n12 13\n13 14\n14 15\n15 16\n12 17", "18 90\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18", "19 95\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19", "20 200\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20", "21 210\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21", "22 220\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22", "23 230\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23", "24 240\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24", "25 250\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25", "26 260\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26", "27 270\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26\n26 27", "28 280\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26\n26 27\n27 28", "29 290\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26\n26 27\n27 28\n28 29", "30 300\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26\n26 27\n27 28\n28 29\n29 30"]}
{"name": "1106_B. Lunar New Year and Food Ordering", "description": "Input\n\nThe first line contains two integers n and m (1 <= n, m <= 10^5), representing the number of different kinds of food and the number of customers, respectively.\n\nThe second line contains n positive integers a_1, a_2, ..., a_n (1 <= a_i <= 10^7), where a_i denotes the initial remain of the i-th kind of dishes.\n\nThe third line contains n positive integers c_1, c_2, ..., c_n (1 <= c_i <= 10^6), where c_i denotes the cost of one dish of the i-th kind.\n\nThe following m lines describe the orders of the m customers respectively. The j-th line contains two positive integers t_j and d_j (1 <= t_j <= n, 1 <= d_j <= 10^7), representing the kind of food and the number of dishes the j-th customer orders, respectively.", "testcase": ["1 1\n100\n2\n1 50", "2 1\n10000 20000\n5 3\n2 15000", "3 2\n1000 2000 3000\n10 20 30\n1 500\n3 1500", "2 2\n5000 5000\n8 12\n2 2000\n1 3300", "4 3\n400 300 500 600\n15 25 35 20\n3 250\n1 100\n4 500", "1 3\n100000\n100\n1 99999\n1 2\n1 1", "5 1\n100 200 100 200 100\n50 70 90 120 110\n5 500", "2 5\n9876 5432\n23 45\n1 500\n2 1000\n1 3000\n2 2000\n1 1000", "3 3\n9999 8888 7777\n19 18 17\n2 5000\n3 3000\n1 2000", "4 4\n2000 4000 1000 3000\n50 40 30 20\n1 100\n2 200\n3 300\n4 400", "5 5\n11111 22222 33333 44444 55555\n111 222 333 444 555\n1 11\n2 22\n3 33\n4 44\n5 55", "10 1\n10000 10000 10000 10000 10000 10000 10000 10000 10000 10000\n101 102 103 104 105 106 107 108 109 110\n10 5000", "2 3\n12345 67890\n202 404\n1 1234\n2 5678\n1 500", "6 2\n4000 5000 6000 7000 8000 9000\n60 70 80 90 100 110\n6 2000\n1 3000", "7 4\n777 888 999 1111 2222 3333 4444\n77 88 99 11 22 33 44\n7 700\n6 600\n5 500\n4 400", "8 3\n3000 4000 5000 6000 7000 8000 9000 10000\n31 41 51 61 71 81 91 101\n2 300\n4 400\n6 600", "9 2\n999 888 777 666 555 444 333 222 111\n1 2 3 4 5 6 7 8 9\n5 55\n9 99", "2 4\n7777 8888\n100 200\n1 777\n2 888\n2 444\n1 333", "2 2\n10000 20000\n300 400\n2 10000\n1 5000", "5 6\n3333 4444 5555 6666 7777\n123 234 345 456 567\n3 33\n5 55\n2 22\n4 44\n1 11\n2 22", "10 2\n10 20 30 40 50 60 70 80 90 100\n1 2 3 4 5 6 7 8 9 10\n10 2\n9 3", "5 3\n1234 2345 3456 4567 5678\n123 234 345 456 567\n2 234\n3 345\n4 456", "3 2\n10000 20000 30000\n100 200 300\n1 1000\n2 2000", "7 5\n9999 8888 7777 6666 5555 4444 3333\n99 88 77 66 55 44 33\n4 666\n3 777\n7 333\n6 444\n5 555", "6 6\n123 321 231 213 312 132\n21 12 23 32 31 13\n1 12\n2 23\n3 31\n4 13\n5 21\n6 32", "4 4\n2222 3333 4444 5555\n22 33 44 55\n1 222\n3 333\n4 444\n2 555", "9 2\n900 800 700 600 500 400 300 200 100\n9 8 7 6 5 4 3 2 1\n9 90\n8 80", "8 4\n1111 2222 3333 4444 5555 6666 7777 8888\n11 22 33 44 55 66 77 88\n8 800\n7 700\n6 600\n5 500", "10 10\n1000 2000 3000 4000 5000 6000 7000 8000 9000 10000\n10 20 30 40 50 60 70 80 90 100\n1 100\n2 200\n3 300\n4 400\n5 500\n6 600\n7 700\n8 800\n9 900\n10 1000", "6 3\n1000 2000 3000 4000 5000 6000\n15 25 35 45 55 65\n6 500\n1 400\n3 700", "7 1\n3000 4000 5000 3000 7000 8000 9000\n39 49 59 69 79 89 99\n4 3100"]}
{"name": "1175_E. Minimal Segment Cover", "description": "Input\n\nThe first line contains two integers n and m (1 <= n, m <= 2 * 10^5) --- the number of intervals and the number of queries, respectively.\n\nEach of the next n lines contains two integer numbers l_i and r_i (0 <= l_i < r_i <= 5 * 10^5) --- the given intervals.\n\nEach of the next m lines contains two integer numbers x_i and y_i (0 <= x_i < y_i <= 5 * 10^5) --- the queries.", "testcase": ["1 1\n0 1\n0 2", "2 1\n0 100\n200 300\n150 250", "3 2\n10 20\n20 30\n30 40\n5 15\n25 35", "1 2\n12345 23456\n10000 20000\n15000 25000", "4 1\n0 10\n20 30\n40 50\n60 70\n25 35", "2 2\n0 499999\n1 500000\n250000 300000\n100000 400000", "5 3\n100 200\n200 300\n300 400\n400 500\n500 600\n150 250\n350 450\n550 650", "2 2\n123 456\n789 1011\n0 100\n1000 2000", "3 4\n10000 20000\n30000 40000\n50000 60000\n15000 25000\n25000 35000\n35000 45000\n45000 55000", "1 3\n0 10\n1 2\n3 4\n5 6", "4 2\n11111 22222\n33333 44444\n55555 66666\n77777 88888\n11111 33333\n44444 55556", "2 3\n0 100000\n100001 200000\n50000 150000\n150000 250000\n250000 300000", "6 1\n10000 20000\n20000 30000\n30000 40000\n40000 50000\n50000 60000\n60000 70000\n35000 45000", "3 2\n0 5\n5 10\n10 15\n3 7\n8 12", "7 3\n100 300\n400 600\n700 900\n1000 1200\n1300 1500\n1600 1800\n1900 2000\n500 1000\n1100 1400\n1700 2000", "4 4\n0 123\n210 333\n444 567\n678 789\n0 200\n150 500\n500 600\n600 800", "5 2\n1234 5678\n9012 3456\n7890 1234\n5678 9012\n3456 7890\n1000 5000\n2000 6000", "2 1\n0 500\n1000 1500\n250 750", "6 2\n0 1000\n2000 3000\n4000 5000\n6000 7000\n8000 9000\n10000 11000\n5500 6500\n7500 8500", "3 3\n100 200\n300 400\n500 600\n250 350\n450 550\n650 750", "8 1\n1 10\n20 30\n40 50\n60 70\n80 90\n100 110\n120 130\n140 150\n65 75", "7 2\n100 200\n250 350\n400 500\n550 650\n700 800\n850 950\n1000 1100\n300 400\n800 900", "2 2\n10 20\n30 40\n15 25\n35 45", "9 1\n1000 1100\n1200 1300\n1400 1500\n1600 1700\n1800 1900\n2000 2100\n2200 2300\n2400 2500\n2600 2700\n2000 2200", "8 3\n5000 5100\n5200 5300\n5400 5500\n5600 5700\n5800 5900\n6000 6100\n6200 6300\n6400 6500\n5300 5400\n5700 5800\n6100 6200", "10 1\n111 222\n333 444\n555 666\n777 888\n999 1110\n2222 2333\n3444 3555\n4666 4777\n5888 5999\n6110 6222\n3333 3444", "6 6\n1234 2345\n3456 4567\n5678 6789\n7890 8901\n9012 10023\n10234 11045\n1500 2500\n3500 4500\n5500 6500\n7500 8500\n9500 10500\n11500 12500", "9 2\n0 500\n600 1100\n1200 1700\n1800 2300\n2400 2900\n3000 3500\n3600 4100\n4200 4700\n4800 5300\n1000 2000\n3000 4000", "3 1\n11111 22222\n33333 44444\n55555 66666\n12345 23456", "5 5\n1000 2000\n3000 4000\n5000 6000\n7000 8000\n9000 10000\n1500 2500\n3500 4500\n5500 6500\n7500 8500\n9500 10500", "4 4\n111 222\n333 444\n555 666\n777 888\n200 300\n400 500\n600 700\n800 900"]}
{"name": "1194_D. 1-2-K Game", "description": "Input\n\nThe first line contains the single integer T (1 <= T <= 100) --- the number of games. Next T lines contain one game per line. All games are independent.\n\nEach of the next T lines contains two integers n and k (0 <= n <= 109, 3 <= k <= 109) --- the length of the strip and the constant denoting the third move, respectively.", "testcase": ["1\n1000000000 3", "1\n500000000 4", "1\n250000000 10", "1\n123456789 5", "1\n987654321 7", "1\n444444444 9", "1\n777777777 11", "1\n999999999 13", "1\n333333333 6", "1\n888888888 14", "1\n222222222 15", "1\n666666666 16", "1\n111111111 17", "1\n555555555 18", "1\n2222222 19", "1\n3333333 20", "1\n4444444 21", "1\n5555555 22", "1\n6666666 23", "1\n7777777 24", "1\n8888888 25", "1\n9999999 26", "1\n21111111 27", "1\n42222222 28", "1\n63333333 29", "1\n84444444 30", "1\n95555555 31", "1\n16666666 32", "1\n77777777 33", "1\n88888888 34"]}
{"name": "1276_C. Beautiful Rectangle", "description": "Input\n\nThe first line contains n (1 <= n <= 4*10^5). The second line contains n integers (1 <= a_i <= 10^9).", "testcase": ["2\n1 2", "5\n3 1 4 1 5", "1\n999999999", "4\n234 56789 123456 789012", "10\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000", "8\n23 87 65 12 89 43 22 69", "3\n50000 700000 8000000", "7\n23 43 12 54 345 23 765", "6\n45875 875423 12354 76543 234567 76543", "4\n657 235 768 123", "11\n35 345 1235 6547 2345 6789 3234 6789 2345 6789 123", "9\n234 678 123456 7890 98765 432 12345 67890 1234", "15\n3456 7890 1234567 2345678 3456789 4567890 5678901 6789012 7890123 8901234 9012345 1234567 2345678 3456789 4567890", "20\n123 456 789 1011 1213 1415 1617 1819 2021 2223 2425 2627 2829 3031 3233 3435 3637 3839 4041 4243", "13\n8675309 3141592 2718281 1618033 1414213 1234567 1123581 1023341 832040 514229 317811 196418 121393", "4\n100000000 99999999 99999998 99999997", "12\n2 3 5 7 11 13 17 19 23 29 31 37", "4\n4 8 15 16", "16\n2357 71113 131719 232931 374143 475359 616771 738379 838993 971013 103107 109113 127131 137139 149151 157163", "14\n999999937 999999929 999999893 999999883 999999797 999999773 999999761 999999757 999999751 999999739 999999733 999999677 999999667 999999653", "8\n267 271 277 281 283 293 307 311", "10\n7 11 13 17 19 23 29 31 37 41", "17\n9697 9719 9721 9733 9739 9743 9749 9767 9769 9781 9787 9791 9803 9811 9817 9829 9833", "4\n4373 4391 4397 4409", "6\n7621 7643 7649 7669 7673 7681", "3\n3911 3917 3919", "7\n3727 3733 3739 3761 3767 3769 3779", "5\n1481 1483 1487 1489 1493", "19\n4297 4327 4337 4339 4349 4357 4363 4373 4391 4397 4409 4421 4423 4441 4447 4451 4457 4463 4481", "4\n10 20 30 40", "11\n4111 4127 4129 4133 4139 4153 4157 4159 4177 4201 4211"]}
{"name": "131_D. Subway", "description": "Input\n\nThe first line contains an integer n (3 <= n <= 3000), n is the number of stations (and trains at the same time) in the subway scheme. Then n lines contain descriptions of the trains, one per line. Each line contains a pair of integers xi, yi (1 <= xi, yi <= n) and represents the presence of a passage from station xi to station yi. The stations are numbered from 1 to n in an arbitrary order. It is guaranteed that xi != yi and that no pair of stations contain more than one passage. The passages can be used to travel both ways. It is guaranteed that the given description represents a classic subway scheme.", "testcase": ["3\n1 2\n2 3\n3 1", "4\n1 2\n2 3\n3 4\n4 1", "5\n1 2\n1 3\n1 4\n1 5\n2 3", "5\n1 3\n3 4\n4 5\n5 2\n2 1", "6\n1 2\n2 3\n3 4\n4 5\n5 6\n6 1", "6\n1 4\n4 2\n2 5\n5 3\n3 6\n6 1", "7\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 1", "7\n1 3\n3 5\n5 7\n7 2\n2 4\n4 6\n6 1", "8\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 1", "8\n1 5\n5 2\n2 6\n6 3\n3 7\n7 4\n4 8\n8 1", "9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 1", "9\n1 4\n4 7\n7 2\n2 5\n5 8\n8 3\n3 6\n6 9\n9 1", "10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 1", "10\n1 6\n6 2\n2 7\n7 3\n3 8\n8 4\n4 9\n9 5\n5 10\n10 1", "11\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 1", "11\n1 5\n5 9\n9 2\n2 6\n6 10\n10 3\n3 7\n7 11\n11 4\n4 8\n8 1", "12\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 1", "12\n1 7\n7 2\n2 8\n8 3\n3 9\n9 4\n4 10\n10 5\n5 11\n11 6\n6 12\n12 1", "13\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 1", "13\n1 6\n6 11\n11 3\n3 8\n8 13\n13 5\n5 10\n10 2\n2 7\n7 12\n12 4\n4 9\n9 1", "14\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 1", "14\n1 8\n8 2\n2 9\n9 3\n3 10\n10 4\n4 11\n11 5\n5 12\n12 6\n6 13\n13 7\n7 14\n14 1", "15\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 1", "15\n1 9\n9 2\n2 10\n10 3\n3 11\n11 4\n4 12\n12 5\n5 13\n13 6\n6 14\n14 7\n7 15\n15 8\n8 1", "16\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 1", "16\n1 10\n10 2\n2 11\n11 3\n3 12\n12 4\n4 13\n13 5\n5 14\n14 6\n6 15\n15 7\n7 16\n16 8\n8 9\n9 1", "17\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 1", "17\n1 11\n11 2\n2 12\n12 3\n3 13\n13 4\n4 14\n14 5\n5 15\n15 6\n6 16\n16 7\n7 17\n17 8\n8 9\n9 10\n10 1", "18\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 1", "18\n1 12\n12 2\n2 13\n13 3\n3 14\n14 4\n4 15\n15 5\n5 16\n16 6\n6 17\n17 7\n7 18\n18 8\n8 10\n10 9\n9 11\n11 1", "19\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 1", "19\n1 10\n10 2\n2 11\n11 3\n3 12\n12 4\n4 13\n13 5\n5 14\n14 6\n6 15\n15 7\n7 16\n16 8\n8 17\n17 9\n9 18\n18 19\n19 1"]}
{"name": "1339_A. Filling Diamonds", "description": "Input\n\nThe first line contains a single integer t (1 <= t <= 10^{4}) --- the number of test cases.\n\nEach of the next t lines contains a single integer n (1 <= n <= 10^{9}).", "testcase": ["1", "1000000000", "2", "999999999", "3", "897654321", "4", "123456789", "5", "564738291", "6", "719283746", "7", "182736455", "8", "999999938", "9", "102938475", "10", "675849302", "11", "349128746", "12", "928374655", "13", "746291837", "14", "918273645", "15", "675849201", "16", "123097485", "17", "768394573", "18", "102947385", "19", "857463928", "20", "647382915", "21", "100000000", "22", "264839721", "23", "987654321", "24", "456789123", "25", "8675309", "26", "314159265", "27", "271828182", "28", "161803399", "29", "141421356", "30", "173205080"]}
{"name": "1380_F. Strange Addition", "description": "Input\n\nThe first line contains two integers n and m (1 <= n, m <= 5 * 10^5) --- the length of the number c and the number of updates.\n\nThe second line contains a string c, consisting of exactly n digits from 0 to 9.\n\nEach of the next m lines contains two integers x and d (1 <= x <= n, 0 <= d <= 9) --- the descriptions of updates.", "testcase": [{"n": 1, "m": 1, "c": "1", "updates": [[1, 0]]}, {"n": 2, "m": 1, "c": "23", "updates": [[2, 5]]}, {"n": 3, "m": 2, "c": "456", "updates": [[1, 2], [3, 9]]}, {"n": 4, "m": 3, "c": "7890", "updates": [[4, 1], [2, 2], [3, 3]]}, {"n": 5, "m": 3, "c": "12345", "updates": [[2, 9], [5, 7], [3, 6]]}, {"n": 6, "m": 2, "c": "902345", "updates": [[6, 4], [1, 8]]}, {"n": 7, "m": 4, "c": "1234567", "updates": [[1, 1], [7, 2], [4, 0], [3, 3]]}, {"n": 8, "m": 3, "c": "76543210", "updates": [[2, 2], [8, 5], [5, 9]]}, {"n": 5, "m": 5, "c": "11111", "updates": [[1, 9], [2, 9], [3, 9], [4, 9], [5, 9]]}, {"n": 10, "m": 5, "c": "9876543210", "updates": [[10, 0], [9, 1], [8, 2], [7, 3], [6, 4]]}, {"n": 4, "m": 1, "c": "0000", "updates": [[4, 4]]}, {"n": 1, "m": 1, "c": "9", "updates": [[1, 1]]}, {"n": 3, "m": 3, "c": "222", "updates": [[1, 0], [2, 0], [3, 0]]}, {"n": 5, "m": 2, "c": "13579", "updates": [[3, 4], [5, 3]]}, {"n": 7, "m": 7, "c": "2468135", "updates": [[1, 3], [2, 1], [3, 4], [4, 1], [5, 5], [6, 9], [7, 8]]}, {"n": 9, "m": 4, "c": "123456789", "updates": [[5, 0], [6, 3], [7, 5], [9, 2]]}, {"n": 15, "m": 1, "c": "753951753951753", "updates": [[11, 4]]}, {"n": 6, "m": 6, "c": "000150", "updates": [[1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [6, 3]]}, {"n": 10, "m": 3, "c": "1230091230", "updates": [[2, 8], [5, 7], [7, 6]]}, {"n": 12, "m": 2, "c": "987654321098", "updates": [[7, 0], [12, 9]]}, {"n": 20, "m": 5, "c": "11223344556677889900", "updates": [[1, 9], [5, 8], [10, 7], [15, 6], [20, 5]]}, {"n": 25, "m": 4, "c": "999888777666555444333222", "updates": [[25, 1], [24, 0], [23, 9], [1, 5]]}, {"n": 30, "m": 6, "c": "111222333444555666777888999000", "updates": [[3, 9], [6, 9], [9, 9], [12, 0], [15, 0], [18, 0]]}, {"n": 35, "m": 3, "c": "12345098761234509876123450987612345", "updates": [[10, 2], [20, 3], [30, 4]]}, {"n": 40, "m": 5, "c": "111111000000999999888888777777666666555555", "updates": [[1, 2], [8, 3], [15, 4], [22, 5], [29, 6]]}, {"n": 45, "m": 4, "c": "123456789012345678901234567890123456789012345", "updates": [[5, 5], [15, 5], [25, 5], [35, 5]]}, {"n": 50, "m": 3, "c": "00000000000000000000000000000000000000000000000000", "updates": [[10, 1], [30, 5], [50, 9]]}, {"n": 5, "m": 4, "c": "54321", "updates": [[1, 1], [2, 1], [3, 1], [5, 5]]}, {"n": 8, "m": 2, "c": "87654321", "updates": [[2, 7], [7, 2]]}, {"n": 2, "m": 1, "c": "12", "updates": [[1, 9]]}]}
{"name": "1400_F. x-prime Substrings", "description": "Input\n\nThe first line contains a string s (1 <= |s| <= 1000). s contains only digits from 1 to 9 inclusive.\n\nThe second line contains an integer x (1 <= x <= 20).", "testcase": ["111\n1", "123456789\n5", "987654321\n10", "135791357913579\n15", "2468246824682468\n20", "12345\n2", "111213141516171819\n3", "987654321\n4", "13579\n6", "86420\n7", "12312312312312312312\n8", "999999999\n9", "1111155555\n11", "5678901234\n12", "2468024680\n13", "10101010101010101010\n14", "12121212121212121212\n16", "333333333333\n17", "19191919191919191919\n18", "22222222222\n19", "123456789012345\n11", "987654321098765\n13", "111111111111111\n14", "3333333333333\n12", "7777777777777\n15", "88888888888888\n16", "666666666666666\n17", "5555555555555555\n18", "44444444444444444\n19", "2222222222222222222\n20"]}
{"name": "1424_F. Coins", "description": "Input\n\nThe first line of input contains two integer numbers n and k (1 <= n <= 10^{9}, 0 <= k <= 2*10^5), where n denotes total number of pirates and k is the number of pirates that have any coins.\n\nThe next k lines of input contain integers a_i and b_i (1 <= a_i <= n, 1 <= b_i <= 10^{9}), where a_i denotes the index of the pirate sitting at the round table (n and 1 are neighbours) and b_i the total number of coins that pirate a_i has at the start of the game.", "testcase": ["3 0\n", "1000000000 1\n1 1000000000\n", "5 2\n1 10\n3 5\n", "7 3\n1 100\n5 200\n7 150\n", "10 10\n1 7\n2 13\n3 22\n4 5\n5 8\n6 26\n7 14\n8 30\n9 2\n10 11\n", "2 2\n1 50\n2 75\n", "20 5\n2 100\n4 200\n8 300\n16 400\n20 500\n", "50 10\n5 15\n10 20\n15 30\n20 40\n25 50\n30 60\n35 70\n40 80\n45 90\n50 100\n", "100 20\n1 5\n5 10\n10 14\n15 19\n20 23\n25 29\n30 33\n35 39\n40 42\n45 47\n50 53\n55 57\n60 61\n65 65\n70 68\n75 72\n80 76\n85 80\n90 83\n95 88\n", "200 40\n2 10\n4 20\n6 30\n8 40\n10 50\n20 60\n30 70\n40 80\n50 90\n60 100\n70 110\n80 120\n90 130\n100 140\n110 150\n120 160\n130 170\n140 180\n150 190\n160 200\n170 210\n180 220\n190 230\n200 240\n190 250\n180 260\n170 270\n160 280\n150 290\n140 300\n130 310\n120 320\n110 330\n100 340\n90 350\n80 360\n70 370\n60 380\n50 390\n40 400\n", "13 2\n2 500\n8 750\n", "999999999 0\n", "100 5\n10 400\n20 800\n30 1200\n40 1600\n50 2000\n", "500 1\n250 999\n", "1000 10\n100 100\n200 200\n300 300\n400 400\n500 500\n600 600\n700 700\n800 800\n900 900\n1000 1000\n", "1 1\n1 1000000000\n", "30 3\n3 333\n15 555\n27 777\n", "123456789 3\n123456 789123\n234567 891234\n345678 112233\n", "10 0\n", "50 50\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n9 9\n10 10\n11 11\n12 12\n13 13\n14 14\n15 15\n16 16\n17 17\n18 18\n19 19\n20 20\n21 21\n22 22\n23 23\n24 24\n25 25\n26 26\n27 27\n28 28\n29 29\n30 30\n31 31\n32 32\n33 33\n34 34\n35 35\n36 36\n37 37\n38 38\n39 39\n40 40\n41 41\n42 42\n43 43\n44 44\n45 45\n46 46\n47 47\n48 48\n49 49\n50 50\n", "11 2\n2 111\n7 222\n", "100 10\n1 150\n10 250\n20 350\n30 450\n40 550\n50 650\n60 750\n70 850\n80 950\n90 1050\n", "20 7\n1 50\n3 60\n5 70\n7 80\n11 90\n13 100\n17 110\n", "500000000 5\n100000 500\n200000 1000\n300000 1500\n400000 2000\n500000 2500\n", "250 0\n", "777 7\n77 7777\n177 7771\n277 7177\n377 7717\n477 7771\n577 1777\n677 7177\n", "888 8\n88 123\n188 456\n288 789\n388 101\n488 202\n588 303\n688 404\n788 505\n", "999 5\n9 321\n99 432\n189 543\n279 654\n369 765\n", "1234 4\n123 9876\n234 8765\n345 7654\n456 6543\n", "8 4\n1 10\n4 20\n5 15\n8 25\n", "333 3\n33 444\n133 555\n233 666\n", "1000000 2\n500000 777777\n750000 888888\n", "42424242 2\n24242 424242\n42424 242424\n", "31 7\n1 123\n4 456\n6 789\n10 101\n13 202\n16 303\n23 404\n"]}
{"name": "1445_B. Elimination", "description": "Input\n\nYou need to process t test cases.\n\nThe first line contains an integer t (1 <= t <= 3025) --- the number of test cases. Then descriptions of t test cases follow.\n\nThe first line of each test case contains four integers a, b, c, d (0 <= a,\\,b,\\,c,\\,d <= 9; d <= a; b <= c). \n\nOne can show that for any test case satisfying the constraints above, there is at least one olympiad scenario possible.", "testcase": ["1\n4 1 6 1", "1\n0 0 1 0", "1\n3 2 8 2", "1\n1 1 7 0", "1\n9 7 9 6", "1\n2 1 5 1", "1\n6 3 6 2", "1\n8 2 8 0", "1\n7 4 7 3", "1\n5 1 5 1", "1\n3 0 4 0", "1\n2 2 3 1", "1\n4 3 8 3", "1\n2 0 6 1", "1\n3 1 3 1", "1\n9 4 9 1", "1\n7 6 8 5", "1\n5 2 9 2", "1\n6 1 7 0", "1\n1 0 6 1", "1\n0 0 2 0", "1\n8 7 8 6", "1\n7 3 7 2", "1\n5 0 5 0", "1\n6 5 6 4", "1\n4 1 7 0", "1\n2 2 2 0", "1\n1 1 4 1", "1\n3 2 3 1", "1\n8 4 9 4"]}
{"name": "146_B. Lucky Mask", "description": "Input\n\nThe only line contains two integers a and b (1 <= a, b <= 105). It is guaranteed that number b is lucky.", "testcase": ["1 7", "2 47", "5 73", "10 79", "12 37", "15 41", "21 67", "23 71", "31 77", "40 74", "57 47", "60 37", "69 73", "75 77", "82 71", "91 37", "94 47", "99 79", "100 73", "107 71", "113 47", "124 41", "136 73", "145 41", "152 67", "160 37", "173 77", "181 73", "192 47", "199 79"]}
{"name": "1495_D. BFS Trees", "description": "Input\n\nThe first line contains two integers n, m (1 <= n <= 400, 0 <= m <= 600) --- the number of vertices and the number of edges in the graph.\n\nThe i-th of the next m lines contains two integers a_i, b_i (1 <= a_i, b_i <= n, a_i < b_i), representing an edge connecting a_i and b_i.\n\nIt is guaranteed that all edges are distinct and the graph is connected.", "testcase": ["2 1\n1 2", "3 2\n1 2\n2 3", "3 3\n1 2\n1 3\n2 3", "4 3\n1 2\n2 3\n3 4", "4 4\n1 2\n1 3\n2 4\n3 4", "4 5\n1 2\n2 3\n3 4\n4 1\n1 3", "4 6\n1 2\n2 3\n3 4\n4 1\n1 3\n2 4", "5 4\n1 2\n2 3\n3 4\n4 5", "5 5\n1 2\n2 3\n3 4\n4 5\n1 5", "5 6\n1 2\n2 3\n3 4\n4 5\n1 3\n2 4", "5 7\n1 2\n2 3\n3 4\n4 5\n1 3\n2 4\n1 4", "5 8\n1 2\n2 3\n3 4\n4 5\n1 3\n2 4\n1 4\n2 5", "5 9\n1 2\n2 3\n3 4\n4 5\n1 3\n2 4\n1 4\n2 5\n3 5", "5 10\n1 2\n2 3\n3 4\n4 5\n1 3\n2 4\n1 4\n2 5\n3 5\n1 5", "6 5\n1 2\n2 3\n3 4\n4 5\n5 6", "6 6\n1 2\n2 3\n3 4\n4 5\n5 6\n1 6", "6 7\n1 2\n2 3\n3 4\n4 5\n5 6\n1 6\n2 4", "6 8\n1 2\n2 3\n3 4\n4 5\n5 6\n1 6\n2 4\n3 5", "6 9\n1 2\n2 3\n3 4\n4 5\n5 6\n1 6\n2 4\n3 5\n1 4", "7 6\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7", "7 7\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n1 7", "7 8\n1 2\n2 3\n2 4\n3 5\n4 6\n5 7\n6 1\n7 3", "7 9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 1\n1 3\n2 5", "7 10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 1\n1 3\n2 5\n4 7", "8 7\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8", "8 8\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 1", "8 9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 1\n1 3", "8 10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 1\n1 3\n2 4", "9 8\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9", "9 9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n1 9"]}
{"name": "1519_A. Red and Blue Beans", "description": "Input\n\nThe first line contains the single integer t (1 <= t <= 1000) --- the number of test cases.\n\nThe first and only line of each test case contains three integers r, b, and d (1 <= r, b <= 10^9; 0 <= d <= 10^9) --- the number of red and blue beans and the maximum absolute difference in each packet.", "testcase": ["1\n2 3 1", "1\n1000000000 500000000 499999999", "1\n10 10 0", "1\n999999999 1000000000 1", "1\n123456789 987654321 87654321", "1\n1 1 0", "1\n2 2 0", "1\n100 200 99", "1\n444444444 555555555 111111111", "1\n847584 4839485 1000000000", "1\n123 321 198", "1\n1 2 1", "1\n999999901 100000000 98", "1\n500000000 500000000 0", "1\n234567890 123456789 111111101", "1\n10 20 10", "1\n100000000 99999999 1", "1\n38 47 9", "1\n1234567 7654321 6418649", "1\n91234567 12345678 78888889", "1\n100 100000000 99999900", "1\n945 183 76", "1\n17 17 0", "1\n11 22 11", "1\n250000000 750000000 500000000", "1\n99999999 88888888 11111111", "1\n222222222 333333333 111111111", "1\n31415926 27182818 4233108", "1\n16180339 14142135 2038204", "1\n1000000000 500000000 500000000"]}
{"name": "173_B. Chamber of Secrets", "description": "Input\n\nThe first line of the input contains two integer numbers n and m (2 <= n, m <= 1000). Each of the next n lines contains m characters. Each character is either \".\" or \"#\" and represents one cell of the Chamber grid. It's \".\" if the corresponding cell is empty and \"#\" if it's a regular column.", "testcase": ["2 2\n..\n..", "2 2\n.#\n..", "2 2\n..\n#.", "2 2\n.#\n#.", "2 2\n##\n##", "3 3\n...\n.#.\n...", "3 3\n###\n.#.\n###", "3 3\n###\n###\n###", "3 3\n...\n...\n...", "3 4\n....\n.##.\n....", "3 4\n####\n####\n####", "4 2\n..\n..\n#.\n.#", "4 3\n###\n..#\n#..\n###", "4 4\n....\n....\n....\n....", "4 4\n####\n####\n####\n####", "5 5\n.....\n..#..\n.....\n.....\n.#...", "5 5\n#####\n#####\n#####\n#####\n#####", "5 6\n......\n.#..#.\n......\n......\n......", "6 2\n..\n..\n..\n..\n..\n..", "6 3\n###\n#.#\n###\n#.#\n###\n#.#", "6 6\n......\n...#..\n......\n......\n......\n......", "7 7\n.......\n...#...\n.......\n.......\n...#...\n.......\n.......", "7 7\n#######\n#######\n#######\n#######\n#######\n#######\n#######", "8 5\n.....\n.#.#.\n.....\n.....\n.....\n.#.#.\n.....\n.....", "8 8\n........\n........\n........\n........\n........\n........\n........\n........", "9 4\n....\n....\n....\n#...\n....\n....\n....\n....\n....", "9 9\n.........\n.........\n.........\n.........\n.........\n.........\n.........\n.........\n.........", "10 10\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n..........", "10 10\n##########\n##########\n##########\n##########\n##########\n##########\n##########\n##########\n##########\n##########", "100 100\n"]}
{"name": "315_A. Sereja and Bottles", "description": "Input\n\nThe first line contains integer n (1 <= n <= 100) --- the number of bottles. The next n lines contain the bottles' description. The i-th line contains two integers ai, bi (1 <= ai, bi <= 1000) --- the description of the i-th bottle.", "testcase": ["1\n100 200", "2\n10 20\n30 40", "3\n123 456\n789 101\n112 131", "4\n15 16\n27 28\n39 40\n50 60", "5\n1 1000\n2 999\n3 998\n4 997\n5 996", "6\n111 222\n333 444\n555 666\n777 888\n999 1000\n100 1", "7\n100 100\n200 200\n300 300\n400 400\n500 500\n600 600\n700 700", "8\n20 15\n30 25\n40 35\n50 45\n60 55\n70 65\n80 75\n90 85", "9\n11 22\n33 44\n55 66\n77 88\n99 101\n102 103\n104 105\n106 107\n108 109", "10\n5 8\n13 21\n34 55\n89 144\n233 377\n610 987\n1597 2584\n4181 6765\n10946 17711\n28657 46368", "11\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n9 9\n10 10\n11 11", "12\n11 12\n13 14\n15 16\n17 18\n19 20\n21 22\n23 24\n25 26\n27 28\n29 30\n31 32\n33 34", "13\n50 50\n100 100\n150 150\n200 200\n250 250\n300 300\n350 350\n400 400\n450 450\n500 500\n550 550\n600 600\n650 650", "14\n14 88\n88 14\n51 99\n99 51\n2 4\n4 2\n1000 500\n500 1000\n75 25\n25 75\n37 73\n73 37\n42 24\n24 42", "15\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16", "16\n101 202\n103 204\n105 206\n107 208\n109 210\n111 212\n113 214\n115 216\n117 218\n119 220\n121 222\n123 224\n125 226\n127 228\n129 230\n131 232", "17\n23 230\n45 450\n67 670\n89 890\n23 230\n45 450\n67 670\n89 890\n23 230\n45 450\n67 670\n89 890\n23 230\n45 450\n67 670\n89 890\n23 235", "18\n1 10\n2 20\n3 30\n4 40\n5 50\n6 60\n7 70\n8 80\n9 90\n10 100\n11 110\n12 120\n13 130\n14 140\n15 150\n16 160\n17 170\n18 180", "19\n99 199\n198 297\n297 396\n396 495\n495 594\n594 693\n693 792\n792 891\n891 990\n990 9\n9 108\n108 207\n207 306\n306 405\n405 504\n504 603\n603 702\n702 801\n801 900", "20\n234 567\n345 678\n456 789\n567 890\n678 901\n789 1012\n890 1123\n901 1234\n1012 1345\n1123 1456\n1234 1567\n1345 1678\n1456 1789\n1567 1890\n1678 1901\n1789 2012\n1890 2123\n1901 2234\n2012 2345\n2123 2456", "21\n33 66\n66 33\n99 99\n132 165\n165 132\n198 231\n231 198\n264 297\n297 264\n330 363\n363 330\n396 429\n429 396\n462 495\n495 462\n528 561\n561 528\n594 627\n627 594\n660 693\n693 660", "22\n22 44\n44 66\n66 88\n88 22\n22 44\n44 66\n66 88\n88 22\n22 44\n44 66\n66 88\n88 22\n22 44\n44 66\n66 88\n88 22\n22 44\n44 66\n66 88\n88 22\n22 44\n44 66", "23\n220 221\n222 223\n224 225\n226 227\n228 229\n230 231\n232 233\n234 235\n236 237\n238 239\n240 241\n242 243\n244 245\n246 247\n248 249\n250 251\n252 253\n254 255\n256 257\n258 259\n260 261\n262 263\n264 265", "24\n50 51\n52 53\n54 55\n56 57\n58 59\n60 61\n62 63\n64 65\n66 67\n68 69\n70 71\n72 73\n74 75\n76 77\n78 79\n80 81\n82 83\n84 85\n86 87\n88 89\n90 91\n92 93\n94 95\n96 97", "25\n215 431\n432 648\n649 865\n866 1081\n1082 1298\n1299 1515\n1516 1732\n1733 1949\n1950 2166\n2167 2383\n2384 2600\n2601 2817\n2818 3034\n3035 3251\n3252 3468\n3469 3685\n3686 3902\n3903 4119\n4119 4335\n4336 4552\n4553 4769\n4769 4985\n4986 5202\n5203 5419\n5419 5635", "26\n10 11\n12 13\n14 15\n16 17\n18 19\n20 21\n22 23\n24 25\n26 27\n28 29\n30 31\n32 33\n34 35\n36 37\n38 39\n40 41\n42 43\n44 45\n46 47\n48 49\n50 51\n52 53\n54 55\n56 57\n58 59\n60 61", "27\n3 1\n6 2\n9 3\n12 4\n15 5\n18 6\n21 7\n24 8\n27 9\n30 10\n33 11\n36 12\n39 13\n42 14\n45 15\n48 16\n51 17\n54 18\n57 19\n60 20\n63 21\n66 22\n69 23\n72 24\n75 25\n78 26\n81 27", "28\n40 80\n80 40\n120 60\n60 120\n100 200\n200 100\n240 80\n80 240\n160 320\n320 160\n360 120\n120 360\n400 800\n800 400\n480 160\n160 480\n560 280\n280 560\n640 320\n320 640\n720 360\n360 720\n800 400\n400 800\n880 440\n440 880\n960 480\n480 960", "29\n145 290\n290 145\n435 870\n870 435\n145 290\n290 145\n435 870\n870 435\n145 290\n290 145\n435 870\n870 435\n145 290\n290 145\n435 870\n870 435\n145 290\n290 145\n435 870\n870 435\n145 290\n290 145\n435 870\n870 435\n145 290\n290 145\n435 870\n870 435\n145 290", "30\n1000 999\n999 1000\n998 997\n997 998\n996 995\n995 996\n994 993\n993 994\n992 991\n991 992\n990 989\n989 990\n988 987\n987 988\n986 985\n985 986\n984 983\n983 984\n982 981\n981 982\n980 979\n979 980\n978 977\n977 978\n976 975\n975 976\n974 973\n973 974\n972 971\n971 972"]}
{"name": "337_C. Quiz", "description": "Input\n\nThe single line contains three space-separated integers n, m and k (2 <= k <= n <= 109; 0 <= m <= n).", "testcase": ["2 0 2", "3 1 2", "4 2 3", "5 3 3", "6 4 4", "7 5 4", "8 6 5", "9 6 6", "10 7 5", "20 10 6", "30 15 7", "40 20 8", "50 25 9", "60 30 10", "70 35 11", "80 40 12", "90 45 13", "100 50 14", "200 100 15", "300 150 16", "400 200 17", "500 250 18", "600 300 19", "700 350 20", "800 400 21", "900 450 22", "1000 500 23", "2000 1000 24", "5000 2500 25", "1000000000 500000000 26"]}
{"name": "35_E. Parade", "description": "Input\n\nThe first input line contains integer n (1 <= n <= 100000). Then follow n lines, each containing three integers hi, li, ri (1 <= hi <= 109, - 109 <= li < ri <= 109).", "testcase": ["3\n10 1 100\n20 2 200\n15 -50 30", "1\n8 -10 10", "5\n30 0 60\n18 -5 5\n25 -200 150\n40 -20 20\n35 -100 0", "7\n1000000000 -1000000000 1000000000\n500000000 -999999999 999999999\n700000000 -50000000 50000000\n300000000 -400000000 400000000\n200000000 -300000000 300000000\n100000000 -200000000 200000000\n800000000 -100000000 100000000", "4\n230 32 123\n432 312 543\n654 -543 765\n789 -321 890", "2\n1000000000 -1000000000 0\n1 0 1000000000", "10\n1 -1 0\n2 -2 1\n3 -3 2\n4 -4 3\n5 -5 4\n6 -6 5\n7 -7 6\n8 -8 7\n9 -9 8\n10 -10 9", "6\n987654321 -987654320 987654321\n123456789 -123456788 123456789\n99999999 -99999998 99999999\n88888888 -88888887 88888888\n77777777 -77777776 77777777\n66666666 -66666665 66666666", "2\n1000000000 -500000000 500000001\n123456789 -1234 567890", "8\n2048 -1024 1025\n4096 -2048 2049\n8192 -4096 4097\n16384 -8192 8193\n32768 -16384 16385\n65536 -32768 32769\n131072 -65536 65537\n262144 -131072 131073", "11\n20 -10 30\n21 -9 31\n22 -8 32\n23 -7 33\n24 -6 34\n25 -5 35\n26 -4 36\n27 -3 37\n28 -2 38\n29 -1 39\n30 0 40", "4\n42 -7 35\n84 -21 63\n126 -35 91\n168 -49 119", "3\n17 -8 9\n34 -17 17\n51 -25 26", "5\n99999999 -88888 88888\n88888888 -77777 77777\n77777777 -66666 66666\n66666666 -55555 55555\n55555555 -44444 44444", "1\n500 -1000 1000", "9\n450 50 500\n430 30 480\n410 10 460\n390 -10 440\n370 -30 420\n350 -50 400\n330 -70 380\n310 -90 360\n290 -110 340", "4\n1024 -512 -511\n2048 -1024 -1023\n4096 -2048 -2047\n8192 -4096 -4095", "12\n23 -5 19\n46 -10 37\n69 -15 55\n92 -20 73\n115 -25 91\n138 -30 109\n161 -35 127\n184 -40 145\n207 -45 163\n230 -50 181\n253 -55 199\n276 -60 217", "14\n1000000000 999999999 -999999999\n900000000 899999999 -899999999\n800000000 799999999 -799999999\n700000000 699999999 -699999999\n600000000 599999999 -599999999\n500000000 499999999 -499999999\n400000000 399999999 -399999999\n300000000 299999999 -299999999\n200000000 199999999 -199999999\n100000000 99999999 -99999999\n10000000 9999999 -9999999\n1000000 999999 -999999\n100000 99999 -99999\n10000 9999 -9999", "6\n123 100 124\n246 -100 247\n369 -200 370\n492 -300 493\n615 -400 616\n738 -500 739", "3\n1 -1000000000 1000000000\n2 0 1\n3 1 2", "7\n2 -1 1\n4 -3 3\n6 -5 5\n8 -7 7\n10 -9 9\n12 -11 11\n14 -13 13", "5\n1234 0 2468\n2468 -1234 1234\n3702 -2468 0\n4936 -3702 -1234\n6170 -4936 -2468", "5\n1000000000 -1 1\n999999999 -2 2\n999999998 -3 3\n999999997 -4 4\n999999996 -5 5", "1\n1000 -5000 5001", "2\n123456789 123456788 -123456788\n987654321 -987654320 987654320", "3\n100 -100 101\n200 -101 202\n300 -202 303", "8\n25 24 -24\n50 -25 25\n75 -50 50\n100 -75 75\n125 -100 100\n150 -125 125\n175 -150 150\n200 -175 175", "4\n1 0 1\n2 -1 2\n3 -2 3\n4 -3 4", "5\n11 -5 6\n22 -16 7\n33 -27 7\n44 -38 7\n55 -49 7", "6\n2 -1 0\n4 -2 1\n6 -3 2\n8 -4 3\n10 -5 4\n12 -6 5", "9\n1 0 2\n3 1 4\n5 2 6\n7 3 8\n9 4 10\n11 5 12\n13 6 14\n15 7 16\n17 8 18", "10\n5 -5 0\n10 0 5\n20 -5 10\n25 0 15\n30 -5 20\n35 0 25\n40 -5 30\n45 0 35\n50 -5 40\n55 0 45"]}
{"name": "383_C. Propagating tree", "description": "Input\n\nThe first line contains two integers n and m (1 <= n, m <= 200000). The second line contains n integers a1, a2, ..., an (1 <= ai <= 1000). Each of the next n--1 lines contains two integers vi and ui (1 <= vi, ui <= n), meaning that there is an edge between nodes vi and ui.\n\nEach of the next m lines contains a query in the format described above. It is guaranteed that the following constraints hold for all queries: 1 <= x <= n, 1 <= val <= 1000.", "testcase": ["2 1\n1 2\n1 2\n1 500", "3 2\n100 200 300\n1 2\n2 3\n3 800\n1 100", "4 3\n10 20 30 40\n1 2\n2 3\n3 4\n4 60\n1 15\n2 25", "5 2\n5 10 15 20 25\n1 2\n2 3\n3 4\n4 5\n5 17\n3 40", "6 1\n100 200 300 400 500 600\n1 2\n1 3\n2 4\n2 5\n3 6\n6 700", "7 2\n7 14 21 28 35 42 49\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n5 37\n6 49", "8 2\n50 100 150 200 250 300 350 400\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n5 250\n8 500", "9 3\n1 1 1 1 1 1 1 1 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n3 1\n6 1\n9 1", "10 2\n1000 900 800 700 600 500 400 300 200 100\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n1 1000\n10 100", "4 2\n50 100 100 50\n1 2\n2 3\n3 4\n2 100\n4 50", "5 3\n1 2 3 4 5\n1 2\n2 3\n3 4\n4 5\n2 2\n3 3\n5 5", "6 1\n333 666 999 333 666 999\n1 2\n2 3\n3 4\n4 5\n5 6\n4 666", "7 2\n100 200 300 400 500 600 700\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n7 100\n6 300", "8 3\n10 20 30 40 50 60 70 80\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n2 15\n4 35\n8 80", "9 2\n9 18 27 36 45 54 63 72 81\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n2 24\n7 70", "10 2\n2 4 6 8 10 12 14 16 18 20\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n1 3\n10 19", "11 3\n10 9 8 7 6 5 4 3 2 1 11\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n3 8\n9 2\n11 11", "12 3\n12 34 56 78 90 12 34 56 78 90 12 34\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8\n4 9\n5 10\n5 11\n6 12\n2 34\n7 56\n11 12", "13 2\n13 26 39 52 65 78 91 13 26 39 52 65 78\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n1 13\n13 26", "14 2\n50 100 150 200 250 300 350 400 450 500 550 600 650 700\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n5 300\n14 700", "15 3\n15 30 45 60 75 90 105 120 135 150 165 180 195 210 225\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n3 50\n7 120\n15 225", "16 2\n100 200 300 400 500 600 700 800 900 1000 900 800 700 600 500 400\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n11 850\n16 400", "17 3\n17 34 51 68 85 102 119 136 153 170 187 204 221 238 255 272 289\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n1 20\n9 153\n17 300", "18 1\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n9 5", "19 2\n19 38 57 76 95 114 133 152 171 190 209 228 247 266 285 304 323 342 361\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8\n4 9\n5 10\n5 11\n6 12\n6 13\n7 14\n7 15\n8 16\n8 17\n9 18\n9 19\n4 25\n15 300", "20 3\n10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n2 10\n10 10\n20 10", "21 1\n21 42 63 84 105 126 147 168 189 210 231 252 273 294 315 336 357 378 399 420 441\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8\n4 9\n5 10\n5 11\n6 12\n6 13\n7 14\n7 15\n8 16\n8 17\n9 18\n9 19\n10 20\n10 21\n11 240", "22 2\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n2 5\n22 43", "23 3\n23 46 69 92 115 138 161 184 207 230 253 276 299 322 345 368 391 414 437 460 483 506 529\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n3 50\n7 160\n23 520", "24 1\n24 48 72 96 120 144 168 192 216 240 264 288 312 336 360 384 408 432 456 480 504 528 552 576\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n5 120", "25 2\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n4 100\n25 100"]}
{"name": "404_B. Marathon", "description": "Input\n\nThe first line contains two space-separated real numbers a and d (1 <= a, d <= 105), given with precision till 4 decimal digits after the decimal point. Number a denotes the length of the square's side that describes the stadium. Number d shows that after each d meters Valera gets an extra drink.\n\nThe second line contains integer n (1 <= n <= 105) showing that Valera needs an extra drink n times.", "testcase": ["1.0001 1.0001\n1", "2.3456 1.2345\n2", "105.0000 105.0000\n100000", "47.1234 47.1234\n56789", "12.3456 3.2109\n7890", "15.6789 4.3210\n12345", "33.3333 7.8910\n34567", "99.9999 88.8888\n54321", "56.7890 12.3456\n9876", "21.0987 9.8765\n6789", "75.4321 20.1234\n2345", "82.3456 30.9876\n5432", "45.6789 10.1112\n67890", "67.8901 5.4321\n78901", "32.1234 2.3456\n89012", "91.2345 3.2109\n90123", "55.5555 55.5555\n11111", "66.6666 66.6666\n22222", "77.7777 77.7777\n33333", "88.8888 88.8888\n44444", "99.9999 99.9999\n55555", "10.1010 10.1010\n12321", "20.2020 20.2020\n43234", "30.3030 30.3030\n54345", "40.4040 40.4040\n65456", "50.5050 50.5050\n76567", "60.6060 60.6060\n87678", "70.7070 70.7070\n98789", "80.8080 80.8080\n123456", "90.9090 90.9090\n987654"]}
{"name": "431_C. k-Tree", "description": "Input\n\nA single line contains three space-separated integers: n, k and d (1 <= n, k <= 100; 1 <= d <= k).", "testcase": ["1 1 1", "2 5 3", "10 10 5", "25 50 25", "34 67 33", "5 10 5", "60 70 69", "1 100 1", "99 99 50", "20 30 10", "6 8 6", "15 15 15", "13 60 13", "77 80 77", "70 100 70", "3 5 2", "7 7 4", "89 95 89", "11 11 11", "44 60 44", "55 78 50", "18 73 17", "48 99 46", "19 19 1", "29 29 10", "100 100 100", "56 87 55", "21 30 20", "66 66 1", "97 98 97"]}
{"name": "453_E. Little Pony and Lord Tirek", "description": "Input\n\nThe first line contains an integer n (1 <= n <= 105) --- the number of ponies. Each of the next n lines contains three integers si, mi, ri (0 <= si <= mi <= 105; 0 <= ri <= 105), describing a pony. \n\nThe next line contains an integer m (1 <= m <= 105) --- the number of instructions. Each of the next m lines contains three integers ti, li, ri (0 <= ti <= 109; 1 <= li <= ri <= n), describing an instruction of Lord Tirek. The instructions are given in strictly increasing order of ti (all ti are distinct).", "testcase": ["3\n10 20 5\n15 15 10\n5 10 2\n2\n100 1 2\n200 1 3", "2\n0 0 0\n1 1 1\n1\n1 1 2", "4\n0 1 0\n1 2 1\n2 3 2\n3 4 3\n3\n5 1 1\n10 2 4\n15 1 4", "5\n10 15 5\n20 25 10\n30 35 15\n40 45 20\n50 55 25\n4\n100 1 3\n200 2 5\n300 3 5\n400 1 4", "1\n50 100 50\n1\n1 1 1", "10\n2 5 1\n3 6 2\n4 7 3\n5 8 4\n6 9 5\n7 10 6\n8 11 7\n9 12 8\n10 13 9\n11 14 10\n5\n10 1 5\n20 6 10\n30 1 10\n40 2 9\n50 3 8", "3\n1 2 0\n2 3 1\n3 4 2\n2\n2 1 1\n4 2 3", "7\n0 5 0\n1 4 1\n2 3 2\n3 2 3\n4 1 4\n5 0 5\n6 6 6\n3\n7 1 4\n14 3 6\n21 1 7", "6\n0 10 0\n10 10 5\n20 30 10\n30 40 15\n40 50 20\n50 60 25\n2\n100 1 6\n200 3 4", "2\n1 10 0\n5 5 0\n1\n123456789 1 2", "5\n10 15 0\n12 16 1\n14 17 2\n16 18 3\n18 19 4\n1\n987654321 1 5", "8\n0 2 1\n1 3 2\n2 4 3\n3 5 4\n4 6 5\n5 7 6\n6 8 7\n7 9 8\n2\n10 3 7\n15 2 5", "9\n3 3 0\n6 6 0\n9 9 0\n12 12 0\n15 15 0\n18 18 0\n21 21 0\n24 24 0\n27 27 0\n3\n1 1 9\n2 2 9\n3 3 9", "4\n10 20 10\n20 30 15\n30 40 20\n40 50 25\n3\n11 1 2\n22 2 3\n33 3 4", "3\n2 2 1\n4 4 2\n6 6 3\n2\n5 1 3\n10 1 3", "7\n5 10 5\n10 15 10\n15 20 15\n20 25 20\n25 30 25\n30 35 30\n35 40 35\n2\n7 1 5\n8 2 7", "5\n1 2 1\n2 3 2\n3 4 3\n4 5 4\n5 6 5\n2\n10 1 3\n15 2 5", "6\n6 7 1\n7 8 1\n8 9 1\n9 10 1\n10 11 1\n11 12 1\n1\n23 1 6", "3\n50 100 25\n100 150 50\n150 200 75\n2\n500 1 1\n1000 2 3", "7\n0 0 0\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n5 5 5\n6 6 6\n4\n10 1 3\n20 4 7\n30 1 4\n40 3 6", "2\n0 1 0\n1 1 0\n3\n5 1 2\n10 1 2\n20 1 2", "1\n10000 10000 5000\n1\n10000 1 1", "8\n0 0 0\n5 5 5\n10 10 10\n15 15 15\n20 20 20\n25 25 25\n30 30 30\n35 35 35\n3\n50 1 4\n100 4 8\n150 3 6", "9\n3 6 3\n6 9 6\n9 12 9\n12 15 12\n15 18 15\n18 21 18\n21 24 21\n24 27 24\n27 30 27\n2\n30 1 9\n60 2 8", "4\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n2\n5 1 1\n10 1 4", "10\n0 10 0\n10 20 5\n20 30 10\n30 40 15\n40 50 20\n50 60 25\n60 70 30\n70 80 35\n80 90 40\n90 100 45\n4\n100 1 10\n200 5 10\n300 1 5\n400 6 9", "6\n99 100 98\n98 99 97\n97 98 96\n96 97 95\n95 96 94\n94 95 93\n2\n123 1 3\n456 4 6", "3\n1 1 0\n2 2 1\n3 3 2\n3\n1 1 2\n2 2 3\n3 1 3", "11\n0 10 0\n10 20 5\n20 30 10\n30 40 15\n40 50 20\n50 60 25\n60 70 30\n70 80 35\n80 90 40\n90 100 45\n100 110 50\n3\n500 3 8\n1000 1 11\n2000 4 10", "5\n25 30 20\n30 35 25\n35 40 30\n40 45 35\n45 50 40\n2\n50 2 4\n100 1 5", "12\n5 10 5\n10 10 5\n15 20 10\n20 20 10\n25 30 15\n30 30 15\n35 40 20\n40 40 20\n45 50 25\n50 50 25\n55 60 30\n60 60 30\n4\n250 1 6\n500 7 12\n750 4 9\n1000 2 11"]}
{"name": "476_C. Dreamoon and Sums", "description": "Input\n\nThe single line of the input contains two integers a, b (1 <= a, b <= 107).", "testcase": ["1 1", "2 3", "10000000 10000000", "789456 123456", "52345 7890", "8675309 98765", "34567 76543", "23456 65432", "12345 54321", "9999999 8888888", "1111111 2222222", "3333333 4444444", "5555555 6666666", "7777777 8888888", "222222 333333", "444444 555555", "4321 1234", "8765 5678", "67890 12345", "98765 43210", "1098765 67890", "1234567 7654321", "999999 1000000", "888888 999999", "77777 88888", "66666 77777", "312 123", "213 321", "432 234", "654 456"]}
{"name": "49_D. Game", "description": "Input\n\nThe first line contains number n (1 <= n <= 1000) which represents the stripe's length. The second line contains exactly n symbols --- the line's initial coloring. 0 corresponds to a white square, 1 corresponds to a black one.", "testcase": ["1\n0", "1\n1", "2\n00", "2\n01", "2\n10", "2\n11", "3\n000", "3\n001", "3\n010", "3\n011", "3\n100", "3\n101", "3\n110", "3\n111", "4\n0000", "4\n0001", "4\n0010", "4\n0011", "4\n0100", "4\n0101", "4\n0110", "4\n0111", "4\n1000", "4\n1001", "4\n1010", "4\n1011", "4\n1100", "4\n1101", "4\n1110", "4\n1111"]}
{"name": "599_C. Day at the Beach", "description": "Input\n\nThe first line of the input contains a single integer n (1 <= n <= 100 000) --- the number of castles Spongebob, Patrick and Squidward made from sand during the day.\n\nThe next line contains n integers hi (1 <= hi <= 109). The i-th of these integers corresponds to the height of the i-th castle.", "testcase": ["1\n1", "2\n1 2", "3\n3 2 1", "4\n5 6 7 8", "5\n1 3 3 7 5", "6\n10 9 8 7 6 5", "7\n1 2 3 4 5 6 7", "8\n8 7 6 5 4 3 2 1", "9\n1 2 1 2 1 2 1 2 1", "10\n10 20 30 40 50 60 70 80 90 100", "11\n100 90 80 70 60 50 40 30 20 10 5", "12\n2 4 6 8 10 12 14 16 18 20 22 24", "13\n13 9 5 17 23 29 35 41 47 53 59 65 71", "14\n1 1 1 1 1 1 1 1 1 1 1 1 1 1", "15\n5 10 15 20 25 20 15 10 5 0 5 10 15 20 25", "16\n12345 23456 34567 45678 56789 67890 78901 89012 90123 123 456 789 234 567 890 1234", "17\n1000000000 999999999 888888888 777777777 666666666 555555555 444444444 333333333 222222222 111111111 123456789 987654321 111111111 222222222 333333333 444444444 555555555", "18\n17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 1", "19\n10 9 10 9 10 9 10 9 10 9 10 9 10 9 10 9 10 9 1", "20\n1000000000 900000000 800000000 700000000 600000000 500000000 400000000 300000000 200000000 100000000 99999999 88888888 77777777 66666666 55555555 44444444 33333333 22222222 11111111 10", "21\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "22\n2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1048576 2097152 4194304", "23\n7 14 7 14 7 14 7 14 7 14 7 14 7 14 7 14 7 14 7 14 7 14 7 14 7", "24\n47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47", "25\n100000000 200000000 300000000 400000000 500000000 600000000 700000000 800000000 900000000 1000000000 900000000 800000000 700000000 600000000 500000000 400000000 300000000 200000000 100000000 25", "26\n26 52 78 104 130 156 182 208 234 260 286 312 338 364 390 416 442 468 494 520 546 572 598 624 650 676", "27\n999999996 999999997 999999998 999999999 1000000000 999999999 999999998 999999997 999999996 999999995 999999994 999999993 999999992 999999991 999999990 999999989 999999988 999999987 999999986 999999985 999999984 999999983 999999982 999999981 999999980 999999979 999999978", "28\n1 2 2 1 1 2 2 1 1 2 2 1 1 2 2 1 1 2 2 1 1 2 2 1 1 2 2 1", "29\n1000000000 500000000 1000000000 500000000 1000000000 500000000 1000000000 500000000 1000000000 500000000 1000000000 500000000 1000000000 500000000 1000000000 500000000 1000000000 500000000 1000000000 500000000 1000000000 500000000 1000000000 500000000 1000000000 500000000 1000000000 500000000 1000000000", "30\n2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 101 103 107 109 113"]}
{"name": "620_B. Grandfather Dovlet\u2019s calculator", "description": "Input\n\nThe only line contains two integers a, b (1 <= a <= b <= 106) --- the first and the last number typed by Max.", "testcase": ["1 1000000", "2 999999", "500000 500001", "100000 100000", "123456 654321", "100 200", "1 1", "999999 1000000", "250000 750000", "10 1000", "234567 765432", "111111 222222", "333333 444444", "555555 666666", "777777 888888", "9999 99999", "800000 900000", "600000 700000", "300000 400000", "100000 200000", "98765 98765", "43210 543210", "87654 987654", "34567 456789", "23456 345678", "54321 654321", "111 222", "333 444", "555 666", "777 888"]}
{"name": "735_C. Tennis Championship", "description": "Input\n\nThe only line of the input contains a single integer n (2 <= n <= 1018) --- the number of players to participate in the tournament.", "testcase": ["3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "1000000000000000000"]}
{"name": "75_C. Modified GCD", "description": "Input\n\nThe first line contains two integers a and b, the two integers as described above (1 <= a, b <= 109). The second line contains one integer n, the number of queries (1 <= n <= 104). Then n lines follow, each line contains one query consisting of two integers, low and high (1 <= low <= high <= 109).", "testcase": ["10 20\n5\n1 5\n6 10\n10 15\n15 20\n20 25", "7 14\n3\n3 7\n1 8\n6 14", "110 200\n6\n50 150\n120 220\n180 190\n200 210\n100 200\n110 115", "1000 10000\n7\n1000 2000\n2500 3000\n3500 4500\n5000 5500\n6000 7000\n7500 8500\n9000 10000", "123456789 987654321\n4\n100000000 200000000\n210000000 220000000\n300000000 310000000\n400000000 410000000", "1 1000000000\n8\n1 5\n10 20\n30 40\n100 200\n999999900 1000000000\n500000000 600000000\n700000000 800000000\n900000000 1000000000", "501 1500\n4\n500 600\n700 800\n800 900\n1400 1500", "19999 29999\n5\n20000 21000\n21000 22000\n22100 23000\n24000 25000\n26000 27000", "42 4242\n6\n42 100\n101 300\n300 2000\n2500 3000\n3500 4000\n4000 4242", "500000 800000\n5\n600000 650000\n500000 550000\n700000 750000\n760000 770000\n790000 800000", "1024 2048\n3\n1200 1300\n1400 1500\n1800 1900", "77777 88888\n2\n80000 85000\n86000 87000", "314159 271828\n4\n300000 310000\n320000 330000\n340000 350000\n360000 370000", "999999 1010101\n3\n1000000 1005000\n1006000 1007000\n1008000 1009999", "2000000 3000000\n1\n2750000 2850000", "1234 5678\n3\n1500 2500\n2600 3600\n4000 5200", "333 555\n5\n340 350\n360 370\n380 390\n410 420\n500 510", "99999 199999\n4\n100000 120000\n130000 140000\n150000 160000\n170000 180000", "222222 333333\n3\n230000 240000\n250000 260000\n270000 280000", "98765 123456\n4\n100000 101000\n103000 104000\n106000 107000\n109000 110000", "4444 8888\n3\n4500 4600\n4700 4800\n4900 5000", "50505 60606\n2\n55555 55888\n56000 56500", "112233 445566\n5\n120000 130000\n140000 150000\n200000 210000\n300000 310000\n400000 410000", "555 7777\n3\n600 700\n800 900\n1000 1100", "17000 27000\n4\n17500 18000\n18100 18500\n19000 19500\n20000 20500", "1 10\n10\n1 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10", "999 1999\n3\n999 1099\n1150 1250\n1500 1600", "87654 98765\n4\n88000 88100\n88500 88800\n89000 89300\n90000 90500", "24680 13579\n2\n13000 14000\n15000 16000", "192837465 293746585\n3\n250000000 255000000\n260000000 265000000\n270000000 275000000"]}
{"name": "780_B. The Meeting Place Cannot Be Changed", "description": "Input\n\nThe first line contains single integer n (2 <= n <= 60 000) --- the number of friends.\n\nThe second line contains n integers x1, x2, ..., xn (1 <= xi <= 109) --- the current coordinates of the friends, in meters.\n\nThe third line contains n integers v1, v2, ..., vn (1 <= vi <= 109) --- the maximum speeds of the friends, in meters per second.", "testcase": ["3\n1 2 3\n1 1 1", "4\n10 20 30 40\n2 3 4 5", "2\n100000 200000\n10 20", "5\n1 2 3 4 5\n5 4 3 2 1", "6\n5000 10000 15000 20000 25000 30000\n6 7 8 9 10 11", "2\n123456 789012\n100000 200000", "7\n5 10 15 20 25 30 35\n1 2 3 4 5 6 7", "8\n100 200 300 400 500 600 700 800\n10 20 30 40 50 60 70 80", "9\n111 222 333 444 555 666 777 888 999\n9 8 7 6 5 4 3 2 1", "10\n1000 2000 3000 4000 5000 6000 7000 8000 9000 10000\n100 200 300 400 500 600 700 800 900 1000", "11\n1 1 1 1 1 1 1 1 1 1 1\n100000 90000 80000 70000 60000 50000 40000 30000 20000 10000 99999", "3\n123 456 789\n321 654 987", "12\n10001 10002 10003 10004 10005 10006 10007 10008 10009 10010 10011 10012\n12 11 10 9 8 7 6 5 4 3 2 1", "13\n300 600 900 1200 1500 1800 2100 2400 2700 3000 3300 3600 3900\n1300 1200 1100 1000 900 800 700 600 500 400 300 200 100", "2\n500000000 1000000000\n1000000000 500000000", "14\n7000 14000 21000 28000 35000 42000 49000 56000 63000 70000 77000 84000 91000 98000\n700 1400 2100 2800 3500 4200 4900 5600 6300 7000 7700 8400 9100 9800", "15\n23 46 69 92 115 138 161 184 207 230 253 276 299 322 345\n15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "4\n9001 9002 9003 9004\n401 402 403 404", "16\n80000 160000 240000 320000 400000 480000 560000 640000 720000 800000 880000 960000 1040000 1120000 1200000 1280000\n1600 3200 4800 6400 8000 9600 11200 12800 14400 16000 17600 19200 20800 22400 24000 25600", "6\n234567 345678 456789 567890 678901 789012\n1000000 100000 10000 1000 100 10", "17\n11111 22222 33333 44444 55555 66666 77777 88888 99999 111110 122221 133332 144443 155554 166665 177776 188887\n17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "18\n12 24 36 48 60 72 84 96 108 120 132 144 156 168 180 192 204 216\n1800 1700 1600 1500 1400 1300 1200 1100 1000 900 800 700 600 500 400 300 200 100", "7\n98765 87654 76543 65432 54321 43210 32109\n7654321 6543210 5432109 4321098 3210987 2109876 1098765", "19\n90000 100000 110000 120000 130000 140000 150000 160000 170000 180000 190000 200000 210000 220000 230000 240000 250000 260000 270000\n1900 1800 1700 1600 1500 1400 1300 1200 1100 1000 900 800 700 600 500 400 300 200 100", "20\n111 222 333 444 555 666 777 888 999 1110 1221 1332 1443 1554 1665 1776 1887 1998 2109 2220\n2000 1900 1800 1700 1600 1500 1400 1300 1200 1100 1000 900 800 700 600 500 400 300 200", "8\n6789 7890 8901 9012 1234 2345 3456 4567\n876 987 1098 2109 321 432 543 654", "21\n1001 2002 3003 4004 5005 6006 7007 8008 9009 10010 11011 12012 13013 14014 15015 16016 17017 18018 19019 20020 21021\n2100 2000 1900 1800 1700 1600 1500 1400 1300 1200 1100 1000 900 800 700 600 500 400 300 200 100", "5\n12345 23456 34567 45678 56789\n5432 6543 7654 8765 9876", "22\n2222 4444 6666 8888 11110 13332 15554 17776 19998 22220 24442 26664 28886 31108 33330 35552 37774 39996 42218 44440 46662 48884\n2200 2100 2000 1900 1800 1700 1600 1500 1400 1300 1200 1100 1000 900 800 700 600 500 400 300 200", "9\n500 1000 1500 2000 2500 3000 3500 4000 4500\n9000 8000 7000 6000 5000 4000 3000 2000 1000", "23\n111111 222222 333333 444444 555555 666666 777777 888888 999999 1111110 1222220 1333330 1444440 1555550 1666660 1777770 1888880 1999990 2111100 2222200 2333300 2444400 2555500\n2300 2200 2100 2000 1900 1800 1700 1600 1500 1400 1300 1200 1100 1000 900 800 700 600 500 400 300 200 100"]}
{"name": "803_F. Coprime Subsequences", "description": "Input\n\nThe first line contains one integer number n (1 <= n <= 100000).\n\nThe second line contains n integer numbers a1, a2... an (1 <= ai <= 100000).", "testcase": ["1\n1", "2\n1 2", "3\n3 2 1", "4\n1 2 3 4", "5\n100000 99999 99998 99997 99996", "6\n1 1 1 1 1 1", "7\n2 4 6 8 10 12 14", "8\n100 200 300 400 500 600 700 800", "9\n100000 100000 100000 100000 100000 100000 100000 100000 100000", "10\n999 888 777 666 555 444 333 222 111 1000", "11\n100 200 100 200 300 100 200 300 400 500 600", "12\n1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000", "13\n1 3 5 7 9 11 13 15 17 19 21 23 25", "14\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000", "15\n50 100 150 200 250 300 350 400 450 500 550 600 650 700 750", "16\n100000 99999 100000 99999 100000 99999 100000 99999 100000 99999 100000 99999 100000 99999 100000", "17\n12345 23456 34567 45678 56789 67890 78901 89012 90123 12345 23456 34567 45678 56789", "18\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18", "19\n54321 54321 54321 54321 54321 54321 54321 54321 54321 54321 54321 54321 54321 54321 54321 54321 54321", "20\n11111 22222 33333 44444 55555 66666 77777 88888 99999 100000 88888 77777 66666 55555 44444 33333 22222 11111", "21\n111 211 311 411 511 611 711 811 911 1011 1111 1211 1311 1411 1511 1611 1711 1811 1911 2011", "22\n1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11 11", "23\n50000 50001 50002 50003 50004 50005 50006 50007 50008 50009 50010 50011 50012 50013 50014 50015 50016 50017 50018 50019 50020 50021 50022", "24\n1 1 100000 100000 50000 50000 25000 25000 75000 75000 62500 62500 37500 37500 87500 87500 31250 31250 68750 68750", "25\n25 50 75 100 125 150 175 200 225 250 275 300 325 350 375 400 425 450 475 500 525 550 575 600 625", "26\n26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26", "27\n1000 2000 3000 1000 2000 3000 1000 2000 3000 1000 2000 3000 1000 2000 3000 1000 2000 3000 1000 2000 3000 1000 2000 3000 1000 2000 3000", "28\n28 56 84 112 140 168 196 224 252 280 308 336 364 392 420 448 476 504 532 560 588 616 644 672 700 728 756 784", "29\n123 456 789 1234 5678 91011 121314 151617 181920 212223 242526 272829 303132 333435 363738 394041 424344 454647 484950 515253", "30\n100000 90000 80000 70000 60000 50000 40000 30000 20000 10000 9000 8000 7000 6000 5000 4000 3000 2000 1000 900 800 700 600 500 400 300 200 100 50 25"]}
