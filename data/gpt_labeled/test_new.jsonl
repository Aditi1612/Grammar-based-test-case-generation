{"name": "p02936 AtCoder Beginner Contest 138 - Ki", "description": "Given is a rooted tree with N vertices numbered 1 to N. The root is Vertex 1, and the i-th edge (1 \\leq i \\leq N - 1) connects Vertex a_i and b_i.\n\nEach of the vertices has a counter installed. Initially, the counters on all the vertices have the value 0.\n\nNow, the following Q operations will be performed:\n\n* Operation j (1 \\leq j \\leq Q): Increment by x_j the counter on every vertex contained in the subtree rooted at Vertex p_j.\n\n\n\nFind the value of the counter on each vertex after all operations.\n\nConstraints\n\n* 2 \\leq N \\leq 2 \\times 10^5\n* 1 \\leq Q \\leq 2 \\times 10^5\n* 1 \\leq a_i < b_i \\leq N\n* 1 \\leq p_j \\leq N\n* 1 \\leq x_j \\leq 10^4\n* The given graph is a tree.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN Q\na_1 b_1\n:\na_{N-1} b_{N-1}\np_1 x_1\n:\np_Q x_Q", "grammar": {"productions": ["<S>->[N] [Q] <E_N-1> <PX_Q>", "<E_i>-><E_i-1> a_i b_i", "<E_1>->a_1 b_1", "<PX_i>-><PX_i-1> p_i x_i", "<PX_1>->p_1 x_1"], "constraints": ["2<=N<=2*10^5", "1<=Q<=2*10^5", "1<=a_i<b_i<=N", "1<=p_j<=N", "1<=x_j<=10^4"]}}
{"name": "p02756 AtCoder Beginner Contest 158 - String Formation", "description": "Takahashi has a string S consisting of lowercase English letters.\n\nStarting with this string, he will produce a new one in the procedure given as follows.\n\nThe procedure consists of Q operations. In Operation i (1 \\leq i \\leq Q), an integer T_i is provided, which means the following:\n\n* If T_i = 1: reverse the string S.\n\n* If T_i = 2: An integer F_i and a lowercase English letter C_i are additionally provided.\n\n* If F_i = 1 : Add C_i to the beginning of the string S.\n* If F_i = 2 : Add C_i to the end of the string S.\n\n\n\nHelp Takahashi by finding the final string that results from the procedure.\n\nConstraints\n\n* 1 \\leq |S| \\leq 10^5\n* S consists of lowercase English letters.\n* 1 \\leq Q \\leq 2 \\times 10^5\n* T_i = 1 or 2.\n* F_i = 1 or 2, if provided.\n* C_i is a lowercase English letter, if provided.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS\nQ\nQuery_1\n:\nQuery_Q\n\n\nIn the 3-rd through the (Q+2)-th lines, Query_i is one of the following:\n\n\n1\n\n\nwhich means T_i = 1, and:\n\n\n2 F_i C_i\n\n\nwhich means T_i = 2.", "grammar": {"productions": ["<S>->S <n> Q <n> <Q_L>", "<Q_L_i>-><Q_L_i-1> <n> <Query>", "<Q_L_1>-><Query>", "<Query>->1|2 <s> F_i <s> C_i"], "constraints": ["1<=|S|<=10^5", "S is composed of lowercase English letters only.", "1<=Q<=2*10^5", "T_i is either 1 or 2.", "F_i is either 1 or 2 (if provided).", "C_i is a lowercase English letter (if provided)."]}}
{"name": "p02696 AtCoder Beginner Contest 165 - Floor Function", "description": "Given are integers A, B, and N.\n\nFind the maximum possible value of floor(Ax/B) - A \u00d7 floor(x/B) for a non-negative integer x not greater than N.\n\nHere floor(t) denotes the greatest integer not greater than the real number t.\n\nConstraints\n\n* 1 \u2264 A \u2264 10^{6}\n* 1 \u2264 B \u2264 10^{12}\n* 1 \u2264 N \u2264 10^{12}\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B N", "grammar": {"productions": ["<S>->A <s> B <s> N"], "constraints": ["1<=A<=10^6", "1<=B<=10^12", "1<=N<=10^12"]}}
{"name": "p03013 AtCoder Beginner Contest 129 - Typical Stairs", "description": "There is a staircase with N steps. Takahashi is now standing at the foot of the stairs, that is, on the 0-th step. He can climb up one or two steps at a time.\n\nHowever, the treads of the a_1-th, a_2-th, a_3-th, \\ldots, a_M-th steps are broken, so it is dangerous to set foot on those steps.\n\nHow many are there to climb up to the top step, that is, the N-th step, without setting foot on the broken steps? Find the count modulo 1\\ 000\\ 000\\ 007.\n\nConstraints\n\n* 1 \\leq N \\leq 10^5\n* 0 \\leq M \\leq N-1\n* 1 \\leq a_1 < a_2 < ... < a_M \\leq N-1\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\na_1\na_2\n.\n.\n.\na_M", "grammar": {"productions": ["<S>->[N] <s> [M] <n> <L_M>", "<L_i>-><L_i-1> <n> a_i", "<L_1>->a_1"], "constraints": ["1<=N<=10^5", "0<=M<=N-1", "1<=a_i<=N-1 and a_i < a_(i+1) for all i from 1 to M-1"]}}
{"name": "p02953 AtCoder Beginner Contest 136 - Build Stairs", "description": "There are N squares arranged in a row from left to right. The height of the i-th square from the left is H_i.\n\nFor each square, you will perform either of the following operations once:\n\n* Decrease the height of the square by 1.\n* Do nothing.\n\n\n\nDetermine if it is possible to perform the operations so that the heights of the squares are non-decreasing from left to right.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 10^5\n* 1 \\leq H_i \\leq 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nH_1 H_2 ... H_N", "grammar": {"productions": ["<S>->[N] <n> <L_N>", "<L_i>-><L_i-1> <s> H_i", "<L_1>->H_1"], "constraints": ["1<=N<=10^5", "1<=H_i<=10^9"]}}
{"name": "791_A. Bear and Big Brother", "description": "Bear Limak wants to become the largest of bears, or at least to become larger than his brother Bob.\n\nRight now, Limak and Bob weigh a and b respectively. It's guaranteed that Limak's weight is smaller than or equal to his brother's weight.\n\nLimak eats a lot and his weight is tripled after every year, while Bob's weight is doubled after every year.\n\nAfter how many full years will Limak become strictly larger (strictly heavier) than Bob?\n\nInput\n\nThe only line of the input contains two integers a and b (1 \u2264 a \u2264 b \u2264 10) \u2014 the weight of Limak and the weight of Bob respectively.", "grammar": {"productions": ["<S>->a <s> b"], "constraints": ["1<=a<=10", "1<=b<=10", "a<=b"]}}
{"name": "p02891 AtCoder Grand Contest 039 - Connection and Disconnection", "description": "Given is a string S. Let T be the concatenation of K copies of S. We can repeatedly perform the following operation: choose a character in T and replace it with a different character. Find the minimum number of operations required to satisfy the following condition: any two adjacent characters in T are different.\n\nConstraints\n\n* 1 \\leq |S| \\leq 100\n* S consists of lowercase English letters.\n* 1 \\leq K \\leq 10^9\n* K is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS\nK", "grammar": {"productions": ["<S>->S <n> K"], "constraints": ["1<=|S|<=100", "S consists of lowercase English letters", "1<=K<=10^9"]}}
{"name": "1409_A. Yet Another Two Integers Problem", "description": "You are given two integers a and b.\n\nIn one move, you can choose some integer k from 1 to 10 and add it to a or subtract it from a. In other words, you choose an integer k \u2208 [1; 10] and perform a := a + k or a := a - k. You may use different values of k in different moves.\n\nYour task is to find the minimum number of moves required to obtain b from a.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 2 \u22c5 10^4) \u2014 the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains two integers a and b (1 \u2264 a, b \u2264 10^9).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> a <s> b", "<T_1>->a <s> b"], "constraints": ["1<=T<=2*10^4", "1<=a<=10^9", "1<=b<=10^9"]}}
{"name": "p02660 AtCoder Beginner Contest 169 - Div Game", "description": "Given is a positive integer N. Consider repeatedly applying the operation below on N:\n\n* First, choose a positive integer z satisfying all of the conditions below:\n* z can be represented as z=p^e, where p is a prime number and e is a positive integer;\n* z divides N;\n* z is different from all integers chosen in previous operations.\n* Then, replace N with N/z.\n\n\n\nFind the maximum number of times the operation can be applied.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 10^{12}\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["1<=N<=10^12"]}}
{"name": "p02693 AtCoder Beginner Contest 165 - We Love Golf", "description": "Takahashi the Jumbo will practice golf.\n\nHis objective is to get a carry distance that is a multiple of K, while he can only make a carry distance of between A and B (inclusive).\n\nIf he can achieve the objective, print `OK`; if he cannot, print `NG`.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq A \\leq B \\leq 1000\n* 1 \\leq K \\leq 1000\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nK\nA B", "grammar": {"productions": ["<S>->[K] <n> A <s> B"], "constraints": ["1<=A<=B<=1000", "1<=K<=1000"]}}
{"name": "p02718 AtCoder Beginner Contest 161 - Popular Vote", "description": "We have held a popularity poll for N items on sale. Item i received A_i votes.\n\nFrom these N items, we will select M as popular items. However, we cannot select an item with less than \\dfrac{1}{4M} of the total number of votes.\n\nIf M popular items can be selected, print `Yes`; otherwise, print `No`.\n\nConstraints\n\n* 1 \\leq M \\leq N \\leq 100\n* 1 \\leq A_i \\leq 1000\n* A_i are distinct.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nA_1 ... A_N", "grammar": {"productions": ["<S>->[N] <s> [M] <n> <L_N>", "<L_i>-><L_i-1> <s> A_i", "<L_1>->A_1"], "constraints": ["1<=M<=N<=100", "1<=A_i<=1000"]}}
{"name": "443_A. Anton and Letters", "description": "Recently, Anton has found a set. The set consists of small English letters. Anton carefully wrote out all the letters from the set in one line, separated by a comma. He also added an opening curved bracket at the beginning of the line and a closing curved bracket at the end of the line. \n\nUnfortunately, from time to time Anton would forget writing some letter and write it again. He asks you to count the total number of distinct letters in his set.\n\nInput\n\nThe first and the single line contains the set of letters. The length of the line doesn't exceed 1000. It is guaranteed that the line starts from an opening curved bracket and ends with a closing curved bracket. Between them, small English letters are listed, separated by a comma. Each comma is followed by a space.", "grammar": {"productions": ["<S>-><ob> <L_1> <cb>", "<L_i>-><L_i-1> <s> , <s> <letter>","<L_1>-><letter>", "<ob>->{", "<cb>->}", "<letter>->[a-z]"], "constraints": ["length(S)<=1000", "S starts with <ob> and ends with <cb>", "Only lowercase English letters between <ob> and <cb>", "Each letter followed by a comma and a space except the last one"]}}
{"name": "p03324 AtCoder Beginner Contest 100 - Ringo's Favorite Numbers", "description": "Today, the memorable AtCoder Beginner Contest 100 takes place. On this occasion, Takahashi would like to give an integer to Ringo.\nAs the name of the contest is AtCoder Beginner Contest 100, Ringo would be happy if he is given a positive integer that can be divided by 100 exactly D times.\n\nFind the N-th smallest integer that would make Ringo happy.\n\nConstraints\n\n* D is 0, 1 or 2.\n* N is an integer between 1 and 100 (inclusive).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nD N", "grammar": {"productions": ["<S>->D <s> N"], "constraints": ["D in {0,1,2}", "1<=N<=100"]}}
{"name": "p02862 AtCoder Beginner Contest 145 - Knight", "description": "There is a knight - the chess piece - at the origin (0, 0) of a two-dimensional grid.\n\nWhen the knight is at the square (i, j), it can be moved to either (i+1,j+2) or (i+2, j+1).\n\nIn how many ways can the knight reach the square (X, Y)?\n\nFind the number of ways modulo 10^9 + 7.\n\nConstraints\n\n* 1 \\leq X \\leq 10^6\n* 1 \\leq Y \\leq 10^6\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX Y", "grammar": {"productions": ["<S>->X <s> Y"], "constraints": ["1<=X<=10^6", "1<=Y<=10^6"]}}
{"name": "p03854 AtCoder Beginner Contest 049 - Daydream", "description": "You are given a string S consisting of lowercase English letters. Another string T is initially empty. Determine whether it is possible to obtain S = T by performing the following operation an arbitrary number of times:\n\n* Append one of the following at the end of T: `dream`, `dreamer`, `erase` and `eraser`.\n\nConstraints\n\n* 1\u2266|S|\u226610^5\n* S consists of lowercase English letters.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>->S"], "constraints": ["1<=|S|<=10^5", "S consists of lowercase English letters."]}}
{"name": "469_A. I Wanna Be the Guy", "description": "There is a game called \"I Wanna Be the Guy\", consisting of n levels. Little X and his friend Little Y are addicted to the game. Each of them wants to pass the whole game.\n\nLittle X can pass only p levels of the game. And Little Y can pass only q levels of the game. You are given the indices of levels Little X can pass and the indices of levels Little Y can pass. Will Little X and Little Y pass the whole game, if they cooperate each other?\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 100). \n\nThe next line contains an integer p (0 \u2264 p \u2264 n) at first, then follows p distinct integers a1, a2, ..., ap (1 \u2264 ai \u2264 n). These integers denote the indices of levels Little X can pass. The next line contains the levels Little Y can pass in the same format. It's assumed that levels are numbered from 1 to n.", "grammar": {"productions": ["<S>->[n] <n> [p] <s> <A_p> <n> [q] <s> <B_q>", "<A_i>-><A_i-1> <s> a_i", "<A_1>->a_1", "<B_j>-><B_j-1> <s> b_j", "<B_1>->b_1"], "constraints": ["1<=n<=100", "0<=p<=n", "0<=q<=n", "1<=a_i<=n", "1<=b_j<=n"]}}
{"name": "p03221 AtCoder Beginner Contest 113 - ID", "description": "In Republic of Atcoder, there are N prefectures, and a total of M cities that belong to those prefectures.\n\nCity i is established in year Y_i and belongs to Prefecture P_i.\n\nYou can assume that there are no multiple cities that are established in the same year.\n\nIt is decided to allocate a 12-digit ID number to each city.\n\nIf City i is the x-th established city among the cities that belong to Prefecture i, the first six digits of the ID number of City i is P_i, and the last six digits of the ID number is x.\n\nHere, if P_i or x (or both) has less than six digits, zeros are added to the left until it has six digits.\n\nFind the ID numbers for all the cities.\n\nNote that there can be a prefecture with no cities.\n\nConstraints\n\n* 1 \\leq N \\leq 10^5\n* 1 \\leq M \\leq 10^5\n* 1 \\leq P_i \\leq N\n* 1 \\leq Y_i \\leq 10^9\n* Y_i are all different.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nP_1 Y_1\n:\nP_M Y_M", "grammar": {"productions": ["<S>->[N] <s> [M] <n> <T_M>", "<T_i>-><T_i-1> <n> P_i <s> Y_i", "<T_1>->P_1 <s> Y_1"], "constraints": ["1<=N<=10^5", "1<=M<=10^5", "1<=P_i<=N", "1<=Y_i<=10^9"]}}
{"name": "p03309 AtCoder Beginner Contest 102 - Linear Approximation", "description": "Snuke has an integer sequence A of length N.\n\nHe will freely choose an integer b. Here, he will get sad if A_i and b+i are far from each other. More specifically, the sadness of Snuke is calculated as follows:\n\n* abs(A_1 - (b+1)) + abs(A_2 - (b+2)) + ... + abs(A_N - (b+N))\n\n\n\nHere, abs(x) is a function that returns the absolute value of x.\n\nFind the minimum possible sadness of Snuke.\n\nConstraints\n\n* 1 \\leq N \\leq 2 \\times 10^5\n* 1 \\leq A_i \\leq 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 A_2 ... A_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["1<=N<=2*10^5", "1<=A_i<=10^9"]}}
{"name": "p02762 AtCoder Beginner Contest 157 - Friend Suggestions", "description": "An SNS has N users - User 1, User 2, \\cdots, User N.\n\nBetween these N users, there are some relationships - M friendships and K blockships.\n\nFor each i = 1, 2, \\cdots, M, there is a bidirectional friendship between User A_i and User B_i.\n\nFor each i = 1, 2, \\cdots, K, there is a bidirectional blockship between User C_i and User D_i.\n\nWe define User a to be a friend candidate for User b when all of the following four conditions are satisfied:\n\n* a \\neq b.\n* There is not a friendship between User a and User b.\n* There is not a blockship between User a and User b.\n* There exists a sequence c_0, c_1, c_2, \\cdots, c_L consisting of integers between 1 and N (inclusive) such that c_0 = a, c_L = b, and there is a friendship between User c_i and c_{i+1} for each i = 0, 1, \\cdots, L - 1.\n\n\n\nFor each user i = 1, 2, ... N, how many friend candidates does it have?\n\nConstraints\n\n* All values in input are integers.\n* 2 \u2264 N \u2264 10^5\n* 0 \\leq M \\leq 10^5\n* 0 \\leq K \\leq 10^5\n* 1 \\leq A_i, B_i \\leq N\n* A_i \\neq B_i\n* 1 \\leq C_i, D_i \\leq N\n* C_i \\neq D_i\n* (A_i, B_i) \\neq (A_j, B_j) (i \\neq j)\n* (A_i, B_i) \\neq (B_j, A_j)\n* (C_i, D_i) \\neq (C_j, D_j) (i \\neq j)\n* (C_i, D_i) \\neq (D_j, C_j)\n* (A_i, B_i) \\neq (C_j, D_j)\n* (A_i, B_i) \\neq (D_j, C_j)\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M K\nA_1 B_1\n\\vdots\nA_M B_M\nC_1 D_1\n\\vdots\nC_K D_K", "grammar": {"productions": ["<S>->[N] <s> [M] <s> [K] <n> <P_M> <Q_K>", "<P_i>-><P_i-1> <n> A_i <s> B_i", "<P_1>->A_1 <s> B_1", "<Q_i>-><Q_i-1> <n> C_i <s> D_i", "<Q_1>->C_1 <s> D_i"], "constraints": ["2<=N<=10^5", "0<=M<=10^5", "0<=K<=10^5", "1<=A_i<=N", "1<=B_i<=N", "A_i!=B_i", "1<=C_i<=N", "1<=D_i<=N", "C_i!=D_i", "(A_i, B_i) != (A_j, B_j) for i!=j", "(A_i, B_i) != (B_j, A_j) for i!=j", "(C_i, D_i) != (C_j, D_j) for i!=j", "(C_i, D_i) != (D_j, C_j) for i!=j", "(A_i, B_i) != (C_j, D_j) for i!=j", "(A_i, B_i) != (D_j, C_j) for i!=j"]}}
{"name": "148_A. Insomnia cure", "description": "\u00abOne dragon. Two dragon. Three dragon\u00bb, \u2014 the princess was counting. She had trouble falling asleep, and she got bored of counting lambs when she was nine.\n\nHowever, just counting dragons was boring as well, so she entertained herself at best she could. Tonight she imagined that all dragons were here to steal her, and she was fighting them off. Every k-th dragon got punched in the face with a frying pan. Every l-th dragon got his tail shut into the balcony door. Every m-th dragon got his paws trampled with sharp heels. Finally, she threatened every n-th dragon to call her mom, and he withdrew in panic.\n\nHow many imaginary dragons suffered moral or physical damage tonight, if the princess counted a total of d dragons?\n\nInput\n\nInput data contains integer numbers k, l, m, n and d, each number in a separate line (1 \u2264 k, l, m, n \u2264 10, 1 \u2264 d \u2264 10^5).", "grammar": {"productions": ["<S>->k <n> l <n> m <n> n <n> d"], "constraints": ["1<=k<=10", "1<=l<=10", "1<=m<=10", "1<=n<=10", "1<=d<=10^5"]}}
{"name": "1353_B. Two Arrays And Swaps", "description": "You are given two arrays a and b both consisting of n positive (greater than zero) integers. You are also given an integer k.\n\nIn one move, you can choose two indices i and j (1 \u2264 i, j \u2264 n) and swap a_i and b_j (i.e. a_i becomes b_j and vice versa). Note that i and j can be equal or different (in particular, swap a_2 with b_2 or swap a_3 and b_9 both are acceptable moves).\n\nYour task is to find the maximum possible sum you can obtain in the array a if you can do no more than (i.e. at most) k such moves (swaps).\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 200) \u2014 the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains two integers n and k (1 \u2264 n \u2264 30; 0 \u2264 k \u2264 n) \u2014 the number of elements in a and b and the maximum number of moves you can do. The second line of the test case contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 30), where a_i is the i-th element of a. The third line of the test case contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 30), where b_i is the i-th element of b.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <n> <L_n> <n> <L_n>", "<T_1>->[n] <n> <n> <L_n> <n> <L_n>", "<L_i>-><L_i-1> <s> a/b_i", "<L_1>->a/b_1"], "constraints": ["1<=t<=200", "1<=n<=30", "0<=k<=n", "1<=a_i<=30", "1<=b_i<=30"]}}
{"name": "492_B. Vanya and Lanterns", "description": "Vanya walks late at night along a straight street of length l, lit by n lanterns. Consider the coordinate system with the beginning of the street corresponding to the point 0, and its end corresponding to the point l. Then the i-th lantern is at the point ai. The lantern lights all points of the street that are at the distance of at most d from it, where d is some positive number, common for all lanterns. \n\nVanya wonders: what is the minimum light radius d should the lanterns have to light the whole street?\n\nInput\n\nThe first line contains two integers n, l (1 \u2264 n \u2264 1000, 1 \u2264 l \u2264 10^9) \u2014 the number of lanterns and the length of the street respectively. \n\nThe next line contains n integers ai (0 \u2264 ai \u2264 l). Multiple lanterns can be located at the same point. The lanterns may be located at the ends of the street.", "grammar": {"productions": ["<S>->[n] <n> <l> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=1000", "1<=l<=10^9", "0<=a_i<=l"]}}
{"name": "p03076 AtCoder Beginner Contest 123 - Five Dishes", "description": "The restaurant AtCoder serves the following five dishes:\n\n* ABC Don (rice bowl): takes A minutes to serve.\n* ARC Curry: takes B minutes to serve.\n* AGC Pasta: takes C minutes to serve.\n* APC Ramen: takes D minutes to serve.\n* ATC Hanbagu (hamburger patty): takes E minutes to serve.\n\n\n\nHere, the time to serve a dish is the time between when an order is placed and when the dish is delivered.\n\nThis restaurant has the following rules on orders:\n\n* An order can only be placed at a time that is a multiple of 10 (time 0, 10, 20, ...).\n* Only one dish can be ordered at a time.\n* No new order can be placed when an order is already placed and the dish is still not delivered, but a new order can be placed at the exact time when the dish is delivered.\n\n\n\nE869120 arrives at this restaurant at time 0. He will order all five dishes. Find the earliest possible time for the last dish to be delivered.\nHere, he can order the dishes in any order he likes, and he can place an order already at time 0.\n\nConstraints\n\n* A, B, C, D and E are integers between 1 and 123 (inclusive).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA\nB\nC\nD\nE", "grammar": {"productions": ["<S>->A <n> B <n> C <n> D <n> E"], "constraints": ["1<=A<=123", "1<=B<=123", "1<=C<=123", "1<=D<=123", "1<=E<=123"]}}
{"name": "p02612 AtCoder Beginner Contest 173 - Payment", "description": "We will buy a product for N yen (the currency of Japan) at a shop.\n\nIf we use only 1000-yen bills to pay the price, how much change will we receive?\n\nAssume we use the minimum number of bills required.\n\nConstraints\n\n* 1 \\leq N \\leq 10000\n* N is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>-><n> N"], "constraints": ["1<=N<=10000"]}}
{"name": "p03137 AtCoder Beginner Contest 117 - Streamline", "description": "We will play a one-player game using a number line and N pieces.\n\nFirst, we place each of these pieces at some integer coordinate.\n\nHere, multiple pieces can be placed at the same coordinate.\n\nOur objective is to visit all of the M coordinates X_1, X_2, ..., X_M with these pieces, by repeating the following move:\n\nMove: Choose a piece and let x be its coordinate. Put that piece at coordinate x+1 or x-1.\n\nNote that the coordinates where we initially place the pieces are already regarded as visited.\n\nFind the minimum number of moves required to achieve the objective.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 10^5\n* 1 \\leq M \\leq 10^5\n* -10^5 \\leq X_i \\leq 10^5\n* X_1, X_2, ..., X_M are all different.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nX_1 X_2 ... X_M", "grammar": {"productions": ["<S>->[N] <s> [M] <n> <L_M>", "<L_i>-><L_i-1> <s> X_i", "<L_1>->X_1"], "constraints": ["1<=N<=10^5", "1<=M<=10^5", "-10^5<=X_i<=10^5"]}}
{"name": "510_A. Fox And Snake", "description": "Fox Ciel starts to learn programming. The first task is drawing a fox! However, that turns out to be too hard for a beginner, so she decides to draw a snake instead.\n\nA snake is a pattern on a n by m table. Denote c-th cell of r-th row as (r, c). The tail of the snake is located at (1, 1), then it's body extends to (1, m), then goes down 2 rows to (3, m), then goes left to (3, 1) and so on.\n\nYour task is to draw this snake for Fox Ciel: the empty cells should be represented as dot characters ('.') and the snake cells should be filled with number signs ('#').\n\nConsider sample tests in order to understand the snake pattern.\n\nInput\n\nThe only line contains two integers: n and m (3 \u2264 n, m \u2264 50). \n\nn is an odd number.", "grammar": {"productions": ["<S>->n <s> m"], "constraints": ["3<=n<=50", "n%2=1", "3<=m<=50"]}}
{"name": "p03032 AtCoder Beginner Contest 128 - equeue", "description": "Your friend gave you a dequeue D as a birthday present.\n\nD is a horizontal cylinder that contains a row of N jewels.\n\nThe values of the jewels are V_1, V_2, ..., V_N from left to right. There may be jewels with negative values.\n\nIn the beginning, you have no jewel in your hands.\n\nYou can perform at most K operations on D, chosen from the following, at most K times (possibly zero):\n\n* Operation A: Take out the leftmost jewel contained in D and have it in your hand. You cannot do this operation when D is empty.\n\n* Operation B: Take out the rightmost jewel contained in D and have it in your hand. You cannot do this operation when D is empty.\n\n* Operation C: Choose a jewel in your hands and insert it to the left end of D. You cannot do this operation when you have no jewel in your hand.\n\n* Operation D: Choose a jewel in your hands and insert it to the right end of D. You cannot do this operation when you have no jewel in your hand.\n\n\n\n\nFind the maximum possible sum of the values of jewels in your hands after the operations.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 50\n* 1 \\leq K \\leq 100\n* -10^7 \\leq V_i \\leq 10^7\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nV_1 V_2 ... V_N", "grammar": {"productions": ["<S>->[N] <s> [K] <n> <V_N>", "<V_i>-><V_i-1> <s> V_i", "<V_1>->V_1"], "constraints": ["1<=N<=50", "1<=K<=100", "-10^7<=V_i<=10^7"]}}
{"name": "p02973 AtCoder Beginner Contest 134 - Sequence Decomposing", "description": "You are given a sequence with N integers: A = \\\\{ A_1, A_2, \\cdots, A_N \\\\}. For each of these N integers, we will choose a color and paint the integer with that color. Here the following condition must be satisfied:\n\n* If A_i and A_j (i < j) are painted with the same color, A_i < A_j.\n\n\n\nFind the minimum number of colors required to satisfy the condition.\n\nConstraints\n\n* 1 \\leq N \\leq 10^5\n* 0 \\leq A_i \\leq 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1\n:\nA_N", "grammar": {"productions": ["<S>->[N] <n> <L_N>", "<L_i>-><L_i-1> <n> A_i", "<L_1>->A_1"], "constraints": ["1<=N<=10^5", "0<=A_i<=10^9"]}}
{"name": "p02675 AtCoder Beginner Contest 168 - \u2234 (Therefore)", "description": "The cat Snuke wants to play a popular Japanese game called \u00c5tCoder, so Iroha has decided to teach him Japanese.\n\nWhen counting pencils in Japanese, the counter word \"\u672c\" follows the number. The pronunciation of this word varies depending on the number. Specifically, the pronunciation of \"\u672c\" in the phrase \"N \u672c\" for a positive integer N not exceeding 999 is as follows:\n\n* `hon` when the digit in the one's place of N is 2, 4, 5, 7, or 9;\n* `pon` when the digit in the one's place of N is 0, 1, 6 or 8;\n* `bon` when the digit in the one's place of N is 3.\n\n\n\nGiven N, print the pronunciation of \"\u672c\" in the phrase \"N \u672c\".\n\nConstraints\n\n* N is a positive integer not exceeding 999.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["1<N<=999"]}}
{"name": "758_A. Holiday Of Equality", "description": "In Berland it is the holiday of equality. In honor of the holiday the king decided to equalize the welfare of all citizens in Berland by the expense of the state treasury. \n\nTotally in Berland there are n citizens, the welfare of each of them is estimated as the integer in ai burles (burle is the currency in Berland).\n\nYou are the royal treasurer, which needs to count the minimum charges of the kingdom on the king's present. The king can only give money, he hasn't a power to take away them. \n\nInput\n\nThe first line contains the integer n (1 \u2264 n \u2264 100) \u2014 the number of citizens in the kingdom.\n\nThe second line contains n integers a1, a2, ..., an, where ai (0 \u2264 ai \u2264 10^6) \u2014 the welfare of the i-th citizen.", "grammar": {"productions": ["<S>->[n] <n> <T_N>", "<T_i> -> <T_i-1> <s> a_i", "<T_1> -> a_1"], "constraints": ["1<=n<=100", "0<=a_i<=10^6"]}}
{"name": "230_A. Dragons", "description": "Kirito is stuck on a level of the MMORPG he is playing now. To move on in the game, he's got to defeat all n dragons that live on this level. Kirito and the dragons have strength, which is represented by an integer. In the duel between two opponents the duel's outcome is determined by their strength. Initially, Kirito's strength equals s.\n\nIf Kirito starts duelling with the i-th (1 \u2264 i \u2264 n) dragon and Kirito's strength is not greater than the dragon's strength xi, then Kirito loses the duel and dies. But if Kirito's strength is greater than the dragon's strength, then he defeats the dragon and gets a bonus strength increase by yi.\n\nKirito can fight the dragons in any order. Determine whether he can move on to the next level of the game, that is, defeat all dragons without a single loss.\n\nInput\n\nThe first line contains two space-separated integers s and n (1 \u2264 s \u2264 10^4, 1 \u2264 n \u2264 10^3). Then n lines follow: the i-th line contains space-separated integers xi and yi (1 \u2264 xi \u2264 10^4, 0 \u2264 yi \u2264 10^4) \u2014 the i-th dragon's strength and the bonus for defeating it.", "grammar": {"productions": ["<S>->s <s> n <n> <D_n>", "<D_i>-><D_i-1> <n> xi <s> yi", "<D_1>->xi <s> yi"], "constraints": ["1<=s<=10^4", "1<=n<=10^3", "1<=xi<=10^4", "0<=yi<=10^4"]}}
{"name": "1385_A. Three Pairwise Maximums", "description": "You are given three positive (i.e. strictly greater than zero) integers x, y and z.\n\nYour task is to find positive integers a, b and c such that x = max(a, b), y = max(a, c) and z = max(b, c), or determine that it is impossible to find such a, b and c.\n\nYou have to answer t independent test cases. Print required a, b and c in any (arbitrary) order.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 2 \u22c5 10^4) \u2014 the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains three integers x, y, and z (1 \u2264 x, y, z \u2264 10^9).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> x <s> y <s> z", "<T_1>->x <s> y <s> z"], "constraints": ["1<=t<=2*10^4", "1<=x<=10^9", "1<=y<=10^9", "1<=z<=10^9"]}}
{"name": "1095_A. Repeating Cipher", "description": "Polycarp loves ciphers. He has invented his own cipher called repeating.\n\nRepeating cipher is used for strings. To encrypt the string s=s_{1}s_{2} ... s_{m} (1 \u2264 m \u2264 10), Polycarp uses the following algorithm:\n\n  * he writes down s_1 ones, \n  * he writes down s_2 twice, \n  * he writes down s_3 three times, \n  * ... \n  * he writes down s_m m times. \n\n\n\nFor example, if s=\"bab\" the process is: \"b\" \u2192 \"baa\" \u2192 \"baabbb\". So the encrypted s=\"bab\" is \"baabbb\".\n\nGiven string t \u2014 the result of encryption of some string s. Your task is to decrypt it, i. e. find the string s.\n\nInput\n\nThe first line contains integer n (1 \u2264 n \u2264 55) \u2014 the length of the encrypted string. The second line of the input contains t \u2014 the result of encryption of some string s. It contains only lowercase Latin letters. The length of t is exactly n.\n\nIt is guaranteed that the answer to the test exists.", "grammar": {"productions": ["<S>->[n] <n> t"], "constraints": ["1<=n<=55"]}}
{"name": "1358_A. Park Lighting", "description": "Due to the coronavirus pandemic, city authorities obligated citizens to keep a social distance. The mayor of the city Semyon wants to light up Gluharniki park so that people could see each other even at night to keep the social distance.\n\nThe park is a rectangular table with n rows and m columns, where the cells of the table are squares, and the boundaries between the cells are streets. External borders are also streets. Every street has length 1. For example, park with n=m=2 has 12 streets.\n\nYou were assigned to develop a plan for lighting the park. You can put lanterns in the middle of the streets. The lamp lights two squares near it (or only one square if it stands on the border of the park).\n\n<image> The park sizes are: n=4, m=5. The lighted squares are marked yellow. Please note that all streets have length 1. Lanterns are placed in the middle of the streets. In the picture not all the squares are lit.\n\nSemyon wants to spend the least possible amount of money on lighting but also wants people throughout the park to keep a social distance. So he asks you to find the minimum number of lanterns that are required to light all the squares.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases in the input. Then t test cases follow.\n\nEach test case is a line containing two integers n, m (1 \u2264 n, m \u2264 10^4) \u2014 park sizes.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n <s> m", "<T_1>->n <s> m"], "constraints": ["1<=t<=10^4", "1<=n<=10^4", "1<=m<=10^4"]}}
{"name": "p03472 AtCoder Beginner Contest 085 - Katana Thrower", "description": "You are going out for a walk, when you suddenly encounter a monster. Fortunately, you have N katana (swords), Katana 1, Katana 2, \u2026, Katana N, and can perform the following two kinds of attacks in any order:\n\n* Wield one of the katana you have. When you wield Katana i (1 \u2264 i \u2264 N), the monster receives a_i points of damage. The same katana can be wielded any number of times.\n* Throw one of the katana you have. When you throw Katana i (1 \u2264 i \u2264 N) at the monster, it receives b_i points of damage, and you lose the katana. That is, you can no longer wield or throw that katana.\n\n\n\nThe monster will vanish when the total damage it has received is H points or more. At least how many attacks do you need in order to vanish it in total?\n\nConstraints\n\n* 1 \u2264 N \u2264 10^5\n* 1 \u2264 H \u2264 10^9\n* 1 \u2264 a_i \u2264 b_i \u2264 10^9\n* All input values are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN H\na_1 b_1\n:\na_N b_N", "grammar": {"productions": ["<S>->[N] <s> [H] <n> <L_N>", "<L_i>-><L_i-1> <n> a_i <s> b_i", "<L_1>->a_1 <s> b_1"], "constraints": ["1<=N<=10^5", "1<=H<=10^9", "1<=a_i<=b_i<=10^9"]}}
{"name": "1352_C. K-th Not Divisible by n", "description": "You are given two positive integers n and k. Print the k-th positive integer that is not divisible by n.\n\nFor example, if n=3, and k=7, then all numbers that are not divisible by 3 are: 1, 2, 4, 5, 7, 8, 10, 11, 13 .... The 7-th number among them is 10.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases in the input. Next, t test cases are given, one per line.\n\nEach test case is two positive integers n (2 \u2264 n \u2264 10^9) and k (1 \u2264 k \u2264 10^9).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <s> [k]", "<T_1>->[n] <s> [k]"], "constraints": ["1<=t<=1000", "2<=n<=10^9", "1<=k<=10^9"]}}
{"name": "1333_A. Little Artem", "description": "Young boy Artem tries to paint a picture, and he asks his mother Medina to help him. Medina is very busy, that's why she asked for your help.\n\nArtem wants to paint an n \u00d7 m board. Each cell of the board should be colored in white or black. \n\nLets B be the number of black cells that have at least one white neighbor adjacent by the side. Let W be the number of white cells that have at least one black neighbor adjacent by the side. A coloring is called good if B = W + 1. \n\nThe first coloring shown below has B=5 and W=4 (all cells have at least one neighbor with the opposite color). However, the second coloring is not good as it has B=4, W=4 (only the bottom right cell doesn't have a neighbor with the opposite color).\n\n<image>\n\nPlease, help Medina to find any good coloring. It's guaranteed that under given constraints the solution always exists. If there are several solutions, output any of them.\n\nInput\n\nEach test contains multiple test cases. \n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 20). Each of the next t lines contains two integers n, m (2 \u2264 n,m \u2264 100) \u2014 the number of rows and the number of columns in the grid.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n <s> m", "<T_1>->n <s> m"], "constraints": ["1<=t<=20", "2<=n,m<=100"]}}
{"name": "1180_A. Alex and a Rhombus", "description": "While playing with geometric figures Alex has accidentally invented a concept of a n-th order rhombus in a cell grid.\n\nA 1-st order rhombus is just a square 1 \u00d7 1 (i.e just a cell).\n\nA n-th order rhombus for all n \u2265 2 one obtains from a n-1-th order rhombus adding all cells which have a common side with it to it (look at the picture to understand it better).\n\n<image>\n\nAlex asks you to compute the number of cells in a n-th order rhombus.\n\nInput\n\nThe first and only input line contains integer n (1 \u2264 n \u2264 100) \u2014 order of a rhombus whose numbers of cells should be computed.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n <s> m", "<T_1>->n <s> m"], "constraints": ["1<=t<=20", "2<=n<=100", "2<=m<=100"]}}
{"name": "p02708 AtCoder Beginner Contest 163 - Sum of Large Numbers", "description": "We have N+1 integers: 10^{100}, 10^{100}+1, ..., 10^{100}+N.\n\nWe will choose K or more of these integers. Find the number of possible values of the sum of the chosen numbers, modulo (10^9+7).\n\nConstraints\n\n* 1 \\leq N \\leq 2\\times 10^5\n* 1 \\leq K \\leq N+1\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K", "grammar": {"productions": ["<S>-> [N] <s> [K]"], "constraints": ["1<=N<=2*10^5", "1<=K<=N+1"]}}
{"name": "1325_A. EhAb AnD gCd", "description": "You are given a positive integer x. Find any such 2 positive integers a and b such that GCD(a,b)+LCM(a,b)=x.\n\nAs a reminder, GCD(a,b) is the greatest integer that divides both a and b. Similarly, LCM(a,b) is the smallest integer such that both a and b divide it.\n\nIt's guaranteed that the solution always exists. If there are several such pairs (a, b), you can output any of them.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 100) \u2014 the number of testcases.\n\nEach testcase consists of one line containing a single integer, x (2 \u2264 x \u2264 10^9).", "grammar": {"productions": ["<S> -> [t] <n> <T_t>", "<T_i> -> <T_i-1> <n> x", "<T_1> -> x"], "constraints": ["1<=t<=100", "2<=x<=10^9"]}}
{"name": "1015_A. Points in Segments", "description": "You are given a set of n segments on the axis Ox, each segment has integer endpoints between 1 and m inclusive. Segments may intersect, overlap or even coincide with each other. Each segment is characterized by two integers l_i and r_i (1 \u2264 l_i \u2264 r_i \u2264 m) \u2014 coordinates of the left and of the right endpoints. \n\nConsider all integer points between 1 and m inclusive. Your task is to print all such points that don't belong to any segment. The point x belongs to the segment [l; r] if and only if l \u2264 x \u2264 r.\n\nInput\n\nThe first line of the input contains two integers n and m (1 \u2264 n, m \u2264 100) \u2014 the number of segments and the upper bound for coordinates.\n\nThe next n lines contain two integers each l_i and r_i (1 \u2264 l_i \u2264 r_i \u2264 m) \u2014 the endpoints of the i-th segment. Segments may intersect, overlap or even coincide with each other. Note, it is possible that l_i=r_i, i.e. a segment can degenerate to a point.", "grammar": {"productions": ["<S>->[n] n <s> m <T_n>", "<T_i>-><T_i-1> <n> l_i <s> r_i", "<T_1>-><n> l_1 <s> r_1"], "constraints": ["1<=n<=100", "1<=m<=100", "1<=l_i<=r_i<=m"]}}
{"name": "p02390 Watch", "description": "Write a program which reads an integer $S$ [second] and converts it to $h:m:s$ where $h$, $m$, $s$ denote hours, minutes (less than 60) and seconds (less than 60) respectively.\n\nConstraints\n\n* $0 \\leq S \\leq 86400$\n\nInput\n\nAn integer $S$ is given in a line.", "grammar": {"productions": ["<S>->S"], "constraints": ["0<=S<=86400"]}}
{"name": "977_C. Less or Equal", "description": "You are given a sequence of integers of length n and integer number k. You should print any integer number x in the range of [1; 10^9] (i.e. 1 \u2264 x \u2264 10^9) such that exactly k elements of given sequence are less than or equal to x.\n\nNote that the sequence can contain equal elements.\n\nIf there is no such x, print \"-1\" (without quotes).\n\nInput\n\nThe first line of the input contains integer numbers n and k (1 \u2264 n \u2264 2 \u22c5 10^5, 0 \u2264 k \u2264 n). The second line of the input contains n integer numbers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9) \u2014 the sequence itself.", "grammar": {"productions": ["<S>->[n] <n> <s> k <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=2*10^5", "0<=k<=n", "1<=a_i<=10^9"]}}
{"name": "1339_B. Sorted Adjacent Differences", "description": "You have array of n numbers a_{1}, a_{2}, \u2026, a_{n}. \n\nRearrange these numbers to satisfy |a_{1} - a_{2}| \u2264 |a_{2} - a_{3}| \u2264 \u2026 \u2264 |a_{n-1} - a_{n}|, where |x| denotes absolute value of x. It's always possible to find such rearrangement.\n\nNote that all numbers in a are not necessarily different. In other words, some numbers of a may be same.\n\nYou have to answer independent t test cases.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^{4}) \u2014 the number of test cases.\n\nThe first line of each test case contains single integer n (3 \u2264 n \u2264 10^{5}) \u2014 the length of array a. It is guaranteed that the sum of values of n over all test cases in the input does not exceed 10^{5}.\n\nThe second line of each test case contains n integers a_{1}, a_{2}, \u2026, a_{n} (-10^{9} \u2264 a_{i} \u2264 10^{9}).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=10^4", "3<=n<=10^5", "-10^9<=a_i<=10^9"]}}
{"name": "1420_A. Cubes Sorting", "description": "For god's sake, you're boxes with legs! It is literally your only purpose! Walking onto buttons! How can you not do the one thing you were designed for?\n\nOh, that's funny, is it? Oh it's funny? Because we've been at this for twelve hours and you haven't solved it either, so I don't know why you're laughing. You've got one hour! Solve it! \n\nWheatley decided to try to make a test chamber. He made a nice test chamber, but there was only one detail absent \u2014 cubes.\n\nFor completing the chamber Wheatley needs n cubes. i-th cube has a volume a_i.\n\nWheatley has to place cubes in such a way that they would be sorted in a non-decreasing order by their volume. Formally, for each i>1, a_{i-1} \u2264 a_i must hold.\n\nTo achieve his goal, Wheatley can exchange two neighbouring cubes. It means that for any i>1 you can exchange cubes on positions i-1 and i.\n\nBut there is a problem: Wheatley is very impatient. If Wheatley needs more than (n \u22c5 (n-1))/(2)-1 exchange operations, he won't do this boring work.\n\nWheatly wants to know: can cubes be sorted under this conditions?\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1 \u2264 t \u2264 1000), denoting the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains one positive integer n (2 \u2264 n \u2264 5 \u22c5 10^4) \u2014 number of cubes.\n\nThe second line contains n positive integers a_i (1 \u2264 a_i \u2264 10^9) \u2014 volumes of cubes.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <V_n>", "<T_1>->[n] <n> <V_n>", "<V_i>-><V_i-1> <s> a_i", "<V_1>->a_1"], "constraints": ["1<=t<=1000", "2<=n<=5*10^4", "1<=a_i<=10^9"]}}
{"name": "1436_A. Reorder", "description": "For a given array a consisting of n integers and a given integer m find if it is possible to reorder elements of the array a in such a way that \u2211_{i=1}^{n}{\u2211_{j=i}^{n}{(a_j)/(j)}} equals m? It is forbidden to delete elements as well as insert new elements. Please note that no rounding occurs during division, for example, 5/2=2.5.\n\nInput\n\nThe first line contains a single integer t \u2014 the number of test cases (1 \u2264 t \u2264 100). The test cases follow, each in two lines.\n\nThe first line of a test case contains two integers n and m (1 \u2264 n \u2264 100, 0 \u2264 m \u2264 10^6). The second line contains integers a_1, a_2, \u2026, a_n (0 \u2264 a_i \u2264 10^6) \u2014 the elements of the array.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> [n] <N> <s> <M> <n> <L_n>", "<T_1>->[n] <N> <s> <M> <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=100", "1<=n<=100", "0<=m<=10^6", "0<=a_i<=10^6"]}}
{"name": "835_A. Key races", "description": "Two boys decided to compete in text typing on the site \"Key races\". During the competition, they have to type a text consisting of s characters. The first participant types one character in v1 milliseconds and has ping t1 milliseconds. The second participant types one character in v2 milliseconds and has ping t2 milliseconds.\n\nIf connection ping (delay) is t milliseconds, the competition passes for a participant as follows: \n\n  1. Exactly after t milliseconds after the start of the competition the participant receives the text to be entered. \n  2. Right after that he starts to type it. \n  3. Exactly t milliseconds after he ends typing all the text, the site receives information about it. \n\n\n\nThe winner is the participant whose information on the success comes earlier. If the information comes from both participants at the same time, it is considered that there is a draw.\n\nGiven the length of the text and the information about participants, determine the result of the game.\n\nInput\n\nThe first line contains five integers s, v1, v2, t1, t2 (1 \u2264 s, v1, v2, t1, t2 \u2264 1000) \u2014 the number of characters in the text, the time of typing one character for the first participant, the time of typing one character for the the second participant, the ping of the first participant and the ping of the second participant.", "grammar": {"productions": ["<S>->s <s> v1 <s> v2 <s> t1 <s> t2"], "constraints": ["1<=s<=1000", "1<=v1<=1000", "1<=v2<=1000", "1<=t1<=1000", "1<=t2<=1000"]}}
{"name": "1419_A. Digit Game", "description": "Everyone knows that agents in Valorant decide, who will play as attackers, and who will play as defenders. To do that Raze and Breach decided to play t matches of a digit game...\n\nIn each of t matches of the digit game, a positive integer is generated. It consists of n digits. The digits of this integer are numerated from 1 to n from the highest-order digit to the lowest-order digit. After this integer is announced, the match starts.\n\nAgents play in turns. Raze starts. In one turn an agent can choose any unmarked digit and mark it. Raze can choose digits on odd positions, but can not choose digits on even positions. Breach can choose digits on even positions, but can not choose digits on odd positions. The match ends, when there is only one unmarked digit left. If the single last digit is odd, then Raze wins, else Breach wins.\n\nIt can be proved, that before the end of the match (for every initial integer with n digits) each agent has an ability to make a turn, i.e. there is at least one unmarked digit, that stands on a position of required parity.\n\nFor each of t matches find out, which agent wins, if both of them want to win and play optimally.\n\nInput\n\nFirst line of input contains an integer t (1 \u2264 t \u2264 100) \u2014 the number of matches.\n\nThe first line of each match description contains an integer n (1 \u2264 n \u2264 10^3) \u2014 the number of digits of the generated number.\n\nThe second line of each match description contains an n-digit positive integer without leading zeros.", "grammar": {"productions": ["<S>->[t] <n> <M_t>", "<M_i>-><M_i-1> <n> [n] <N_n>", "<M_1>->[n] <n> <N_n>", "<N_n>->digit sequence of length n"], "constraints": ["1<=t<=100", "1<=n<=10^3", "The number provided in <N_n> has exactly n digits and doesn't have leading zeros"]}}
{"name": "p03434 AtCoder Beginner Contest 088 - Card Game for Two", "description": "We have N cards. A number a_i is written on the i-th card.\nAlice and Bob will play a game using these cards. In this game, Alice and Bob alternately take one card. Alice goes first.\nThe game ends when all the cards are taken by the two players, and the score of each player is the sum of the numbers written on the cards he/she has taken. When both players take the optimal strategy to maximize their scores, find Alice's score minus Bob's score.\n\nConstraints\n\n* N is an integer between 1 and 100 (inclusive).\n* a_i \\ (1 \\leq i \\leq N) is an integer between 1 and 100 (inclusive).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 a_2 a_3 ... a_N", "grammar": {"productions": ["<S>->[N] <n> <L_N>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=N<=100", "1<=a_i<=100"]}}
{"name": "1294_B. Collecting Packages", "description": "There is a robot in a warehouse and n packages he wants to collect. The warehouse can be represented as a coordinate grid. Initially, the robot stays at the point (0, 0). The i-th package is at the point (x_i, y_i). It is guaranteed that there are no two packages at the same point. It is also guaranteed that the point (0, 0) doesn't contain a package.\n\nThe robot is semi-broken and only can move up ('U') and right ('R'). In other words, in one move the robot can go from the point (x, y) to the point (x + 1, y) or to the point (x, y + 1).\n\nAs we say above, the robot wants to collect all n packages (in arbitrary order). He wants to do it with the minimum possible number of moves. If there are several possible traversals, the robot wants to choose the lexicographically smallest path.\n\nThe string s of length n is lexicographically less than the string t of length n if there is some index 1 \u2264 j \u2264 n that for all i from 1 to j-1 s_i = t_i and s_j < t_j. It is the standard comparison of string, like in a dictionary. Most programming languages compare strings in this way.\n\nInput\n\nThe first line of the input contains an integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then test cases follow.\n\nThe first line of a test case contains one integer n (1 \u2264 n \u2264 1000) \u2014 the number of packages.\n\nThe next n lines contain descriptions of packages. The i-th package is given as two integers x_i and y_i (0 \u2264 x_i, y_i \u2264 1000) \u2014 the x-coordinate of the package and the y-coordinate of the package.\n\nIt is guaranteed that there are no two packages at the same point. It is also guaranteed that the point (0, 0) doesn't contain a package.\n\nThe sum of all values n over test cases in the test doesn't exceed 1000.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> [n] <n> <P_n>", "<T_1>->[n] <n> <P_n>", "<P_i>-><P_i-1> <n> x_i <s> y_i", "<P_1>->x_1 <s> y_1"], "constraints": ["1<=t<=100", "1<=n<=1000", "0<=x_i<=1000", "0<=y_i<=1000", "x_i ≠ y_i for all i", "x_i ≠ 0 and y_i ≠ 0 for the same i"]}}
{"name": "p03994 CODE FESTIVAL 2016 qual A - Next Letter", "description": "Mr. Takahashi has a string s consisting of lowercase English letters. He repeats the following operation on s exactly K times.\n\n* Choose an arbitrary letter on s and change that letter to the next alphabet. Note that the next letter of `z` is `a`.\n\n\n\nFor example, if you perform an operation for the second letter on `aaz`, `aaz` becomes `abz`. If you then perform an operation for the third letter on `abz`, `abz` becomes `aba`.\n\nMr. Takahashi wants to have the lexicographically smallest string after performing exactly K operations on s. Find the such string.\n\nConstraints\n\n* 1\u2264|s|\u226410^5\n* All letters in s are lowercase English letters.\n* 1\u2264K\u226410^9\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\ns\nK", "grammar": {"productions": ["<S>->s <n> K"], "constraints": ["1<=K<=10^9", "1<=|s|<=10^5", "All characters in s are lowercase English letters"]}}
{"name": "119_A. Epic Game", "description": "Simon and Antisimon play a game. Initially each player receives one fixed positive integer that doesn't change throughout the game. Simon receives number a and Antisimon receives number b. They also have a heap of n stones. The players take turns to make a move and Simon starts. During a move a player should take from the heap the number of stones equal to the greatest common divisor of the fixed number he has received and the number of stones left in the heap. A player loses when he cannot take the required number of stones (i. e. the heap has strictly less stones left than one needs to take). \n\nYour task is to determine by the given a, b and n who wins the game.\n\nInput\n\nThe only string contains space-separated integers a, b and n (1 \u2264 a, b, n \u2264 100) \u2014 the fixed numbers Simon and Antisimon have received correspondingly and the initial number of stones in the pile.", "grammar": {"productions": ["<S>->a <s> b <s> n"], "constraints": ["1<=a<=100", "1<=b<=100", "1<=n<=100"]}}
{"name": "p02926 AtCoder Beginner Contest 139 - Engines", "description": "E869120 is initially standing at the origin (0, 0) in a two-dimensional plane.\n\nHe has N engines, which can be used as follows:\n\n* When E869120 uses the i-th engine, his X- and Y-coordinate change by x_i and y_i, respectively. In other words, if E869120 uses the i-th engine from coordinates (X, Y), he will move to the coordinates (X + x_i, Y + y_i).\n* E869120 can use these engines in any order, but each engine can be used at most once. He may also choose not to use some of the engines.\n\n\n\nHe wants to go as far as possible from the origin. Let (X, Y) be his final coordinates. Find the maximum possible value of \\sqrt{X^2 + Y^2}, the distance from the origin.\n\nConstraints\n\n* 1 \\leq N \\leq 100\n* -1 \\ 000 \\ 000 \\leq x_i \\leq 1 \\ 000 \\ 000\n* -1 \\ 000 \\ 000 \\leq y_i \\leq 1 \\ 000 \\ 000\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nx_1 y_1\nx_2 y_2\n: :\nx_N y_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> x_i <s> y_i", "<T_1>->x_1 <s> y_1"], "constraints": ["1<=N<=100", "-1000000<=x_i<=1000000", "-1000000<=y_i<=1000000"]}}
{"name": "1430_B. Barrels", "description": "You have n barrels lined up in a row, numbered from left to right from one. Initially, the i-th barrel contains a_i liters of water.\n\nYou can pour water from one barrel to another. In one act of pouring, you can choose two different barrels x and y (the x-th barrel shouldn't be empty) and pour any possible amount of water from barrel x to barrel y (possibly, all water). You may assume that barrels have infinite capacity, so you can pour any amount of water in each of them. \n\nCalculate the maximum possible difference between the maximum and the minimum amount of water in the barrels, if you can pour water at most k times.\n\nSome examples: \n\n  * if you have four barrels, each containing 5 liters of water, and k = 1, you may pour 5 liters from the second barrel into the fourth, so the amounts of water in the barrels are [5, 0, 5, 10], and the difference between the maximum and the minimum is 10; \n  * if all barrels are empty, you can't make any operation, so the difference between the maximum and the minimum amount is still 0. \n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe first line of each test case contains two integers n and k (1 \u2264 k < n \u2264 2 \u22c5 10^5) \u2014 the number of barrels and the number of pourings you can make.\n\nThe second line contains n integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the initial amount of water the i-th barrel has.\n\nIt's guaranteed that the total sum of n over test cases doesn't exceed 2 \u22c5 10^5.", "grammar": {"productions": ["<S>->[t] <n> <U_t>", "<U_i>-><U_i-1> <n> [n] <n> k <s> n <n> <W_n>", "<U_1>->[n] k <s> n <n> <W_n>", "<W_i>-><W_i-1> <s> a_i", "<W_1>->a_1"], "constraints": ["1<=t<=1000",  "1<=k<n<=2*10^5", "0<=a_i<=10^9"]}}
{"name": "p02811 AtCoder Beginner Contest 150 - 500 Yen Coins", "description": "Takahashi has K 500-yen coins. (Yen is the currency of Japan.) If these coins add up to X yen or more, print `Yes`; otherwise, print `No`.\n\nConstraints\n\n* 1 \\leq K \\leq 100\n* 1 \\leq X \\leq 10^5\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nK X", "grammar": {"productions": ["<S>->[K] <s> [X]"], "constraints": ["1<=K<=100", "1<=X<=10^5"]}}
{"name": "p03293 AtCoder Beginner Contest 103 - String Rotation", "description": "You are given string S and T consisting of lowercase English letters.\n\nDetermine if S equals T after rotation.\n\nThat is, determine if S equals T after the following operation is performed some number of times:\n\nOperation: Let S = S_1 S_2 ... S_{|S|}. Change S to S_{|S|} S_1 S_2 ... S_{|S|-1}.\n\nHere, |X| denotes the length of the string X.\n\nConstraints\n\n* 2 \\leq |S| \\leq 100\n* |S| = |T|\n* S and T consist of lowercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS\nT", "grammar": {"productions": ["<S>->S <n> T"], "constraints": ["2<=|S|<=100", "2<=|T|<=100", "|S|=|T|", "S and T only contain lowercase English letters"]}}
{"name": "999_A. Mishka and Contest", "description": "Mishka started participating in a programming contest. There are n problems in the contest. Mishka's problem-solving skill is equal to k.\n\nMishka arranges all problems from the contest into a list. Because of his weird principles, Mishka only solves problems from one of the ends of the list. Every time, he chooses which end (left or right) he will solve the next problem from. Thus, each problem Mishka solves is either the leftmost or the rightmost problem in the list.\n\nMishka cannot solve a problem with difficulty greater than k. When Mishka solves the problem, it disappears from the list, so the length of the list decreases by 1. Mishka stops when he is unable to solve any problem from any end of the list.\n\nHow many problems can Mishka solve?\n\nInput\n\nThe first line of input contains two integers n and k (1 \u2264 n, k \u2264 100) \u2014 the number of problems in the contest and Mishka's problem-solving skill.\n\nThe second line of input contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 100), where a_i is the difficulty of the i-th problem. The problems are given in order from the leftmost to the rightmost in the list.", "grammar": {"productions": ["<S>->[n] n <s> k <n> <L_n>", "<L_i>-><L_i-1> <s> a_i",  "<L_1>->a_1"], "constraints": ["1<=n<=100", "1<=k<=100", "1<=a_i<=100"]}}
{"name": "1114_A. Got Any Grapes?", "description": "[The Duck song](https://www.youtube.com/watch?v=MtN1YnoL46Q)\n\nFor simplicity, we'll assume that there are only three types of grapes: green grapes, purple grapes and black grapes.\n\nAndrew, Dmitry and Michal are all grapes' lovers, however their preferences of grapes are different. To make all of them happy, the following should happen:\n\n  * Andrew, Dmitry and Michal should eat at least x, y and z grapes, respectively.\n  * Andrew has an extreme affinity for green grapes, thus he will eat green grapes and green grapes only.\n  * On the other hand, Dmitry is not a fan of black grapes \u2014 any types of grapes except black would do for him. In other words, Dmitry can eat green and purple grapes.\n  * Michal has a common taste \u2014 he enjoys grapes in general and will be pleased with any types of grapes, as long as the quantity is sufficient.\n\n\n\nKnowing that his friends are so fond of grapes, Aki decided to host a grape party with them. He has prepared a box with a green grapes, b purple grapes and c black grapes.\n\nHowever, Aki isn't sure if the box he prepared contains enough grapes to make everyone happy. Can you please find out whether it's possible to distribute grapes so that everyone is happy or Aki has to buy some more grapes?\n\nIt is not required to distribute all the grapes, so it's possible that some of them will remain unused.\n\nInput\n\nThe first line contains three integers x, y and z (1 \u2264 x, y, z \u2264 10^5) \u2014 the number of grapes Andrew, Dmitry and Michal want to eat.\n\nThe second line contains three integers a, b, c (1 \u2264 a, b, c \u2264 10^5) \u2014 the number of green, purple and black grapes in the box.", "grammar": {"productions": ["<S>->x <s> y <s> z <n> a <s> b <s> c"], "constraints": ["1<=x<=10^5", "1<=y<=10^5", "1<=z<=10^5", "1<=a<=10^5", "1<=b<=10^5", "1<=c<=10^5"]}}
{"name": "p02749 Social Infrastructure Information Systems Division  Hitachi Programming Contest 2020 - ThREE", "description": "We have a tree with N vertices. The vertices are numbered 1 to N, and the i-th edge connects Vertex a_i and Vertex b_i.\n\nTakahashi loves the number 3. He is seeking a permutation p_1, p_2, \\ldots , p_N of integers from 1 to N satisfying the following condition:\n\n* For every pair of vertices (i, j), if the distance between Vertex i and Vertex j is 3, the sum or product of p_i and p_j is a multiple of 3.\n\n\n\nHere the distance between Vertex i and Vertex j is the number of edges contained in the shortest path from Vertex i to Vertex j.\n\nHelp Takahashi by finding a permutation that satisfies the condition.\n\nConstraints\n\n* 2\\leq N\\leq 2\\times 10^5\n* 1\\leq a_i, b_i \\leq N\n* The given graph is a tree.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 b_1\na_2 b_2\n\\vdots\na_{N-1} b_{N-1}", "grammar": {"productions": ["<S>->[N] <n> <T_N-1>", "<T_i>-><T_i-1> a_i <s> b_i <n>", "<T_1>->a_1 <s> b_1 <n>"], "constraints": ["2<=N<=2*10^5", "1<=a_i<=N", "1<=b_i<=N"]}}
{"name": "p02698 AtCoder Beginner Contest 165 - LIS on Tree", "description": "We have a tree with N vertices, whose i-th edge connects Vertex u_i and Vertex v_i. Vertex i has an integer a_i written on it. For every integer k from 1 through N, solve the following problem:\n\n* We will make a sequence by lining up the integers written on the vertices along the shortest path from Vertex 1 to Vertex k, in the order they appear. Find the length of the longest increasing subsequence of this sequence.\n\n\n\nHere, the longest increasing subsequence of a sequence A of length L is the subsequence A_{i_1} , A_{i_2} , ... , A_{i_M} with the greatest possible value of M such that 1 \\leq i_1 < i_2 < ... < i_M \\leq L and A_{i_1} < A_{i_2} < ... < A_{i_M}.\n\nConstraints\n\n* 2 \\leq N \\leq 2 \\times 10^5\n* 1 \\leq a_i \\leq 10^9\n* 1 \\leq u_i , v_i \\leq N\n* u_i \\neq v_i\n* The given graph is a tree.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 a_2 ... a_N\nu_1 v_1\nu_2 v_2\n:\nu_{N-1} v_{N-1}", "grammar": {"productions": ["<S>->[N] <n> <L_N> <n> <E_N-1>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1", "<E_i>-><E_i-1> <n> u_i <s> v_i", "<E_1>->u_1 <s> v_1"], "constraints": ["2<=N<=2*10^5", "1<=a_i<=10^9", "1<=u_i<=N", "1<=v_i<=N", "u_i!=v_i"]}}
{"name": "1393_A. Rainbow Dash, Fluttershy and Chess Coloring", "description": "One evening Rainbow Dash and Fluttershy have come up with a game. Since the ponies are friends, they have decided not to compete in the game but to pursue a common goal. \n\nThe game starts on a square flat grid, which initially has the outline borders built up. Rainbow Dash and Fluttershy have flat square blocks with size 1\u00d71, Rainbow Dash has an infinite amount of light blue blocks, Fluttershy has an infinite amount of yellow blocks. \n\nThe blocks are placed according to the following rule: each newly placed block must touch the built on the previous turns figure by a side (note that the outline borders of the grid are built initially). At each turn, one pony can place any number of blocks of her color according to the game rules.\n\nRainbow and Fluttershy have found out that they can build patterns on the grid of the game that way. They have decided to start with something simple, so they made up their mind to place the blocks to form a chess coloring. Rainbow Dash is well-known for her speed, so she is interested in the minimum number of turns she and Fluttershy need to do to get a chess coloring, covering the whole grid with blocks. Please help her find that number!\n\nSince the ponies can play many times on different boards, Rainbow Dash asks you to find the minimum numbers of turns for several grids of the games.\n\nThe chess coloring in two colors is the one in which each square is neighbor by side only with squares of different colors.\n\nInput\n\nThe first line contains a single integer T (1 \u2264 T \u2264 100): the number of grids of the games. \n\nEach of the next T lines contains a single integer n (1 \u2264 n \u2264 10^9): the size of the side of the grid of the game.", "grammar": {"productions": ["<S>->[T] <n> <G_T>", "<G_i>-><G_i-1> <n> n", "<G_1>->n"], "constraints": ["1<=T<=100", "1<=n<=10^9"]}}
{"name": "1249_B1. Books Exchange (easy version)", "description": "The only difference between easy and hard versions is constraints.\n\nThere are n kids, each of them is reading a unique book. At the end of any day, the i-th kid will give his book to the p_i-th kid (in case of i = p_i the kid will give his book to himself). It is guaranteed that all values of p_i are distinct integers from 1 to n (i.e. p is a permutation). The sequence p doesn't change from day to day, it is fixed.\n\nFor example, if n=6 and p=[4, 6, 1, 3, 5, 2] then at the end of the first day the book of the 1-st kid will belong to the 4-th kid, the 2-nd kid will belong to the 6-th kid and so on. At the end of the second day the book of the 1-st kid will belong to the 3-th kid, the 2-nd kid will belong to the 2-th kid and so on.\n\nYour task is to determine the number of the day the book of the i-th child is returned back to him for the first time for every i from 1 to n.\n\nConsider the following example: p = [5, 1, 2, 4, 3]. The book of the 1-st kid will be passed to the following kids:\n\n  * after the 1-st day it will belong to the 5-th kid, \n  * after the 2-nd day it will belong to the 3-rd kid, \n  * after the 3-rd day it will belong to the 2-nd kid, \n  * after the 4-th day it will belong to the 1-st kid. \n\n\n\nSo after the fourth day, the book of the first kid will return to its owner. The book of the fourth kid will return to him for the first time after exactly one day.\n\nYou have to answer q independent queries.\n\nInput\n\nThe first line of the input contains one integer q (1 \u2264 q \u2264 200) \u2014 the number of queries. Then q queries follow.\n\nThe first line of the query contains one integer n (1 \u2264 n \u2264 200) \u2014 the number of kids in the query. The second line of the query contains n integers p_1, p_2, ..., p_n (1 \u2264 p_i \u2264 n, all p_i are distinct, i.e. p is a permutation), where p_i is the kid which will get the book of the i-th kid.", "grammar": {"productions": ["<S>->[q] <n> <Q_q>", "<Q_i>-><Q_i-1> <n> [n] <n> <P_n>", "<Q_1>->[n] <n> <P_n>", "<P_i>-><P_i-1> <s> p_i", "<P_1>->p_1"], "constraints": ["1<=q<=200", "1<=n<=200", "1<=p_i<=n"]}}
{"name": "1288_A. Deadline", "description": "Adilbek was assigned to a special project. For Adilbek it means that he has n days to run a special program and provide its results. But there is a problem: the program needs to run for d days to calculate the results.\n\nFortunately, Adilbek can optimize the program. If he spends x (x is a non-negative integer) days optimizing the program, he will make the program run in \\left\u2308 (d)/(x + 1) \\right\u2309 days (\\left\u2308 a \\right\u2309 is the ceiling function: \\left\u2308 2.4 \\right\u2309 = 3, \\left\u2308 2 \\right\u2309 = 2). The program cannot be run and optimized simultaneously, so the total number of days he will spend is equal to x + \\left\u2308 (d)/(x + 1) \\right\u2309.\n\nWill Adilbek be able to provide the generated results in no more than n days?\n\nInput\n\nThe first line contains a single integer T (1 \u2264 T \u2264 50) \u2014 the number of test cases.\n\nThe next T lines contain test cases \u2013 one per line. Each line contains two integers n and d (1 \u2264 n \u2264 10^9, 1 \u2264 d \u2264 10^9) \u2014 the number of days before the deadline and the number of days the program runs.", "grammar": {"productions": ["<S>->[T] <n> <T_T>", "<T_i>-><T_i-1> <n> n <s> d", "<T_1>->n <s> d"], "constraints": ["1<=T<=50", "1<=n<=10^9", "1<=d<=10^9"]}}
{"name": "p02594 AtCoder Beginner Contest 174 - Air Conditioner", "description": "You will turn on the air conditioner if, and only if, the temperature of the room is 30 degrees Celsius or above.\n\nThe current temperature of the room is X degrees Celsius. Will you turn on the air conditioner?\n\nConstraints\n\n* -40 \\leq X \\leq 40\n* X is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX", "grammar": {"productions": ["<S>->X"], "constraints": ["-40<=X<=40"]}}
{"name": "p03105 AtCoder Beginner Contest 120 - Favorite Sound", "description": "Takahashi likes the sound when he buys a drink from a vending machine.\n\nThat sound can be heard by spending A yen (the currency of Japan) each time.\n\nTakahashi has B yen. He will hear the sound as many times as he can with that money, but at most C times, as he would be satisfied at that time.\n\nHow many times will he hear the sound?\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq A, B, C \\leq 100\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B C", "grammar": {"productions": ["<S>->A <s> B <s> C"], "constraints": ["1<=A<=100", "1<=B<=100", "1<=C<=100"]}}
{"name": "1213_B. Bad Prices", "description": "Polycarp analyzes the prices of the new berPhone. At his disposal are the prices for n last days: a_1, a_2, ..., a_n, where a_i is the price of berPhone on the day i.\n\nPolycarp considers the price on the day i to be bad if later (that is, a day with a greater number) berPhone was sold at a lower price. For example, if n=6 and a=[3, 9, 4, 6, 7, 5], then the number of days with a bad price is 3 \u2014 these are days 2 (a_2=9), 4 (a_4=6) and 5 (a_5=7).\n\nPrint the number of days with a bad price.\n\nYou have to answer t independent data sets.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10000) \u2014 the number of sets of input data in the test. Input data sets must be processed independently, one after another.\n\nEach input data set consists of two lines. The first line contains an integer n (1 \u2264 n \u2264 150000) \u2014 the number of days. The second line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^6), where a_i is the price on the i-th day.\n\nIt is guaranteed that the sum of n over all data sets in the test does not exceed 150000.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=10000", "1<=n<=150000", "1<=a_i<=10^6"]}}
{"name": "1427_A. Avoiding Zero", "description": "You are given an array of n integers a_1,a_2,...,a_n.\n\nYou have to create an array of n integers b_1,b_2,...,b_n such that: \n\n  * The array b is a rearrangement of the array a, that is, it contains the same values and each value appears the same number of times in the two arrays. In other words, the multisets \\\\{a_1,a_2,...,a_n\\} and \\\\{b_1,b_2,...,b_n\\} are equal.\n\nFor example, if a=[1,-1,0,1], then b=[-1,1,1,0] and b=[0,1,-1,1] are rearrangements of a, but b=[1,-1,-1,0] and b=[1,0,2,-3] are not rearrangements of a. \n\n  * For all k=1,2,...,n the sum of the first k elements of b is nonzero. Formally, for all k=1,2,...,n, it must hold $$$b_1+b_2+\u22c5\u22c5\u22c5+b_knot=0 .$$$ \n\n\n\nIf an array b_1,b_2,..., b_n with the required properties does not exist, you have to print NO.\n\nInput\n\nEach test contains multiple test cases. The first line contains an integer t (1\u2264 t \u2264 1000) \u2014 the number of test cases. The description of the test cases follows.\n\nThe first line of each testcase contains one integer n (1\u2264 n\u2264 50) \u2014 the length of the array a.\n\nThe second line of each testcase contains n integers a_1,a_2,..., a_n (-50\u2264 a_i\u2264 50) \u2014 the elements of a.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=1000", "1<=n<=50", "-50<=a_i<=50"]}}
{"name": "p02628 AtCoder Beginner Contest 171 - Mix Juice", "description": "A shop sells N kinds of fruits, Fruit 1, \\ldots, N, at prices of p_1, \\ldots, p_N yen per item, respectively. (Yen is the currency of Japan.)\n\nHere, we will choose K kinds of fruits and buy one of each chosen kind. Find the minimum possible total price of those fruits.\n\nConstraints\n\n* 1 \\leq K \\leq N \\leq 1000\n* 1 \\leq p_i \\leq 1000\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\np_1 p_2 \\ldots p_N", "grammar": {"productions": ["<S>->[N] <s> [K] <n> <P_N>", "<P_i>-><P_i-1> <s> p_i", "<P_1>->p_1"], "constraints": ["1<=N<=1000", "1<=K<=N", "1<=p_i<=1000"]}}
{"name": "1257_B. Magic Stick", "description": "Recently Petya walked in the forest and found a magic stick.\n\nSince Petya really likes numbers, the first thing he learned was spells for changing numbers. So far, he knows only two spells that can be applied to a positive integer: \n\n  1. If the chosen number a is even, then the spell will turn it into 3a/2; \n  2. If the chosen number a is greater than one, then the spell will turn it into a-1. \n\n\n\nNote that if the number is even and greater than one, then Petya can choose which spell to apply.\n\nPetya now has only one number x. He wants to know if his favorite number y can be obtained from x using the spells he knows. The spells can be used any number of times in any order. It is not required to use spells, Petya can leave x as it is.\n\nInput\n\nThe first line contains single integer T (1 \u2264 T \u2264 10^4) \u2014 the number of test cases. Each test case consists of two lines.\n\nThe first line of each test case contains two integers x and y (1 \u2264 x, y \u2264 10^9) \u2014 the current number and the number that Petya wants to get.", "grammar": {"productions": ["<S>->[T] <n> <T_T>", "<T_i>-><T_i-1> <n> x_i <s> y_i", "<T_1>->x_1 <s> y_1"], "constraints": ["1<=T<=10^4", "1<=x_i<=10^9", "1<=y_i<=10^9"]}}
{"name": "p02397 Swapping Two Numbers", "description": "Write a program which reads two integers x and y, and prints them in ascending order.\n\nConstraints\n\n* 0 \u2264 x, y \u2264 10000\n* the number of datasets \u2264 3000\n\nInput\n\nThe input consists of multiple datasets. Each dataset consists of two integers x and y separated by a single space.\n\nThe input ends with two 0 (when both x and y are zero). Your program should not process for these terminal symbols.", "grammar": {"productions": ["<S>-><D>", "<D>-><X> <s> <Y> <n> <D>", "<X>->x", "<Y>->y"], "constraints": ["0<=x<=10000", "0<=y<=10000", "number of datasets <= 3000", "(x,y) != (0,0) except for termination"]}}
{"name": "1144_B. Parity Alternated Deletions", "description": "Polycarp has an array a consisting of n integers.\n\nHe wants to play a game with this array. The game consists of several moves. On the first move he chooses any element and deletes it (after the first move the array contains n-1 elements). For each of the next moves he chooses any element with the only restriction: its parity should differ from the parity of the element deleted on the previous move. In other words, he alternates parities (even-odd-even-odd-... or odd-even-odd-even-...) of the removed elements. Polycarp stops if he can't make a move.\n\nFormally: \n\n  * If it is the first move, he chooses any element and deletes it; \n  * If it is the second or any next move: \n    * if the last deleted element was odd, Polycarp chooses any even element and deletes it; \n    * if the last deleted element was even, Polycarp chooses any odd element and deletes it. \n  * If after some move Polycarp cannot make a move, the game ends. \n\n\n\nPolycarp's goal is to minimize the sum of non-deleted elements of the array after end of the game. If Polycarp can delete the whole array, then the sum of non-deleted elements is zero.\n\nHelp Polycarp find this value.\n\nInput\n\nThe first line of the input contains one integer n (1 \u2264 n \u2264 2000) \u2014 the number of elements of a.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^6), where a_i is the i-th element of a.", "grammar": {"productions": ["<S>->[n] <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=2000", "0<=a_i<=10^6"]}}
{"name": "p02724 AtCoder Beginner Contest 160 - Golden Coins", "description": "Takahashi loves gold coins. He gains 1000 happiness points for each 500-yen coin he has and gains 5 happiness points for each 5-yen coin he has. (Yen is the currency of Japan.)\n\nTakahashi has X yen. If he exchanges his money so that he will gain the most happiness points, how many happiness points will he earn?\n\n(We assume that there are six kinds of coins available: 500-yen, 100-yen, 50-yen, 10-yen, 5-yen, and 1-yen coins.)\n\nConstraints\n\n* 0 \\leq X \\leq 10^9\n* X is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX", "grammar": {"productions": ["<S>->[X]"], "constraints": ["0<=X<=10^9"]}}
{"name": "p03592 CODE FESTIVAL 2017 qual A - fLIP", "description": "We have a grid with N rows and M columns of squares. Initially, all the squares are white.\n\nThere is a button attached to each row and each column. When a button attached to a row is pressed, the colors of all the squares in that row are inverted; that is, white squares become black and vice versa. When a button attached to a column is pressed, the colors of all the squares in that column are inverted.\n\nTakahashi can freely press the buttons any number of times. Determine whether he can have exactly K black squares in the grid.\n\nConstraints\n\n* 1 \\leq N,M \\leq 1000\n* 0 \\leq K \\leq NM\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M K", "grammar": {"productions": ["<S>->[N] <s> [M] <s> [K]"], "constraints": ["1<=N<=1000", "1<=M<=1000", "0<=K<=N*M"]}}
{"name": "1230_B. Ania and Minimizing", "description": "Ania has a large integer S. Its decimal representation has length n and doesn't contain any leading zeroes. Ania is allowed to change at most k digits of S. She wants to do it in such a way that S still won't contain any leading zeroes and it'll be minimal possible. What integer will Ania finish with?\n\nInput\n\nThe first line contains two integers n and k (1 \u2264 n \u2264 200 000, 0 \u2264 k \u2264 n) \u2014 the number of digits in the decimal representation of S and the maximum allowed number of changed digits.\n\nThe second line contains the integer S. It's guaranteed that S has exactly n digits and doesn't contain any leading zeroes.", "grammar": {"productions": ["<S>->[n] <n> <s> k <n> S"], "constraints": ["1<=n<=200000", "0<=k<=n"]}}
{"name": "1436_B. Prime Square", "description": "Sasha likes investigating different math objects, for example, magic squares. But Sasha understands that magic squares have already been studied by hundreds of people, so he sees no sense of studying them further. Instead, he invented his own type of square \u2014 a prime square. \n\nA square of size n \u00d7 n is called prime if the following three conditions are held simultaneously: \n\n  * all numbers on the square are non-negative integers not exceeding 10^5; \n  * there are no prime numbers in the square; \n  * sums of integers in each row and each column are prime numbers. \n\n\n\nSasha has an integer n. He asks you to find any prime square of size n \u00d7 n. Sasha is absolutely sure such squares exist, so just help him!\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10) \u2014 the number of test cases.\n\nEach of the next t lines contains a single integer n (2 \u2264 n \u2264 100) \u2014 the required size of a square.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n]", "<T_1>->[n]"], "constraints": ["1<=t<=10", "2<=n<=100"]}}
{"name": "p02417 Counting Characters", "description": "Write a program which counts and reports the number of each alphabetical letter. Ignore the case of characters.\n\nConstraints\n\n* The number of characters in the sentence < 1200\n\nInput\n\nA sentence in English is given in several lines.", "grammar": {"productions": ["<S>-><L>", "<L>-><W> <n> <L>", "<L>-><W>", "<W>-><C>", "<W>-><C> <s> <W>", "<C>->english_characters"], "constraints": ["The length of <W> < 1200"]}}
{"name": "598_A. Tricky Sum", "description": "In this problem you are to calculate the sum of all integers from 1 to n, but you should take all powers of two with minus in the sum.\n\nFor example, for n = 4 the sum is equal to  - 1 - 2 + 3 - 4 = - 4, because 1, 2 and 4 are 20, 21 and 22 respectively.\n\nCalculate the answer for t values of n.\n\nInput\n\nThe first line of the input contains a single integer t (1 \u2264 t \u2264 100) \u2014 the number of values of n to be processed.\n\nEach of next t lines contains a single integer n (1 \u2264 n \u2264 10^9).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n", "<T_1>->n"], "constraints": ["1<=t<=100", "1<=n<=10^9"]}}
{"name": "p03219 AtCoder Beginner Contest 113 - Discount Fare", "description": "There is a train going from Station A to Station B that costs X yen (the currency of Japan).\n\nAlso, there is a bus going from Station B to Station C that costs Y yen.\n\nJoisino got a special ticket. With this ticket, she can take the bus for half the fare if she travels from Station A to Station B by train and then travels from Station B to Station C by bus.\n\nHow much does it cost to travel from Station A to Station C if she uses this ticket?\n\nConstraints\n\n* 1 \\leq X,Y \\leq 100\n* Y is an even number.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX Y", "grammar": {"productions": ["<S>->X <s> Y"], "constraints": ["1<=X<=100", "1<=Y<=100", "Y%2==0"]}}
{"name": "p03327 AtCoder Beginner Contest 099 - ABD", "description": "Decades have passed since the beginning of AtCoder Beginner Contest.\n\nThe contests are labeled as `ABC001`, `ABC002`, ... from the first round, but after the 999-th round `ABC999`, a problem occurred: how the future rounds should be labeled?\n\nIn the end, the labels for the rounds from the 1000-th to the 1998-th are decided: `ABD001`, `ABD002`, ..., `ABD999`.\n\nYou are given an integer N between 1 and 1998 (inclusive). Print the first three characters of the label of the N-th round of AtCoder Beginner Contest.\n\nConstraints\n\n* 1 \\leq N \\leq 1998\n* N is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["1<=N<=1998"]}}
{"name": "255_A. Greg's Workout", "description": "Greg is a beginner bodybuilder. Today the gym coach gave him the training plan. All it had was n integers a1, a2, ..., an. These numbers mean that Greg needs to do exactly n exercises today. Besides, Greg should repeat the i-th in order exercise ai times.\n\nGreg now only does three types of exercises: \"chest\" exercises, \"biceps\" exercises and \"back\" exercises. Besides, his training is cyclic, that is, the first exercise he does is a \"chest\" one, the second one is \"biceps\", the third one is \"back\", the fourth one is \"chest\", the fifth one is \"biceps\", and so on to the n-th exercise.\n\nNow Greg wonders, which muscle will get the most exercise during his training. We know that the exercise Greg repeats the maximum number of times, trains the corresponding muscle the most. Help Greg, determine which muscle will get the most training.\n\nInput\n\nThe first line contains integer n (1 \u2264 n \u2264 20). The second line contains n integers a1, a2, ..., an (1 \u2264 ai \u2264 25) \u2014 the number of times Greg repeats the exercises.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i> -> <T_i-1> <s> a_i", "<T_1> -> a_1"], "constraints": ["1<=n<=20", "1<=a_i<=25"]}}
{"name": "p03761 AtCoder Beginner Contest 058 - Dubious Document", "description": "Snuke loves \"paper cutting\": he cuts out characters from a newspaper headline and rearranges them to form another string.\n\nHe will receive a headline which contains one of the strings S_1,...,S_n tomorrow. He is excited and already thinking of what string he will create. Since he does not know the string on the headline yet, he is interested in strings that can be created regardless of which string the headline contains.\n\nFind the longest string that can be created regardless of which string among S_1,...,S_n the headline contains. If there are multiple such strings, find the lexicographically smallest one among them.\n\nConstraints\n\n* 1 \\leq n \\leq 50\n* 1 \\leq |S_i| \\leq 50 for every i = 1, ..., n.\n* S_i consists of lowercase English letters (`a` - `z`) for every i = 1, ..., n.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nn\nS_1\n...\nS_n", "grammar": {"productions": ["<S>->[n] <T_n>", "<T_i>-><T_i-1> <n> S_i", "<T_1>->S_1"], "constraints": ["1<=n<=50", "1<=|S_i|<=50 for every i = 1, ..., n.", "S_i consists of lowercase English letters (`a` - `z`) for every i = 1, ..., n."]}}
{"name": "746_A. Compote", "description": "Nikolay has a lemons, b apples and c pears. He decided to cook a compote. According to the recipe the fruits should be in the ratio 1: 2: 4. It means that for each lemon in the compote should be exactly 2 apples and exactly 4 pears. You can't crumble up, break up or cut these fruits into pieces. These fruits \u2014 lemons, apples and pears \u2014 should be put in the compote as whole fruits.\n\nYour task is to determine the maximum total number of lemons, apples and pears from which Nikolay can cook the compote. It is possible that Nikolay can't use any fruits, in this case print 0. \n\nInput\n\nThe first line contains the positive integer a (1 \u2264 a \u2264 1000) \u2014 the number of lemons Nikolay has. \n\nThe second line contains the positive integer b (1 \u2264 b \u2264 1000) \u2014 the number of apples Nikolay has. \n\nThe third line contains the positive integer c (1 \u2264 c \u2264 1000) \u2014 the number of pears Nikolay has.", "grammar": {"productions": ["<S>->a <n> b <n> c"], "constraints": ["1<=a<=1000", "1<=b<=1000", "1<=c<=1000"]}}
{"name": "766_B. Mahmoud and a Triangle", "description": "Mahmoud has n line segments, the i-th of them has length ai. Ehab challenged him to use exactly 3 line segments to form a non-degenerate triangle. Mahmoud doesn't accept challenges unless he is sure he can win, so he asked you to tell him if he should accept the challenge. Given the lengths of the line segments, check if he can choose exactly 3 of them to form a non-degenerate triangle.\n\nMahmoud should use exactly 3 line segments, he can't concatenate two line segments or change any length. A non-degenerate triangle is a triangle with positive area.\n\nInput\n\nThe first line contains single integer n (3 \u2264 n \u2264 10^5) \u2014 the number of line segments Mahmoud has.\n\nThe second line contains n integers a1, a2, ..., an (1 \u2264 ai \u2264 10^9) \u2014 the lengths of line segments Mahmoud has.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["3<=n<=10^5", "1<=a_i<=10^9"]}}
{"name": "1352_F. Binary String Reconstruction", "description": "For some binary string s (i.e. each character s_i is either '0' or '1'), all pairs of consecutive (adjacent) characters were written. In other words, all substrings of length 2 were written. For each pair (substring of length 2), the number of '1' (ones) in it was calculated.\n\nYou are given three numbers:\n\n  * n_0 \u2014 the number of such pairs of consecutive characters (substrings) where the number of ones equals 0; \n  * n_1 \u2014 the number of such pairs of consecutive characters (substrings) where the number of ones equals 1; \n  * n_2 \u2014 the number of such pairs of consecutive characters (substrings) where the number of ones equals 2. \n\n\n\nFor example, for the string s=\"1110011110\", the following substrings would be written: \"11\", \"11\", \"10\", \"00\", \"01\", \"11\", \"11\", \"11\", \"10\". Thus, n_0=1, n_1=3, n_2=5.\n\nYour task is to restore any suitable binary string s from the given values n_0, n_1, n_2. It is guaranteed that at least one of the numbers n_0, n_1, n_2 is greater than 0. Also, it is guaranteed that a solution exists.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases in the input. Then test cases follow.\n\nEach test case consists of one line which contains three integers n_0, n_1, n_2 (0 \u2264 n_0, n_1, n_2 \u2264 100; n_0 + n_1 + n_2 > 0). It is guaranteed that the answer for given n_0, n_1, n_2 exists.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n_0 <s> n_1 <s> n_2", "<T_1>->n_0 <s> n_1 <s> n_2"], "constraints": ["1<=t<=1000", "0<=n_0<=100", "0<=n_1<=100", "0<=n_2<=100", "n_0 + n_1 + n_2 > 0"]}}
{"name": "p02898 AtCoder Beginner Contest 142 - Roller Coaster", "description": "N friends of Takahashi has come to a theme park.\n\nTo ride the most popular roller coaster in the park, you must be at least K centimeters tall.\n\nThe i-th friend is h_i centimeters tall.\n\nHow many of the Takahashi's friends can ride the roller coaster?\n\nConstraints\n\n* 1 \\le N \\le 10^5\n* 1 \\le K \\le 500\n* 1 \\le h_i \\le 500\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nh_1 h_2 \\ldots h_N", "grammar": {"productions": ["<S>->[N] <s> [K] <n> <H_N>", "<H_i>-><H_i-1> <s> h_i", "<H_1>->h_1"], "constraints": ["1<=N<=10^5", "1<=K<=500", "1<=h_i<=500"]}}
{"name": "476_B. Dreamoon and WiFi", "description": "Dreamoon is standing at the position 0 on a number line. Drazil is sending a list of commands through Wi-Fi to Dreamoon's smartphone and Dreamoon follows them.\n\nEach command is one of the following two types: \n\n  1. Go 1 unit towards the positive direction, denoted as '+'\n  2. Go 1 unit towards the negative direction, denoted as '-'\n\n\n\nBut the Wi-Fi condition is so poor that Dreamoon's smartphone reports some of the commands can't be recognized and Dreamoon knows that some of them might even be wrong though successfully recognized. Dreamoon decides to follow every recognized command and toss a fair coin to decide those unrecognized ones (that means, he moves to the 1 unit to the negative or positive direction with the same probability 0.5). \n\nYou are given an original list of commands sent by Drazil and list received by Dreamoon. What is the probability that Dreamoon ends in the position originally supposed to be final by Drazil's commands?\n\nInput\n\nThe first line contains a string s1 \u2014 the commands Drazil sends to Dreamoon, this string consists of only the characters in the set {'+', '-'}. \n\nThe second line contains a string s2 \u2014 the commands Dreamoon's smartphone recognizes, this string consists of only the characters in the set {'+', '-', '?'}. '?' denotes an unrecognized command.\n\nLengths of two strings are equal and do not exceed 10.", "grammar": {"productions": ["<S>->s1 <n> s2", "s1->['+', '-']*", "s2->['+', '-', '?']*"], "constraints": ["1<=len(s1)<=10", "1<=len(s2)<=10", "len(s1)=len(s2)"]}}
{"name": "621_A. Wet Shark and Odd and Even", "description": "Today, Wet Shark is given n integers. Using any of these integers no more than once, Wet Shark wants to get maximum possible even (divisible by 2) sum. Please, calculate this value for Wet Shark. \n\nNote, that if Wet Shark uses no integers from the n integers, the sum is an even integer 0.\n\nInput\n\nThe first line of the input contains one integer, n (1 \u2264 n \u2264 100 000). The next line contains n space separated integers given to Wet Shark. Each of these integers is in range from 1 to 10^9, inclusive.", "grammar": {"productions": ["<S>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> i", "<L_1>->i"], "constraints": ["1<=n<=100000", "1<=i<=10^9"]}}
{"name": "1166_A. Silent Classroom", "description": "There are n students in the first grade of Nlogonia high school. The principal wishes to split the students into two classrooms (each student must be in exactly one of the classrooms). Two distinct students whose name starts with the same letter will be chatty if they are put in the same classroom (because they must have a lot in common). Let x be the number of such pairs of students in a split. Pairs (a, b) and (b, a) are the same and counted only once.\n\nFor example, if there are 6 students: \"olivia\", \"jacob\", \"tanya\", \"jack\", \"oliver\" and \"jessica\", then:\n\n  * splitting into two classrooms (\"jack\", \"jacob\", \"jessica\", \"tanya\") and (\"olivia\", \"oliver\") will give x=4 (3 chatting pairs in the first classroom, 1 chatting pair in the second classroom), \n  * splitting into two classrooms (\"jack\", \"tanya\", \"olivia\") and (\"jessica\", \"oliver\", \"jacob\") will give x=1 (0 chatting pairs in the first classroom, 1 chatting pair in the second classroom). \n\n\n\nYou are given the list of the n names. What is the minimum x we can obtain by splitting the students into classrooms?\n\nNote that it is valid to place all of the students in one of the classrooms, leaving the other one empty.\n\nInput\n\nThe first line contains a single integer n (1\u2264 n \u2264 100) \u2014 the number of students.\n\nAfter this n lines follow.\n\nThe i-th line contains the name of the i-th student.\n\nIt is guaranteed each name is a string of lowercase English letters of length at most 20. Note that multiple students may share the same name.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> name_i", "<T_1>->name_1"], "constraints": ["1<=n<=100", "1<=length(name_i)<=20"]}}
{"name": "p02801 AtCoder Beginner Contest 151 - Next Alphabet", "description": "Given is a lowercase English letter C that is not `z`. Print the letter that follows C in alphabetical order.\n\nConstraints\n\n* C is a lowercase English letter that is not `z`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nC", "grammar": {"productions": ["<S>->C"], "constraints": ["C is a lowercase English letter that is not `z`."]}}
{"name": "937_A. Olympiad", "description": "The recent All-Berland Olympiad in Informatics featured n participants with each scoring a certain amount of points.\n\nAs the head of the programming committee, you are to determine the set of participants to be awarded with diplomas with respect to the following criteria: \n\n  * At least one participant should get a diploma. \n  * None of those with score equal to zero should get awarded. \n  * When someone is awarded, all participants with score not less than his score should also be awarded. \n\n\n\nDetermine the number of ways to choose a subset of participants that will receive the diplomas.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 100) \u2014 the number of participants.\n\nThe next line contains a sequence of n integers a1, a2, ..., an (0 \u2264 ai \u2264 600) \u2014 participants' scores.\n\nIt's guaranteed that at least one participant has non-zero score.", "grammar": {"productions": ["<S>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=n<=100", "0<=a_i<=600", "at least one a_i != 0"]}}
{"name": "p03307 AtCoder Beginner Contest 102 - Multiple of 2 and N", "description": "You are given a positive integer N. Find the minimum positive integer divisible by both 2 and N.\n\nConstraints\n\n* 1 \\leq N \\leq 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->[x]"], "constraints": ["1<=x<=10^9"]}}
{"name": "1324_D. Pair of Topics", "description": "The next lecture in a high school requires two topics to be discussed. The i-th topic is interesting by a_i units for the teacher and by b_i units for the students.\n\nThe pair of topics i and j (i < j) is called good if a_i + a_j > b_i + b_j (i.e. it is more interesting for the teacher).\n\nYour task is to find the number of good pairs of topics.\n\nInput\n\nThe first line of the input contains one integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of topics.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9), where a_i is the interestingness of the i-th topic for the teacher.\n\nThe third line of the input contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^9), where b_i is the interestingness of the i-th topic for the students.", "grammar": {"productions": ["<S>->[N] <n> <A_N> <n> <B_N>", "<A_i>-><A_i-1> <s> a_i", "<A_1>->a_1", "<B_i>-><B_i-1> <s> b_i", "<B_1>->b_1"], "constraints": ["2<=N<=2*10^5", "1<=a_i<=10^9", "1<=b_i<=10^9"]}}
{"name": "p03346 AtCoder Grand Contest 024 - Backfront", "description": "You are given a sequence (P_1,P_2,...,P_N) which is a permutation of the integers from 1 through N. You would like to sort this sequence in ascending order by repeating the following operation:\n\n* Choose an element in the sequence and move it to the beginning or the end of the sequence.\n\n\n\nFind the minimum number of operations required. It can be proved that it is actually possible to sort the sequence using this operation.\n\nConstraints\n\n* 1 \\leq N \\leq 2\\times 10^5\n* (P_1,P_2,...,P_N) is a permutation of (1,2,...,N).\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nP_1\n:\nP_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> P_i", "<T_1>->P_1"], "constraints": ["1<=N<=2*10^5"]}}
{"name": "1265_A. Beautiful String", "description": "A string is called beautiful if no two consecutive characters are equal. For example, \"ababcb\", \"a\" and \"abab\" are beautiful strings, while \"aaaaaa\", \"abaa\" and \"bb\" are not.\n\nAhcl wants to construct a beautiful string. He has a string s, consisting of only characters 'a', 'b', 'c' and '?'. Ahcl needs to replace each character '?' with one of the three characters 'a', 'b' or 'c', such that the resulting string is beautiful. Please help him!\n\nMore formally, after replacing all characters '?', the condition s_i \u2260 s_{i+1} should be satisfied for all 1 \u2264 i \u2264 |s| - 1, where |s| is the length of the string s.\n\nInput\n\nThe first line contains positive integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Next t lines contain the descriptions of test cases.\n\nEach line contains a non-empty string s consisting of only characters 'a', 'b', 'c' and '?'. \n\nIt is guaranteed that in each test case a string s has at least one character '?'. The sum of lengths of strings s in all test cases does not exceed 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> string_i", "<T_1>->string_1"], "constraints": ["1<=t<=1000",  "Each string_i contains only characters 'a', 'b', 'c', and '?'.", "Each string_i has at least one character '?'.", "Total length of all string_i <= 10^5"]}}
{"name": "1110_A. Parity", "description": "You are given an integer n (n \u2265 0) represented with k digits in base (radix) b. So,\n\n$$$n = a_1 \u22c5 b^{k-1} + a_2 \u22c5 b^{k-2} + \u2026 a_{k-1} \u22c5 b + a_k.$$$\n\nFor example, if b=17, k=3 and a=[11, 15, 7] then n=11\u22c517^2+15\u22c517+7=3179+255+7=3441.\n\nDetermine whether n is even or odd.\n\nInput\n\nThe first line contains two integers b and k (2\u2264 b\u2264 100, 1\u2264 k\u2264 10^5) \u2014 the base of the number and the number of digits.\n\nThe second line contains k integers a_1, a_2, \u2026, a_k (0\u2264 a_i < b) \u2014 the digits of n.\n\nThe representation of n contains no unnecessary leading zero. That is, a_1 can be equal to 0 only if k = 1.", "grammar": {"productions": ["<S>->[b] <s> [k] <n> <D_k>", "<D_i>-><D_i-1> <s> a_i", "<D_1>->a_1"], "constraints": ["2<=b<=100", "1<=k<=10^5", "0<=a_i<b", "(a_1 != 0 or k = 1)"]}}
{"name": "439_A. Devu, the Singer and Churu, the Joker", "description": "Devu is a renowned classical singer. He is invited to many big functions/festivals. Recently he was invited to \"All World Classical Singing Festival\". Other than Devu, comedian Churu was also invited.\n\nDevu has provided organizers a list of the songs and required time for singing them. He will sing n songs, ith song will take ti minutes exactly. \n\nThe Comedian, Churu will crack jokes. All his jokes are of 5 minutes exactly.\n\nPeople have mainly come to listen Devu. But you know that he needs rest of 10 minutes after each song. On the other hand, Churu being a very active person, doesn't need any rest.\n\nYou as one of the organizers should make an optimal s\u0441hedule for the event. For some reasons you must follow the conditions:\n\n  * The duration of the event must be no more than d minutes; \n  * Devu must complete all his songs; \n  * With satisfying the two previous conditions the number of jokes cracked by Churu should be as many as possible. \n\n\n\nIf it is not possible to find a way to conduct all the songs of the Devu, output -1. Otherwise find out maximum number of jokes that Churu can crack in the grand event.\n\nInput\n\nThe first line contains two space separated integers n, d (1 \u2264 n \u2264 100; 1 \u2264 d \u2264 10000). The second line contains n space-separated integers: t1, t2, ..., tn (1 \u2264 ti \u2264 100).", "grammar": {"productions": ["<S>->[n] <s> [d] <n> <T_n>", "<T_i>-><T_i-1> <s> t_i", "<T_1>->t_1"], "constraints": ["1<=n<=100", "1<=d<=10000", "1<=t_i<=100"]}}
{"name": "770_A. New Password", "description": "Innokentiy decides to change the password in the social net \"Contact!\", but he is too lazy to invent a new password by himself. That is why he needs your help. \n\nInnokentiy decides that new password should satisfy the following conditions:\n\n  * the length of the password must be equal to n, \n  * the password should consist only of lowercase Latin letters, \n  * the number of distinct symbols in the password must be equal to k, \n  * any two consecutive symbols in the password must be distinct. \n\n\n\nYour task is to help Innokentiy and to invent a new password which will satisfy all given conditions. \n\nInput\n\nThe first line contains two positive integers n and k (2 \u2264 n \u2264 100, 2 \u2264 k \u2264 min(n, 26)) \u2014 the length of the password and the number of distinct symbols in it. \n\nPay attention that a desired new password always exists.", "grammar": {"productions": ["<S>->[n] <n> <s> <k>"], "constraints": ["2<=n<=100", "2<=k<=min(n, 26)"]}}
{"name": "903_A. Hungry Student Problem", "description": "Ivan's classes at the university have just finished, and now he wants to go to the local CFK cafe and eat some fried chicken.\n\nCFK sells chicken chunks in small and large portions. A small portion contains 3 chunks; a large one \u2014 7 chunks. Ivan wants to eat exactly x chunks. Now he wonders whether he can buy exactly this amount of chicken.\n\nFormally, Ivan wants to know if he can choose two non-negative integers a and b in such a way that a small portions and b large ones contain exactly x chunks.\n\nHelp Ivan to answer this question for several values of x!\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 100) \u2014 the number of testcases.\n\nThe i-th of the following n lines contains one integer xi (1 \u2264 xi \u2264 100) \u2014 the number of chicken chunks Ivan wants to eat.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> x_i", "<T_1>->x_1"], "constraints": ["1<=n<=100", "1<=x_i<=100"]}}
{"name": "950_A. Left-handers, Right-handers and Ambidexters", "description": "You are at a water bowling training. There are l people who play with their left hand, r people, who play with their right hand, and a ambidexters, who can play with left or right hand.\n\nThe coach decided to form a team of even number of players, exactly half of the players should play with their right hand, and exactly half of the players should play with their left hand. One player should use only on of his hands.\n\nAmbidexters play as well with their right hand as with their left hand. In the team, an ambidexter can play with their left hand, or with their right hand.\n\nPlease find the maximum possible size of the team, where equal number of players use their left and right hands, respectively.\n\nInput\n\nThe only line contains three integers l, r and a (0 \u2264 l, r, a \u2264 100) \u2014 the number of left-handers, the number of right-handers and the number of ambidexters at the training.", "grammar": {"productions": ["<S>->[n] <n> [l] <s> [r] <s> [a]"], "constraints": ["1<=n<=100", "0<=l,r,a<=100"]}}
{"name": "p03125 AtCoder Beginner Contest 118 - B +/- A", "description": "You are given positive integers A and B.\n\nIf A is a divisor of B, print A + B; otherwise, print B - A.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq A \\leq B \\leq 20\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B", "grammar": {"productions": ["<S>->A <s> B"], "constraints": ["1<=A<=B<=20"]}}
{"name": "701_A. Cards", "description": "There are n cards (n is even) in the deck. Each card has a positive integer written on it. n / 2 people will play new card game. At the beginning of the game each player gets two cards, each card is given to exactly one player. \n\nFind the way to distribute cards such that the sum of values written of the cards will be equal for each player. It is guaranteed that it is always possible.\n\nInput\n\nThe first line of the input contains integer n (2 \u2264 n \u2264 100) \u2014 the number of cards in the deck. It is guaranteed that n is even.\n\nThe second line contains the sequence of n positive integers a1, a2, ..., an (1 \u2264 ai \u2264 100), where ai is equal to the number written on the i-th card.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["2<=N<=100", "1<=a_i<=100", "N is even"]}}
{"name": "p03470 AtCoder Beginner Contest 085 - Kagami Mochi", "description": "An X-layered kagami mochi (X \u2265 1) is a pile of X round mochi (rice cake) stacked vertically where each mochi (except the bottom one) has a smaller diameter than that of the mochi directly below it. For example, if you stack three mochi with diameters of 10, 8 and 6 centimeters from bottom to top in this order, you have a 3-layered kagami mochi; if you put just one mochi, you have a 1-layered kagami mochi.\n\nLunlun the dachshund has N round mochi, and the diameter of the i-th mochi is d_i centimeters. When we make a kagami mochi using some or all of them, at most how many layers can our kagami mochi have?\n\nConstraints\n\n* 1 \u2264 N \u2264 100\n* 1 \u2264 d_i \u2264 100\n* All input values are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nd_1\n:\nd_N", "grammar": {"productions": ["<S>->N <n> <D_N>", "<D_i>-><D_i-1> <n> d_i", "<D_1>->d_1"], "constraints": ["1<=N<=100", "1<=d_i<=100"]}}
{"name": "p03369 AtCoder Beginner Contest 095 - Something on It", "description": "In \"Takahashi-ya\", a ramen restaurant, a bowl of ramen costs 700 yen (the currency of Japan), plus 100 yen for each kind of topping (boiled egg, sliced pork, green onions).\n\nA customer ordered a bowl of ramen and told which toppings to put on his ramen to a clerk. The clerk took a memo of the order as a string S. S is three characters long, and if the first character in S is `o`, it means the ramen should be topped with boiled egg; if that character is `x`, it means the ramen should not be topped with boiled egg. Similarly, the second and third characters in S mean the presence or absence of sliced pork and green onions on top of the ramen.\n\nWrite a program that, when S is given, prints the price of the corresponding bowl of ramen.\n\nConstraints\n\n* S is a string of length 3.\n* Each character in S is `o` or `x`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>->S"], "constraints": ["Length of S = 3", "Each character in S is 'o' or 'x'"]}}
{"name": "p02976 AtCoder Grand Contest 035 - Even Degrees", "description": "You are given a simple connected undirected graph with N vertices and M edges. The vertices are numbered 1 to N, and the i-th edge connects Vertex A_i and Vertex B_i. Takahashi will assign one of the two possible directions to each of the edges in the graph to make a directed graph. Determine if it is possible to make a directed graph with an even number of edges going out from every vertex. If the answer is yes, construct one such graph.\n\nConstraints\n\n* 2 \\leq N \\leq 10^5\n* N-1 \\leq M \\leq 10^5\n* 1 \\leq A_i,B_i \\leq N (1\\leq i\\leq M)\n* The given graph is simple and connected.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nA_1 B_1\n:\nA_M B_M", "grammar": {"productions": ["<S>->[N] <s> [M] <n> <T_M>", "<T_i>-><T_i-1> A_i <s> B_i <n>", "<T_1>->A_1 <s> B_1 <n>"], "constraints": ["2<=N<=10^5", "N-1<=M<=10^5", "1<=A_i<=N", "1<=B_i<=N"]}}
{"name": "p03569 CODE FESTIVAL 2017 qual C - Inserting 'x'", "description": "We have a string s consisting of lowercase English letters. Snuke can perform the following operation repeatedly:\n\n* Insert a letter `x` to any position in s of his choice, including the beginning and end of s.\n\n\n\nSnuke's objective is to turn s into a palindrome. Determine whether the objective is achievable. If it is achievable, find the minimum number of operations required.\n\nConstraints\n\n* 1 \\leq |s| \\leq 10^5\n* s consists of lowercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\ns", "grammar": {"productions": ["<S>->s"], "constraints": ["1<=|s|<=10^5", "s consists of lowercase English letters"]}}
{"name": "p03288 AtCoder Beginner Contest 104 - Rated for Me", "description": "A programming competition site AtCode regularly holds programming contests.\n\nThe next contest on AtCode is called ABC, which is rated for contestants with ratings less than 1200.\n\nThe contest after the ABC is called ARC, which is rated for contestants with ratings less than 2800.\n\nThe contest after the ARC is called AGC, which is rated for all contestants.\n\nTakahashi's rating on AtCode is R. What is the next contest rated for him?\n\nConstraints\n\n* 0 \u2264 R \u2264 4208\n* R is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nR", "grammar": {"productions": ["<S>->R"], "constraints": ["0<=R<=4208"]}}
{"name": "p02680 AtCoder Beginner Contest 168 - . (Single Dot)", "description": "There is a grass field that stretches infinitely.\n\nIn this field, there is a negligibly small cow. Let (x, y) denote the point that is x\\ \\mathrm{cm} south and y\\ \\mathrm{cm} east of the point where the cow stands now. The cow itself is standing at (0, 0).\n\nThere are also N north-south lines and M east-west lines drawn on the field. The i-th north-south line is the segment connecting the points (A_i, C_i) and (B_i, C_i), and the j-th east-west line is the segment connecting the points (D_j, E_j) and (D_j, F_j).\n\nWhat is the area of the region the cow can reach when it can move around as long as it does not cross the segments (including the endpoints)? If this area is infinite, print `INF` instead.\n\nConstraints\n\n* All values in input are integers between -10^9 and 10^9 (inclusive).\n* 1 \\leq N, M \\leq 1000\n* A_i < B_i\\ (1 \\leq i \\leq N)\n* E_j < F_j\\ (1 \\leq j \\leq M)\n* The point (0, 0) does not lie on any of the given segments.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nA_1 B_1 C_1\n:\nA_N B_N C_N\nD_1 E_1 F_1\n:\nD_M E_M F_M", "grammar": {"productions": ["<S>->N <s> M <n> <SEG_N> <SEG_M>", "<SEG_N_i>-><SEG_N_i-1> A_i <s> B_i <s> C_i <n>", "<SEG_N_1>->A_1 <s> B_1 <s> C_1 <n>", "<SEG_M_j>-><SEG_M_j-1> D_j <s> E_j <s> F_j <n>", "<SEG_M_1>->D_1 <s> E_1 <s> F_1"], "constraints": ["-10^9<=A_i,B_i,C_i,D_j,E_j,F_j<=10^9", "1<=N,M<=1000", "A_i<B_i", "E_j<F_j", "(0, 0) not on any segments"]}}
{"name": "1399_D. Binary String To Subsequences", "description": "You are given a binary string s consisting of n zeros and ones.\n\nYour task is to divide the given string into the minimum number of subsequences in such a way that each character of the string belongs to exactly one subsequence and each subsequence looks like \"010101 ...\" or \"101010 ...\" (i.e. the subsequence should not contain two adjacent zeros or ones).\n\nRecall that a subsequence is a sequence that can be derived from the given sequence by deleting zero or more elements without changing the order of the remaining elements. For example, subsequences of \"1011101\" are \"0\", \"1\", \"11111\", \"0111\", \"101\", \"1001\", but not \"000\", \"101010\" and \"11100\".\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 2 \u22c5 10^4) \u2014 the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the length of s. The second line of the test case contains n characters '0' and '1' \u2014 the string s.\n\nIt is guaranteed that the sum of n does not exceed 2 \u22c5 10^5 (\u2211 n \u2264 2 \u22c5 10^5).", "grammar": {"productions": ["<S>->t <n> <TC_t>", "<TC_i>-><TC_i-1> n <n> <STR_n>", "<TC_1>->n <n> <STR_n>", "<STR_i>-><STR_i-1> char", "<STR_1>->char"], "constraints": ["1<=t<=2*10^4", "1<=n<=2*10^5", "char is in {'0','1'}"]}}
{"name": "p02271 Exhaustive Search", "description": "Write a program which reads a sequence A of n elements and an integer M, and outputs \"yes\" if you can make M by adding elements in A, otherwise \"no\". You can use an element only once.\n\nYou are given the sequence A and q questions where each question contains Mi.\n\nNotes\n\nYou can solve this problem by a Burte Force approach. Suppose solve(p, t) is a function which checkes whether you can make t by selecting elements after p-th element (inclusive). Then you can recursively call the following functions:\n\nsolve(0, M)\nsolve(1, M-{sum created from elements before 1st element})\nsolve(2, M-{sum created from elements before 2nd element})\n...\n\nThe recursive function has two choices: you selected p-th element and not. So, you can check solve(p+1, t-A[p]) and solve(p+1, t) in solve(p, t) to check the all combinations.\n\nFor example, the following figure shows that 8 can be made by A[0] + A[2].\n\n<image>\n\nConstraints\n\n* n \u2264 20\n* q \u2264 200\n* 1 \u2264 elements in A \u2264 2000\n* 1 \u2264 Mi \u2264 2000\n\nInput\n\nIn the first line n is given. In the second line, n integers are given. In the third line q is given. Then, in the fourth line, q integers (Mi) are given.", "grammar": {"productions": ["<S>->n <n> <A_n> <n> q <n> <M_q>", "<A_i>-><A_i-1> <s> A_i", "<A_1>->A_1", "<M_i>-><M_i-1> <s> Mi", "<M_1>->M_1"], "constraints": ["n<=20", "q<=200", "1<=A_i<=2000", "1<=Mi<=2000"]}}
{"name": "1016_A. Death Note", "description": "You received a notebook which is called Death Note. This notebook has infinite number of pages. A rule is written on the last page (huh) of this notebook. It says: \"You have to write names in this notebook during n consecutive days. During the i-th day you have to write exactly a_i names.\". You got scared (of course you got scared, who wouldn't get scared if he just receive a notebook which is named Death Note with a some strange rule written in it?).\n\nOf course, you decided to follow this rule. When you calmed down, you came up with a strategy how you will write names in the notebook. You have calculated that each page of the notebook can contain exactly m names. You will start writing names from the first page. You will write names on the current page as long as the limit on the number of names on this page is not exceeded. When the current page is over, you turn the page. Note that you always turn the page when it ends, it doesn't matter if it is the last day or not. If after some day the current page still can hold at least one name, during the next day you will continue writing the names from the current page.\n\nNow you are interested in the following question: how many times will you turn the page during each day? You are interested in the number of pages you will turn each day from 1 to n.\n\nInput\n\nThe first line of the input contains two integers n, m (1 \u2264 n \u2264 2 \u22c5 10^5, 1 \u2264 m \u2264 10^9) \u2014 the number of days you will write names in the notebook and the number of names which can be written on each page of the notebook.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9), where a_i means the number of names you will write in the notebook during the i-th day.", "grammar": {"productions": ["<S>->n <s> m <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=2*10^5", "1<=m<=10^9", "1<=a_i<=10^9"]}}
{"name": "1391_C. Cyclic Permutations ", "description": "A permutation of length n is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation (2 appears twice in the array) and [1,3,4] is also not a permutation (n=3 but there is 4 in the array).\n\nConsider a permutation p of length n, we build a graph of size n using it as follows: \n\n  * For every 1 \u2264 i \u2264 n, find the largest j such that 1 \u2264 j < i and p_j > p_i, and add an undirected edge between node i and node j \n  * For every 1 \u2264 i \u2264 n, find the smallest j such that i < j \u2264 n and p_j > p_i, and add an undirected edge between node i and node j \n\n\n\nIn cases where no such j exists, we make no edges. Also, note that we make edges between the corresponding indices, not the values at those indices.\n\nFor clarity, consider as an example n = 4, and p = [3,1,4,2]; here, the edges of the graph are (1,3),(2,1),(2,3),(4,3).\n\nA permutation p is cyclic if the graph built using p has at least one simple cycle. \n\nGiven n, find the number of cyclic permutations of length n. Since the number may be very large, output it modulo 10^9+7.\n\nPlease refer to the Notes section for the formal definition of a simple cycle\n\nInput\n\nThe first and only line contains a single integer n (3 \u2264 n \u2264 10^6).", "grammar": {"productions": ["<S>->n"], "constraints": ["3<=n<=10^6"]}}
{"name": "p04019 AtCoder Grand Contest 003 - Wanna go back home", "description": "Snuke lives on an infinite two-dimensional plane. He is going on an N-day trip. At the beginning of Day 1, he is at home. His plan is described in a string S of length N. On Day i(1 \u2266 i \u2266 N), he will travel a positive distance in the following direction:\n\n* North if the i-th letter of S is `N`\n* West if the i-th letter of S is `W`\n* South if the i-th letter of S is `S`\n* East if the i-th letter of S is `E`\n\n\n\nHe has not decided each day's travel distance. Determine whether it is possible to set each day's travel distance so that he will be back at home at the end of Day N.\n\nConstraints\n\n* 1 \u2266 | S | \u2266 1000\n* S consists of the letters `N`, `W`, `S`, `E`.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>->S"], "constraints": ["1<=|S|<=1000", "S consists of the letters 'N', 'W', 'S', 'E'"]}}
{"name": "p03338 AtCoder Beginner Contest 098 - Cut and Count", "description": "You are given a string S of length N consisting of lowercase English letters. We will cut this string at one position into two strings X and Y. Here, we would like to maximize the number of different letters contained in both X and Y. Find the largest possible number of different letters contained in both X and Y when we cut the string at the optimal position.\n\nConstraints\n\n* 2 \\leq N \\leq 100\n* |S| = N\n* S consists of lowercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nS", "grammar": {"productions": ["<S>->N <n> S"], "constraints": ["2<=N<=100", "|S|=N", "S consists of lowercase English letters"]}}
{"name": "p03370 AtCoder Beginner Contest 095 - Bitter Alchemy", "description": "Akaki, a patissier, can make N kinds of doughnut using only a certain powder called \"Okashi no Moto\" (literally \"material of pastry\", simply called Moto below) as ingredient. These doughnuts are called Doughnut 1, Doughnut 2, ..., Doughnut N. In order to make one Doughnut i (1 \u2264 i \u2264 N), she needs to consume m_i grams of Moto. She cannot make a non-integer number of doughnuts, such as 0.5 doughnuts.\n\nNow, she has X grams of Moto. She decides to make as many doughnuts as possible for a party tonight. However, since the tastes of the guests differ, she will obey the following condition:\n\n* For each of the N kinds of doughnuts, make at least one doughnut of that kind.\n\n\n\nAt most how many doughnuts can be made here? She does not necessarily need to consume all of her Moto. Also, under the constraints of this problem, it is always possible to obey the condition.\n\nConstraints\n\n* 2 \u2264 N \u2264 100\n* 1 \u2264 m_i \u2264 1000\n* m_1 + m_2 + ... + m_N \u2264 X \u2264 10^5\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN X\nm_1\nm_2\n:\nm_N", "grammar": {"productions": ["<S>->N <s> X <n> <M_N>", "<M_i>-><M_i-1> <n> m_i", "<M_1>->m_1"], "constraints": ["2<=N<=100", "1<=m_i<=1000", "m_1+m_2+...+m_N<=X<=10^5"]}}
{"name": "1060_A. Phone Numbers", "description": "Let's call a string a phone number if it has length 11 and fits the pattern \"8xxxxxxxxxx\", where each \"x\" is replaced by a digit.\n\nFor example, \"80123456789\" and \"80000000000\" are phone numbers, while \"8012345678\" and \"79000000000\" are not.\n\nYou have n cards with digits, and you want to use them to make as many phone numbers as possible. Each card must be used in at most one phone number, and you don't have to use all cards. The phone numbers do not necessarily have to be distinct.\n\nInput\n\nThe first line contains an integer n \u2014 the number of cards with digits that you have (1 \u2264 n \u2264 100).\n\nThe second line contains a string of n digits (characters \"0\", \"1\", ..., \"9\") s_1, s_2, \u2026, s_n. The string will not contain any other characters, such as leading or trailing spaces.", "grammar": {"productions": ["<S>->[n] <n> s", "s->s_1 <s> s_2 <s> ... <s> s_n"], "constraints": ["1<=n<=100", "s_i in {'0','1','2','3','4','5','6','7','8','9'}"]}}
{"name": "1301_B. Motarack's Birthday", "description": "Dark is going to attend Motarack's birthday. Dark decided that the gift he is going to give to Motarack is an array a of n non-negative integers.\n\nDark created that array 1000 years ago, so some elements in that array disappeared. Dark knows that Motarack hates to see an array that has two adjacent elements with a high absolute difference between them. He doesn't have much time so he wants to choose an integer k (0 \u2264 k \u2264 10^{9}) and replaces all missing elements in the array a with k.\n\nLet m be the maximum absolute difference between all adjacent elements (i.e. the maximum value of |a_i - a_{i+1}| for all 1 \u2264 i \u2264 n - 1) in the array a after Dark replaces all missing elements with k.\n\nDark should choose an integer k so that m is minimized. Can you help him?\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains one integer n (2 \u2264 n \u2264 10^{5}) \u2014 the size of the array a.\n\nThe second line of each test case contains n integers a_1, a_2, \u2026, a_n (-1 \u2264 a_i \u2264 10 ^ {9}). If a_i = -1, then the i-th integer is missing. It is guaranteed that at least one integer is missing in every test case.\n\nIt is guaranteed, that the sum of n for all test cases does not exceed 4 \u22c5 10 ^ {5}.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> [n] <n> <n> <L_n>", "<T_1>->[n] <n> <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=10^4", "2<=n<=10^5", "-1<=a_i<=10^9", "sum(n)<=4*10^5"]}}
{"name": "1311_C. Perform the Combo", "description": "You want to perform the combo on your opponent in one popular fighting game. The combo is the string s consisting of n lowercase Latin letters. To perform the combo, you have to press all buttons in the order they appear in s. I.e. if s=\"abca\" then you have to press 'a', then 'b', 'c' and 'a' again.\n\nYou know that you will spend m wrong tries to perform the combo and during the i-th try you will make a mistake right after p_i-th button (1 \u2264 p_i < n) (i.e. you will press first p_i buttons right and start performing the combo from the beginning). It is guaranteed that during the m+1-th try you press all buttons right and finally perform the combo.\n\nI.e. if s=\"abca\", m=2 and p = [1, 3] then the sequence of pressed buttons will be 'a' (here you're making a mistake and start performing the combo from the beginning), 'a', 'b', 'c', (here you're making a mistake and start performing the combo from the beginning), 'a' (note that at this point you will not perform the combo because of the mistake), 'b', 'c', 'a'.\n\nYour task is to calculate for each button (letter) the number of times you'll press it.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThen t test cases follow.\n\nThe first line of each test case contains two integers n and m (2 \u2264 n \u2264 2 \u22c5 10^5, 1 \u2264 m \u2264 2 \u22c5 10^5) \u2014 the length of s and the number of tries correspondingly.\n\nThe second line of each test case contains the string s consisting of n lowercase Latin letters.\n\nThe third line of each test case contains m integers p_1, p_2, ..., p_m (1 \u2264 p_i < n) \u2014 the number of characters pressed right during the i-th try.\n\nIt is guaranteed that the sum of n and the sum of m both does not exceed 2 \u22c5 10^5 (\u2211 n \u2264 2 \u22c5 10^5, \u2211 m \u2264 2 \u22c5 10^5).\n\nIt is guaranteed that the answer for each letter does not exceed 2 \u22c5 10^9.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> [n] <n> <s> m <n> s <n> <P_m>", "<T_1>->[n] <n> <s> m <n> s <n> <P_m>", "<P_i>-><P_i-1> <s> p_i", "<P_1>->p_1"], "constraints": ["1<=t<=10^4", "2<=n<=2*10^5", "1<=m<=2*10^5", "1<=p_i<n", "sum(n)<=2*10^5", "sum(m)<=2*10^5", "for each letter in s, 1<=letter<=2*10^9"]}}
{"name": "551_A. GukiZ and Contest", "description": "Professor GukiZ likes programming contests. He especially likes to rate his students on the contests he prepares. Now, he has decided to prepare a new contest. \n\nIn total, n students will attend, and before the start, every one of them has some positive integer rating. Students are indexed from 1 to n. Let's denote the rating of i-th student as ai. After the contest ends, every student will end up with some positive integer position. GukiZ expects that his students will take places according to their ratings. \n\nHe thinks that each student will take place equal to <image>. In particular, if student A has rating strictly lower then student B, A will get the strictly better position than B, and if two students have equal ratings, they will share the same position. \n\nGukiZ would like you to reconstruct the results by following his expectations. Help him and determine the position after the end of the contest for each of his students if everything goes as expected.\n\nInput\n\nThe first line contains integer n (1 \u2264 n \u2264 2000), number of GukiZ's students. \n\nThe second line contains n numbers a1, a2, ... an (1 \u2264 ai \u2264 2000) where ai is the rating of i-th student (1 \u2264 i \u2264 n).", "grammar": {"productions": ["<S>->N <n> <A_N>", "<A_i>-><A_i-1> <s> a_i", "<A_1>->a_1"], "constraints": ["1<=N<=2000", "1<=a_i<=2000"]}}
{"name": "p03821 AtCoder Grand Contest 009 - Multiple Array", "description": "There are an integer sequence A_1,...,A_N consisting of N terms, and N buttons. When the i-th (1 \u2266 i \u2266 N) button is pressed, the values of the i terms from the first through the i-th are all incremented by 1.\n\nThere is also another integer sequence B_1,...,B_N. Takahashi will push the buttons some number of times so that for every i, A_i will be a multiple of B_i.\n\nFind the minimum number of times Takahashi will press the buttons.\n\nConstraints\n\n* All input values are integers.\n* 1 \u2266 N \u2266 10^5\n* 0 \u2266 A_i \u2266 10^9(1 \u2266 i \u2266 N)\n* 1 \u2266 B_i \u2266 10^9(1 \u2266 i \u2266 N)\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN\nA_1 B_1\n:\nA_N B_N", "grammar": {"productions": ["<S>->N <n> <AB_N>", "<AB_i>-><AB_i-1> <n> A_i <s> B_i", "<AB_1>->A_1 <s> B_1"], "constraints": ["1<=N<=10^5", "0<=A_i<=10^9", "1<=B_i<=10^9"]}}
{"name": "p03168 Educational DP Contest - Coins", "description": "Let N be a positive odd number.\n\nThere are N coins, numbered 1, 2, \\ldots, N. For each i (1 \\leq i \\leq N), when Coin i is tossed, it comes up heads with probability p_i and tails with probability 1 - p_i.\n\nTaro has tossed all the N coins. Find the probability of having more heads than tails.\n\nConstraints\n\n* N is an odd number.\n* 1 \\leq N \\leq 2999\n* p_i is a real number and has two decimal places.\n* 0 < p_i < 1\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\np_1 p_2 \\ldots p_N", "grammar": {"productions": ["<S>->N <n> <P_N>", "<P_i>-><P_i-1> <s> p_i", "<P_1>->p_1"], "constraints": ["N is odd","1<=N<=2999", "0<p_i<1"]}}
{"name": "p03003 AtCoder Beginner Contest 130 - Common Subsequence", "description": "You are given two integer sequences S and T of length N and M, respectively, both consisting of integers between 1 and 10^5 (inclusive).\n\nIn how many pairs of a subsequence of S and a subsequence of T do the two subsequences are the same in content?\n\nHere the subsequence of A is a sequence obtained by removing zero or more elements from A and concatenating the remaining elements without changing the order.\n\nFor both S and T, we distinguish two subsequences if the sets of the indices of the removed elements are different, even if the subsequences are the same in content.\n\nSince the answer can be tremendous, print the number modulo 10^9+7.\n\nConstraints\n\n* 1 \\leq N, M \\leq 2 \\times 10^3\n* The length of S is N.\n* The length of T is M.\n* 1 \\leq S_i, T_i \\leq 10^5\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nS_1 S_2 ... S_{N-1} S_{N}\nT_1 T_2 ... T_{M-1} T_{M}", "grammar": {"productions": ["<S>->N <s> M <n> <U_N> <n> <V_M>", "<U_i>-><U_i-1> <s> S_i", "<U_1>->S_1", "<V_i>-><V_i-1> <s> T_i", "<V_1>->T_1"], "constraints": ["1<=N,M<=2*10^3", "1<=S_i,T_i<=10^5"]}}
{"name": "1054_A. Elevator or Stairs?", "description": "Masha lives in a multi-storey building, where floors are numbered with positive integers. Two floors are called adjacent if their numbers differ by one. Masha decided to visit Egor. Masha lives on the floor x, Egor on the floor y (not on the same floor with Masha).\n\nThe house has a staircase and an elevator. If Masha uses the stairs, it takes t_1 seconds for her to walk between adjacent floors (in each direction). The elevator passes between adjacent floors (in each way) in t_2 seconds. The elevator moves with doors closed. The elevator spends t_3 seconds to open or close the doors. We can assume that time is not spent on any action except moving between adjacent floors and waiting for the doors to open or close. If Masha uses the elevator, it immediately goes directly to the desired floor.\n\nComing out of the apartment on her floor, Masha noticed that the elevator is now on the floor z and has closed doors. Now she has to choose whether to use the stairs or use the elevator. \n\nIf the time that Masha needs to get to the Egor's floor by the stairs is strictly less than the time it will take her using the elevator, then she will use the stairs, otherwise she will choose the elevator.\n\nHelp Mary to understand whether to use the elevator or the stairs.\n\nInput\n\nThe only line contains six integers x, y, z, t_1, t_2, t_3 (1 \u2264 x, y, z, t_1, t_2, t_3 \u2264 1000) \u2014 the floor Masha is at, the floor Masha wants to get to, the floor the elevator is located on, the time it takes Masha to pass between two floors by stairs, the time it takes the elevator to pass between two floors and the time it takes for the elevator to close or open the doors.\n\nIt is guaranteed that x \u2260 y.", "grammar": {"productions": ["<S>->x <s> y <s> z <s> t_1 <s> t_2 <s> t_3"], "constraints": ["1<=x,y,z,t_1,t_2,t_3<=1000", "x!=y"]}}
{"name": "570_B. Simple Game", "description": "One day Misha and Andrew were playing a very simple game. First, each player chooses an integer in the range from 1 to n. Let's assume that Misha chose number m, and Andrew chose number a.\n\nThen, by using a random generator they choose a random integer c in the range between 1 and n (any integer from 1 to n is chosen with the same probability), after which the winner is the player, whose number was closer to c. The boys agreed that if m and a are located on the same distance from c, Misha wins.\n\nAndrew wants to win very much, so he asks you to help him. You know the number selected by Misha, and number n. You need to determine which value of a Andrew must choose, so that the probability of his victory is the highest possible.\n\nMore formally, you need to find such integer a (1 \u2264 a \u2264 n), that the probability that <image> is maximal, where c is the equiprobably chosen integer from 1 to n (inclusive).\n\nInput\n\nThe first line contains two integers n and m (1 \u2264 m \u2264 n \u2264 10^9) \u2014 the range of numbers in the game, and the number selected by Misha respectively.", "grammar": {"productions": ["<S>->n <s> m"], "constraints": ["1<=m<=n<=10^9"]}}
{"name": "688_B. Lovely Palindromes", "description": "Pari has a friend who loves palindrome numbers. A palindrome number is a number that reads the same forward or backward. For example 12321, 100001 and 1 are palindrome numbers, while 112 and 1021 are not.\n\nPari is trying to love them too, but only very special and gifted people can understand the beauty behind palindrome numbers. Pari loves integers with even length (i.e. the numbers with even number of digits), so she tries to see a lot of big palindrome numbers with even length (like a 2-digit 11 or 6-digit 122221), so maybe she could see something in them.\n\nNow Pari asks you to write a program that gets a huge integer n from the input and tells what is the n-th even-length positive palindrome number?\n\nInput\n\nThe only line of the input contains a single integer n (1 \u2264 n \u2264 10^100 000).", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=10^100000"]}}
{"name": "1028_A. Find Square", "description": "Consider a table of size n \u00d7 m, initially fully white. Rows are numbered 1 through n from top to bottom, columns 1 through m from left to right. Some square inside the table with odd side length was painted black. Find the center of this square.\n\nInput\n\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 115) \u2014 the number of rows and the number of columns in the table.\n\nThe i-th of the next n lines contains a string of m characters s_{i1} s_{i2} \u2026 s_{im} (s_{ij} is 'W' for white cells and 'B' for black cells), describing the i-th row of the table.", "grammar": {"productions": ["<S>->n <s> m <n> <T_n>", "<T_i>-><T_i-1> <n> s_i", "<T_1>->s_1"], "constraints": ["1<=n,m<=115", "s_ij is either 'W' or 'B'"]}}
{"name": "1353_D. Constructing the Array", "description": "You are given an array a of length n consisting of zeros. You perform n actions with this array: during the i-th action, the following sequence of operations appears:\n\n  1. Choose the maximum by length subarray (continuous subsegment) consisting only of zeros, among all such segments choose the leftmost one; \n  2. Let this segment be [l; r]. If r-l+1 is odd (not divisible by 2) then assign (set) a[(l+r)/(2)] := i (where i is the number of the current action), otherwise (if r-l+1 is even) assign (set) a[(l+r-1)/(2)] := i. \n\n\n\nConsider the array a of length 5 (initially a=[0, 0, 0, 0, 0]). Then it changes as follows:\n\n  1. Firstly, we choose the segment [1; 5] and assign a[3] := 1, so a becomes [0, 0, 1, 0, 0]; \n  2. then we choose the segment [1; 2] and assign a[1] := 2, so a becomes [2, 0, 1, 0, 0]; \n  3. then we choose the segment [4; 5] and assign a[4] := 3, so a becomes [2, 0, 1, 3, 0]; \n  4. then we choose the segment [2; 2] and assign a[2] := 4, so a becomes [2, 4, 1, 3, 0]; \n  5. and at last we choose the segment [5; 5] and assign a[5] := 5, so a becomes [2, 4, 1, 3, 5]. \n\n\n\nYour task is to find the array a of length n after performing all n actions. Note that the answer exists and unique.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains one integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the length of a.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5 (\u2211 n \u2264 2 \u22c5 10^5).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> [n] n", "<T_1>->[n] n"], "constraints": ["1<=t<=10^4", "1<=n<=2*10^5"]}}
{"name": "559_B. Equivalent Strings", "description": "Today on a lecture about strings Gerald learned a new definition of string equivalency. Two strings a and b of equal length are called equivalent in one of the two cases: \n\n  1. They are equal. \n  2. If we split string a into two halves of the same size a1 and a2, and string b into two halves of the same size b1 and b2, then one of the following is correct: \n    1. a1 is equivalent to b1, and a2 is equivalent to b2\n    2. a1 is equivalent to b2, and a2 is equivalent to b1\n\n\n\nAs a home task, the teacher gave two strings to his students and asked to determine if they are equivalent.\n\nGerald has already completed this home task. Now it's your turn!\n\nInput\n\nThe first two lines of the input contain two strings given by the teacher. Each of them has the length from 1 to 200 000 and consists of lowercase English letters. The strings have the same length.", "grammar": {"productions": ["<S>->string1 [n] string2", "string1-><char><string1>", "string1-><char>", "string2-><char><string2>", "string2-><char>", "<char>->a|b|c|...|z"], "constraints": ["1<=length(string1)<=200000", "1<=length(string2)<=200000", "length(string1)=length(string2)"]}}
{"name": "1140_A. Detective Book", "description": "Ivan recently bought a detective book. The book is so interesting that each page of this book introduces some sort of a mystery, which will be explained later. The i-th page contains some mystery that will be explained on page a_i (a_i \u2265 i).\n\nIvan wants to read the whole book. Each day, he reads the first page he didn't read earlier, and continues to read the following pages one by one, until all the mysteries he read about are explained and clear to him (Ivan stops if there does not exist any page i such that Ivan already has read it, but hasn't read page a_i). After that, he closes the book and continues to read it on the following day from the next page.\n\nHow many days will it take to read the whole book?\n\nInput\n\nThe first line contains single integer n (1 \u2264 n \u2264 10^4) \u2014 the number of pages in the book.\n\nThe second line contains n integers a_1, a_2, ..., a_n (i \u2264 a_i \u2264 n), where a_i is the number of page which contains the explanation of the mystery on page i.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=10^4", "i<=a_i<=n"]}}
{"name": "699_C. Vacations", "description": "Vasya has n days of vacations! So he decided to improve his IT skills and do sport. Vasya knows the following information about each of this n days: whether that gym opened and whether a contest was carried out in the Internet on that day. For the i-th day there are four options:\n\n  1. on this day the gym is closed and the contest is not carried out; \n  2. on this day the gym is closed and the contest is carried out; \n  3. on this day the gym is open and the contest is not carried out; \n  4. on this day the gym is open and the contest is carried out. \n\n\n\nOn each of days Vasya can either have a rest or write the contest (if it is carried out on this day), or do sport (if the gym is open on this day).\n\nFind the minimum number of days on which Vasya will have a rest (it means, he will not do sport and write the contest at the same time). The only limitation that Vasya has \u2014 he does not want to do the same activity on two consecutive days: it means, he will not do sport on two consecutive days, and write the contest on two consecutive days.\n\nInput\n\nThe first line contains a positive integer n (1 \u2264 n \u2264 100) \u2014 the number of days of Vasya's vacations.\n\nThe second line contains the sequence of integers a1, a2, ..., an (0 \u2264 ai \u2264 3) separated by space, where: \n\n  * ai equals 0, if on the i-th day of vacations the gym is closed and the contest is not carried out; \n  * ai equals 1, if on the i-th day of vacations the gym is closed, but the contest is carried out; \n  * ai equals 2, if on the i-th day of vacations the gym is open and the contest is not carried out; \n  * ai equals 3, if on the i-th day of vacations the gym is open and the contest is carried out.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> ai", "<T_1>->ai"], "constraints": ["1<=n<=100", "0<=ai<=3"]}}
{"name": "p03337 AtCoder Beginner Contest 098 - Add Sub Mul", "description": "You are given two integers A and B. Find the largest value among A+B, A-B and A \\times B.\n\nConstraints\n\n* -1000 \\leq A,B \\leq 1000\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B", "grammar": {"productions": ["<S>->A <s> B"], "constraints": ["-1000<=A<=1000", "-1000<=B<=1000"]}}
{"name": "1373_D. Maximum Sum on Even Positions", "description": "You are given an array a consisting of n integers. Indices of the array start from zero (i. e. the first element is a_0, the second one is a_1, and so on).\n\nYou can reverse at most one subarray (continuous subsegment) of this array. Recall that the subarray of a with borders l and r is a[l; r] = a_l, a_{l + 1}, ..., a_{r}.\n\nYour task is to reverse such a subarray that the sum of elements on even positions of the resulting array is maximized (i. e. the sum of elements a_0, a_2, ..., a_{2k} for integer k = \u230a(n-1)/(2)\u230b should be maximum possible).\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 2 \u22c5 10^4) \u2014 the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the length of a. The second line of the test case contains n integers a_0, a_1, ..., a_{n-1} (1 \u2264 a_i \u2264 10^9), where a_i is the i-th element of a.\n\nIt is guaranteed that the sum of n does not exceed 2 \u22c5 10^5 (\u2211 n \u2264 2 \u22c5 10^5).", "grammar": {"productions": ["S>->[t] <n> <T_t>", "<T_i>-><T_i-1> [n] <n> [n] <L_n>", "<T_1>->[n] <n> [n] <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_0"], "constraints": ["1<=t<=2*10^4", "1<=n<=2*10^5", "1<=a_i<=10^9"]}}
{"name": "p02600 M-SOLUTIONS Programming Contest 2020 - Kyu in AtCoder", "description": "M-kun is a competitor in AtCoder, whose highest rating is X.\nIn this site, a competitor is given a kyu (class) according to his/her highest rating. For ratings from 400 through 1999, the following kyus are given:\n\n* From 400 through 599: 8-kyu\n* From 600 through 799: 7-kyu\n* From 800 through 999: 6-kyu\n* From 1000 through 1199: 5-kyu\n* From 1200 through 1399: 4-kyu\n* From 1400 through 1599: 3-kyu\n* From 1600 through 1799: 2-kyu\n* From 1800 through 1999: 1-kyu\n\n\n\nWhat kyu does M-kun have?\n\nConstraints\n\n* 400 \\leq X \\leq 1999\n* X is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX", "grammar": {"productions": ["<S>->X"], "constraints": ["400<=X<=1999"]}}
{"name": "275_A. Lights Out", "description": "Lenny is playing a game on a 3 \u00d7 3 grid of lights. In the beginning of the game all lights are switched on. Pressing any of the lights will toggle it and all side-adjacent lights. The goal of the game is to switch all the lights off. We consider the toggling as follows: if the light was switched on then it will be switched off, if it was switched off then it will be switched on.\n\nLenny has spent some time playing with the grid and by now he has pressed each light a certain number of times. Given the number of times each light is pressed, you have to print the current state of each light.\n\nInput\n\nThe input consists of three rows. Each row contains three integers each between 0 to 100 inclusive. The j-th number in the i-th row is the number of times the j-th light of the i-th row of the grid is pressed.", "grammar": {"productions": ["<S>-><R1> <n> <R2> <n> <R3>", "<R1>->[a1] <s> [a2] <s> [a3]", "<R2>->[b1] <s> [b2] <s> [b3]", "<R3>->[c1] <s> [c2] <s> [c3]"], "constraints": ["0<=a1,a2,a3,b1,b2,b3,c1,c2,c3<=100"]}}
{"name": "1371_D. Grid-00100", "description": "A mad scientist Dr.Jubal has made a competitive programming task. Try to solve it!\n\nYou are given integers n,k. Construct a grid A with size n \u00d7 n consisting of integers 0 and 1. The very important condition should be satisfied: the sum of all elements in the grid is exactly k. In other words, the number of 1 in the grid is equal to k.\n\nLet's define:\n\n  * A_{i,j} as the integer in the i-th row and the j-th column. \n  * R_i = A_{i,1}+A_{i,2}+...+A_{i,n} (for all 1 \u2264 i \u2264 n). \n  * C_j = A_{1,j}+A_{2,j}+...+A_{n,j} (for all 1 \u2264 j \u2264 n). \n  * In other words, R_i are row sums and C_j are column sums of the grid A. \n  * For the grid A let's define the value f(A) = (max(R)-min(R))^2 + (max(C)-min(C))^2 (here for an integer sequence X we define max(X) as the maximum value in X and min(X) as the minimum value in X). \n\n\n\nFind any grid A, which satisfies the following condition. Among such grids find any, for which the value f(A) is the minimum possible. Among such tables, you can find any.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Next t lines contain descriptions of test cases.\n\nFor each test case the only line contains two integers n, k (1 \u2264 n \u2264 300, 0 \u2264 k \u2264 n^2).\n\nIt is guaranteed that the sum of n^2 for all test cases does not exceed 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <s> [k]", "<T_1>->[n] <s> [k]"], "constraints": ["1<=t<=100","1<=n<=300", "0<=k<=n^2", "sum(n^2)<=10^5"]}}
{"name": "1242_A. Tile Painting", "description": "Ujan has been lazy lately, but now has decided to bring his yard to good shape. First, he decided to paint the path from his house to the gate.\n\nThe path consists of n consecutive tiles, numbered from 1 to n. Ujan will paint each tile in some color. He will consider the path aesthetic if for any two different tiles with numbers i and j, such that |j - i| is a divisor of n greater than 1, they have the same color. Formally, the colors of two tiles with numbers i and j should be the same if |i-j| > 1 and n mod |i-j| = 0 (where x mod y is the remainder when dividing x by y).\n\nUjan wants to brighten up space. What is the maximum number of different colors that Ujan can use, so that the path is aesthetic?\n\nInput\n\nThe first line of input contains a single integer n (1 \u2264 n \u2264 10^{12}), the length of the path.", "grammar": {"productions": ["<S>->[n]"], "constraints": ["1<=n<=10^12"]}}
{"name": "1351_C. Skier", "description": "Skier rides on a snowy field. Its movements can be described by a string of characters 'S', 'N', 'W', 'E' (which correspond to 1 meter movement in the south, north, west or east direction respectively).\n\nIt is known that if he moves along a previously unvisited segment of a path (i.e. this segment of the path is visited the first time), then the time of such movement is 5 seconds. If he rolls along previously visited segment of a path (i.e., this segment of the path has been covered by his path before), then it takes 1 second.\n\nFind the skier's time to roll all the path.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases in the input. Then t test cases follow.\n\nEach set is given by one nonempty string of the characters 'S', 'N', 'W', 'E'. The length of the string does not exceed 10^5 characters.\n\nThe sum of the lengths of t given lines over all test cases in the input does not exceed 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <string_i>", "<T_1>-><string_1>"], "constraints": ["1<=t<=10^4", "1<=length(string_i)<=10^5", "sum(length(string_i))<=10^5", "string_i contains only 'S', 'N', 'W', 'E'"]}}
