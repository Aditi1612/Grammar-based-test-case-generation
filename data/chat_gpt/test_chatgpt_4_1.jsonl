{"name": "p02936 AtCoder Beginner Contest 138 - Ki", "description": "Constraints\n\n* 2 \\leq N \\leq 2 \\times 10^5\n* 1 \\leq Q \\leq 2 \\times 10^5\n* 1 \\leq a_i < b_i \\leq N\n* 1 \\leq p_j \\leq N\n* 1 \\leq x_j \\leq 10^4\n* The given graph is a tree.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN Q\na_1 b_1\n:\na_{N-1} b_{N-1}\np_1 x_1\n:\np_Q x_Q", "grammar": {"productions": ["<S>->[N,Q] <E_N-1> <P_Q>", "<E_i>-><E_i-1> <e> a_i b_i", "<E_1>->a_1 b_1", "<P_j>-><P_j-1> <p> p_j x_j", "<P_1>->p_1 x_1"], "constraints": ["1<=N<=2*10^5", "1<=Q<=2*10^5", "1<=a_i<b_i<=N", "1<=p_j<=N", "1<=x_j<=10^4"]}}
{"name": "p02756 AtCoder Beginner Contest 158 - String Formation", "description": "Constraints\n\n* 1 \\leq |S| \\leq 10^5\n* S consists of lowercase English letters.\n* 1 \\leq Q \\leq 2 \\times 10^5\n* T_i = 1 or 2.\n* F_i = 1 or 2, if provided.\n* C_i is a lowercase English letter, if provided.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS\nQ\nQuery_1\n:\nQuery_Q\n\n\nIn the 3-rd through the (Q+2)-th lines, Query_i is one of the following:\n\n\n1\n\n\nwhich means T_i = 1, and:\n\n\n2 F_i C_i\n\n\nwhich means T_i = 2.", "grammar": {"productions": ["<S>->[S] <s> [Q] <q> <Query_Q>", "<Query_Q_i>-><Query_Q_i-1> <query_i>", "<Query_Q_1>-><query_1>", "<query>-><t1>|<t2_f_c>", "<t1>->1", "<t2_f_c>->2 <f> <c>"], "constraints": ["1<=|S|<=10^5", "S consists of lowercase English letters.", "1<=Q<=2*10^5", "T_i=1 or 2", "F_i=1 or 2, if provided.", "C_i is a lowercase English letter, if provided."]}}
{"name": "p02696 AtCoder Beginner Contest 165 - Floor Function", "description": "Constraints\n\n* 1 \u2264 A \u2264 10^{6}\n* 1 \u2264 B \u2264 10^{12}\n* 1 \u2264 N \u2264 10^{12}\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B N", "grammar": {"productions": ["<S>->A B N"], "constraints": ["1<=A<=10^6", "1<=B<=10^12", "1<=N<=10^12"]}}
{"name": "p03013 AtCoder Beginner Contest 129 - Typical Stairs", "description": "Constraints\n\n* 1 \\leq N \\leq 10^5\n* 0 \\leq M \\leq N-1\n* 1 \\leq a_1 < a_2 < ... < a_M \\leq N-1\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\na_1\na_2\n.\n.\n.\na_M", "grammar": {"productions": ["<S>->[N M] <n> <m>", "<T_M>-><T_M-1> a_M", "<T_1>->a_1", "<T_i>-><T_i-1> a_i for all 2≤i< M"], "constraints": ["1<=N<=10^5", "0<=M<=N-1", "1<=a_1<a_2<...<a_M<=N-1"]}}
{"name": "p02953 AtCoder Beginner Contest 136 - Build Stairs", "description": "Constraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 10^5\n* 1 \\leq H_i \\leq 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nH_1 H_2 ... H_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> H_i", "<T_1>->H_1"], "constraints": ["1<=N<=10^5", "1<=H_i<=10^9"]}}
{"name": "791_A. Bear and Big Brother", "description": "Input\n\nThe only line of the input contains two integers a and b (1 \u2264 a \u2264 b \u2264 10) \u2014 the weight of Limak and the weight of Bob respectively.", "grammar": {"productions": ["<S>->a <s> b"], "constraints": ["1<=a<=b<=10"]}}
{"name": "p02891 AtCoder Grand Contest 039 - Connection and Disconnection", "description": "Constraints\n\n* 1 \\leq |S| \\leq 100\n* S consists of lowercase English letters.\n* 1 \\leq K \\leq 10^9\n* K is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS\nK", "grammar": {"productions": ["<G>-><S> <K>", "<S>->s_1 s_2...s_i...s_|S|", "<K>->k_1 k_2...k_j"], "constraints": ["1<=|S|<=100", "Each character in S is a lowercase English letter.", "1<=K<=10^9"]}}
{"name": "1409_A. Yet Another Two Integers Problem", "description": "Input\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 2 \u22c5 10^4) \u2014 the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains two integers a and b (1 \u2264 a, b \u2264 10^9).", "grammar": {"productions": ["<S>->[T] <t> <T_T>", "<T_T>-><T_i> <T_T-1>", "<T_1>->a b"], "constraints": ["1<=t<=2*10^4", "1<=a,b<=10^9"]}}
{"name": "p02660 AtCoder Beginner Contest 169 - Div Game", "description": "Constraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 10^{12}\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<G>-><N>", "<N>->N"], "constraints": ["1<=N<=10^12"]}}
{"name": "p02693 AtCoder Beginner Contest 165 - We Love Golf", "description": "Constraints\n\n* All values in input are integers.\n* 1 \\leq A \\leq B \\leq 1000\n* 1 \\leq K \\leq 1000\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nK\nA B", "grammar": {"productions": ["<S>->K <k> A B"], "constraints": ["1<=K<=1000", "1<=A<=B<=1000"]}}
{"name": "p02718 AtCoder Beginner Contest 161 - Popular Vote", "description": "Constraints\n\n* 1 \\leq M \\leq N \\leq 100\n* 1 \\leq A_i \\leq 1000\n* A_i are distinct.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nA_1 ... A_N", "grammar": {"productions": ["<S>->[N] [M] <N> <M> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["1<=N<=100", "1<=M<=N", "1<=A_i<=1000", "All A_i are distinct."]}}
{"name": "443_A. Anton and Letters", "description": "Input\n\nThe first and the single line contains the set of letters. The length of the line doesn't exceed 1000. It is guaranteed that the line starts from an opening curved bracket and ends with a closing curved bracket. Between them, small English letters are listed, separated by a comma. Each comma is followed by a space.", "grammar": {"productions": ["<S>->'(' <Letters> ')'", "<Letters>-><Letter>|<Letter> ',' <Letters>", "<Letter>->[a-z]"], "constraints": [""]}}
{"name": "p03324 AtCoder Beginner Contest 100 - Ringo's Favorite Numbers", "description": "Constraints\n\n* D is 0, 1 or 2.\n* N is an integer between 1 and 100 (inclusive).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nD N", "grammar": {"productions": ["<S>->D N", "D->0|1|2", "N-><num1>|<num1><num2>|<num1><num2><num3>", "<num1>->0|1|2|3|4|5|6|7|8|9", "<num2>->0|1|2|3|4|5|6|7|8|9", "<num3>->0|1|2|3|4|5|6|7|8|9"], "constraints": ["0<=D<=2", "1<=N<=100"]}}
{"name": "p02862 AtCoder Beginner Contest 145 - Knight", "description": "Constraints\n\n* 1 \\leq X \\leq 10^6\n* 1 \\leq Y \\leq 10^6\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX Y", "grammar": {"productions": ["<S>-><X> <Y>"], "constraints": ["1<=X<=10^6", "1<=Y<=10^6"]}}
{"name": "p03854 AtCoder Beginner Contest 049 - Daydream", "description": "Constraints\n\n* 1\u2266|S|\u226610^5\n* S consists of lowercase English letters.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>->s"], "constraints": ["The sequence should start with a string s.", "The length of this string should be between 1 and 10^5."]}}
{"name": "469_A. I Wanna Be the Guy", "description": "Input\n\nThe first line contains a single integer n (1 \u2264 n \u2264 100). \n\nThe next line contains an integer p (0 \u2264 p \u2264 n) at first, then follows p distinct integers a1, a2, ..., ap (1 \u2264 ai \u2264 n). These integers denote the indices of levels Little X can pass. The next line contains the levels Little Y can pass in the same format. It's assumed that levels are numbered from 1 to n.", "grammar": {"productions": ["<S>->[N] n [P] <P_X> [P] <P_Y>", "<P_X>->p <T_p>", "<P_Y>->p <T_p>", "<T_i>-><T_i-1> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=100", "0<=p<=n", "1<=a_i<=n"]}}
{"name": "p03221 AtCoder Beginner Contest 113 - ID", "description": "Constraints\n\n* 1 \\leq N \\leq 10^5\n* 1 \\leq M \\leq 10^5\n* 1 \\leq P_i \\leq N\n* 1 \\leq Y_i \\leq 10^9\n* Y_i are all different.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nP_1 Y_1\n:\nP_M Y_M", "grammar": {"productions": ["<S>->[N] [M] <T_M>", "<T_i>-><T_i-1> <p_i> <y_i>", "<T_1>-><p_1> <y_1>"], "constraints": ["1<=N<=10^5", "1<=M<=10^5", "1<=P_i<=N", "1<=Y_i<=10^9"]}}
{"name": "p03309 AtCoder Beginner Contest 102 - Linear Approximation", "description": "Constraints\n\n* 1 \\leq N \\leq 2 \\times 10^5\n* 1 \\leq A_i \\leq 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 A_2 ... A_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["1<=N<=2*10^5", "1<=A_i<=10^9"]}}
{"name": "p02762 AtCoder Beginner Contest 157 - Friend Suggestions", "description": "Constraints\n\n* All values in input are integers.\n* 2 \u2264 N \u2264 10^5\n* 0 \\leq M \\leq 10^5\n* 0 \\leq K \\leq 10^5\n* 1 \\leq A_i, B_i \\leq N\n* A_i \\neq B_i\n* 1 \\leq C_i, D_i \\leq N\n* C_i \\neq D_i\n* (A_i, B_i) \\neq (A_j, B_j) (i \\neq j)\n* (A_i, B_i) \\neq (B_j, A_j)\n* (C_i, D_i) \\neq (C_j, D_j) (i \\neq j)\n* (C_i, D_i) \\neq (D_j, C_j)\n* (A_i, B_i) \\neq (C_j, D_j)\n* (A_i, B_i) \\neq (D_j, C_j)\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M K\nA_1 B_1\n\\vdots\nA_M B_M\nC_1 D_1\n\\vdots\nC_K D_K", "grammar": {"productions": ["<S>->[N] [M] [K] <T_M> <T_K>", "<T_Mi>-><T_Mi-1> [A_Mi] [B_Mi]", "<T_M1>->[A_M1] [B_M1]", "<T_Ki>-><T_Ki-1> [C_Ki] [D_Ki]", "<T_K1>->[C_K1] [D_K1]"], "constraints": ["2<=[N]<=10^5", "0≤[M]≤10^5", "0≤[K]≤10^5", "1≤[A_i],[B_i]≤[N]", "[A_i]≠[B_i]", "1≤[C_i],[D_i]≤[N]", "[C_i]≠[D_i]", "([A_i],[B_i])≠([A_j],[B_j]) for all i ≠ j", "([A_i],[B_i])≠([B_j],[A_j]) for all i,j", "([C_i],[D_i])≠([C_j],[D_j]) for all i ≠ j", "([C_i],[D_i])≠([D_j],[C_j]) for all i,j", "([A_i],[B_i])≠([C_j],[D_j]) for all i,j", "([A_i],[B_i])≠([D_j],[C_j]) for all i,j"]}}
{"name": "148_A. Insomnia cure", "description": "Input\n\nInput data contains integer numbers k, l, m, n and d, each number in a separate line (1 \u2264 k, l, m, n \u2264 10, 1 \u2264 d \u2264 10^5).", "grammar": {"productions": ["<G>-><k> <l> <m> <n> <d>", "<k>->k", "<l>->l", "<m>->m", "<n>->n", "<d>->d"], "constraints": ["1<=k,l,m,n,<=10", "1<=d<=10^5"]}}
{"name": "1353_B. Two Arrays And Swaps", "description": "Input\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 200) \u2014 the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains two integers n and k (1 \u2264 n \u2264 30; 0 \u2264 k \u2264 n) \u2014 the number of elements in a and b and the maximum number of moves you can do. The second line of the test case contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 30), where a_i is the i-th element of a. The third line of the test case contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 30), where b_i is the i-th element of b.", "grammar": {"productions": ["<S>->[T] <t> <T_T>", "<T_i>-><n_k> <A_n> <B_n>", "<A_j>-><A_j-1> a_j", "<A_1>->a_1", "<B_j>-><B_j-1> b_j", "<B_1>->b_1", "<T_Ti>-><T_Ti-1> <T_i>", "<T_T1>-><T_1>"], "constraints": ["1<=t<=200", "1<=n<=30", "0<=k<=n", "1<=a_i<=30", "1<=b_i<=30"]}}
{"name": "492_B. Vanya and Lanterns", "description": "Input\n\nThe first line contains two integers n, l (1 \u2264 n \u2264 1000, 1 \u2264 l \u2264 10^9) \u2014 the number of lanterns and the length of the street respectively. \n\nThe next line contains n integers ai (0 \u2264 ai \u2264 l). Multiple lanterns can be located at the same point. The lanterns may be located at the ends of the street.", "grammar": {"productions": ["<S>->[N] <n_l> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1", "<n_l>->n <s> l"], "constraints": ["1<=n<=1000", "1<=l<=10^9", "0<=a_i<=l"]}}
{"name": "p03076 AtCoder Beginner Contest 123 - Five Dishes", "description": "Constraints\n\n* A, B, C, D and E are integers between 1 and 123 (inclusive).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA\nB\nC\nD\nE", "grammar": {"productions": ["<G>-><A> <B> <C> <D> <E>", "<A>->A", "<B>->B", "<C>->C", "<D>->D", "<E>->E"], "constraints": ["1<=A,B,C,D,E<=123"]}}
{"name": "p02612 AtCoder Beginner Contest 173 - Payment", "description": "Constraints\n\n* 1 \\leq N \\leq 10000\n* N is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->[N]"], "constraints": ["1<=N<=10000"]}}
{"name": "p03137 AtCoder Beginner Contest 117 - Streamline", "description": "Constraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 10^5\n* 1 \\leq M \\leq 10^5\n* -10^5 \\leq X_i \\leq 10^5\n* X_1, X_2, ..., X_M are all different.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nX_1 X_2 ... X_M", "grammar": {"productions": ["<S>-><N_M> <T_M>", "<T_i>-><T_i-1> <x> X_i", "<T_1>->X_1"], "constraints": ["1<=N<=10^5", "1<=M<=10^5", "-10^5<=X_i<=10^5"]}}
{"name": "510_A. Fox And Snake", "description": "Input\n\nThe only line contains two integers: n and m (3 \u2264 n, m \u2264 50). \n\nn is an odd number.", "grammar": {"productions": ["<S>->n m"], "constraints": ["3<=n<=50", "3<=m<=50", "n is odd"]}}
{"name": "p03032 AtCoder Beginner Contest 128 - equeue", "description": "Constraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 50\n* 1 \\leq K \\leq 100\n* -10^7 \\leq V_i \\leq 10^7\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nV_1 V_2 ... V_N", "grammar": {"productions": ["<S>->[N] [K] <n> <k> <T_N>", "<T_i>-><T_i-1> <s> V_i", "<T_1>->V_1"], "constraints": ["1<=N<=50", "1<=K<=100", "-10^7<=V_i<=10^7"]}}
{"name": "p02973 AtCoder Beginner Contest 134 - Sequence Decomposing", "description": "Constraints\n\n* 1 \\leq N \\leq 10^5\n* 0 \\leq A_i \\leq 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1\n:\nA_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["1<=N<=10^5", "0<=A_i<=10^9"]}}
{"name": "p02675 AtCoder Beginner Contest 168 - \u2234 (Therefore)", "description": "Constraints\n\n* N is a positive integer not exceeding 999.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->[N]"], "constraints": ["0<N<=999"]}}
{"name": "758_A. Holiday Of Equality", "description": "Input\n\nThe first line contains the integer n (1 \u2264 n \u2264 100) \u2014 the number of citizens in the kingdom.\n\nThe second line contains n integers a1, a2, ..., an, where ai (0 \u2264 ai \u2264 10^6) \u2014 the welfare of the i-th citizen.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=100", "0<=a_i<=10^6"]}}
{"name": "230_A. Dragons", "description": "Input\n\nThe first line contains two space-separated integers s and n (1 \u2264 s \u2264 10^4, 1 \u2264 n \u2264 10^3). Then n lines follow: the i-th line contains space-separated integers xi and yi (1 \u2264 xi \u2264 10^4, 0 \u2264 yi \u2264 10^4) \u2014 the i-th dragon's strength and the bonus for defeating it.", "grammar": {"productions": ["<S>->[s n] <N_Lines>", "<N_Lines>-><Line_1> <Line_2>...<Line_n>", "<Line_i>->xi yi"], "constraints": ["1<=s<=10^4", "1<=n<=10^3", "1<=xi<=10^4", "0<=yi<=10^4"]}}
{"name": "1385_A. Three Pairwise Maximums", "description": "Input\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 2 \u22c5 10^4) \u2014 the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains three integers x, y, and z (1 \u2264 x, y, z \u2264 10^9).", "grammar": {"productions": ["<S>->[T] <t> <T_T>", "<T_i>-><T_i-1> <x> <y> <z>", "<T_1>-><x> <y> <z>"], "constraints": ["1<=t<=2*10^4", "1<=x,y,z<=10^9"]}}
{"name": "1095_A. Repeating Cipher", "description": "Input\n\nThe first line contains integer n (1 \u2264 n \u2264 55) \u2014 the length of the encrypted string. The second line of the input contains t \u2014 the result of encryption of some string s. It contains only lowercase Latin letters. The length of t is exactly n.\n\nIt is guaranteed that the answer to the test exists.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s_i>", "<T_1>->s_1"], "constraints": ["1<=n<=55","a<=s_i<=z"]}}
{"name": "1358_A. Park Lighting", "description": "Input\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases in the input. Then t test cases follow.\n\nEach test case is a line containing two integers n, m (1 \u2264 n, m \u2264 10^4) \u2014 park sizes.", "grammar": {"productions": ["<S>->[T] <t> <T_T>", "<T_i>-><T_i-1> <n> <m>", "<T_1>-><n> <m>"], "constraints": ["1<=t<=10^4", "1<=n,m<=10^4"]}}
{"name": "p03472 AtCoder Beginner Contest 085 - Katana Thrower", "description": "Constraints\n\n* 1 \u2264 N \u2264 10^5\n* 1 \u2264 H \u2264 10^9\n* 1 \u2264 a_i \u2264 b_i \u2264 10^9\n* All input values are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN H\na_1 b_1\n:\na_N b_N", "grammar": {"productions": ["<S>->[N H] <n> <T_N>", "<T_i>-><T_i-1> <h_i> a_i b_i", "<T_1>->a_1 b_1"], "constraints": ["1<=N<=10^5", "1<=H<=10^9", "1<=a_i<=b_i<=10^9"]}}
{"name": "1352_C. K-th Not Divisible by n", "description": "Input\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases in the input. Next, t test cases are given, one per line.\n\nEach test case is two positive integers n (2 \u2264 n \u2264 10^9) and k (1 \u2264 k \u2264 10^9).", "grammar": {"productions": ["<S>->[T] <t> <T_T>", "<T_i>-><T_i-1> <n_k>", "<T_1>-><n_k>", "<n_k>->n k"], "constraints": ["1<=t<=1000", "2<=n<=10^9", "1<=k<=10^9"]}}
{"name": "1333_A. Little Artem", "description": "Input\n\nEach test contains multiple test cases. \n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 20). Each of the next t lines contains two integers n, m (2 \u2264 n,m \u2264 100) \u2014 the number of rows and the number of columns in the grid.", "grammar": {"productions": ["<S>->[T] <t> <T_t>", "<T_i>-><T_i-1> <n_m> n_i m_i", "<T_1>-><n_m> n_1 m_1", "<n_m>-><n> <m>"], "constraints": ["1<=t<=20", "2<=n_i<=100", "2<=m_i<=100"]}}
{"name": "1180_A. Alex and a Rhombus", "description": "Input\n\nThe first and only input line contains integer n (1 \u2264 n \u2264 100) \u2014 order of a rhombus whose numbers of cells should be computed.", "grammar": {"productions": ["<S>->[N] n"], "constraints": ["1<=n<=100"]}}
{"name": "p02708 AtCoder Beginner Contest 163 - Sum of Large Numbers", "description": "Constraints\n\n* 1 \\leq N \\leq 2\\times 10^5\n* 1 \\leq K \\leq N+1\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K", "grammar": {"productions": ["<S>->N K"], "constraints": ["1<=N<=2*10^5", "1<=K<=N+1"]}}
{"name": "1325_A. EhAb AnD gCd", "description": "Input\n\nThe first line contains a single integer t (1 \u2264 t \u2264 100) \u2014 the number of testcases.\n\nEach testcase consists of one line containing a single integer, x (2 \u2264 x \u2264 10^9).", "grammar": {"productions": ["<S>->[T] <t> <T_t>", "<T_i>->x_i"], "constraints": ["1<=t<=100", "2<=x_i<=10^9"]}}
{"name": "1015_A. Points in Segments", "description": "Input\n\nThe first line of the input contains two integers n and m (1 \u2264 n, m \u2264 100) \u2014 the number of segments and the upper bound for coordinates.\n\nThe next n lines contain two integers each l_i and r_i (1 \u2264 l_i \u2264 r_i \u2264 m) \u2014 the endpoints of the i-th segment. Segments may intersect, overlap or even coincide with each other. Note, it is possible that l_i=r_i, i.e. a segment can degenerate to a point.", "grammar": {"productions": ["<G>->[N,M] <N> <M> <T_N>", "<T_i>-><T_i-1> <L_i> <R_i>", "<T_1>-><L_1> <R_1>"], "constraints": ["1<=N,M<=100", "1<=L_i<=R_i<=M"]}}
{"name": "p02390 Watch", "description": "Constraints\n\n* $0 \\leq S \\leq 86400$\n\nInput\n\nAn integer $S$ is given in a line.", "grammar": {"productions": ["<S>-><s>"], "constraints": ["0<=s<=86400"]}}
{"name": "977_C. Less or Equal", "description": "Input\n\nThe first line of the input contains integer numbers n and k (1 \u2264 n \u2264 2 \u22c5 10^5, 0 \u2264 k \u2264 n). The second line of the input contains n integer numbers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9) \u2014 the sequence itself.", "grammar": {"productions": ["<S>->[N K] <n> <k> <T_N>","<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=2*10^5", "0<=k<=n", "1<=a_i<=10^9"]}}
{"name": "1339_B. Sorted Adjacent Differences", "description": "Input\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^{4}) \u2014 the number of test cases.\n\nThe first line of each test case contains single integer n (3 \u2264 n \u2264 10^{5}) \u2014 the length of array a. It is guaranteed that the sum of values of n over all test cases in the input does not exceed 10^{5}.\n\nThe second line of each test case contains n integers a_{1}, a_{2}, \u2026, a_{n} (-10^{9} \u2264 a_{i} \u2264 10^{9}).", "grammar": {"productions": ["<S>->[T] <t> <T_T>", "<T_i>-><T_i-1> <case> c_i", "<T_1>-><case> c_1", "<case>-><n> <array>", "<array_i>-><array_i-1> <s> a_i", "<array_1>->a_1"], "constraints": ["1<=t<=10^4", "3<=n<=10^5", "-10^9<=a_i<=10^9"]}}
{"name": "1420_A. Cubes Sorting", "description": "Input\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1 \u2264 t \u2264 1000), denoting the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains one positive integer n (2 \u2264 n \u2264 5 \u22c5 10^4) \u2014 number of cubes.\n\nThe second line contains n positive integers a_i (1 \u2264 a_i \u2264 10^9) \u2014 volumes of cubes.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5.", "grammar": {"productions": ["<S>->[T] <t> <T_T>", "<T_i>-><T_i-1> <test_case>", "<T_1>-><test_case>", "<test_case>->[N] <n> <C_N>", "<C_i>-><C_i-1> <c> a_i", "<C_1>->a_1"], "constraints": ["1<=t<=1000", "2<=n<=5*10^4", "1<=a_i<=10^9"]}}
{"name": "1436_A. Reorder", "description": "Input\n\nThe first line contains a single integer t \u2014 the number of test cases (1 \u2264 t \u2264 100). The test cases follow, each in two lines.\n\nThe first line of a test case contains two integers n and m (1 \u2264 n \u2264 100, 0 \u2264 m \u2264 10^6). The second line contains integers a_1, a_2, \u2026, a_n (0 \u2264 a_i \u2264 10^6) \u2014 the elements of the array.", "grammar": {"productions": ["<S>->[T] <t> <T_T>", "<T_i>-><T_i-1> <s> <N_M> <a_n>", "<T_1>-><s> <N_M> <a_n>", "<N_M>-><n> <m>", "<a_n>-><a_i> <a_n>", "<a_i>->a_i <a_i-1>", "<a_1>->a_1"], "constraints": ["1<=t<=100", "1<=n<=100", "0<=m<=10^6", "0<=a_i<=10^6"]}}
{"name": "835_A. Key races", "description": "Input\n\nThe first line contains five integers s, v1, v2, t1, t2 (1 \u2264 s, v1, v2, t1, t2 \u2264 1000) \u2014 the number of characters in the text, the time of typing one character for the first participant, the time of typing one character for the the second participant, the ping of the first participant and the ping of the second participant.", "grammar": {"productions": ["<S>->[5] <s> <v1> <v2> <t1> <t2>","<s>->s", "<v1>->v1", "<v2>->v2", "<t1>->t1", "<t2>->t2"], "constraints": ["1<=s,v1,v2,t1,t2<=1000"]}}
{"name": "1419_A. Digit Game", "description": "Input\n\nFirst line of input contains an integer t (1 \u2264 t \u2264 100) \u2014 the number of matches.\n\nThe first line of each match description contains an integer n (1 \u2264 n \u2264 10^3) \u2014 the number of digits of the generated number.\n\nThe second line of each match description contains an n-digit positive integer without leading zeros.", "grammar": {"productions": ["<S>->[T] <t> <M_T>", "<M_i>-><M_i-1> <m> M_i", "<M_1>-><m> M_1", "<m>-><n> <N_n>", "<N_i>-><N_i-1> <d> N_i", "<N_1>-><d> N_1"], "constraints": ["1<=t<=100", "1<=n<=10^3", "1<=d<=9"]}}
{"name": "p03434 AtCoder Beginner Contest 088 - Card Game for Two", "description": "Constraints\n\n* N is an integer between 1 and 100 (inclusive).\n* a_i \\ (1 \\leq i \\leq N) is an integer between 1 and 100 (inclusive).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 a_2 a_3 ... a_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=N<=100", "1<=a_i<=100"]}}
{"name": "1294_B. Collecting Packages", "description": "Input\n\nThe first line of the input contains an integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then test cases follow.\n\nThe first line of a test case contains one integer n (1 \u2264 n \u2264 1000) \u2014 the number of packages.\n\nThe next n lines contain descriptions of packages. The i-th package is given as two integers x_i and y_i (0 \u2264 x_i, y_i \u2264 1000) \u2014 the x-coordinate of the package and the y-coordinate of the package.\n\nIt is guaranteed that there are no two packages at the same point. It is also guaranteed that the point (0, 0) doesn't contain a package.\n\nThe sum of all values n over test cases in the test doesn't exceed 1000.", "grammar": {"productions": ["<S>->[T] <t> <T_T>","<T_i>-><T_i-1> <n> <P_n>", "<T_1>-><n> <P_n>", "<P_j>-><P_j-1> <x> <y>", "<P_1>-><x> <y>"], "constraints": ["1<=t<=100", "1<=n<=1000", "0<=x_i,y_i<=1000", "x_i!=y_i for all i!=j", "x_i!=0 or y_i!=0 for all i"]}}
{"name": "p03994 CODE FESTIVAL 2016 qual A - Next Letter", "description": "Constraints\n\n* 1\u2264|s|\u226410^5\n* All letters in s are lowercase English letters.\n* 1\u2264K\u226410^9\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\ns\nK", "grammar": {"productions": ["<S>-><string> <K>", "<string>->a|b|c|...|z", "<K>->1|2|3|...|10^9"], "constraints": ["1<=|s|<=10^5", "s∈{a-z}*", "1<=K<=10^9"]}}
{"name": "119_A. Epic Game", "description": "Input\n\nThe only string contains space-separated integers a, b and n (1 \u2264 a, b, n \u2264 100) \u2014 the fixed numbers Simon and Antisimon have received correspondingly and the initial number of stones in the pile.", "grammar": {"productions": ["<S>-><a> <s> <b> <s> <n>", "<a>->1|2|...|100", "<b>->1|2|...|100", "<n>->1|2|...|100", "<s>->' '"], "constraints": ["1<=a,b,n<=100"]}}
{"name": "p02926 AtCoder Beginner Contest 139 - Engines", "description": "Constraints\n\n* 1 \\leq N \\leq 100\n* -1 \\ 000 \\ 000 \\leq x_i \\leq 1 \\ 000 \\ 000\n* -1 \\ 000 \\ 000 \\leq y_i \\leq 1 \\ 000 \\ 000\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nx_1 y_1\nx_2 y_2\n: :\nx_N y_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> <p_i>", "<T_1>-><p_1>", "<p_i>->x_i y_i"], "constraints": ["1<=N<=100", "-1000000<=x_i<=1000000", "-1000000<=y_i<=1000000"]}}
{"name": "1430_B. Barrels", "description": "Input\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe first line of each test case contains two integers n and k (1 \u2264 k < n \u2264 2 \u22c5 10^5) \u2014 the number of barrels and the number of pourings you can make.\n\nThe second line contains n integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the initial amount of water the i-th barrel has.\n\nIt's guaranteed that the total sum of n over test cases doesn't exceed 2 \u22c5 10^5.", "grammar": {"productions": ["<S>->[T] <t> <T_T>", "<T_i>-><T_i-1> <M> a_i", "<T_1>-><M> a_1", "<M>-><n> <k>", "<T_T>-><T_i>"], "constraints": ["1<=t<=1000", "1<=n,k<=2*10^5", "k<n", "0<=a_i<=10^9"]}}
{"name": "p02811 AtCoder Beginner Contest 150 - 500 Yen Coins", "description": "Constraints\n\n* 1 \\leq K \\leq 100\n* 1 \\leq X \\leq 10^5\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nK X", "grammar": {"productions": ["<G>->[K] <k> [X] <x>", "<k>->K", "<x>->X"], "constraints": ["1<=K<=100", "1<=X<=10^5"]}}
{"name": "p03293 AtCoder Beginner Contest 103 - String Rotation", "description": "Constraints\n\n* 2 \\leq |S| \\leq 100\n* |S| = |T|\n* S and T consist of lowercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS\nT", "grammar": {"productions": ["<S_T>-><S> <T>", "<S>-><char_1> <char_2>...<char_|S|>", "<T>-><char_1> <char_2>...<char_|T|>", "<char_i>->'a'|'b'|'c'|...|'z'"], "constraints": ["2 ≤ |S| ≤ 100", "|S|=|T|"]}}
{"name": "999_A. Mishka and Contest", "description": "Input\n\nThe first line of input contains two integers n and k (1 \u2264 n, k \u2264 100) \u2014 the number of problems in the contest and Mishka's problem-solving skill.\n\nThe second line of input contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 100), where a_i is the difficulty of the i-th problem. The problems are given in order from the leftmost to the rightmost in the list.", "grammar": {"productions": ["<S>->[N] <n> [K] <k> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n,k<=100", "1<=a_i<=100"]}}
{"name": "1114_A. Got Any Grapes?", "description": "Input\n\nThe first line contains three integers x, y and z (1 \u2264 x, y, z \u2264 10^5) \u2014 the number of grapes Andrew, Dmitry and Michal want to eat.\n\nThe second line contains three integers a, b, c (1 \u2264 a, b, c \u2264 10^5) \u2014 the number of green, purple and black grapes in the box.", "grammar": {"productions": ["<S>->[X] <x> [Y] <y> [Z] <z> [A] <a> [B] <b> [C] <c>"], "constraints": ["1<=x<=10^5, 1<=y<=10^5, 1<=z<=10^5, 1<=a<=10^5, 1<=b<=10^5, 1<=c<=10^5"]}}
{"name": "p02749 Social Infrastructure Information Systems Division  Hitachi Programming Contest 2020 - ThREE", "description": "Constraints\n\n* 2\\leq N\\leq 2\\times 10^5\n* 1\\leq a_i, b_i \\leq N\n* The given graph is a tree.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 b_1\na_2 b_2\n\\vdots\na_{N-1} b_{N-1}", "grammar": {"productions": ["<S>->[N] <N> <E_N-1>", "<E_i>-><E_i-1> <e> a_i b_i", "<E_0>->a_1 b_1"], "constraints": ["2<=N<=2*10^5", "1<=a_i,b_i<=N"]}}
{"name": "p02698 AtCoder Beginner Contest 165 - LIS on Tree", "description": "Constraints\n\n* 2 \\leq N \\leq 2 \\times 10^5\n* 1 \\leq a_i \\leq 10^9\n* 1 \\leq u_i , v_i \\leq N\n* u_i \\neq v_i\n* The given graph is a tree.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 a_2 ... a_N\nu_1 v_1\nu_2 v_2\n:\nu_{N-1} v_{N-1}", "grammar": {"productions": ["<S>->[N] <n> <T_N> <U_V>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1", "<U_V_i>-><U_V_i-1> <s> u_i <s> v_i", "<U_V_1>->u_1 <s> v_1"], "constraints": ["2<=N<=2*10^5", "1<=a_i<=10^9", "1<=u_i,v_i<=N", "u_i!=v_i"]}}
{"name": "1393_A. Rainbow Dash, Fluttershy and Chess Coloring", "description": "Input\n\nThe first line contains a single integer T (1 \u2264 T \u2264 100): the number of grids of the games. \n\nEach of the next T lines contains a single integer n (1 \u2264 n \u2264 10^9): the size of the side of the grid of the game.", "grammar": {"productions": ["<S>->[T] <t> <T_T>", "<T_i>-><T_i-1> <s> n_i", "<T_1>->n_1"], "constraints": ["1<=T<=100", "1<=n<=10^9"]}}
{"name": "1249_B1. Books Exchange (easy version)", "description": "Input\n\nThe first line of the input contains one integer q (1 \u2264 q \u2264 200) \u2014 the number of queries. Then q queries follow.\n\nThe first line of the query contains one integer n (1 \u2264 n \u2264 200) \u2014 the number of kids in the query. The second line of the query contains n integers p_1, p_2, ..., p_n (1 \u2264 p_i \u2264 n, all p_i are distinct, i.e. p is a permutation), where p_i is the kid which will get the book of the i-th kid.", "grammar": {"productions": ["<S>->[Q] <q> <T_Q>", "<T_i>-><T_i-1> <query>", "<query>-><n> <p>", "<p>-><T_p_n>", "<T_p_i>-><T_p_i-1> p_i", "<T_p_1>->p_1"], "constraints": ["1<=q<=200", "1<=n<=200", "1<=p_i<=n"]}}
{"name": "1288_A. Deadline", "description": "Input\n\nThe first line contains a single integer T (1 \u2264 T \u2264 50) \u2014 the number of test cases.\n\nThe next T lines contain test cases \u2013 one per line. Each line contains two integers n and d (1 \u2264 n \u2264 10^9, 1 \u2264 d \u2264 10^9) \u2014 the number of days before the deadline and the number of days the program runs.", "grammar": {"productions": ["<S>->[T] <t> <T_T>", "<T_i>-><T_i-1> <t> n_i d_i", "<T_1>->n_1 d_1"], "constraints": ["1<=T<=50", "1<=n<=10^9", "1<=d<=10^9"]}}
{"name": "p02594 AtCoder Beginner Contest 174 - Air Conditioner", "description": "Constraints\n\n* -40 \\leq X \\leq 40\n* X is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX", "grammar": {"productions": ["<S>->X"], "constraints": ["-40<=X<=40"]}}
{"name": "p03105 AtCoder Beginner Contest 120 - Favorite Sound", "description": "Constraints\n\n* All values in input are integers.\n* 1 \\leq A, B, C \\leq 100\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B C", "grammar": {"productions": ["<G>->A B C"], "constraints": ["1<=A,B,C<=100"]}}
{"name": "1213_B. Bad Prices", "description": "Input\n\nThe first line contains an integer t (1 \u2264 t \u2264 10000) \u2014 the number of sets of input data in the test. Input data sets must be processed independently, one after another.\n\nEach input data set consists of two lines. The first line contains an integer n (1 \u2264 n \u2264 150000) \u2014 the number of days. The second line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^6), where a_i is the price on the i-th day.\n\nIt is guaranteed that the sum of n over all data sets in the test does not exceed 150000.", "grammar": {"productions": ["<S>->[T] <t> <T_T>", "<T_i>-><T_i-1> <D> <n> <P_n>", "<T_1>-><D> <n> <P_n>", "<D>->'Data Set'", "<P_i>-><P_i-1> <s> a_i", "<P_1>->a_1"], "constraints": ["1<=t<=100", "1<=n<=150000", "1<=a_i<=10^6"]}}
{"name": "1427_A. Avoiding Zero", "description": "Input\n\nEach test contains multiple test cases. The first line contains an integer t (1\u2264 t \u2264 1000) \u2014 the number of test cases. The description of the test cases follows.\n\nThe first line of each testcase contains one integer n (1\u2264 n\u2264 50) \u2014 the length of the array a.\n\nThe second line of each testcase contains n integers a_1,a_2,..., a_n (-50\u2264 a_i\u2264 50) \u2014 the elements of a.", "grammar": {"productions": ["<S>->[T] <t> <T_T>", "<T_i>-><T_i-1> <testcase> testcase_i", "<testcase>-><n> <array>", "<array>-><array> <element>|<element>", "<element>->a_i"], "constraints": ["1<=t<=1000", "1<=n<=50", "-50<=a_i<=50"]}}
{"name": "p02628 AtCoder Beginner Contest 171 - Mix Juice", "description": "Constraints\n\n* 1 \\leq K \\leq N \\leq 1000\n* 1 \\leq p_i \\leq 1000\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\np_1 p_2 \\ldots p_N", "grammar": {"productions": ["<S>->[N K] <n> <k> <T_N>", "<T_i>-><T_i-1> <s> p_i", "<T_1>->p_1"], "constraints": ["1<=K<=1000", "1<=N<=1000", "1<=p_i<=1000"]}}
{"name": "1257_B. Magic Stick", "description": "Input\n\nThe first line contains single integer T (1 \u2264 T \u2264 10^4) \u2014 the number of test cases. Each test case consists of two lines.\n\nThe first line of each test case contains two integers x and y (1 \u2264 x, y \u2264 10^9) \u2014 the current number and the number that Petya wants to get.", "grammar": {"productions": ["<S>->[T] <t> <T_T>", "<T_i>-><T_i-1> <testcase> testcase_i", "<T_1>->testcase_1", "<testcase>-><x> <y>", "<x>->x_i", "<y>->y_i"], "constraints": ["1<=T<=10^4", "1<=x_i, y_i<=10^9"]}}
{"name": "p02397 Swapping Two Numbers", "description": "Constraints\n\n* 0 \u2264 x, y \u2264 10000\n* the number of datasets \u2264 3000\n\nInput\n\nThe input consists of multiple datasets. Each dataset consists of two integers x and y separated by a single space.\n\nThe input ends with two 0 (when both x and y are zero). Your program should not process for these terminal symbols.", "grammar": {"productions": ["<S>-><D> <S>|<E>", "<D>-><x> <space> <y>", "<E>->0 <space> 0"], "constraints": ["0<=x,y<=10000", "number of datasets<=3000"]}}
{"name": "1144_B. Parity Alternated Deletions", "description": "Input\n\nThe first line of the input contains one integer n (1 \u2264 n \u2264 2000) \u2014 the number of elements of a.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^6), where a_i is the i-th element of a.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=2000", "0<=a_i<=10^6"]}}
{"name": "p02724 AtCoder Beginner Contest 160 - Golden Coins", "description": "Constraints\n\n* 0 \\leq X \\leq 10^9\n* X is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX", "grammar": {"productions": ["<S>-><X>", "<X>->X"], "constraints": ["0<=X<=10^9"]}}
{"name": "p03592 CODE FESTIVAL 2017 qual A - fLIP", "description": "Constraints\n\n* 1 \\leq N,M \\leq 1000\n* 0 \\leq K \\leq NM\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M K", "grammar": {"productions": ["<S>->[N] <n> [M] <m> [K] <k>", "<n>->N", "<m>->M", "<k>->K"], "constraints": ["1<=N<=1000", "1<=M<=1000", "0<=K<=N*M"]}}
{"name": "1230_B. Ania and Minimizing", "description": "Input\n\nThe first line contains two integers n and k (1 \u2264 n \u2264 200 000, 0 \u2264 k \u2264 n) \u2014 the number of digits in the decimal representation of S and the maximum allowed number of changed digits.\n\nThe second line contains the integer S. It's guaranteed that S has exactly n digits and doesn't contain any leading zeroes.", "grammar": {"productions": ["<S>->[N_K] <n_k> <T_N>", "<T_N>-><s> S", "<n_k>->n k"], "constraints": ["1<=n<=200000", "0<=k<=n"]}}
{"name": "1436_B. Prime Square", "description": "Input\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10) \u2014 the number of test cases.\n\nEach of the next t lines contains a single integer n (2 \u2264 n \u2264 100) \u2014 the required size of a square.", "grammar": {"productions": ["<S>->[T] <t> <T_T>", "<T_i>-><T_i-1> <s> n_i", "<T_1>->n_1"], "constraints": ["1<=t<=10", "2<=n_i<=100"]}}
{"name": "p02417 Counting Characters", "description": "Constraints\n\n* The number of characters in the sentence < 1200\n\nInput\n\nA sentence in English is given in several lines.", "grammar": {"productions": ["<S>-><L> <C>", "<L>-><line>", "<C>->[1, 1200] <chars>", "<chars>-><char> <chars>|<char>", "<char>->a|b|c|...|z|A|B|C|...|Z|"], "constraints": ["1<=|sentence|<1200", "Sentence is given in English"]}}
{"name": "598_A. Tricky Sum", "description": "Input\n\nThe first line of the input contains a single integer t (1 \u2264 t \u2264 100) \u2014 the number of values of n to be processed.\n\nEach of next t lines contains a single integer n (1 \u2264 n \u2264 10^9).", "grammar": {"productions": ["<S>->[T] <t> <T_T>", "<T_i>-><T_i-1> <n_i>", "<T_1>-><n_1>"], "constraints": ["1<=t<=100", "1<=n_i<=10^9"]}}
{"name": "p03219 AtCoder Beginner Contest 113 - Discount Fare", "description": "Constraints\n\n* 1 \\leq X,Y \\leq 100\n* Y is an even number.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX Y", "grammar": {"productions": ["<S>-><X> <Y>", "<X>->'X'", "<Y>->'Y'"], "constraints": ["1<=X<=100", "1<=Y<=100", "Ymod2=0"]}}
{"name": "p03327 AtCoder Beginner Contest 099 - ABD", "description": "Constraints\n\n* 1 \\leq N \\leq 1998\n* N is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->[N] <n>"], "constraints": ["1<=N<=1998"]}}
{"name": "255_A. Greg's Workout", "description": "Input\n\nThe first line contains integer n (1 \u2264 n \u2264 20). The second line contains n integers a1, a2, ..., an (1 \u2264 ai \u2264 25) \u2014 the number of times Greg repeats the exercises.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> a_i",  "<T_1>->a_1"], "constraints": ["1<=n<=20", "1<=a_i<=25"]}}
{"name": "p03761 AtCoder Beginner Contest 058 - Dubious Document", "description": "Constraints\n\n* 1 \\leq n \\leq 50\n* 1 \\leq |S_i| \\leq 50 for every i = 1, ..., n.\n* S_i consists of lowercase English letters (`a` - `z`) for every i = 1, ..., n.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nn\nS_1\n...\nS_n", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> S_i", "<T_1>->S_1"], "constraints": ["1<=n<=50", "1<=|S_i|<=50 for every i = 1, ..., n", "S_i consists of lowercase English letters (‘a’ - ‘z’) for every i = 1, ..., n"]}}
{"name": "746_A. Compote", "description": "Input\n\nThe first line contains the positive integer a (1 \u2264 a \u2264 1000) \u2014 the number of lemons Nikolay has. \n\nThe second line contains the positive integer b (1 \u2264 b \u2264 1000) \u2014 the number of apples Nikolay has. \n\nThe third line contains the positive integer c (1 \u2264 c \u2264 1000) \u2014 the number of pears Nikolay has.", "grammar": {"productions": ["<S>-><a> <b> <c>", "<a>->a", "<b>->b", "<c>->c"], "constraints": ["1<=a<=1000", "1<=b<=1000", "1<=c<=1000"]}}
{"name": "766_B. Mahmoud and a Triangle", "description": "Input\n\nThe first line contains single integer n (3 \u2264 n \u2264 10^5) \u2014 the number of line segments Mahmoud has.\n\nThe second line contains n integers a1, a2, ..., an (1 \u2264 ai \u2264 10^9) \u2014 the lengths of line segments Mahmoud has.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["3<=n<=10^5", "1<=a_i<=10^9"]}}
{"name": "1352_F. Binary String Reconstruction", "description": "Input\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases in the input. Then test cases follow.\n\nEach test case consists of one line which contains three integers n_0, n_1, n_2 (0 \u2264 n_0, n_1, n_2 \u2264 100; n_0 + n_1 + n_2 > 0). It is guaranteed that the answer for given n_0, n_1, n_2 exists.", "grammar": {"productions": ["<S>->[T] <t> <T_T>", "<T_i>-><T_i-1> <s> <testcase_i>", "<T_1>-><testcase_1>", "<testcase_i>->n_0 n_1 n_2"], "constraints": ["1<=t<=1000", "0<=n0,n1,n2<=100", "n0+n1+n2>0"]}}
{"name": "p02898 AtCoder Beginner Contest 142 - Roller Coaster", "description": "Constraints\n\n* 1 \\le N \\le 10^5\n* 1 \\le K \\le 500\n* 1 \\le h_i \\le 500\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nh_1 h_2 \\ldots h_N", "grammar": {"productions": ["<S>->[N K] <n> <k> <T_N>", "<T_i>-><T_i-1> <s> h_i", "<T_1>->h_1"], "constraints": ["1<=N<=10^5", "1<=K<=500", "1<=h_i<=500"]}}
{"name": "476_B. Dreamoon and WiFi", "description": "Input\n\nThe first line contains a string s1 \u2014 the commands Drazil sends to Dreamoon, this string consists of only the characters in the set {'+', '-'}. \n\nThe second line contains a string s2 \u2014 the commands Dreamoon's smartphone recognizes, this string consists of only the characters in the set {'+', '-', '?'}. '?' denotes an unrecognized command.\n\nLengths of two strings are equal and do not exceed 10.", "grammar": {"productions": ["<S>-><s1> <s2>", "<s1>->'+'|'-'", "<s2>-><s2c> <s2>", "<s2c>->'+'|'-'|'?'"], "constraints": ["1<=|s1|,|s2|<=10", "s1 consists of {'+', '-'}", "s2 consists of {'+', '-', '?'}"]}}
{"name": "621_A. Wet Shark and Odd and Even", "description": "Input\n\nThe first line of the input contains one integer, n (1 \u2264 n \u2264 100 000). The next line contains n space separated integers given to Wet Shark. Each of these integers is in range from 1 to 10^9, inclusive.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=1000000", "1<=a_i<=10^9"]}}
{"name": "1166_A. Silent Classroom", "description": "Input\n\nThe first line contains a single integer n (1\u2264 n \u2264 100) \u2014 the number of students.\n\nAfter this n lines follow.\n\nThe i-th line contains the name of the i-th student.\n\nIt is guaranteed each name is a string of lowercase English letters of length at most 20. Note that multiple students may share the same name.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> <name_i>", "<T_1>-><name_1>"], "constraints": ["1<=n<=100", "1<=|name_i|<=20", "Each name_i consists of lowercase English letters."]}}
{"name": "p02801 AtCoder Beginner Contest 151 - Next Alphabet", "description": "Constraints\n\n* C is a lowercase English letter that is not `z`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nC", "grammar": {"productions": ["<S>->C"], "constraints": ["1<=|C|<=1", "C ∈ {a, b, ..., y}"]}}
{"name": "937_A. Olympiad", "description": "Input\n\nThe first line contains a single integer n (1 \u2264 n \u2264 100) \u2014 the number of participants.\n\nThe next line contains a sequence of n integers a1, a2, ..., an (0 \u2264 ai \u2264 600) \u2014 participants' scores.\n\nIt's guaranteed that at least one participant has non-zero score.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=100", "0<=a_i<=600"]}}
{"name": "p03307 AtCoder Beginner Contest 102 - Multiple of 2 and N", "description": "Constraints\n\n* 1 \\leq N \\leq 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->[N]"], "constraints": ["1<=N<=10^9"]}}
{"name": "1324_D. Pair of Topics", "description": "Input\n\nThe first line of the input contains one integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of topics.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9), where a_i is the interestingness of the i-th topic for the teacher.\n\nThe third line of the input contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^9), where b_i is the interestingness of the i-th topic for the students.", "grammar": {"productions": ["<S>->[N] <n> <T_N> <U_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1", "<U_i>-><U_i-1> <s> b_i", "<U_1>->b_1"], "constraints": ["2<=n<=2*10^5", "1<=a_i<=10^9", "1<=b_i<=10^9"]}}
{"name": "p03346 AtCoder Grand Contest 024 - Backfront", "description": "Constraints\n\n* 1 \\leq N \\leq 2\\times 10^5\n* (P_1,P_2,...,P_N) is a permutation of (1,2,...,N).\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nP_1\n:\nP_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> P_i", "<T_1>->P_1"], "constraints": ["1<=N<=2*10^5", "P is a permutation of 1 to N"]}}
{"name": "1265_A. Beautiful String", "description": "Input\n\nThe first line contains positive integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Next t lines contain the descriptions of test cases.\n\nEach line contains a non-empty string s consisting of only characters 'a', 'b', 'c' and '?'. \n\nIt is guaranteed that in each test case a string s has at least one character '?'. The sum of lengths of strings s in all test cases does not exceed 10^5.", "grammar": {"productions": ["<S>->[T] <t> <T_T>", "<T_i>-><T_i-1> <s_i>", "<T_1>-><s_1>", "<s_i>->'a'|'b'|'c'|'?'"], "constraints": ["1<=t<=1000", "1<=|s_i|<=10^5", "Each s_i contains at least one '?'"]}}
{"name": "1110_A. Parity", "description": "Input\n\nThe first line contains two integers b and k (2\u2264 b\u2264 100, 1\u2264 k\u2264 10^5) \u2014 the base of the number and the number of digits.\n\nThe second line contains k integers a_1, a_2, \u2026, a_k (0\u2264 a_i < b) \u2014 the digits of n.\n\nThe representation of n contains no unnecessary leading zero. That is, a_1 can be equal to 0 only if k = 1.", "grammar": {"productions": ["<S>->[B,K] <b> <k> <T_K>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["2<=b<=100", "1<=k<=10^5", "0<=a_i<b", "a_1!=0 if k>1"]}}
{"name": "439_A. Devu, the Singer and Churu, the Joker", "description": "Input\n\nThe first line contains two space separated integers n, d (1 \u2264 n \u2264 100; 1 \u2264 d \u2264 10000). The second line contains n space-separated integers: t1, t2, ..., tn (1 \u2264 ti \u2264 100).", "grammar": {"productions": ["<S>->[N,D] <n,d> <T_N>", "<T_i>-><T_i-1> <s> t_i", "<T_1>->t_1"], "constraints": ["1<=n<=100", "1<=d<=10000", "1<=t_i<=100"]}}
{"name": "770_A. New Password", "description": "Input\n\nThe first line contains two positive integers n and k (2 \u2264 n \u2264 100, 2 \u2264 k \u2264 min(n, 26)) \u2014 the length of the password and the number of distinct symbols in it. \n\nPay attention that a desired new password always exists.", "grammar": {"productions": ["<S>->[N,K] <n> <k> <T_NK>", "<T_i>-><T_i-1> <s> p_i", "<T_1>->p_1"], "constraints": ["2<=n<=100", "2<=k<=min(n, 26)"]}}
{"name": "903_A. Hungry Student Problem", "description": "Input\n\nThe first line contains one integer n (1 \u2264 n \u2264 100) \u2014 the number of testcases.\n\nThe i-th of the following n lines contains one integer xi (1 \u2264 xi \u2264 100) \u2014 the number of chicken chunks Ivan wants to eat.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> x_i", "<T_1>->x_1"], "constraints": ["1<=n<=100", "1<=x_i<=100"]}}
{"name": "950_A. Left-handers, Right-handers and Ambidexters", "description": "Input\n\nThe only line contains three integers l, r and a (0 \u2264 l, r, a \u2264 100) \u2014 the number of left-handers, the number of right-handers and the number of ambidexters at the training.", "grammar": {"productions": ["<S>-><l> <r> <a>"], "constraints": ["0<=l<=100", "0<=r<=100", "0<=a<=100"]}}
{"name": "p03125 AtCoder Beginner Contest 118 - B +/- A", "description": "Constraints\n\n* All values in input are integers.\n* 1 \\leq A \\leq B \\leq 20\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B", "grammar": {"productions": ["<S>-><A> <space> <B>", "<A>->'1'|'2'|...|'20'", "<B>-><A>|'2'|...|20", "<space>->' '"], "constraints": ["1<=A<=B<=20"]}}
{"name": "701_A. Cards", "description": "Input\n\nThe first line of the input contains integer n (2 \u2264 n \u2264 100) \u2014 the number of cards in the deck. It is guaranteed that n is even.\n\nThe second line contains the sequence of n positive integers a1, a2, ..., an (1 \u2264 ai \u2264 100), where ai is equal to the number written on the i-th card.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["2<=N<=100", "1<=a_i<=100", "n is even"]}}
{"name": "p03470 AtCoder Beginner Contest 085 - Kagami Mochi", "description": "Constraints\n\n* 1 \u2264 N \u2264 100\n* 1 \u2264 d_i \u2264 100\n* All input values are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nd_1\n:\nd_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> d_i", "<T_1>->d_1"], "constraints": ["1<=N<=100", "1<=d_i<=100"]}}
{"name": "p03369 AtCoder Beginner Contest 095 - Something on It", "description": "Constraints\n\n* S is a string of length 3.\n* Each character in S is `o` or `x`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>-><C><C><C>", "<C>->'o'|'x'"], "constraints": [""]}}
{"name": "p02976 AtCoder Grand Contest 035 - Even Degrees", "description": "Constraints\n\n* 2 \\leq N \\leq 10^5\n* N-1 \\leq M \\leq 10^5\n* 1 \\leq A_i,B_i \\leq N (1\\leq i\\leq M)\n* The given graph is simple and connected.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nA_1 B_1\n:\nA_M B_M", "grammar": {"productions": ["<S>->[N,M] <n_m> <T_M>", "<T_i>-><T_i-1> <e> A_i B_i", "<T_1>->A_1 B_1"], "constraints": ["2<=N<=10^5", "(N-1)<=M<=10^5", "1<=A_i<=N", "1<=B_i<=N", "1<=i<=M"]}}
{"name": "p03569 CODE FESTIVAL 2017 qual C - Inserting 'x'", "description": "Constraints\n\n* 1 \\leq |s| \\leq 10^5\n* s consists of lowercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\ns", "grammar": {"productions": ["<S>-><string>", "<string>->a|b|c|...|z|<string> a|<string> b|<string> c|...|<string> z"], "constraints": ["1<=|s|<=10^5", "s consists of lowercase English letters"]}}
{"name": "p03288 AtCoder Beginner Contest 104 - Rated for Me", "description": "Constraints\n\n* 0 \u2264 R \u2264 4208\n* R is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nR", "grammar": {"productions": ["<S>-><r>", "<r>->R"], "constraints": ["0<=R<=4208"]}}
{"name": "p02680 AtCoder Beginner Contest 168 - . (Single Dot)", "description": "Constraints\n\n* All values in input are integers between -10^9 and 10^9 (inclusive).\n* 1 \\leq N, M \\leq 1000\n* A_i < B_i\\ (1 \\leq i \\leq N)\n* E_j < F_j\\ (1 \\leq j \\leq M)\n* The point (0, 0) does not lie on any of the given segments.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nA_1 B_1 C_1\n:\nA_N B_N C_N\nD_1 E_1 F_1\n:\nD_M E_M F_M", "grammar": {"productions": ["<S>->[N,M] <n_m> <T_A_N> <T_B_M>", "<n_m>->N M", "<T_A_i>-><T_A_i-1> <s> A_i B_i C_i", "<T_A_1>->A_1 B_1 C_1", "<T_B_i>-><T_B_i-1> <s> D_i E_i F_i", "<T_B_1>->D_1 E_1 F_1"], "constraints": ["-10^9<=A_i, B_i, C_i, D_i, E_i, F_i<=10^9", 1<=N,M<=1000", "A_i<B_i (1<=i<=N)", "D_i<E_i (1<=i<=M)"]}}
{"name": "1399_D. Binary String To Subsequences", "description": "Input\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 2 \u22c5 10^4) \u2014 the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the length of s. The second line of the test case contains n characters '0' and '1' \u2014 the string s.\n\nIt is guaranteed that the sum of n does not exceed 2 \u22c5 10^5 (\u2211 n \u2264 2 \u22c5 10^5).", "grammar": {"productions": ["<S>->[T] <t> <T_T>", "<T_i>-><T_i-1> <t> n_i s_i", "<T_1>-><t> n_1 s_1"], "constraints": ["1<=t<=2*10^4", "1<=n<=2*10^5"]}}
{"name": "p02271 Exhaustive Search", "description": "Constraints\n\n* n \u2264 20\n* q \u2264 200\n* 1 \u2264 elements in A \u2264 2000\n* 1 \u2264 Mi \u2264 2000\n\nInput\n\nIn the first line n is given. In the second line, n integers are given. In the third line q is given. Then, in the fourth line, q integers (Mi) are given.", "grammar": {"productions": ["<S>->[N] <n> <T_A> [Q] <q> <T_Q>", "<T_Ai>-><T_Ai-1> <s> a_i", "<T_A1>->a_1", "<T_Qi>-><T_Qi-1> <s> Mi", "<T_Q1>->M_1"], "constraints": ["1<=n<=20", "1<=q<=200", "1<=A_i<=2000", "1<=M_i<=2000"]}}
{"name": "1016_A. Death Note", "description": "Input\n\nThe first line of the input contains two integers n, m (1 \u2264 n \u2264 2 \u22c5 10^5, 1 \u2264 m \u2264 10^9) \u2014 the number of days you will write names in the notebook and the number of names which can be written on each page of the notebook.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9), where a_i means the number of names you will write in the notebook during the i-th day.", "grammar": {"productions": ["<S>->[N,M] <n,m> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=2*10^5", "1<=m<=10^9", "1<=a_i<=10^9"]}}
{"name": "1391_C. Cyclic Permutations ", "description": "Input\n\nThe first and only line contains a single integer n (3 \u2264 n \u2264 10^6).", "grammar": {"productions": ["<S>-><n>"], "constraints": ["3<=N<=10^6"]}}
{"name": "p04019 AtCoder Grand Contest 003 - Wanna go back home", "description": "Constraints\n\n* 1 \u2266 | S | \u2266 1000\n* S consists of the letters `N`, `W`, `S`, `E`.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>-><Direction>*", "<Direction>->N|W|S|E"], "constraints": ["1<=|S|<=1000", "S consists of the letters N,W,S,E"]}}
{"name": "p03338 AtCoder Beginner Contest 098 - Cut and Count", "description": "Constraints\n\n* 2 \\leq N \\leq 100\n* |S| = N\n* S consists of lowercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nS", "grammar": {"productions": ["<S>->[N] <n> <S_N>", "<S_i>-><S_i-1> s_i", "<S_1>->s_1"], "constraints": ["2<=N<=100", "|S|=N", "S consists of lowercase English letters"]}}
{"name": "p03370 AtCoder Beginner Contest 095 - Bitter Alchemy", "description": "Constraints\n\n* 2 \u2264 N \u2264 100\n* 1 \u2264 m_i \u2264 1000\n* m_1 + m_2 + ... + m_N \u2264 X \u2264 10^5\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN X\nm_1\nm_2\n:\nm_N", "grammar": {"productions": ["<S>->[N] [X] <N> <T_N>", "<T_i>-><T_i-1> m_i", "<T_1>->m_1"], "constraints": ["2<=N<=100", "1<=m_i<=1000", "m_1 + m_2 + ... + m_N<=X<=10^5"]}}
{"name": "1060_A. Phone Numbers", "description": "Input\n\nThe first line contains an integer n \u2014 the number of cards with digits that you have (1 \u2264 n \u2264 100).\n\nThe second line contains a string of n digits (characters \"0\", \"1\", ..., \"9\") s_1, s_2, \u2026, s_n. The string will not contain any other characters, such as leading or trailing spaces.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> s_i", "<T_1>->s_1"], "constraints": ["1<=n<=100", "s_i belongs to {0, 1, ..., 9}"]}}
{"name": "1301_B. Motarack's Birthday", "description": "Input\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains one integer n (2 \u2264 n \u2264 10^{5}) \u2014 the size of the array a.\n\nThe second line of each test case contains n integers a_1, a_2, \u2026, a_n (-1 \u2264 a_i \u2264 10 ^ {9}). If a_i = -1, then the i-th integer is missing. It is guaranteed that at least one integer is missing in every test case.\n\nIt is guaranteed, that the sum of n for all test cases does not exceed 4 \u22c5 10 ^ {5}.", "grammar": {"productions": ["<S>->[T] <t> <T_T>", "<T_i>-><T_i-1> <t> <N_i> <n> <A_Ni>", "<T_1>-><t> <N_1> <n> <A_N1>", "<A_i>-><A_i-1> <s> a_i", "<A_1>->a_1"], "constraints": ["1<=t<=10^4", "2<=n<=10^5", "-1<=a_i<=10^9", "At least one -1 in every array"]}}
{"name": "1311_C. Perform the Combo", "description": "Input\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThen t test cases follow.\n\nThe first line of each test case contains two integers n and m (2 \u2264 n \u2264 2 \u22c5 10^5, 1 \u2264 m \u2264 2 \u22c5 10^5) \u2014 the length of s and the number of tries correspondingly.\n\nThe second line of each test case contains the string s consisting of n lowercase Latin letters.\n\nThe third line of each test case contains m integers p_1, p_2, ..., p_m (1 \u2264 p_i < n) \u2014 the number of characters pressed right during the i-th try.\n\nIt is guaranteed that the sum of n and the sum of m both does not exceed 2 \u22c5 10^5 (\u2211 n \u2264 2 \u22c5 10^5, \u2211 m \u2264 2 \u22c5 10^5).\n\nIt is guaranteed that the answer for each letter does not exceed 2 \u22c5 10^9.", "grammar": {"productions": ["<G>-><T> <G>|ε", "<T>-><t> <T_i>", "<T_i>->[N] <n> [M] <m> <S> <P>", "<S>-><s_i>", "<P>-><p_i>", "<t>->t", "<n>->n", "<m>-> m", "<s_i>->s_1 s_2 ... s_n", "<p_i>-> p_1 p_2 ... p_m"], "constraints": ["1<=t<=10^4", "2<=n<=2*10^5", "1<=m<=2*10^5", "1<=p_i<n"]}}
{"name": "551_A. GukiZ and Contest", "description": "Input\n\nThe first line contains integer n (1 \u2264 n \u2264 2000), number of GukiZ's students. \n\nThe second line contains n numbers a1, a2, ... an (1 \u2264 ai \u2264 2000) where ai is the rating of i-th student (1 \u2264 i \u2264 n).", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=2000", "1<=a_i<=2000"]}}
{"name": "p03821 AtCoder Grand Contest 009 - Multiple Array", "description": "Constraints\n\n* All input values are integers.\n* 1 \u2266 N \u2266 10^5\n* 0 \u2266 A_i \u2266 10^9(1 \u2266 i \u2266 N)\n* 1 \u2266 B_i \u2266 10^9(1 \u2266 i \u2266 N)\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN\nA_1 B_1\n:\nA_N B_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> A_i B_i", "<T_1>->A_1 B_1"], "constraints": ["1<=N<=10^5", "0<=A_i<=10^9", "1<=B_i<=10^9"]}}
{"name": "p03168 Educational DP Contest - Coins", "description": "Constraints\n\n* N is an odd number.\n* 1 \\leq N \\leq 2999\n* p_i is a real number and has two decimal places.\n* 0 < p_i < 1\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\np_1 p_2 \\ldots p_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> p_i", "<T_1>->p_1"], "constraints": ["1<=N<=2999", "N is odd", "0<p_i<1", "p_i has two decimal places"]}}
{"name": "p03003 AtCoder Beginner Contest 130 - Common Subsequence", "description": "Constraints\n\n* 1 \\leq N, M \\leq 2 \\times 10^3\n* The length of S is N.\n* The length of T is M.\n* 1 \\leq S_i, T_i \\leq 10^5\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nS_1 S_2 ... S_{N-1} S_{N}\nT_1 T_2 ... T_{M-1} T_{M}", "grammar": {"productions": ["<S>->[N,M] <N> <M>", "<N_i>-><N_i-1> <s> S_i", "<N_1>->S_1", "<M_j>-><M_j-1> <t> T_j", "<M_1>->T_1"], "constraints": ["1<=N,M<=2*10^3", "1<=S_i,T_i<=10^5"]}}
{"name": "1054_A. Elevator or Stairs?", "description": "Input\n\nThe only line contains six integers x, y, z, t_1, t_2, t_3 (1 \u2264 x, y, z, t_1, t_2, t_3 \u2264 1000) \u2014 the floor Masha is at, the floor Masha wants to get to, the floor the elevator is located on, the time it takes Masha to pass between two floors by stairs, the time it takes the elevator to pass between two floors and the time it takes for the elevator to close or open the doors.\n\nIt is guaranteed that x \u2260 y.", "grammar": {"productions": ["<S>-><x> <y> <z> <t_1> <t_2> <t_3>"], "constraints": ["1<=x, y, z, t_1, t_2, t_3<=1000", x≠y"]}}
{"name": "570_B. Simple Game", "description": "Input\n\nThe first line contains two integers n and m (1 \u2264 m \u2264 n \u2264 10^9) \u2014 the range of numbers in the game, and the number selected by Misha respectively.", "grammar": {"productions": ["<S>->[N] <n> [M] <m>", "<n>->' ' n", "<m>->' ' m"], "constraints": ["1<=m<=n<=10^9"]}}
{"name": "688_B. Lovely Palindromes", "description": "Input\n\nThe only line of the input contains a single integer n (1 \u2264 n \u2264 10^100 000).", "grammar": {"productions": ["<S>-><n>", "<n>->n"], "constraints": ["1<=n<=10^100000"]}}
{"name": "1028_A. Find Square", "description": "Input\n\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 115) \u2014 the number of rows and the number of columns in the table.\n\nThe i-th of the next n lines contains a string of m characters s_{i1} s_{i2} \u2026 s_{im} (s_{ij} is 'W' for white cells and 'B' for black cells), describing the i-th row of the table.", "grammar": {"productions": ["<S>->[N M] <n_m> <T_N>", "<T_i>-><T_i-1> <s_i>", "<T_1>-><s_1>", "<s_i>->s_{i1} s_{i2} ... s_{im}"], "constraints": ["1<=n,m<=115", "s_{ij} ∈ {'W','B'}"]}}
{"name": "1353_D. Constructing the Array", "description": "Input\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains one integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the length of a.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5 (\u2211 n \u2264 2 \u22c5 10^5).", "grammar": {"productions": ["<S>->[T] <t> <T_T>", "<T_i>-><T_i-1> <s> <testcase_i>", "<T_1>-><testcase_1>", "<testcase>-><n> <T_N>", "<T_j>-><T_j-1> <s> a_j", "<T_1>->a_1"], "constraints": ["1<=t<=10^4", "1<=a_i<=2*10^5"]}}
{"name": "559_B. Equivalent Strings", "description": "Input\n\nThe first two lines of the input contain two strings given by the teacher. Each of them has the length from 1 to 200 000 and consists of lowercase English letters. The strings have the same length.", "grammar": {"productions": ["<S>-><string1> <string2>", "<string1>-><char> <string1>|<char>", "<string2>-><char> <string2>|<char>", "<char>->'a'|'b'|'c'|...|'z'"], "constraints": ["1<=|<string1>|,|<string2>|<=200000", "|<string1>|=|<string2>|", "<string1>, <string2> consists of lowercase English letters only"]}}
{"name": "1140_A. Detective Book", "description": "Input\n\nThe first line contains single integer n (1 \u2264 n \u2264 10^4) \u2014 the number of pages in the book.\n\nThe second line contains n integers a_1, a_2, ..., a_n (i \u2264 a_i \u2264 n), where a_i is the number of page which contains the explanation of the mystery on page i.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=10^4", "1<=a_i<=n"]}}
{"name": "699_C. Vacations", "description": "Input\n\nThe first line contains a positive integer n (1 \u2264 n \u2264 100) \u2014 the number of days of Vasya's vacations.\n\nThe second line contains the sequence of integers a1, a2, ..., an (0 \u2264 ai \u2264 3) separated by space, where: \n\n  * ai equals 0, if on the i-th day of vacations the gym is closed and the contest is not carried out; \n  * ai equals 1, if on the i-th day of vacations the gym is closed, but the contest is carried out; \n  * ai equals 2, if on the i-th day of vacations the gym is open and the contest is not carried out; \n  * ai equals 3, if on the i-th day of vacations the gym is open and the contest is carried out.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1", "<n>->'1'|'2'|...|'100'", "<s>->' '", "a_i->'0'|'1'|'2'|'3"], "constraints": ["1<=n<=100", "0<=a_i<=3"]}}
{"name": "p03337 AtCoder Beginner Contest 098 - Add Sub Mul", "description": "Constraints\n\n* -1000 \\leq A,B \\leq 1000\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B", "grammar": {"productions": ["<S>-><A> <B>", "<A>->a", "<B>->b"], "constraints": ["-1000<=A<=1000", "-1000<=B<=1000"]}}
{"name": "1373_D. Maximum Sum on Even Positions", "description": "Input\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 2 \u22c5 10^4) \u2014 the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the length of a. The second line of the test case contains n integers a_0, a_1, ..., a_{n-1} (1 \u2264 a_i \u2264 10^9), where a_i is the i-th element of a.\n\nIt is guaranteed that the sum of n does not exceed 2 \u22c5 10^5 (\u2211 n \u2264 2 \u22c5 10^5).", "grammar": {"productions": ["<S>->[T] <t> <T_T>", "<T_i>-><T_i-1> <testcase>", "<T_1>-><testcase>", "<testcase>-><n> <a_n>", "<a_i>-><a_i-1> <a> a_i", "<a_1>->a_1"], "constraints": ["1<=t<=2*10^4", "1<=n<=2*10^5", "1<=a_i<=10^9"]}}
{"name": "p02600 M-SOLUTIONS Programming Contest 2020 - Kyu in AtCoder", "description": "Constraints\n\n* 400 \\leq X \\leq 1999\n* X is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX", "grammar": {"productions": ["<S>->X"], "constraints": ["400<=X<=1999"]}}
{"name": "275_A. Lights Out", "description": "Input\n\nThe input consists of three rows. Each row contains three integers each between 0 to 100 inclusive. The j-th number in the i-th row is the number of times the j-th light of the i-th row of the grid is pressed.", "grammar": {"productions": ["<G>->[R] <r1> <R_N>", "<R_i>-><R_i-1> <c> <C_3>", "<R_1>-><c> <C_3>", "<C_3>-><c> <c> <c>", "<c>-><int>"], "constraints": ["0<=<int><=100"]}}
{"name": "1371_D. Grid-00100", "description": "Input\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Next t lines contain descriptions of test cases.\n\nFor each test case the only line contains two integers n, k (1 \u2264 n \u2264 300, 0 \u2264 k \u2264 n^2).\n\nIt is guaranteed that the sum of n^2 for all test cases does not exceed 10^5.", "grammar": {"productions": ["<S>->[T] <t> <T_T>", "<T_i>-><T_i-1> <tc>", "<T_1>-><tc>", "<tc>-><n> <k>"], "constraints": ["1<=t<=100", "1<=n<=300", "0<=k<=n^2"]}}
{"name": "1242_A. Tile Painting", "description": "Input\n\nThe first line of input contains a single integer n (1 \u2264 n \u2264 10^{12}), the length of the path.", "grammar": {"productions": ["<S>-><n>"], "constraints": ["1<=n<=10^12"]}}
{"name": "1351_C. Skier", "description": "Input\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases in the input. Then t test cases follow.\n\nEach set is given by one nonempty string of the characters 'S', 'N', 'W', 'E'. The length of the string does not exceed 10^5 characters.\n\nThe sum of the lengths of t given lines over all test cases in the input does not exceed 10^5.", "grammar": {"productions": ["<S>->[T] <t> <T_T>", "<T_i>-><T_i-1> <s> <directions>", "<T_1>-><directions>", "<directions>->'S'|'N'|'W'|'E'"], "constraints": ["1<=t<=10^4", "1<=|directions|<=10^5"]}}
