{"name": "p03285 AtCoder Beginner Contest 105 - Cakes and Donuts", "description": "La Confiserie d'ABC sells cakes at 4 dollars each and doughnuts at 7 dollars each. Determine if there is a way to buy some of them for exactly N dollars. You can buy two or more doughnuts and two or more cakes, and you can also choose to buy zero doughnuts or zero cakes.\n\nConstraints\n\n* N is an integer between 1 and 100, inclusive.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["1<=N<=100"]}}
{"name": "466_C. Number of Ways", "description": "You've got array a[1], a[2], ..., a[n], consisting of n integers. Count the number of ways to split all the elements of the array into three contiguous parts so that the sum of elements in each part is the same. \n\nMore formally, you need to find the number of such pairs of indices i, j (2 \u2264 i \u2264 j \u2264 n - 1), that <image>.\n\nInput\n\nThe first line contains integer n (1 \u2264 n \u2264 5\u00b710^5), showing how many numbers are in the array. The second line contains n integers a[1], a[2], ..., a[n] (|a[i]| \u2264 10^9) \u2014 the elements of array a.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=N<=5*10^5", "2<=i<=j<=(n-1)", "-10^9<=a_i<=10^9"]}}
{"name": "p02391 Small", "description": "Write a program which prints small/large/equal relation of given two integers a and b.\n\nConstraints\n\n* -1000 \u2264 a, b \u2264 1000\n\nInput\n\nTwo integers a and b separated by a single space are given in a line.", "grammar": {"productions": ["<S>->a <s> b"], "constraints": ["-1000<=a<=1000", "-1000<=b<=1000"]}}
{"name": "1372_C. Omkar and Baseball", "description": "Patrick likes to play baseball, but sometimes he will spend so many hours hitting home runs that his mind starts to get foggy! Patrick is sure that his scores across n sessions follow the identity permutation (ie. in the first game he scores 1 point, in the second game he scores 2 points and so on). However, when he checks back to his record, he sees that all the numbers are mixed up! \n\nDefine a special exchange as the following: choose any subarray of the scores and permute elements such that no element of subarray gets to the same position as it was before the exchange. For example, performing a special exchange on [1,2,3] can yield [3,1,2] but it cannot yield [3,2,1] since the 2 is in the same position. \n\nGiven a permutation of n integers, please help Patrick find the minimum number of special exchanges needed to make the permutation sorted! It can be proved that under given constraints this number doesn't exceed 10^{18}.\n\nAn array a is a subarray of an array b if a can be obtained from b by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the length of the given permutation.\n\nThe second line of each test case contains n integers a_{1},a_{2},...,a_{n} (1 \u2264 a_{i} \u2264 n) \u2014 the initial permutation.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=100", "1<=n<=2*10^5", "1<=a_i<=n"]}}
{"name": "764_A. Taymyr is calling you", "description": "Comrade Dujikov is busy choosing artists for Timofey's birthday and is recieving calls from Taymyr from Ilia-alpinist.\n\nIlia-alpinist calls every n minutes, i.e. in minutes n, 2n, 3n and so on. Artists come to the comrade every m minutes, i.e. in minutes m, 2m, 3m and so on. The day is z minutes long, i.e. the day consists of minutes 1, 2, ..., z. How many artists should be killed so that there are no artists in the room when Ilia calls? Consider that a call and a talk with an artist take exactly one minute.\n\nInput\n\nThe only string contains three integers \u2014 n, m and z (1 \u2264 n, m, z \u2264 10^4).", "grammar": {"productions": ["<S>->n <s> m <s> z"], "constraints": ["1<=n<=10^4", "1<=m<=10^4", "1<=z<=10^4"]}}
{"name": "p03605 AtCoder Beginner Contest 073 - September 9", "description": "It is September 9 in Japan now.\n\nYou are given a two-digit integer N. Answer the question: Is 9 contained in the decimal notation of N?\n\nConstraints\n\n* 10\u2264N\u226499\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["10<=N<=99"]}}
{"name": "p03229 Tenka1 Programmer Beginner Contest - Align", "description": "You are given N integers; the i-th of them is A_i. Find the maximum possible sum of the absolute differences between the adjacent elements after arranging these integers in a row in any order you like.\n\nConstraints\n\n* 2 \\leq N \\leq 10^5\n* 1 \\leq A_i \\leq 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1\n:\nA_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> A_i", "<T_1>->A_1"], "constraints": ["2<=N<=10^5", "1<=A_i<=10^9"]}}
{"name": "1330_A. Dreamoon and Ranking Collection", "description": "Dreamoon is a big fan of the Codeforces contests.\n\nOne day, he claimed that he will collect all the places from 1 to 54 after two more rated contests. It's amazing!\n\nBased on this, you come up with the following problem:\n\nThere is a person who participated in n Codeforces rounds. His place in the first round is a_1, his place in the second round is a_2, ..., his place in the n-th round is a_n.\n\nYou are given a positive non-zero integer x.\n\nPlease, find the largest v such that this person can collect all the places from 1 to v after x more rated contests.\n\nIn other words, you need to find the largest v, such that it is possible, that after x more rated contests, for each 1 \u2264 i \u2264 v, there will exist a contest where this person took the i-th place.\n\nFor example, if n=6, x=2 and a=[3,1,1,5,7,10] then answer is v=5, because if on the next two contest he will take places 2 and 4, then he will collect all places from 1 to 5, so it is possible to get v=5.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 5) denoting the number of test cases in the input.\n\nEach test case contains two lines. The first line contains two integers n, x (1 \u2264 n, x \u2264 100). The second line contains n positive non-zero integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 100).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <s> x <n> <L_n>", "<T_1>->[n] <s> x <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=5", "1<=n,x<=100", "1<=a_i<=100"]}}
{"name": "1363_B. Subsequence Hate", "description": "Shubham has a binary string s. A binary string is a string containing only characters \"0\" and \"1\".\n\nHe can perform the following operation on the string any amount of times: \n\n  * Select an index of the string, and flip the character at that index. This means, if the character was \"0\", it becomes \"1\", and vice versa. \n\n\n\nA string is called good if it does not contain \"010\" or \"101\" as a subsequence \u2014 for instance, \"1001\" contains \"101\" as a subsequence, hence it is not a good string, while \"1000\" doesn't contain neither \"010\" nor \"101\" as subsequences, so it is a good string.\n\nWhat is the minimum number of operations he will have to perform, so that the string becomes good? It can be shown that with these operations we can make any string good.\n\nA string a is a subsequence of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters.\n\nInput\n\nThe first line of the input contains a single integer t (1\u2264 t \u2264 100) \u2014 the number of test cases.\n\nEach of the next t lines contains a binary string s (1 \u2264 |s| \u2264 1000).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [01]{1,1000}", "<T_1>->[01]{1,1000}"], "constraints": ["1<=t<=100"]}}
{"name": "129_A. Cookies", "description": "Olga came to visit the twins Anna and Maria and saw that they have many cookies. The cookies are distributed into bags. As there are many cookies, Olga decided that it's no big deal if she steals a bag. However, she doesn't want the sisters to quarrel because of nothing when they divide the cookies. That's why Olga wants to steal a bag with cookies so that the number of cookies in the remaining bags was even, that is, so that Anna and Maria could evenly divide it into two (even 0 remaining cookies will do, just as any other even number). How many ways there are to steal exactly one cookie bag so that the total number of cookies in the remaining bags was even?\n\nInput\n\nThe first line contains the only integer n (1 \u2264 n \u2264 100) \u2014 the number of cookie bags Anna and Maria have. The second line contains n integers ai (1 \u2264 ai \u2264 100) \u2014 the number of cookies in the i-th bag.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=100", "1<=a_i<=100"]}}
{"name": "1333_B. Kind Anton", "description": "Once again, Boris needs the help of Anton in creating a task. This time Anton needs to solve the following problem:\n\nThere are two arrays of integers a and b of length n. It turned out that array a contains only elements from the set \\{-1, 0, 1\\}.\n\nAnton can perform the following sequence of operations any number of times:\n\n  1. Choose any pair of indexes (i, j) such that 1 \u2264 i < j \u2264 n. It is possible to choose the same pair (i, j) more than once. \n  2. Add a_i to a_j. In other words, j-th element of the array becomes equal to a_i + a_j. \n\n\n\nFor example, if you are given array [1, -1, 0], you can transform it only to [1, -1, -1], [1, 0, 0] and [1, -1, 1] by one operation.\n\nAnton wants to predict if it is possible to apply some number (zero or more) of these operations to the array a so that it becomes equal to array b. Can you help him?\n\nInput\n\nEach test contains multiple test cases. \n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 10000). The description of the test cases follows.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5) \u2014 the length of arrays.\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (-1 \u2264 a_i \u2264 1) \u2014 elements of array a. There can be duplicates among elements.\n\nThe third line of each test case contains n integers b_1, b_2, ..., b_n (-10^9 \u2264 b_i \u2264 10^9) \u2014 elements of array b. There can be duplicates among elements.\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n> <n> <Z_n>", "<T_1>->[n] <n> <L_n> <n> <Z_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1", "<Z_i>-><Z_i-1> <s> b_i", "<Z_1>->b_1"], "constraints": ["1<=t<=10000", "1<=n<=10^5", "-1<=a_i<=1", "-10^9<=b_i<=10^9"]}}
{"name": "1417_A. Copy-paste", "description": "\u2014 Hey folks, how do you like this problem?\n\n\u2014 That'll do it. \n\nBThero is a powerful magician. He has got n piles of candies, the i-th pile initially contains a_i candies. BThero can cast a copy-paste spell as follows: \n\n  1. He chooses two piles (i, j) such that 1 \u2264 i, j \u2264 n and i \u2260 j. \n  2. All candies from pile i are copied into pile j. Formally, the operation a_j := a_j + a_i is performed. \n\n\n\nBThero can cast this spell any number of times he wants to \u2014 but unfortunately, if some pile contains strictly more than k candies, he loses his magic power. What is the maximum number of times BThero can cast the spell without losing his power?\n\nInput\n\nThe first line contains one integer T (1 \u2264 T \u2264 500) \u2014 the number of test cases.\n\nEach test case consists of two lines: \n\n  * the first line contains two integers n and k (2 \u2264 n \u2264 1000, 2 \u2264 k \u2264 10^4); \n  * the second line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 k). \n\n\n\nIt is guaranteed that the sum of n over all test cases does not exceed 1000, and the sum of k over all test cases does not exceed 10^4.", "grammar": {"productions": ["<S>->[T] <n> <T_T>", "<T_i>-><T_i-1> <n> [n] <s> k <n> <L_n>", "<T_1>->[n] <s> k <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=T<=500", "2<=n<=1000", "2<=k<=10^4", "1<=a_i<=k"]}}
{"name": "1141_B. Maximal Continuous Rest", "description": "Each day in Berland consists of n hours. Polycarp likes time management. That's why he has a fixed schedule for each day \u2014 it is a sequence a_1, a_2, ..., a_n (each a_i is either 0 or 1), where a_i=0 if Polycarp works during the i-th hour of the day and a_i=1 if Polycarp rests during the i-th hour of the day.\n\nDays go one after another endlessly and Polycarp uses the same schedule for each day.\n\nWhat is the maximal number of continuous hours during which Polycarp rests? It is guaranteed that there is at least one working hour in a day.\n\nInput\n\nThe first line contains n (1 \u2264 n \u2264 2\u22c510^5) \u2014 number of hours per day.\n\nThe second line contains n integer numbers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 1), where a_i=0 if the i-th hour in a day is working and a_i=1 if the i-th hour is resting. It is guaranteed that a_i=0 for at least one i.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=2*10^5", "0<=a_i<=1"]}}
{"name": "139_A. Petr and Book", "description": "One Sunday Petr went to a bookshop and bought a new book on sports programming. The book had exactly n pages.\n\nPetr decided to start reading it starting from the next day, that is, from Monday. Petr's got a very tight schedule and for each day of the week he knows how many pages he will be able to read on that day. Some days are so busy that Petr will have no time to read whatsoever. However, we know that he will be able to read at least one page a week.\n\nAssuming that Petr will not skip days and will read as much as he can every day, determine on which day of the week he will read the last page of the book.\n\nInput\n\nThe first input line contains the single integer n (1 \u2264 n \u2264 1000) \u2014 the number of pages in the book.\n\nThe second line contains seven non-negative space-separated integers that do not exceed 1000 \u2014 those integers represent how many pages Petr can read on Monday, Tuesday, Wednesday, Thursday, Friday, Saturday and Sunday correspondingly. It is guaranteed that at least one of those numbers is larger than zero.", "grammar": {"productions": ["<S>->n <n> a <s> b <s> c <s> d <s> e <s> f <s> g"], "constraints": ["1<=n<=1000", "0<=a<=1000", "0<=b<=1000", "0<=c<=1000", "0<=d<=1000", "0<=e<=1000", "0<=f<=1000", "0<=g<=1000"]}}
{"name": "p02912 AtCoder Beginner Contest 141 - Powerful Discount Tickets", "description": "Takahashi is going to buy N items one by one.\n\nThe price of the i-th item he buys is A_i yen (the currency of Japan).\n\nHe has M discount tickets, and he can use any number of them when buying an item.\n\nIf Y tickets are used when buying an item priced X yen, he can get the item for \\frac{X}{2^Y} (rounded down to the nearest integer) yen.\n\nWhat is the minimum amount of money required to buy all the items?\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N, M \\leq 10^5\n* 1 \\leq A_i \\leq 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nA_1 A_2 ... A_N", "grammar": {"productions": ["<S>->[N] <s> M <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["1<=N<=10^5", "1<=M<=10^5", "1<=A_i<=10^9"]}}
{"name": "p03354 AtCoder Beginner Contest 097 - Equals", "description": "We have a permutation of the integers from 1 through N, p_1, p_2, .., p_N. We also have M pairs of two integers between 1 and N (inclusive), represented as (x_1,y_1), (x_2,y_2), .., (x_M,y_M). AtCoDeer the deer is going to perform the following operation on p as many times as desired so that the number of i (1 \u2264 i \u2264 N) such that p_i = i is maximized:\n\n* Choose j such that 1 \u2264 j \u2264 M, and swap p_{x_j} and p_{y_j}.\n\n\n\nFind the maximum possible number of i such that p_i = i after operations.\n\nConstraints\n\n* 2 \u2264 N \u2264 10^5\n* 1 \u2264 M \u2264 10^5\n* p is a permutation of integers from 1 through N.\n* 1 \u2264 x_j,y_j \u2264 N\n* x_j \u2260 y_j\n* If i \u2260 j, \\\\{x_i,y_i\\\\} \u2260 \\\\{x_j,y_j\\\\}.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\np_1 p_2 .. p_N\nx_1 y_1\nx_2 y_2\n:\nx_M y_M", "grammar": {"productions": ["<S>->[N] <s> [M] <n> <T_N> <n> <L_M>", "<T_i>-><T_i-1> <s> p_i", "<T_1>->p_1", "<L_i>-><L_i-1> <n> x_i <s> y_i", "<L_1>->x_1 <s> y_1"], "constraints": ["2<=N<=10^5", "1<=M<=10^5", "1<=p_i<=N", "1<=x_i<=N", "1<=y_i<=N", "x_i!=y_i"]}}
{"name": "p02915 AtCoder Beginner Contest 140 - Password", "description": "Takahashi is going to set a 3-character password.\n\nHow many possible passwords are there if each of its characters must be a digit between 1 and N (inclusive)?\n\nConstraints\n\n* 1 \\leq N \\leq 9\n* N is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["1<=N<=9"]}}
{"name": "p02689 AtCoder Beginner Contest 166 - Peaks", "description": "There are N observatories in AtCoder Hill, called Obs. 1, Obs. 2, ..., Obs. N. The elevation of Obs. i is H_i. There are also M roads, each connecting two different observatories. Road j connects Obs. A_j and Obs. B_j.\n\nObs. i is said to be good when its elevation is higher than those of all observatories that can be reached from Obs. i using just one road. Note that Obs. i is also good when no observatory can be reached from Obs. i using just one road.\n\nHow many good observatories are there?\n\nConstraints\n\n* 2 \\leq N \\leq 10^5\n* 1 \\leq M \\leq 10^5\n* 1 \\leq H_i \\leq 10^9\n* 1 \\leq A_i,B_i \\leq N\n* A_i \\neq B_i\n* Multiple roads may connect the same pair of observatories.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nH_1 H_2 ... H_N\nA_1 B_1\nA_2 B_2\n:\nA_M B_M", "grammar": {"productions": ["<S>->[N] <s> [M] <n> <T_N> <n> <L_M>", "<T_i>-><T_i-1> <s> H_i", "<T_1>->H_1", "<L_i>-><L_i-1> <n> A_i <s> B_i", "<L_1>->A_1 <s> B_1"], "constraints": ["2<=N<=10^5", "1<=M<=10^5", "1<=H_i<=10^9", "1<=A_i<=N", "1<=B_i<=N", "A_i!=B_i"]}}
{"name": "50_A. Domino piling", "description": "You are given a rectangular board of M \u00d7 N squares. Also you are given an unlimited number of standard domino pieces of 2 \u00d7 1 squares. You are allowed to rotate the pieces. You are asked to place as many dominoes as possible on the board so as to meet the following conditions:\n\n1. Each domino completely covers two squares.\n\n2. No two dominoes overlap.\n\n3. Each domino lies entirely inside the board. It is allowed to touch the edges of the board.\n\nFind the maximum number of dominoes, which can be placed under these restrictions.\n\nInput\n\nIn a single line you are given two integers M and N \u2014 board sizes in squares (1 \u2264 M \u2264 N \u2264 16).", "grammar": {"productions": ["<S>->M <s> N"], "constraints": ["1<=M<=16", "M<=N<=16"]}}
{"name": "567_A. Lineland Mail", "description": "All cities of Lineland are located on the Ox coordinate axis. Thus, each city is associated with its position xi \u2014 a coordinate on the Ox axis. No two cities are located at a single point.\n\nLineland residents love to send letters to each other. A person may send a letter only if the recipient lives in another city (because if they live in the same city, then it is easier to drop in).\n\nStrange but true, the cost of sending the letter is exactly equal to the distance between the sender's city and the recipient's city.\n\nFor each city calculate two values \u200b\u200bmini and maxi, where mini is the minimum cost of sending a letter from the i-th city to some other city, and maxi is the the maximum cost of sending a letter from the i-th city to some other city\n\nInput\n\nThe first line of the input contains integer n (2 \u2264 n \u2264 10^5) \u2014 the number of cities in Lineland. The second line contains the sequence of n distinct integers x1, x2, ..., xn ( - 10^9 \u2264 xi \u2264 10^9), where xi is the x-coordinate of the i-th city. All the xi's are distinct and follow in ascending order.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> x_i", "<T_1>->x_1"], "constraints": ["2<=n<=10^5", "-10^9<=x_i<=10^9"]}}
{"name": "268_A. Games", "description": "Manao works on a sports TV. He's spent much time watching the football games of some country. After a while he began to notice different patterns. For example, each team has two sets of uniforms: home uniform and guest uniform. When a team plays a game at home, the players put on the home uniform. When a team plays as a guest on somebody else's stadium, the players put on the guest uniform. The only exception to that rule is: when the home uniform color of the host team matches the guests' uniform, the host team puts on its guest uniform as well. For each team the color of the home and guest uniform is different.\n\nThere are n teams taking part in the national championship. The championship consists of n\u00b7(n - 1) games: each team invites each other team to its stadium. At this point Manao wondered: how many times during the championship is a host team going to put on the guest uniform? Note that the order of the games does not affect this number.\n\nYou know the colors of the home and guest uniform for each team. For simplicity, the colors are numbered by integers in such a way that no two distinct colors have the same number. Help Manao find the answer to his question.\n\nInput\n\nThe first line contains an integer n (2 \u2264 n \u2264 30). Each of the following n lines contains a pair of distinct space-separated integers hi, ai (1 \u2264 hi, ai \u2264 100) \u2014 the colors of the i-th team's home and guest uniforms, respectively.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> h_i <s> a_i", "<T_1>->h_1 <s> a_1"], "constraints": ["2<=n<=30", "1<=h_i,a_i<=100"]}}
{"name": "102_B. Sum of Digits", "description": "Having watched the last Harry Potter film, little Gerald also decided to practice magic. He found in his father's magical book a spell that turns any number in the sum of its digits. At the moment Gerald learned that, he came across a number n. How many times can Gerald put a spell on it until the number becomes one-digit?\n\nInput\n\nThe first line contains the only integer n (0 \u2264 n \u2264 10^100000). It is guaranteed that n doesn't contain any leading zeroes.", "grammar": {"productions": ["<S>->N"], "constraints": ["0<=N<=10^100000"]}}
{"name": "p02579 AtCoder Beginner Contest 176 - Wizard in Maze", "description": "A maze is composed of a grid of H \\times W squares - H vertical, W horizontal.\n\nThe square at the i-th row from the top and the j-th column from the left - (i,j) - is a wall if S_{ij} is `#` and a road if S_{ij} is `.`.\n\nThere is a magician in (C_h,C_w). He can do the following two kinds of moves:\n\n* Move A: Walk to a road square that is vertically or horizontally adjacent to the square he is currently in.\n* Move B: Use magic to warp himself to a road square in the 5\\times 5 area centered at the square he is currently in.\n\n\n\nIn either case, he cannot go out of the maze.\n\nAt least how many times does he need to use the magic to reach (D_h, D_w)?\n\nConstraints\n\n* 1 \\leq H,W \\leq 10^3\n* 1 \\leq C_h,D_h \\leq H\n* 1 \\leq C_w,D_w \\leq W\n* S_{ij} is `#` or `.`.\n* S_{C_h C_w} and S_{D_h D_w} are `.`.\n* (C_h,C_w) \\neq (D_h,D_w)\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nH W\nC_h C_w\nD_h D_w\nS_{11}\\ldots S_{1W}\n\\vdots\nS_{H1}\\ldots S_{HW}", "grammar": {"productions": ["<S>->[H] <s> [W] <n> Ch <s> Cw <n> Dh <s> Dw <n> <T_H,W>", "<T_i,j>-><T_i,j-1> <s> S_i,j", "<T_i,1>-><T_i-1,W> <n> S_i,1", "<T_1,1>->S_1,1", "S_i,j->#|."], "constraints": ["1<=H<=10^3", "1<=W<=10^3", "1<=Ch<=H", "1<=Dh<=H", "1<=Cw<=W", "1<=Dw<=W", "S_Ch,Cw=.", "S_Dh,Dw=.", "(Ch,Cw)!=(Dh,Dw)"]}}
{"name": "1324_C. Frog Jumps", "description": "There is a frog staying to the left of the string s = s_1 s_2 \u2026 s_n consisting of n characters (to be more precise, the frog initially stays at the cell 0). Each character of s is either 'L' or 'R'. It means that if the frog is staying at the i-th cell and the i-th character is 'L', the frog can jump only to the left. If the frog is staying at the i-th cell and the i-th character is 'R', the frog can jump only to the right. The frog can jump only to the right from the cell 0.\n\nNote that the frog can jump into the same cell twice and can perform as many jumps as it needs.\n\nThe frog wants to reach the n+1-th cell. The frog chooses some positive integer value d before the first jump (and cannot change it later) and jumps by no more than d cells at once. I.e. if the i-th character is 'L' then the frog can jump to any cell in a range [max(0, i - d); i - 1], and if the i-th character is 'R' then the frog can jump to any cell in a range [i + 1; min(n + 1; i + d)].\n\nThe frog doesn't want to jump far, so your task is to find the minimum possible value of d such that the frog can reach the cell n+1 from the cell 0 if it can jump by no more than d cells at once. It is guaranteed that it is always possible to reach n+1 from 0.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next t lines describe test cases. The i-th test case is described as a string s consisting of at least 1 and at most 2 \u22c5 10^5 characters 'L' and 'R'.\n\nIt is guaranteed that the sum of lengths of strings over all test cases does not exceed 2 \u22c5 10^5 (\u2211 |s| \u2264 2 \u22c5 10^5).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [LR]{1,2*10^5}", "<T_1>->[LR]{1,2*10^5}"], "constraints": ["1<=t<=10^4"]}}
{"name": "p03042 AtCoder Beginner Contest 126 - YYMM or MMYY", "description": "You have a digit sequence S of length 4. You are wondering which of the following formats S is in:\n\n* YYMM format: the last two digits of the year and the two-digit representation of the month (example: `01` for January), concatenated in this order\n* MMYY format: the two-digit representation of the month and the last two digits of the year, concatenated in this order\n\n\n\nIf S is valid in only YYMM format, print `YYMM`; if S is valid in only MMYY format, print `MMYY`; if S is valid in both formats, print `AMBIGUOUS`; if S is valid in neither format, print `NA`.\n\nConstraints\n\n* S is a digit sequence of length 4.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>->[0-9]{4}"], "constraints": []}}
{"name": "p02683 AtCoder Beginner Contest 167 - Skill Up", "description": "Constraints\n\n* All values in input are integers.\n* 1\\leq N, M\\leq 12\n* 1\\leq X\\leq 10^5\n* 1\\leq C_i \\leq 10^5\n* 0\\leq A_{i, j} \\leq 10^5\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M X\nC_1 A_{1,1} A_{1,2} \\cdots A_{1,M}\nC_2 A_{2,1} A_{2,2} \\cdots A_{2,M}\n\\vdots\nC_N A_{N,1} A_{N,2} \\cdots A_{N,M}", "grammar": {"productions": ["<S>->[N] <s> [M] <s> X <n> <T_N,M>", "<T_i,j>-><T_i,j-1> <s> A_i,j", "<T_i,1>-><T_i-1,M> <n> C_i <s> A_i,1", "<T_1,1>->C_1 <s> A_1,1"], "constraints": ["1<=N,M<=12", "1<=X<=10^5", "1<=C_i<=10^5", "0<=A_i,j<=10^5"]}}
{"name": "115_A. Party", "description": "A company has n employees numbered from 1 to n. Each employee either has no immediate manager or exactly one immediate manager, who is another employee with a different number. An employee A is said to be the superior of another employee B if at least one of the following is true:\n\n  * Employee A is the immediate manager of employee B\n  * Employee B has an immediate manager employee C such that employee A is the superior of employee C. \n\n\n\nThe company will not have a managerial cycle. That is, there will not exist an employee who is the superior of his/her own immediate manager.\n\nToday the company is going to arrange a party. This involves dividing all n employees into several groups: every employee must belong to exactly one group. Furthermore, within any single group, there must not be two employees A and B such that A is the superior of B.\n\nWhat is the minimum number of groups that must be formed?\n\nInput\n\nThe first line contains integer n (1 \u2264 n \u2264 2000) \u2014 the number of employees.\n\nThe next n lines contain the integers pi (1 \u2264 pi \u2264 n or pi = -1). Every pi denotes the immediate manager for the i-th employee. If pi is -1, that means that the i-th employee does not have an immediate manager. \n\nIt is guaranteed, that no employee will be the immediate manager of him/herself (pi \u2260 i). Also, there will be no managerial cycles.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> p_i|<T_i-1> <n> -1", "<T_1>->p_1|-1"], "constraints": ["1<=n<=2000", "1<=p_i<=n"]}}
{"name": "507_A. Amr and Music", "description": "Amr is a young coder who likes music a lot. He always wanted to learn how to play music but he was busy coding so he got an idea.\n\nAmr has n instruments, it takes ai days to learn i-th instrument. Being busy, Amr dedicated k days to learn how to play the maximum possible number of instruments.\n\nAmr asked for your help to distribute his free days between instruments so that he can achieve his goal.\n\nInput\n\nThe first line contains two numbers n, k (1 \u2264 n \u2264 100, 0 \u2264 k \u2264 10 000), the number of instruments and number of days respectively.\n\nThe second line contains n integers ai (1 \u2264 ai \u2264 100), representing number of days required to learn the i-th instrument.", "grammar": {"productions": ["<S>->[n] <s> k <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=100", "0<=k<=10000", "1<=a_i<=100"]}}
{"name": "p03262 AtCoder Beginner Contest 109 - Skip", "description": "There are N cities on a number line. The i-th city is located at coordinate x_i.\n\nYour objective is to visit all these cities at least once.\n\nIn order to do so, you will first set a positive integer D.\n\nThen, you will depart from coordinate X and perform Move 1 and Move 2 below, as many times as you like:\n\n* Move 1: travel from coordinate y to coordinate y + D.\n* Move 2: travel from coordinate y to coordinate y - D.\n\n\n\nFind the maximum value of D that enables you to visit all the cities.\n\nHere, to visit a city is to travel to the coordinate where that city is located.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 10^5\n* 1 \\leq X \\leq 10^9\n* 1 \\leq x_i \\leq 10^9\n* x_i are all different.\n* x_1, x_2, ..., x_N \\neq X\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN X\nx_1 x_2 ... x_N", "grammar": {"productions": ["<S>->[N] <s> X <n> <T_N>", "<T_i>-><T_i-1> <s> x_i", "<T_1>->x_1"], "constraints": ["1<=N<=10^5", "1<=X<=10^9", "1<=x_i<=10^9", "x_i!=x_j", "x_i!=X"]}}
{"name": "p03265 AtCoder Beginner Contest 108 - Ruined Square", "description": "There is a square in the xy-plane. The coordinates of its four vertices are (x_1,y_1),(x_2,y_2),(x_3,y_3) and (x_4,y_4) in counter-clockwise order. (Assume that the positive x-axis points right, and the positive y-axis points up.)\n\nTakahashi remembers (x_1,y_1) and (x_2,y_2), but he has forgot (x_3,y_3) and (x_4,y_4).\n\nGiven x_1,x_2,y_1,y_2, restore x_3,y_3,x_4,y_4. It can be shown that x_3,y_3,x_4 and y_4 uniquely exist and have integer values.\n\nConstraints\n\n* |x_1|,|y_1|,|x_2|,|y_2| \\leq 100\n* (x_1,y_1) \u2260 (x_2,y_2)\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nx_1 y_1 x_2 y_2", "grammar": {"productions": ["<S>->x1 <s> y1 <s> x2 <s> y2"], "constraints": ["-100<=x1<=100", "-100<=y1<=100", "-100<=x2<=100", "-100<=y2<=100", "(x1,y1)!=(x2,y2)"]}}
{"name": "300_A. Array", "description": "Vitaly has an array of n distinct integers. Vitaly wants to divide this array into three non-empty sets so as the following conditions hold: \n\n  1. The product of all numbers in the first set is less than zero ( < 0). \n  2. The product of all numbers in the second set is greater than zero ( > 0). \n  3. The product of all numbers in the third set is equal to zero. \n  4. Each number from the initial array must occur in exactly one set. \n\n\n\nHelp Vitaly. Divide the given array.\n\nInput\n\nThe first line of the input contains integer n (3 \u2264 n \u2264 100). The second line contains n space-separated distinct integers a1, a2, ..., an (|ai| \u2264 10^3) \u2014 the array elements.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["3<=n<=100", "-10^3<=a_i<=10^3"]}}
{"name": "p02679 AtCoder Beginner Contest 168 - \u2219 (Bullet)", "description": "We have caught N sardines. The deliciousness and fragrantness of the i-th sardine is A_i and B_i, respectively.\n\nWe will choose one or more of these sardines and put them into a cooler. However, two sardines on bad terms cannot be chosen at the same time.\n\nThe i-th and j-th sardines (i \\neq j) are on bad terms if and only if A_i \\cdot A_j + B_i \\cdot B_j = 0.\n\nIn how many ways can we choose the set of sardines to put into the cooler? Since the count can be enormous, print it modulo 1000000007.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 2 \\times 10^5\n* -10^{18} \\leq A_i, B_i \\leq 10^{18}\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 B_1\n:\nA_N B_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> A_i <s> B_i", "<T_1>->A_1 <s> B_1"], "constraints": ["1<=N<=2*10^5", "-10^18<=A_i,B_i<=10^18"]}}
{"name": "513_A. Game", "description": "Two players play a simple game. Each player is provided with a box with balls. First player's box contains exactly n1 balls and second player's box contains exactly n2 balls. In one move first player can take from 1 to k1 balls from his box and throw them away. Similarly, the second player can take from 1 to k2 balls from his box in his move. Players alternate turns and the first player starts the game. The one who can't make a move loses. Your task is to determine who wins if both players play optimally.\n\nInput\n\nThe first line contains four integers n1, n2, k1, k2. All numbers in the input are from 1 to 50.\n\nThis problem doesn't have subproblems. You will get 3 points for the correct submission.", "grammar": {"productions": ["<S>->n1 <s> n2 <s> k1 <s> k2"], "constraints": ["1<=n1<=50", "1<=n2<=50", "1<=k1<=50", "1<=k2<=50"]}}
{"name": "1032_A. Kitchen Utensils", "description": "The king's birthday dinner was attended by k guests. The dinner was quite a success: every person has eaten several dishes (though the number of dishes was the same for every person) and every dish was served alongside with a new set of kitchen utensils.\n\nAll types of utensils in the kingdom are numbered from 1 to 100. It is known that every set of utensils is the same and consist of different types of utensils, although every particular type may appear in the set at most once. For example, a valid set of utensils can be composed of one fork, one spoon and one knife.\n\nAfter the dinner was over and the guests were dismissed, the king wondered what minimum possible number of utensils could be stolen. Unfortunately, the king has forgotten how many dishes have been served for every guest but he knows the list of all the utensils left after the dinner. Your task is to find the minimum possible number of stolen utensils.\n\nInput\n\nThe first line contains two integer numbers n and k (1 \u2264 n \u2264 100, 1 \u2264 k \u2264 100) \u2014 the number of kitchen utensils remaining after the dinner and the number of guests correspondingly.\n\nThe next line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 100) \u2014 the types of the utensils remaining. Equal values stand for identical utensils while different values stand for different utensils.", "grammar": {"productions": ["<S>->[n] <s> k <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=100", "1<=k<=100", "1<=a_i<=100"]}}
{"name": "3_A. Shortest path of the king", "description": "The king is left alone on the chessboard. In spite of this loneliness, he doesn't lose heart, because he has business of national importance. For example, he has to pay an official visit to square t. As the king is not in habit of wasting his time, he wants to get from his current position s to square t in the least number of moves. Help him to do this.\n\n<image>\n\nIn one move the king can get to the square that has a common side or a common vertex with the square the king is currently in (generally there are 8 different squares he can move to).\n\nInput\n\nThe first line contains the chessboard coordinates of square s, the second line \u2014 of square t.\n\nChessboard coordinates consist of two characters, the first one is a lowercase Latin letter (from a to h), the second one is a digit from 1 to 8.", "grammar": {"productions": ["<S>->[a-h]{1} [1-8]{1} <n> [a-h]{1} [1-8]{1}"], "constraints": []}}
{"name": "p02712 AtCoder Beginner Contest 162 - FizzBuzz Sum", "description": "Let us define the FizzBuzz sequence a_1,a_2,... as follows:\n\n* If both 3 and 5 divides i, a_i=\\mbox{FizzBuzz}.\n* If the above does not hold but 3 divides i, a_i=\\mbox{Fizz}.\n* If none of the above holds but 5 divides i, a_i=\\mbox{Buzz}.\n* If none of the above holds, a_i=i.\n\n\n\nFind the sum of all numbers among the first N terms of the FizzBuzz sequence.\n\nConstraints\n\n* 1 \\leq N \\leq 10^6\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["1<=N<=10^6"]}}
{"name": "p02631 AtCoder Beginner Contest 171 - Red Scarf", "description": "There are N Snuke Cats numbered 1, 2, \\ldots, N, where N is even.\n\nEach Snuke Cat wears a red scarf, on which his favorite non-negative integer is written.\n\nRecently, they learned the operation called xor (exclusive OR).\n\nWhat is xor?\n\nFor n non-negative integers x_1, x_2, \\ldots, x_n, their xor, x_1~\\textrm{xor}~x_2~\\textrm{xor}~\\ldots~\\textrm{xor}~x_n is defined as follows:\n\n* When x_1~\\textrm{xor}~x_2~\\textrm{xor}~\\ldots~\\textrm{xor}~x_n is written in base two, the digit in the 2^k's place (k \\geq 0) is 1 if the number of integers among x_1, x_2, \\ldots, x_n whose binary representations have 1 in the 2^k's place is odd, and 0 if that count is even.\n\nFor example, 3~\\textrm{xor}~5 = 6.\n\nThey wanted to use this operation quickly, so each of them calculated the xor of the integers written on their scarfs except his scarf.\n\nWe know that the xor calculated by Snuke Cat i, that is, the xor of the integers written on the scarfs except the scarf of Snuke Cat i is a_i. Using this information, restore the integer written on the scarf of each Snuke Cat.\n\nConstraints\n\n* All values in input are integers.\n* 2 \\leq N \\leq 200000\n* N is even.\n* 0 \\leq a_i \\leq 10^9\n* There exists a combination of integers on the scarfs that is consistent with the given information.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 a_2 \\ldots a_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["2<=N<=200000", "0<=a_i<=10^9", "N is even"]}}
{"name": "p03169 Educational DP Contest - Sushi", "description": "There are N dishes, numbered 1, 2, \\ldots, N. Initially, for each i (1 \\leq i \\leq N), Dish i has a_i (1 \\leq a_i \\leq 3) pieces of sushi on it.\n\nTaro will perform the following operation repeatedly until all the pieces of sushi are eaten:\n\n* Roll a die that shows the numbers 1, 2, \\ldots, N with equal probabilities, and let i be the outcome. If there are some pieces of sushi on Dish i, eat one of them; if there is none, do nothing.\n\n\n\nFind the expected number of times the operation is performed before all the pieces of sushi are eaten.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 300\n* 1 \\leq a_i \\leq 3\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 a_2 \\ldots a_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=N<=300", "1<=a_i<=3"]}}
{"name": "41_A. Translation", "description": "The translation from the Berland language into the Birland language is not an easy task. Those languages are very similar: a berlandish word differs from a birlandish word with the same meaning a little: it is spelled (and pronounced) reversely. For example, a Berlandish word code corresponds to a Birlandish word edoc. However, it's easy to make a mistake during the \u00abtranslation\u00bb. Vasya translated word s from Berlandish into Birlandish as t. Help him: find out if he translated the word correctly.\n\nInput\n\nThe first line contains word s, the second line contains word t. The words consist of lowercase Latin letters. The input data do not consist unnecessary spaces. The words are not empty and their lengths do not exceed 100 symbols.", "grammar": {"productions": ["<S>->[a-z]{1,100} <n> [a-z]{1,100}"], "constraints": [""]}}
{"name": "p02686 AtCoder Beginner Contest 167 - Bracket Sequencing", "description": "A bracket sequence is a string that is one of the following:\n\n1. An empty string;\n2. The concatenation of `(`, A, and `)` in this order, for some bracket sequence A ;\n3. The concatenation of A and B in this order, for some non-empty bracket sequences A and B /\n\n\n\nGiven are N strings S_i. Can a bracket sequence be formed by concatenating all the N strings in some order?\n\nConstraints\n\n* 1 \\leq N \\leq 10^6\n* The total length of the strings S_i is at most 10^6.\n* S_i is a non-empty string consisting of `(` and `)`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nS_1\n:\nS_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> [()]{1,10^6}", "<T_1>->[()]{1,10^6}"], "constraints": ["1<=N<=10^6"]}}
{"name": "p04044 AtCoder Beginner Contest 042 - Iroha Loves Strings (ABC Edition)", "description": "Iroha has a sequence of N strings S_1, S_2, ..., S_N. The length of each string is L.\n\nShe will concatenate all of the strings in some order, to produce a long string.\n\nAmong all strings that she can produce in this way, find the lexicographically smallest one.\n\nHere, a string s=s_1s_2s_3...s_n is lexicographically smaller than another string t=t_1t_2t_3...t_m if and only if one of the following holds:\n\n* There exists an index i(1\u2266i\u2266min(n,m)), such that s_j = t_j for all indices j(1\u2266j<i), and s_i<t_i.\n* s_i = t_i for all integers i(1\u2266i\u2266min(n,m)), and n<m.\n\nConstraints\n\n* 1 \u2266 N, L \u2266 100\n* For each i, the length of S_i equals L.\n* For each i, S_i consists of lowercase letters.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN L\nS_1\nS_2\n:\nS_N", "grammar": {"productions": ["<S>->[N] <s> [L] <n> <T_N>", "<T_i>-><T_i-1> <n> [a-z]{L}", "<T_1>->[a-z]{L}"], "constraints": ["1<=N,L<=100"]}}
{"name": "p02838 AtCoder Beginner Contest 147 - Xor Sum 4", "description": "We have N integers. The i-th integer is A_i.\n\nFind \\sum_{i=1}^{N-1}\\sum_{j=i+1}^{N} (A_i \\mbox{ XOR } A_j), modulo (10^9+7).\n\nWhat is \\mbox{ XOR }?\n\nThe XOR of integers A and B, A \\mbox{ XOR } B, is defined as follows:\n\n* When A \\mbox{ XOR } B is written in base two, the digit in the 2^k's place (k \\geq 0) is 1 if either A or B, but not both, has 1 in the 2^k's place, and 0 otherwise.\n\nFor example, 3 \\mbox{ XOR } 5 = 6. (In base two: 011 \\mbox{ XOR } 101 = 110.)\n\nConstraints\n\n* 2 \\leq N \\leq 3 \\times 10^5\n* 0 \\leq A_i < 2^{60}\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 A_2 ... A_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["2<=N<=3*10^5", "0<=A_i<=2^60"]}}
{"name": "1352_A. Sum of Round Numbers", "description": "A positive (strictly greater than zero) integer is called round if it is of the form d00...0. In other words, a positive integer is round if all its digits except the leftmost (most significant) are equal to zero. In particular, all numbers from 1 to 9 (inclusive) are round.\n\nFor example, the following numbers are round: 4000, 1, 9, 800, 90. The following numbers are not round: 110, 707, 222, 1001.\n\nYou are given a positive integer n (1 \u2264 n \u2264 10^4). Represent the number n as a sum of round numbers using the minimum number of summands (addends). In other words, you need to represent the given number n as a sum of the least number of terms, each of which is a round number.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases in the input. Then t test cases follow.\n\nEach test case is a line containing an integer n (1 \u2264 n \u2264 10^4).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n", "<T_1>->n"], "constraints": ["1<=t<=10^4", "1<=n<=10^4"]}}
{"name": "p02963 AtCoder Grand Contest 036 - Triangle", "description": "Given is an integer S. Find a combination of six integers X_1,Y_1,X_2,Y_2,X_3, and Y_3 that satisfies all of the following conditions:\n\n* 0 \\leq X_1,Y_1,X_2,Y_2,X_3,Y_3 \\leq 10^9\n* The area of the triangle in a two-dimensional plane whose vertices are (X_1,Y_1),(X_2,Y_2), and (X_3,Y_3) is S/2.\n\n\n\nWe can prove that there always exist six integers that satisfy the conditions under the constraints of this problem.\n\nConstraints\n\n* 1 \\leq S \\leq 10^{18}\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>->S"], "constraints": ["1<=S<=10^18"]}}
{"name": "1426_C. Increase and Copy", "description": "Initially, you have the array a consisting of one element 1 (a = [1]).\n\nIn one move, you can do one of the following things:\n\n  * Increase some (single) element of a by 1 (choose some i from 1 to the current length of a and increase a_i by one); \n  * Append the copy of some (single) element of a to the end of the array (choose some i from 1 to the current length of a and append a_i to the end of the array). \n\n\n\nFor example, consider the sequence of five moves:\n\n  1. You take the first element a_1, append its copy to the end of the array and get a = [1, 1]. \n  2. You take the first element a_1, increase it by 1 and get a = [2, 1]. \n  3. You take the second element a_2, append its copy to the end of the array and get a = [2, 1, 1]. \n  4. You take the first element a_1, append its copy to the end of the array and get a = [2, 1, 1, 2]. \n  5. You take the fourth element a_4, increase it by 1 and get a = [2, 1, 1, 3]. \n\n\n\nYour task is to find the minimum number of moves required to obtain the array with the sum at least n.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains one integer n (1 \u2264 n \u2264 10^9) \u2014 the lower bound on the sum of the array.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> a_i", "<T_1>->a_1"], "constraints": ["1<=t<=1000", "1<=a_i<=10^9"]}}
{"name": "1360_A. Minimal Square", "description": "Find the minimum area of a square land on which you can place two identical rectangular a \u00d7 b houses. The sides of the houses should be parallel to the sides of the desired square land.\n\nFormally, \n\n  * You are given two identical rectangles with side lengths a and b (1 \u2264 a, b \u2264 100) \u2014 positive integers (you are given just the sizes, but not their positions). \n  * Find the square of the minimum area that contains both given rectangles. Rectangles can be rotated (both or just one), moved, but the sides of the rectangles should be parallel to the sides of the desired square. \n\n\n\nTwo rectangles can touch each other (side or corner), but cannot intersect. Rectangles can also touch the sides of the square but must be completely inside it. You can rotate the rectangles. Take a look at the examples for a better understanding.\n\n<image> The picture shows a square that contains red and green rectangles.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10 000) \u2014the number of test cases in the input. Then t test cases follow.\n\nEach test case is a line containing two integers a, b (1 \u2264 a, b \u2264 100) \u2014 side lengths of the rectangles.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> a <s> b", "<T_1>->a <s> b"], "constraints": ["1<=t<=10000", "1<=a,b<=100"]}}
{"name": "p02642 AtCoder Beginner Contest 170 - Not Divisible", "description": "Given is a number sequence A of length N.\n\nFind the number of integers i \\left(1 \\leq i \\leq N\\right) with the following property:\n\n* For every integer j \\left(1 \\leq j \\leq N\\right) such that i \\neq j , A_j does not divide A_i.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 2 \\times 10^5\n* 1 \\leq A_i \\leq 10^6\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 A_2 \\cdots A_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["1<=N<=2*10^5", "1<=A_i<=10^6"]}}
{"name": "p02820 AtCoder Beginner Contest 149 - Prediction and Restriction", "description": "At an arcade, Takahashi is playing a game called RPS Battle, which is played as follows:\n\n* The player plays N rounds of Rock Paper Scissors against the machine. (See Notes for the description of Rock Paper Scissors. A draw also counts as a round.)\n* Each time the player wins a round, depending on which hand he/she uses, he/she earns the following score (no points for a draw or a loss):\n* R points for winning with Rock;\n* S points for winning with Scissors;\n* P points for winning with Paper.\n* However, in the i-th round, the player cannot use the hand he/she used in the (i-K)-th round. (In the first K rounds, the player can use any hand.)\n\n\n\nBefore the start of the game, the machine decides the hand it will play in each round. With supernatural power, Takahashi managed to read all of those hands.\n\nThe information Takahashi obtained is given as a string T. If the i-th character of T (1 \\leq i \\leq N) is `r`, the machine will play Rock in the i-th round. Similarly, `p` and `s` stand for Paper and Scissors, respectively.\n\nWhat is the maximum total score earned in the game by adequately choosing the hand to play in each round?\n\nConstraints\n\n* 2 \\leq N \\leq 10^5\n* 1 \\leq K \\leq N-1\n* 1 \\leq R,S,P \\leq 10^4\n* N,K,R,S, and P are all integers.\n* |T| = N\n* T consists of `r`, `p`, and `s`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nR S P\nT", "grammar": {"productions": ["<S>->[N] <s> K <n> R <s> S <s> P <n> [rps]{N}"], "constraints": ["2<=N<=10^5", "1<=K<=N-1", "1<=R,S,P<=10^4"]}}
{"name": "761_A. Dasha and Stairs", "description": "On her way to programming school tiger Dasha faced her first test \u2014 a huge staircase!\n\n<image>\n\nThe steps were numbered from one to infinity. As we know, tigers are very fond of all striped things, it is possible that it has something to do with their color. So on some interval of her way she calculated two values \u2014 the number of steps with even and odd numbers. \n\nYou need to check whether there is an interval of steps from the l-th to the r-th (1 \u2264 l \u2264 r), for which values that Dasha has found are correct.\n\nInput\n\nIn the only line you are given two integers a, b (0 \u2264 a, b \u2264 100) \u2014 the number of even and odd steps, accordingly.", "grammar": {"productions": ["<S>->a <s> b"], "constraints": ["0<=a,b<=100"]}}
{"name": "1178_A. Prime Minister", "description": "Alice is the leader of the State Refactoring Party, and she is about to become the prime minister. \n\nThe elections have just taken place. There are n parties, numbered from 1 to n. The i-th party has received a_i seats in the parliament.\n\nAlice's party has number 1. In order to become the prime minister, she needs to build a coalition, consisting of her party and possibly some other parties. There are two conditions she needs to fulfil: \n\n  * The total number of seats of all parties in the coalition must be a strict majority of all the seats, i.e. it must have strictly more than half of the seats. For example, if the parliament has 200 (or 201) seats, then the majority is 101 or more seats. \n  * Alice's party must have at least 2 times more seats than any other party in the coalition. For example, to invite a party with 50 seats, Alice's party must have at least 100 seats. \n\n\n\nFor example, if n=4 and a=[51, 25, 99, 25] (note that Alice'a party has 51 seats), then the following set [a_1=51, a_2=25, a_4=25] can create a coalition since both conditions will be satisfied. However, the following sets will not create a coalition:\n\n  * [a_2=25, a_3=99, a_4=25] since Alice's party is not there; \n  * [a_1=51, a_2=25] since coalition should have a strict majority; \n  * [a_1=51, a_2=25, a_3=99] since Alice's party should have at least 2 times more seats than any other party in the coalition. \n\n\n\nAlice does not have to minimise the number of parties in a coalition. If she wants, she can invite as many parties as she wants (as long as the conditions are satisfied). If Alice's party has enough people to create a coalition on her own, she can invite no parties.\n\nNote that Alice can either invite a party as a whole or not at all. It is not possible to invite only some of the deputies (seats) from another party. In other words, if Alice invites a party, she invites all its deputies.\n\nFind and print any suitable coalition.\n\nInput\n\nThe first line contains a single integer n (2 \u2264 n \u2264 100) \u2014 the number of parties.\n\nThe second line contains n space separated integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 100) \u2014 the number of seats the i-th party has.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["2<=n<=100", "1<=a_i<=100"]}}
{"name": "1203_C. Common Divisors", "description": "You are given an array a consisting of n integers.\n\nYour task is to say the number of such positive integers x such that x divides each number from the array. In other words, you have to find the number of common divisors of all elements in the array.\n\nFor example, if the array a will be [2, 4, 6, 2, 10], then 1 and 2 divide each number from the array (so the answer for this test is 2).\n\nInput\n\nThe first line of the input contains one integer n (1 \u2264 n \u2264 4 \u22c5 10^5) \u2014 the number of elements in a.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^{12}), where a_i is the i-th element of a.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=N<=4*10^5", "1<=a_i<=10^12"]}}
{"name": "268_B. Buttons", "description": "Manao is trying to open a rather challenging lock. The lock has n buttons on it and to open it, you should press the buttons in a certain order to open the lock. When you push some button, it either stays pressed into the lock (that means that you've guessed correctly and pushed the button that goes next in the sequence), or all pressed buttons return to the initial position. When all buttons are pressed into the lock at once, the lock opens.\n\nConsider an example with three buttons. Let's say that the opening sequence is: {2, 3, 1}. If you first press buttons 1 or 3, the buttons unpress immediately. If you first press button 2, it stays pressed. If you press 1 after 2, all buttons unpress. If you press 3 after 2, buttons 3 and 2 stay pressed. As soon as you've got two pressed buttons, you only need to press button 1 to open the lock.\n\nManao doesn't know the opening sequence. But he is really smart and he is going to act in the optimal way. Calculate the number of times he's got to push a button in order to open the lock in the worst-case scenario.\n\nInput\n\nA single line contains integer n (1 \u2264 n \u2264 2000) \u2014 the number of buttons the lock has.", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=2000"]}}
{"name": "1099_A. Snowball", "description": "Today's morning was exceptionally snowy. Meshanya decided to go outside and noticed a huge snowball rolling down the mountain! Luckily, there are two stones on that mountain.\n\nInitially, snowball is at height h and it has weight w. Each second the following sequence of events happens: snowball's weights increases by i, where i \u2014 is the current height of snowball, then snowball hits the stone (if it's present at the current height), then snowball moves one meter down. If the snowball reaches height zero, it stops.\n\nThere are exactly two stones on the mountain. First stone has weight u_1 and is located at height d_1, the second one \u2014 u_2 and d_2 respectively. When the snowball hits either of two stones, it loses weight equal to the weight of that stone. If after this snowball has negative weight, then its weight becomes zero, but the snowball continues moving as before.\n\n<image>\n\nFind the weight of the snowball when it stops moving, that is, it reaches height 0.\n\nInput\n\nFirst line contains two integers w and h \u2014 initial weight and height of the snowball (0 \u2264 w \u2264 100; 1 \u2264 h \u2264 100).\n\nSecond line contains two integers u_1 and d_1 \u2014 weight and height of the first stone (0 \u2264 u_1 \u2264 100; 1 \u2264 d_1 \u2264 h).\n\nThird line contains two integers u_2 and d_2 \u2014 weight and heigth of the second stone (0 \u2264 u_2 \u2264 100; 1 \u2264 d_2 \u2264 h; d_1 \u2260 d_2). Notice that stones always have different heights.", "grammar": {"productions": ["<S>->w <s> h <n> u1 <s> d1 <n> u2 <s> d2"], "constraints": ["0<=w<=100", "1<=h<=100", "0<=u1<=100", "1<=d1<=h", "0<=u2<=100", "1<=d2<=h", "d1!=d2"]}}
{"name": "p03127 AtCoder Beginner Contest 118 - Monsters Battle Royale", "description": "There are N monsters, numbered 1, 2, ..., N.\n\nInitially, the health of Monster i is A_i.\n\nBelow, a monster with at least 1 health is called alive.\n\nUntil there is only one alive monster, the following is repeated:\n\n* A random alive monster attacks another random alive monster.\n* As a result, the health of the monster attacked is reduced by the amount equal to the current health of the monster attacking.\n\n\n\nFind the minimum possible final health of the last monster alive.\n\nConstraints\n\n* All values in input are integers.\n* 2 \\leq N \\leq 10^5\n* 1 \\leq A_i \\leq 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 A_2 ... A_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["2<=N<=10^5", "1<=A_i<=10^9"]}}
{"name": "854_A. Fraction", "description": "Petya is a big fan of mathematics, especially its part related to fractions. Recently he learned that a fraction <image> is called proper iff its numerator is smaller than its denominator (a < b) and that the fraction is called irreducible if its numerator and its denominator are coprime (they do not have positive common divisors except 1).\n\nDuring his free time, Petya thinks about proper irreducible fractions and converts them to decimals using the calculator. One day he mistakenly pressed addition button ( + ) instead of division button (\u00f7) and got sum of numerator and denominator that was equal to n instead of the expected decimal notation. \n\nPetya wanted to restore the original fraction, but soon he realized that it might not be done uniquely. That's why he decided to determine maximum possible proper irreducible fraction <image> such that sum of its numerator and denominator equals n. Help Petya deal with this problem.\n\nInput\n\nIn the only line of input there is an integer n (3 \u2264 n \u2264 1000), the sum of numerator and denominator of the fraction.", "grammar": {"productions": ["<S>->n"], "constraints": ["3<=n<=1000"]}}
{"name": "p03814 AtCoder Beginner Contest 053 - A to Z String", "description": "Snuke has decided to construct a string that starts with `A` and ends with `Z`, by taking out a substring of a string s (that is, a consecutive part of s).\n\nFind the greatest length of the string Snuke can construct. Here, the test set guarantees that there always exists a substring of s that starts with `A` and ends with `Z`.\n\nConstraints\n\n* 1 \u2266 |s| \u2266 200{,}000\n* s consists of uppercase English letters.\n* There exists a substring of s that starts with `A` and ends with `Z`.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\ns", "grammar": {"productions": ["<S>->[A-Z]{1,2000000}"], "constraints": []}}
{"name": "2_A. Winner", "description": "The winner of the card game popular in Berland \"Berlogging\" is determined according to the following rules. If at the end of the game there is only one player with the maximum number of points, he is the winner. The situation becomes more difficult if the number of such players is more than one. During each round a player gains or loses a particular number of points. In the course of the game the number of points is registered in the line \"name score\", where name is a player's name, and score is the number of points gained in this round, which is an integer number. If score is negative, this means that the player has lost in the round. So, if two or more players have the maximum number of points (say, it equals to m) at the end of the game, than wins the one of them who scored at least m points first. Initially each player has 0 points. It's guaranteed that at the end of the game at least one player has a positive number of points.\n\nInput\n\nThe first line contains an integer number n (1 \u2264 n \u2264 1000), n is the number of rounds played. Then follow n lines, containing the information about the rounds in \"name score\" format in chronological order, where name is a string of lower-case Latin letters with the length from 1 to 32, and score is an integer number between -1000 and 1000, inclusive.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> [a-z]{1,32} <s> score", "<T_1>->[a-z]{1,32} <s> score"], "constraints": ["1<=n<=1000", "-1000<=score<=1000"]}}
{"name": "1406_B. Maximum Product", "description": "You are given an array of integers a_1,a_2,\u2026,a_n. Find the maximum possible value of a_ia_ja_ka_la_t among all five indices (i, j, k, l, t) (i<j<k<l<t).\n\nInput\n\nThe input consists of multiple test cases. The first line contains an integer t (1\u2264 t\u2264 2 \u22c5 10^4) \u2014 the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer n (5\u2264 n\u2264 10^5) \u2014 the size of the array.\n\nThe second line of each test case contains n integers a_1,a_2,\u2026,a_n (-3\u00d7 10^3\u2264 a_i\u2264 3\u00d7 10^3) \u2014 given array.\n\nIt's guaranteed that the sum of n over all test cases does not exceed 2\u22c5 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=2*10^4", "5<=n<=10^5", "-3*10^3<=a_i<=3*10^3"]}}
{"name": "p03674 AtCoder Beginner Contest 066 - 11", "description": "You are given an integer sequence of length n+1, a_1,a_2,...,a_{n+1}, which consists of the n integers 1,...,n. It is known that each of the n integers 1,...,n appears at least once in this sequence.\n\nFor each integer k=1,...,n+1, find the number of the different subsequences (not necessarily contiguous) of the given sequence with length k, modulo 10^9+7.\n\nConstraints\n\n* 1 \\leq n \\leq 10^5\n* 1 \\leq a_i \\leq n\n* Each of the integers 1,...,n appears in the sequence.\n* n and a_i are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nn\na_1 a_2 ... a_{n+1}", "grammar": {"productions": ["<S>->[n] <n> <T_n+1>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=10^5", "1<=a_i<=n"]}}
{"name": "p03264 AtCoder Beginner Contest 108 - Pair", "description": "Find the number of ways to choose a pair of an even number and an odd number from the positive integers between 1 and K (inclusive). The order does not matter.\n\nConstraints\n\n* 2\\leq K\\leq 100\n* K is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nK", "grammar": {"productions": ["<S>->K"], "constraints": ["2<=K<=100"]}}
{"name": "p02684 AtCoder Beginner Contest 167 - Teleporter", "description": "The Kingdom of Takahashi has N towns, numbered 1 through N.\n\nThere is one teleporter in each town. The teleporter in Town i (1 \\leq i \\leq N) sends you to Town A_i.\n\nTakahashi, the king, loves the positive integer K. The selfish king wonders what town he will be in if he starts at Town 1 and uses a teleporter exactly K times from there.\n\nHelp the king by writing a program that answers this question.\n\nConstraints\n\n* 2 \\leq N \\leq 2 \\times 10^5\n* 1 \\leq A_i \\leq N\n* 1 \\leq K \\leq 10^{18}\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nA_1 A_2 \\dots A_N", "grammar": {"productions": ["<S>->[N] <s> K <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["2<=N<=2*10^5", "1<=A_i<=N", "1<=K<=10^18"]}}
{"name": "p02972 AtCoder Beginner Contest 134 - Preparing Boxes", "description": "There are N empty boxes arranged in a row from left to right. The integer i is written on the i-th box from the left (1 \\leq i \\leq N).\n\nFor each of these boxes, Snuke can choose either to put a ball in it or to put nothing in it.\n\nWe say a set of choices to put a ball or not in the boxes is good when the following condition is satisfied:\n\n* For every integer i between 1 and N (inclusive), the total number of balls contained in the boxes with multiples of i written on them is congruent to a_i modulo 2.\n\n\n\nDoes there exist a good set of choices? If the answer is yes, find one good set of choices.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 2 \\times 10^5\n* a_i is 0 or 1.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 a_2 ... a_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> <A_i>", "<T_1>->A_1", "<A_i>->0|1"], "constraints": ["1<=N<=2*10^5"]}}
{"name": "1266_B. Dice Tower", "description": "Bob is playing with 6-sided dice. A net of such standard cube is shown below.\n\n<image>\n\nHe has an unlimited supply of these dice and wants to build a tower by stacking multiple dice on top of each other, while choosing the orientation of each dice. Then he counts the number of visible pips on the faces of the dice.\n\nFor example, the number of visible pips on the tower below is 29 \u2014 the number visible on the top is 1, from the south 5 and 3, from the west 4 and 2, from the north 2 and 4 and from the east 3 and 5.\n\n<image>\n\nThe one at the bottom and the two sixes by which the dice are touching are not visible, so they are not counted towards total.\n\nBob also has t favourite integers x_i, and for every such integer his goal is to build such a tower that the number of visible pips is exactly x_i. For each of Bob's favourite integers determine whether it is possible to build a tower that has exactly that many visible pips.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of favourite integers of Bob. \n\nThe second line contains t space-separated integers x_i (1 \u2264 x_i \u2264 10^{18}) \u2014 Bob's favourite integers.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <s> x_i", "<T_1>->x_1"], "constraints": ["1<=t<=1000", "1<=x_i<=10^18"]}}
{"name": "1335_B. Construct the String", "description": "You are given three positive integers n, a and b. You have to construct a string s of length n consisting of lowercase Latin letters such that each substring of length a has exactly b distinct letters. It is guaranteed that the answer exists.\n\nYou have to answer t independent test cases.\n\nRecall that the substring s[l ... r] is the string s_l, s_{l+1}, ..., s_{r} and its length is r - l + 1. In this problem you are only interested in substrings of length a.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 2000) \u2014 the number of test cases. Then t test cases follow.\n\nThe only line of a test case contains three space-separated integers n, a and b (1 \u2264 a \u2264 n \u2264 2000, 1 \u2264 b \u2264 min(26, a)), where n is the length of the required string, a is the length of a substring and b is the required number of distinct letters in each substring of length a.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2000 (\u2211 n \u2264 2000).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n <s> a <s> b", "<T_1>->n <s> a <s> b"], "constraints": ["1<=t<=2000", "1<=a<=n<=2000", "1<=b<=min(26,a)"]}}
{"name": "1150_A. Stock Arbitraging", "description": "Welcome to Codeforces Stock Exchange! We're pretty limited now as we currently allow trading on one stock, Codeforces Ltd. We hope you'll still be able to make profit from the market!\n\nIn the morning, there are n opportunities to buy shares. The i-th of them allows to buy as many shares as you want, each at the price of s_i bourles.\n\nIn the evening, there are m opportunities to sell shares. The i-th of them allows to sell as many shares as you want, each at the price of b_i bourles. You can't sell more shares than you have.\n\nIt's morning now and you possess r bourles and no shares.\n\nWhat is the maximum number of bourles you can hold after the evening?\n\nInput\n\nThe first line of the input contains three integers n, m, r (1 \u2264 n \u2264 30, 1 \u2264 m \u2264 30, 1 \u2264 r \u2264 1000) \u2014 the number of ways to buy the shares on the market, the number of ways to sell the shares on the market, and the number of bourles you hold now.\n\nThe next line contains n integers s_1, s_2, ..., s_n (1 \u2264 s_i \u2264 1000); s_i indicates the opportunity to buy shares at the price of s_i bourles.\n\nThe following line contains m integers b_1, b_2, ..., b_m (1 \u2264 b_i \u2264 1000); b_i indicates the opportunity to sell shares at the price of b_i bourles.", "grammar": {"productions": ["<S>->[n] <s> [m] <s> r <n> <T_n> <n> <L_m>", "<T_i>-><T_i-1> <s> s_i", "<T_1>->s_1", "<L_i>-><L_i-1> <s> b_i", "<L_1>->b_1"], "constraints": ["1<=n<=30", "1<=m<=30", "1<=r<=1000", "1<=s_i<=1000", "1<=b_i<=1000"]}}
{"name": "224_A. Parallelepiped", "description": "You've got a rectangular parallelepiped with integer edge lengths. You know the areas of its three faces that have a common vertex. Your task is to find the sum of lengths of all 12 edges of this parallelepiped.\n\nInput\n\nThe first and the single line contains three space-separated integers \u2014 the areas of the parallelepiped's faces. The area's values are positive ( > 0) and do not exceed 10^4. It is guaranteed that there exists at least one parallelepiped that satisfies the problem statement.", "grammar": {"productions": ["<S>->n <s> m <s> d"], "constraints": ["0<n<=10^4", "0<m<=10^4", "0<d<=10^4"]}}
{"name": "451_B. Sort the Array", "description": "Being a programmer, you like arrays a lot. For your birthday, your friends have given you an array a consisting of n distinct integers.\n\nUnfortunately, the size of a is too small. You want a bigger array! Your friends agree to give you a bigger array, but only if you are able to answer the following question correctly: is it possible to sort the array a (in increasing order) by reversing exactly one segment of a? See definitions of segment and reversing in the notes.\n\nInput\n\nThe first line of the input contains an integer n (1 \u2264 n \u2264 10^5) \u2014 the size of array a.\n\nThe second line contains n distinct space-separated integers: a[1], a[2], ..., a[n] (1 \u2264 a[i] \u2264 10^9).", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=10^5", "1<=a_i<=10^9"]}}
{"name": "205_A. Little Elephant and Rozdil", "description": "The Little Elephant loves Ukraine very much. Most of all he loves town Rozdol (ukr. \"Rozdil\").\n\nHowever, Rozdil is dangerous to settle, so the Little Elephant wants to go to some other town. The Little Elephant doesn't like to spend much time on travelling, so for his journey he will choose a town that needs minimum time to travel to. If there are multiple such cities, then the Little Elephant won't go anywhere.\n\nFor each town except for Rozdil you know the time needed to travel to this town. Find the town the Little Elephant will go to or print \"Still Rozdil\", if he stays in Rozdil.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 10^5) \u2014 the number of cities. The next line contains n integers, separated by single spaces: the i-th integer represents the time needed to go from town Rozdil to the i-th town. The time values are positive integers, not exceeding 10^9.\n\nYou can consider the cities numbered from 1 to n, inclusive. Rozdil is not among the numbered cities.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=10^5", "1<=a_i<=10^9"]}}
{"name": "1328_D. Carousel", "description": "The round carousel consists of n figures of animals. Figures are numbered from 1 to n in order of the carousel moving. Thus, after the n-th figure the figure with the number 1 follows. Each figure has its own type \u2014 the type of the animal corresponding to this figure (the horse, the tiger and so on). The type of animal of the i-th figure equals t_i.\n\n<image> The example of the carousel for n=9 and t=[5, 5, 1, 15, 1, 5, 5, 1, 1]. \n\nYou want to color each figure in one of the colors. You think that it's boring if the carousel contains two different figures (with the distinct types of animals) going one right after another and colored in the same color.\n\nYour task is to color the figures in such a way that the number of distinct colors used is the minimum possible and there are no figures of the different types going one right after another and colored in the same color. If you use exactly k distinct colors, then the colors of figures should be denoted with integers from 1 to k.\n\nInput\n\nThe input contains one or more test cases.\n\nThe first line contains one integer q (1 \u2264 q \u2264 10^4) \u2014 the number of test cases in the test. Then q test cases follow. One test case is given on two lines.\n\nThe first line of the test case contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of figures in the carousel. Figures are numbered from 1 to n in order of carousel moving. Assume that after the n-th figure the figure 1 goes.\n\nThe second line of the test case contains n integers t_1, t_2, ..., t_n (1 \u2264 t_i \u2264 2 \u22c5 10^5), where t_i is the type of the animal of the i-th figure.\n\nThe sum of n over all test cases does not exceed 2\u22c510^5.", "grammar": {"productions": ["<S>->[q] <n> <T_q>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> t_i", "<L_1>->t_1"], "constraints": ["1<=q<=10^4", "3<=n<=2*10^5", "1<=t_i<=2*10^5"]}}
{"name": "1003_B. Binary String Constructing", "description": "You are given three integers a, b and x. Your task is to construct a binary string s of length n = a + b such that there are exactly a zeroes, exactly b ones and exactly x indices i (where 1 \u2264 i < n) such that s_i \u2260 s_{i + 1}. It is guaranteed that the answer always exists.\n\nFor example, for the string \"01010\" there are four indices i such that 1 \u2264 i < n and s_i \u2260 s_{i + 1} (i = 1, 2, 3, 4). For the string \"111001\" there are two such indices i (i = 3, 5).\n\nRecall that binary string is a non-empty sequence of characters where each character is either 0 or 1.\n\nInput\n\nThe first line of the input contains three integers a, b and x (1 \u2264 a, b \u2264 100, 1 \u2264 x < a + b).", "grammar": {"productions": ["<S>->a <s> b <s> x"], "constraints": ["1<=a<=100", "1<=b<=100", "1<=x<=(a+b)"]}}
{"name": "939_A. Love Triangle", "description": "As you could know there are no male planes nor female planes. However, each plane on Earth likes some other plane. There are n planes on Earth, numbered from 1 to n, and the plane with number i likes the plane with number fi, where 1 \u2264 fi \u2264 n and fi \u2260 i.\n\nWe call a love triangle a situation in which plane A likes plane B, plane B likes plane C and plane C likes plane A. Find out if there is any love triangle on Earth.\n\nInput\n\nThe first line contains a single integer n (2 \u2264 n \u2264 5000) \u2014 the number of planes.\n\nThe second line contains n integers f1, f2, ..., fn (1 \u2264 fi \u2264 n, fi \u2260 i), meaning that the i-th plane likes the fi-th.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> f_i", "<T_1>->f_1"], "constraints": ["2<=n<=5000", "1<=f_i<=n", "f_i!=i"]}}
{"name": "p02604 M-SOLUTIONS Programming Contest 2020 - M's Solution", "description": "New AtCoder City has an infinite grid of streets, as follows:\n\n* At the center of the city stands a clock tower. Let (0, 0) be the coordinates of this point.\n* A straight street, which we will call East-West Main Street, runs east-west and passes the clock tower. It corresponds to the x-axis in the two-dimensional coordinate plane.\n* There are also other infinitely many streets parallel to East-West Main Street, with a distance of 1 between them. They correspond to the lines \\ldots, y = -2, y = -1, y = 1, y = 2, \\ldots in the two-dimensional coordinate plane.\n* A straight street, which we will call North-South Main Street, runs north-south and passes the clock tower. It corresponds to the y-axis in the two-dimensional coordinate plane.\n* There are also other infinitely many streets parallel to North-South Main Street, with a distance of 1 between them. They correspond to the lines \\ldots, x = -2, x = -1, x = 1, x = 2, \\ldots in the two-dimensional coordinate plane.\n\n\n\nThere are N residential areas in New AtCoder City. The i-th area is located at the intersection with the coordinates (X_i, Y_i) and has a population of P_i. Each citizen in the city lives in one of these areas.\n\nThe city currently has only two railroads, stretching infinitely, one along East-West Main Street and the other along North-South Main Street.\nM-kun, the mayor, thinks that they are not enough for the commuters, so he decides to choose K streets and build a railroad stretching infinitely along each of those streets.\n\nLet the walking distance of each citizen be the distance from his/her residential area to the nearest railroad.\nM-kun wants to build railroads so that the sum of the walking distances of all citizens, S, is minimized.\n\nFor each K = 0, 1, 2, \\dots, N, what is the minimum possible value of S after building railroads?\n\nConstraints\n\n* 1 \\leq N \\leq 15\n* -10 \\ 000 \\leq X_i \\leq 10 \\ 000\n* -10 \\ 000 \\leq Y_i \\leq 10 \\ 000\n* 1 \\leq P_i \\leq 1 \\ 000 \\ 000\n* The locations of the N residential areas, (X_i, Y_i), are all distinct.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nX_1 Y_1 P_1\nX_2 Y_2 P_2\n:  :  :\nX_N Y_N P_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> X_i <s> Y_i <s> P_i", "<T_1>->X_1 <s> Y_1 <s> P_1"], "constraints": ["1<=N<=15", "-10000<=X_i<=10000", "-10000<=Y_i<=10000", "1<=P_i<=1000000"]}}
{"name": "p02571 AtCoder Beginner Contest 177 - Substring", "description": "Given are two strings S and T.\n\nLet us change some of the characters in S so that T will be a substring of S.\n\nAt least how many characters do we need to change?\n\nHere, a substring is a consecutive subsequence. For example, `xxx` is a substring of `yxxxy`, but not a substring of `xxyxx`.\n\nConstraints\n\n* The lengths of S and T are each at least 1 and at most 1000.\n* The length of T is at most that of S.\n* S and T consist of lowercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS\nT", "grammar": {"productions": ["<S>->[a-z]{S} <n> [a-z]{S}"], "constraints": ["1<=S,T<=1000"]}}
{"name": "131_A. cAPS lOCK", "description": "wHAT DO WE NEED cAPS LOCK FOR?\n\nCaps lock is a computer keyboard key. Pressing it sets an input mode in which typed letters are capital by default. If it is pressed by accident, it leads to accidents like the one we had in the first passage. \n\nLet's consider that a word has been typed with the Caps lock key accidentally switched on, if: \n\n  * either it only contains uppercase letters; \n  * or all letters except for the first one are uppercase. \n\n\n\nIn this case we should automatically change the case of all letters. For example, the case of the letters that form words \"hELLO\", \"HTTP\", \"z\" should be changed.\n\nWrite a program that applies the rule mentioned above. If the rule cannot be applied, the program should leave the word unchanged.\n\nInput\n\nThe first line of the input data contains a word consisting of uppercase and lowercase Latin letters. The word's length is from 1 to 100 characters, inclusive.", "grammar": {"productions": ["<S>->[a-zA-Z]{1,100}"], "constraints": []}}
{"name": "1296_C. Yet Another Walking Robot", "description": "There is a robot on a coordinate plane. Initially, the robot is located at the point (0, 0). Its path is described as a string s of length n consisting of characters 'L', 'R', 'U', 'D'.\n\nEach of these characters corresponds to some move: \n\n  * 'L' (left): means that the robot moves from the point (x, y) to the point (x - 1, y); \n  * 'R' (right): means that the robot moves from the point (x, y) to the point (x + 1, y); \n  * 'U' (up): means that the robot moves from the point (x, y) to the point (x, y + 1); \n  * 'D' (down): means that the robot moves from the point (x, y) to the point (x, y - 1). \n\n\n\nThe company that created this robot asked you to optimize the path of the robot somehow. To do this, you can remove any non-empty substring of the path. But this company doesn't want their customers to notice the change in the robot behavior. It means that if before the optimization the robot ended its path at the point (x_e, y_e), then after optimization (i.e. removing some single substring from s) the robot also ends its path at the point (x_e, y_e).\n\nThis optimization is a low-budget project so you need to remove the shortest possible non-empty substring to optimize the robot's path such that the endpoint of his path doesn't change. It is possible that you can't optimize the path. Also, it is possible that after the optimization the target path is an empty string (i.e. deleted substring is the whole string s).\n\nRecall that the substring of s is such string that can be obtained from s by removing some amount of characters (possibly, zero) from the prefix and some amount of characters (possibly, zero) from the suffix. For example, the substrings of \"LURLLR\" are \"LU\", \"LR\", \"LURLLR\", \"URL\", but not \"RR\" and \"UL\".\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines describe test cases. Each test case is given on two lines. The first line of the test case contains one integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the length of the robot's path. The second line of the test case contains one string s consisting of n characters 'L', 'R', 'U', 'D' \u2014 the robot's path.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5 (\u2211 n \u2264 2 \u22c5 10^5).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> [LRUD]{n}", "<T_1>->[n] <n> [LRUD]{n}"], "constraints": ["1<=t<=1000", "1<=n<=2*10^5"]}}
{"name": "p02734 AtCoder Beginner Contest 159 - Knapsack for All Segments", "description": "Given are a sequence of N integers A_1, A_2, \\ldots, A_N and a positive integer S.\nFor a pair of integers (L, R) such that 1\\leq L \\leq R \\leq N, let us define f(L, R) as follows:\n\n\n* f(L, R) is the number of sequences of integers (x_1, x_2, \\ldots , x_k) such that L \\leq x_1 < x_2 < \\cdots < x_k \\leq R and A_{x_1}+A_{x_2}+\\cdots +A_{x_k} = S.\n\n\n\nFind the sum of f(L, R) over all pairs of integers (L, R) such that 1\\leq L \\leq R\\leq N. Since this sum can be enormous, print it modulo 998244353.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 3000\n* 1 \\leq S \\leq 3000\n* 1 \\leq A_i \\leq 3000\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN S\nA_1 A_2 ... A_N", "grammar": {"productions": ["<S>->[N] <s> S <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=N<=3000", "1<=S<=3000", "1<=a_i<=3000"]}}
{"name": "p03345 AtCoder Grand Contest 024 - Fairness", "description": "Takahashi, Nakahashi and Hikuhashi have integers A, B and C, respectively. After repeating the following operation K times, find the integer Takahashi will get minus the integer Nakahashi will get:\n\n* Each of them simultaneously calculate the sum of the integers that the other two people have, then replace his own integer with the result.\n\n\n\nHowever, if the absolute value of the answer exceeds 10^{18}, print `Unfair` instead.\n\nConstraints\n\n* 1 \\leq A,B,C \\leq 10^9\n* 0 \\leq K \\leq 10^{18}\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B C K", "grammar": {"productions": ["<S>->A <s> B <s> C <s> K"], "constraints": ["1<=A,B,C<=10^9", "0<=K<=10^18"]}}
{"name": "877_A. Alex and broken contest", "description": "One day Alex was creating a contest about his friends, but accidentally deleted it. Fortunately, all the problems were saved, but now he needs to find them among other problems.\n\nBut there are too many problems, to do it manually. Alex asks you to write a program, which will determine if a problem is from this contest by its name.\n\nIt is known, that problem is from this contest if and only if its name contains one of Alex's friends' name exactly once. His friends' names are \"Danil\", \"Olya\", \"Slava\", \"Ann\" and \"Nikita\".\n\nNames are case sensitive.\n\nInput\n\nThe only line contains string from lowercase and uppercase letters and \"_\" symbols of length, not more than 100 \u2014 the name of the problem.", "grammar": {"productions": ["<S>->[a-zA-Z_]{1,100}"], "constraints": []}}
{"name": "p02834 AtCoder Beginner Contest 148 - Playing Tag on Tree", "description": "We have a tree with N vertices. The i-th edge connects Vertex A_i and B_i bidirectionally.\n\nTakahashi is standing at Vertex u, and Aoki is standing at Vertex v.\n\nNow, they will play a game of tag as follows:\n\n* 1. If Takahashi and Aoki are standing at the same vertex, the game ends. Otherwise, Takahashi moves to a vertex of his choice that is adjacent to his current vertex.\n\n* 2. If Takahashi and Aoki are standing at the same vertex, the game ends. Otherwise, Aoki moves to a vertex of his choice that is adjacent to his current vertex.\n\n* 3. Go back to step 1.\n\n\n\n\nTakahashi performs his moves so that the game ends as late as possible, while Aoki performs his moves so that the game ends as early as possible.\n\nFind the number of moves Aoki will perform before the end of the game if both Takahashi and Aoki know each other's position and strategy.\n\nIt can be proved that the game is bound to end.\n\nConstraints\n\n* 2 \\leq N \\leq 10^5\n* 1 \\leq u,v \\leq N\n* u \\neq v\n* 1 \\leq A_i,B_i \\leq N\n* The given graph is a tree.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN u v\nA_1 B_1\n:\nA_{N-1} B_{N-1}", "grammar": {"productions": ["<S>->[N] <s> u <s> v <n> <T_N-1>", "<T_i>-><T_i-1> <n> A_i <s> B_i", "<T_1>->A_1 <s> B_1"], "constraints": ["2<=N<=10^5", "1<=u,v<=N", "u!=v", "1<=A_i,B_i<=N"]}}
{"name": "1163_A. Eating Soup", "description": "The three friends, Kuro, Shiro, and Katie, met up again! It's time for a party...\n\nWhat the cats do when they unite? Right, they have a party. Since they wanted to have as much fun as possible, they invited all their friends. Now n cats are at the party, sitting in a circle and eating soup. The rules are simple: anyone having finished their soup leaves the circle.\n\nKatie suddenly notices that whenever a cat leaves, the place where she was sitting becomes an empty space, which means the circle is divided into smaller continuous groups of cats sitting next to each other. At the moment Katie observes, there are m cats who left the circle. This raises a question for Katie: what is the maximum possible number of groups the circle is divided into at the moment?\n\nCould you help her with this curiosity?\n\nYou can see the examples and their descriptions with pictures in the \"Note\" section.\n\nInput\n\nThe only line contains two integers n and m (2 \u2264 n \u2264 1000, 0 \u2264 m \u2264 n) \u2014 the initial number of cats at the party and the number of cats who left the circle at the moment Katie observes, respectively.", "grammar": {"productions": ["<S>->n <s> m"], "constraints": ["2<=n<=1000", "0<=m<=n"]}}
{"name": "p02577 AtCoder Beginner Contest 176 - Multiple of 9", "description": "An integer N is a multiple of 9 if and only if the sum of the digits in the decimal representation of N is a multiple of 9.\n\nDetermine whether N is a multiple of 9.\n\nConstraints\n\n* 0 \\leq N < 10^{200000}\n* N is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["0<=N<=10^200000"]}}
{"name": "p02814 AtCoder Beginner Contest 150 - Semi Common Multiple", "description": "Given are a sequence A= {a_1,a_2,......a_N} of N positive even numbers, and an integer M.\n\nLet a semi-common multiple of A be a positive integer X that satisfies the following condition for every k (1 \\leq k \\leq N):\n\n* There exists a non-negative integer p such that X= a_k \\times (p+0.5).\n\n\n\nFind the number of semi-common multiples of A among the integers between 1 and M (inclusive).\n\nConstraints\n\n* 1 \\leq N \\leq 10^5\n* 1 \\leq M \\leq 10^9\n* 2 \\leq a_i \\leq 10^9\n* a_i is an even number.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\na_1 a_2 ... a_N", "grammar": {"productions": ["<S>->[N] <s> M <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=N<=10^5", "1<=M<=10^9", "2<=a_i<=10^9", "a_i%2==0"]}}
{"name": "709_A. Juicer", "description": "Kolya is going to make fresh orange juice. He has n oranges of sizes a1, a2, ..., an. Kolya will put them in the juicer in the fixed order, starting with orange of size a1, then orange of size a2 and so on. To be put in the juicer the orange must have size not exceeding b, so if Kolya sees an orange that is strictly greater he throws it away and continues with the next one.\n\nThe juicer has a special section to collect waste. It overflows if Kolya squeezes oranges of the total size strictly greater than d. When it happens Kolya empties the waste section (even if there are no more oranges) and continues to squeeze the juice. How many times will he have to empty the waste section?\n\nInput\n\nThe first line of the input contains three integers n, b and d (1 \u2264 n \u2264 100 000, 1 \u2264 b \u2264 d \u2264 1 000 000) \u2014 the number of oranges, the maximum size of the orange that fits in the juicer and the value d, which determines the condition when the waste section should be emptied.\n\nThe second line contains n integers a1, a2, ..., an (1 \u2264 ai \u2264 1 000 000) \u2014 sizes of the oranges listed in the order Kolya is going to try to put them in the juicer.", "grammar": {"productions": ["<S>->[n] <s> b <s> d <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=100000", "1<=b<=1000000", "1<=d<=1000000", "1<=a_i<=1000000"]}}
{"name": "p03951 AtCoder Grand Contest 006 - Prefix and Suffix", "description": "Snuke is interested in strings that satisfy the following conditions:\n\n* The length of the string is at least N.\n* The first N characters equal to the string s.\n* The last N characters equal to the string t.\n\n\n\nFind the length of the shortest string that satisfies the conditions.\n\nConstraints\n\n* 1\u2264N\u2264100\n* The lengths of s and t are both N.\n* s and t consist of lowercase English letters.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN\ns\nt", "grammar": {"productions": ["<S>->[N] <n> [a-z]{N} <n> [a-z]{N}"], "constraints": ["1<=N<=100"]}}
{"name": "721_A. One-dimensional Japanese Crossword", "description": "Recently Adaltik discovered japanese crosswords. Japanese crossword is a picture, represented as a table sized a \u00d7 b squares, and each square is colored white or black. There are integers to the left of the rows and to the top of the columns, encrypting the corresponding row or column. The number of integers represents how many groups of black squares there are in corresponding row or column, and the integers themselves represents the number of consecutive black squares in corresponding group (you can find more detailed explanation in Wikipedia <https://en.wikipedia.org/wiki/Japanese_crossword>).\n\nAdaltik decided that the general case of japanese crossword is too complicated and drew a row consisting of n squares (e.g. japanese crossword sized 1 \u00d7 n), which he wants to encrypt in the same way as in japanese crossword.\n\n<image> The example of encrypting of a single row of japanese crossword.\n\nHelp Adaltik find the numbers encrypting the row he drew.\n\nInput\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 100) \u2014 the length of the row. The second line of the input contains a single string consisting of n characters 'B' or 'W', ('B' corresponds to black square, 'W' \u2014 to white square in the row that Adaltik drew).", "grammar": {"productions": ["<S>->[n] <n> [BW]{n}"], "constraints": ["1<=n<=100"]}}
{"name": "705_A. Hulk", "description": "Dr. Bruce Banner hates his enemies (like others don't). As we all know, he can barely talk when he turns into the incredible Hulk. That's why he asked you to help him to express his feelings.\n\nHulk likes the Inception so much, and like that his feelings are complicated. They have n layers. The first layer is hate, second one is love, third one is hate and so on...\n\nFor example if n = 1, then his feeling is \"I hate it\" or if n = 2 it's \"I hate that I love it\", and if n = 3 it's \"I hate that I love that I hate it\" and so on.\n\nPlease help Dr. Banner.\n\nInput\n\nThe only line of the input contains a single integer n (1 \u2264 n \u2264 100) \u2014 the number of layers of love and hate.", "grammar": {"productions": ["<S>->N"], "constraints": ["1<=N<=100"]}}
{"name": "p03720 AtCoder Beginner Contest 061 - Counting Roads", "description": "There are N cities and M roads. The i-th road (1\u2264i\u2264M) connects two cities a_i and b_i (1\u2264a_i,b_i\u2264N) bidirectionally. There may be more than one road that connects the same pair of two cities. For each city, how many roads are connected to the city?\n\nConstraints\n\n* 2\u2264N,M\u226450\n* 1\u2264a_i,b_i\u2264N\n* a_i \u2260 b_i\n* All input values are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\na_1 b_1\n:\na_M b_M", "grammar": {"productions": ["<S>->N <s> [M] <n> <T_M>", "<T_i>-><T_i-1> <n> a_i <s> b_i", "<T_1>->a_1 <s> b_1"], "constraints": ["2<=N<=50", "2<=M<=50", "1<=a_i<=N", "1<=b_i<=N", "a_i!=b_i"]}}
{"name": "p03171 Educational DP Contest - Deque", "description": "Taro and Jiro will play the following game against each other.\n\nInitially, they are given a sequence a = (a_1, a_2, \\ldots, a_N). Until a becomes empty, the two players perform the following operation alternately, starting from Taro:\n\n* Remove the element at the beginning or the end of a. The player earns x points, where x is the removed element.\n\n\n\nLet X and Y be Taro's and Jiro's total score at the end of the game, respectively. Taro tries to maximize X - Y, while Jiro tries to minimize X - Y.\n\nAssuming that the two players play optimally, find the resulting value of X - Y.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 3000\n* 1 \\leq a_i \\leq 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 a_2 \\ldots a_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=N<=3000", "1<=a_i<=10^9"]}}
{"name": "158_A. Next Round", "description": "\"Contestant who earns a score equal to or greater than the k-th place finisher's score will advance to the next round, as long as the contestant earns a positive score...\" \u2014 an excerpt from contest rules.\n\nA total of n participants took part in the contest (n \u2265 k), and you already know their scores. Calculate how many participants will advance to the next round.\n\nInput\n\nThe first line of the input contains two integers n and k (1 \u2264 k \u2264 n \u2264 50) separated by a single space.\n\nThe second line contains n space-separated integers a1, a2, ..., an (0 \u2264 ai \u2264 100), where ai is the score earned by the participant who got the i-th place. The given sequence is non-increasing (that is, for all i from 1 to n - 1 the following condition is fulfilled: ai \u2265 ai + 1).", "grammar": {"productions": ["<S>->[n] <s> k <n> <T_n>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["1<=n<=50", "1<=k<=n", "0<=A_i<=100"]}}
{"name": "p03705 AtCoder Grand Contest 015 - A+...+B Problem", "description": "Snuke has N integers. Among them, the smallest is A, and the largest is B. We are interested in the sum of those N integers. How many different possible sums there are?\n\nConstraints\n\n* 1 \u2264 N,A,B \u2264 10^9\n* A and B are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN A B", "grammar": {"productions": ["<S>->N <s> A <s> B"], "constraints": ["1<=N<=10^9", "1<=A<=10^9", "1<=B<=10^9"]}}
{"name": "p02399 A / B Problem", "description": "Write a program which reads two integers a and b, and calculates the following values:\n\n* a \u00f7 b: d (in integer)\n* remainder of a \u00f7 b: r (in integer)\n* a \u00f7 b: f (in real number)\n\nConstraints\n\n* 1 \u2264 a, b \u2264 10^9\n\nInput\n\nTwo integers a and b are given in a line.", "grammar": {"productions": ["<S>->a <s> b"], "constraints": ["1<=a,b<=10^9"]}}
{"name": "535_B. Tavas and SaDDas", "description": "Once again Tavas started eating coffee mix without water! Keione told him that it smells awful, but he didn't stop doing that. That's why Keione told his smart friend, SaDDas to punish him! SaDDas took Tavas' headphones and told him: \"If you solve the following problem, I'll return it to you.\"\n\n<image>\n\nThe problem is: \n\nYou are given a lucky number n. Lucky numbers are the positive integers whose decimal representations contain only the lucky digits 4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not.\n\nIf we sort all lucky numbers in increasing order, what's the 1-based index of n? \n\nTavas is not as smart as SaDDas, so he asked you to do him a favor and solve this problem so he can have his headphones back.\n\nInput\n\nThe first and only line of input contains a lucky number n (1 \u2264 n \u2264 10^9).", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=10^9"]}}
{"name": "1367_B. Even Array", "description": "You are given an array a[0 \u2026 n-1] of length n which consists of non-negative integers. Note that array indices start from zero.\n\nAn array is called good if the parity of each index matches the parity of the element at that index. More formally, an array is good if for all i (0 \u2264 i \u2264 n - 1) the equality i mod 2 = a[i] mod 2 holds, where x mod 2 is the remainder of dividing x by 2.\n\nFor example, the arrays [0, 5, 2, 1] and [0, 17, 0, 3] are good, and the array [2, 4, 6, 7] is bad, because for i=1, the parities of i and a[i] are different: i mod 2 = 1 mod 2 = 1, but a[i] mod 2 = 4 mod 2 = 0.\n\nIn one move, you can take any two elements of the array and swap them (these elements are not necessarily adjacent).\n\nFind the minimum number of moves in which you can make the array a good, or say that this is not possible.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases in the test. Then t test cases follow.\n\nEach test case starts with a line containing an integer n (1 \u2264 n \u2264 40) \u2014 the length of the array a.\n\nThe next line contains n integers a_0, a_1, \u2026, a_{n-1} (0 \u2264 a_i \u2264 1000) \u2014 the initial array.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=1000", "1<=n<=40", "0<=a_i<=1000"]}}
{"name": "p02658 AtCoder Beginner Contest 169 - Multiplication 2", "description": "Given N integers A_1, ..., A_N, compute A_1 \\times ... \\times A_N.\n\nHowever, if the result exceeds 10^{18}, print `-1` instead.\n\nConstraints\n\n* 2 \\leq N \\leq 10^5\n* 0 \\leq A_i \\leq 10^{18}\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 ... A_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["2<=N<=10^5", "0<=A_i<=10^18"]}}
{"name": "1096_A. Find Divisible", "description": "You are given a range of positive integers from l to r.\n\nFind such a pair of integers (x, y) that l \u2264 x, y \u2264 r, x \u2260 y and x divides y.\n\nIf there are multiple answers, print any of them.\n\nYou are also asked to answer T independent queries.\n\nInput\n\nThe first line contains a single integer T (1 \u2264 T \u2264 1000) \u2014 the number of queries.\n\nEach of the next T lines contains two integers l and r (1 \u2264 l \u2264 r \u2264 998244353) \u2014 inclusive borders of the range.\n\nIt is guaranteed that testset only includes queries, which have at least one suitable pair.", "grammar": {"productions": ["<S>->[T] <n> <T_T>", "<T_i>-><T_i-1> <n> l <s> r", "<T_1>->l <s> r"], "constraints": ["1<=T<=1000", "1<=l<=998244353", "1<=r<=998244353"]}}
{"name": "515_A. Drazil and Date", "description": "Someday, Drazil wanted to go on date with Varda. Drazil and Varda live on Cartesian plane. Drazil's home is located in point (0, 0) and Varda's home is located in point (a, b). In each step, he can move in a unit distance in horizontal or vertical direction. In other words, from position (x, y) he can go to positions (x + 1, y), (x - 1, y), (x, y + 1) or (x, y - 1). \n\nUnfortunately, Drazil doesn't have sense of direction. So he randomly chooses the direction he will go to in each step. He may accidentally return back to his house during his travel. Drazil may even not notice that he has arrived to (a, b) and continue travelling. \n\nLuckily, Drazil arrived to the position (a, b) successfully. Drazil said to Varda: \"It took me exactly s steps to travel from my house to yours\". But Varda is confused about his words, she is not sure that it is possible to get from (0, 0) to (a, b) in exactly s steps. Can you find out if it is possible for Varda?\n\nInput\n\nYou are given three integers a, b, and s ( - 10^9 \u2264 a, b \u2264 10^9, 1 \u2264 s \u2264 2\u00b710^9) in a single line.", "grammar": {"productions": ["<S>->a <s> b <s> s"], "constraints": ["-10^9<=a<=10^9", "-10^9<=b<=10^9", "1<=s<=2*10^9"]}}
{"name": "1396_A. Multiples of Length", "description": "You are given an array a of n integers.\n\nYou want to make all elements of a equal to zero by doing the following operation exactly three times:\n\n  * Select a segment, for each number in this segment we can add a multiple of len to it, where len is the length of this segment (added integers can be different). \n\n\n\nIt can be proven that it is always possible to make all elements of a equal to zero.\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 100 000): the number of elements of the array.\n\nThe second line contains n elements of an array a separated by spaces: a_1, a_2, ..., a_n (-10^9 \u2264 a_i \u2264 10^9).", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=1000000", "-10^9<=a_i<=10^9"]}}
{"name": "p03145 AtCoder Beginner Contest 116 - Right Triangle", "description": "There is a right triangle ABC with \u2220ABC=90\u00b0.\n\nGiven the lengths of the three sides, |AB|,|BC| and |CA|, find the area of the right triangle ABC.\n\nIt is guaranteed that the area of the triangle ABC is an integer.\n\nConstraints\n\n* 1 \\leq |AB|,|BC|,|CA| \\leq 100\n* All values in input are integers.\n* The area of the triangle ABC is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\n|AB| |BC| |CA|", "grammar": {"productions": ["<S>->AB <s> BC <s> CA"], "constraints": ["1<=AB,BC,CA<=100"]}}
{"name": "1355_B. Young Explorers", "description": "Young wilderness explorers set off to their first expedition led by senior explorer Russell. Explorers went into a forest, set up a camp and decided to split into groups to explore as much interesting locations as possible. Russell was trying to form groups, but ran into some difficulties...\n\nMost of the young explorers are inexperienced, and sending them alone would be a mistake. Even Russell himself became senior explorer not long ago. Each of young explorers has a positive integer parameter e_i \u2014 his inexperience. Russell decided that an explorer with inexperience e can only join the group of e or more people.\n\nNow Russell needs to figure out how many groups he can organize. It's not necessary to include every explorer in one of the groups: some can stay in the camp. Russell is worried about this expedition, so he asked you to help him.\n\nInput\n\nThe first line contains the number of independent test cases T(1 \u2264 T \u2264 2 \u22c5 10^5). Next 2T lines contain description of test cases.\n\nThe first line of description of each test case contains the number of young explorers N (1 \u2264 N \u2264 2 \u22c5 10^5).\n\nThe second line contains N integers e_1, e_2, \u2026, e_N (1 \u2264 e_i \u2264 N), where e_i is the inexperience of the i-th explorer.\n\nIt's guaranteed that sum of all N doesn't exceed 3 \u22c5 10^5.", "grammar": {"productions": ["<S>->[T] <n> <T_T>", "<T_i>-><T_i-1> <n> [N] <n> <L_N>", "<T_1>->[N] <n> <L_N>", "<L_i>-><L_i-1> <s> e_i", "<L_1>->e_1"], "constraints": ["1<=T<=2*10^5", "1<=N<=2*10^5", "1<=e_i<=N"]}}
{"name": "p02582 AtCoder Beginner Contest 175 - Rainy Season", "description": "We have weather records at AtCoder Town for some consecutive three days. A string of length 3, S, represents the records - if the i-th character is `S`, it means it was sunny on the i-th day; if that character is `R`, it means it was rainy on that day.\n\nFind the maximum number of consecutive rainy days in this period.\n\nConstraints\n\n* |S| = 3\n* Each character of S is `S` or `R`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>->[SR]{3}"], "constraints": []}}
{"name": "p02922 AtCoder Beginner Contest 139 - Power Socket", "description": "Takahashi's house has only one socket.\n\nTakahashi wants to extend it with some number of power strips, each with A sockets, into B or more empty sockets.\n\nOne power strip with A sockets can extend one empty socket into A empty sockets.\n\nFind the minimum number of power strips required.\n\nConstraints\n\n* All values in input are integers.\n* 2 \\leq A \\leq 20\n* 1 \\leq B \\leq 20\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B", "grammar": {"productions": ["<S>->A <s> B"], "constraints": ["2<=A<=20", "1<=B<=20"]}}
{"name": "1363_C. Game On Leaves", "description": "Ayush and Ashish play a game on an unrooted tree consisting of n nodes numbered 1 to n. Players make the following move in turns: \n\n  * Select any leaf node in the tree and remove it together with any edge which has this node as one of its endpoints. A leaf node is a node with degree less than or equal to 1. \n\n\n\nA tree is a connected undirected graph without cycles.\n\nThere is a special node numbered x. The player who removes this node wins the game. \n\nAyush moves first. Determine the winner of the game if each player plays optimally.\n\nInput\n\nThe first line of the input contains a single integer t (1 \u2264 t \u2264 10) \u2014 the number of testcases. The description of the test cases follows.\n\nThe first line of each testcase contains two integers n and x (1\u2264 n \u2264 1000, 1 \u2264 x \u2264 n) \u2014 the number of nodes in the tree and the special node respectively.\n\nEach of the next n-1 lines contain two integers u, v (1 \u2264 u, v \u2264 n,   u \u2260 v), meaning that there is an edge between nodes u and v in the tree.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <s> x <n> <L_n-1>", "<T_1>->[n] <s> x <n> <L_n-1>", "<L_i>-><L_i-1> <n> u <s> v", "<L_1>->u <s> v"], "constraints": ["1<=t<=10", "1<=n<=1000", "1<=x<=n", "1<=u,v<=n", "u!=v"]}}
{"name": "p02805 AtCoder Beginner Contest 151 - Enclose All", "description": "Given are N points (x_i, y_i) in a two-dimensional plane.\n\nFind the minimum radius of a circle such that all the points are inside or on it.\n\nConstraints\n\n* 2 \\leq N \\leq 50\n* 0 \\leq x_i \\leq 1000\n* 0 \\leq y_i \\leq 1000\n* The given N points are all different.\n* The values in input are all integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nx_1 y_1\n:\nx_N y_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> x_i <s> y_i", "<T_1>->x_1 <s> y_1"], "constraints": ["2<=N<=50", "0<=x_i<=1000", "0<=y_i<=1000"]}}
{"name": "1097_A. Gennady and a Card Game", "description": "Gennady owns a small hotel in the countryside where he lives a peaceful life. He loves to take long walks, watch sunsets and play cards with tourists staying in his hotel. His favorite game is called \"Mau-Mau\".\n\nTo play Mau-Mau, you need a pack of 52 cards. Each card has a suit (Diamonds \u2014 D, Clubs \u2014 C, Spades \u2014 S, or Hearts \u2014 H), and a rank (2, 3, 4, 5, 6, 7, 8, 9, T, J, Q, K, or A).\n\nAt the start of the game, there is one card on the table and you have five cards in your hand. You can play a card from your hand if and only if it has the same rank or the same suit as the card on the table.\n\nIn order to check if you'd be a good playing partner, Gennady has prepared a task for you. Given the card on the table and five cards in your hand, check if you can play at least one card.\n\nInput\n\nThe first line of the input contains one string which describes the card on the table. The second line contains five strings which describe the cards in your hand.\n\nEach string is two characters long. The first character denotes the rank and belongs to the set \\{{\\tt 2}, {\\tt 3}, {\\tt 4}, {\\tt 5}, {\\tt 6}, {\\tt 7}, {\\tt 8}, {\\tt 9}, {\\tt T}, {\\tt J}, {\\tt Q}, {\\tt K}, {\\tt A}\\}. The second character denotes the suit and belongs to the set \\{{\\tt D}, {\\tt C}, {\\tt S}, {\\tt H}\\}.\n\nAll the cards in the input are different.", "grammar": {"productions": ["<S>-><R> <T> <n> <R> <T> <s> <R> <T> <s> <R> <T> <s> <R> <T> <s> <R> <T>", "<R>->2|3|4|5|6|7|8|9|T|J|Q|K|A", "<T>->D|C|S|H"], "constraints": []}}
{"name": "1359_C. Mixing Water", "description": "There are two infinite sources of water:\n\n  * hot water of temperature h; \n  * cold water of temperature c (c < h). \n\n\n\nYou perform the following procedure of alternating moves:\n\n  1. take one cup of the hot water and pour it into an infinitely deep barrel; \n  2. take one cup of the cold water and pour it into an infinitely deep barrel; \n  3. take one cup of the hot water ... \n  4. and so on ... \n\n\n\nNote that you always start with the cup of hot water.\n\nThe barrel is initially empty. You have to pour at least one cup into the barrel. The water temperature in the barrel is an average of the temperatures of the poured cups.\n\nYou want to achieve a temperature as close as possible to t. So if the temperature in the barrel is t_b, then the absolute difference of t_b and t (|t_b - t|) should be as small as possible.\n\nHow many cups should you pour into the barrel, so that the temperature in it is as close as possible to t? If there are multiple answers with the minimum absolute difference, then print the smallest of them.\n\nInput\n\nThe first line contains a single integer T (1 \u2264 T \u2264 3 \u22c5 10^4) \u2014 the number of testcases.\n\nEach of the next T lines contains three integers h, c and t (1 \u2264 c < h \u2264 10^6; c \u2264 t \u2264 h) \u2014 the temperature of the hot water, the temperature of the cold water and the desired temperature in the barrel.", "grammar": {"productions": ["<S>->[T] <n> <T_T>", "<T_i>-><T_i-1> <n> h <s> c <s> t", "<T_1>->h <s> c <s> t"], "constraints": ["1<=T<=3*10^4", "1<=c<h<=10^6", "c<=t<=h"]}}
{"name": "p03834 AtCoder Beginner Contest 051 - Haiku", "description": "As a New Year's gift, Dolphin received a string s of length 19.\nThe string s has the following format: `[five lowercase English letters],[seven lowercase English letters],[five lowercase English letters]`.\nDolphin wants to convert the comma-separated string s into a space-separated string.\nWrite a program to perform the conversion for him.\n\nConstraints\n\n* The length of s is 19.\n* The sixth and fourteenth characters in s are `,`.\n* The other characters in s are lowercase English letters.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\ns", "grammar": {"productions": ["<S>->[a-z]{5} , [a-z]{6} , [a-z]{5}"], "constraints": []}}
{"name": "p02996 AtCoder Beginner Contest 131 - Megalomania", "description": "Kizahashi, who was appointed as the administrator of ABC at National Problem Workshop in the Kingdom of AtCoder, got too excited and took on too many jobs.\n\nLet the current time be time 0. Kizahashi has N jobs numbered 1 to N.\n\nIt takes A_i units of time for Kizahashi to complete Job i. The deadline for Job i is time B_i, and he must complete the job before or at this time.\n\nKizahashi cannot work on two or more jobs simultaneously, but when he completes a job, he can start working on another immediately.\n\nCan Kizahashi complete all the jobs in time? If he can, print `Yes`; if he cannot, print `No`.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 2 \\times 10^5\n* 1 \\leq A_i, B_i \\leq 10^9 (1 \\leq i \\leq N)\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 B_1\n.\n.\n.\nA_N B_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> A_i <s> B_i", "<T_1>->A_1 <s> B_1"], "constraints": ["1<=N<=2*10^5", "1<=A_i,B_i<=10^9"]}}
{"name": "1029_A. Many Equal Substrings", "description": "You are given a string t consisting of n lowercase Latin letters and an integer number k.\n\nLet's define a substring of some string s with indices from l to r as s[l ... r].\n\nYour task is to construct such string s of minimum possible length that there are exactly k positions i such that s[i ... i + n - 1] = t. In other words, your task is to construct such string s of minimum possible length that there are exactly k substrings of s equal to t.\n\nIt is guaranteed that the answer is always unique.\n\nInput\n\nThe first line of the input contains two integers n and k (1 \u2264 n, k \u2264 50) \u2014 the length of the string t and the number of substrings.\n\nThe second line of the input contains the string t consisting of exactly n lowercase Latin letters.", "grammar": {"productions": ["<S>->[n] <s> k <n> [a-z]{n}"], "constraints": ["1<=n<=50", "1<=k<=50"]}}
{"name": "1421_A. XORwice", "description": "In order to celebrate Twice's 5th anniversary, Tzuyu and Sana decided to play a game.\n\nTzuyu gave Sana two integers a and b and a really important quest.\n\nIn order to complete the quest, Sana has to output the smallest possible value of (a \u2295 x) + (b \u2295 x) for any given x, where \u2295 denotes the [bitwise XOR operation](http://en.wikipedia.org/wiki/Bitwise_operation#XOR). \n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 10^{4}). Description of the test cases follows.\n\nThe only line of each test case contains two integers a and b (1 \u2264 a, b \u2264 10^{9}).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> a <s> b", "<T_1>->a <s> b"], "constraints": ["1<=t<=10^4", "1<=a<=10^9", "1<=b<=10^9"]}}
{"name": "144_A. Arrival of the General", "description": "A Ministry for Defense sent a general to inspect the Super Secret Military Squad under the command of the Colonel SuperDuper. Having learned the news, the colonel ordered to all n squad soldiers to line up on the parade ground.\n\nBy the military charter the soldiers should stand in the order of non-increasing of their height. But as there's virtually no time to do that, the soldiers lined up in the arbitrary order. However, the general is rather short-sighted and he thinks that the soldiers lined up correctly if the first soldier in the line has the maximum height and the last soldier has the minimum height. Please note that the way other solders are positioned does not matter, including the case when there are several soldiers whose height is maximum or minimum. Only the heights of the first and the last soldier are important.\n\nFor example, the general considers the sequence of heights (4, 3, 4, 2, 1, 1) correct and the sequence (4, 3, 1, 2, 2) wrong.\n\nWithin one second the colonel can swap any two neighboring soldiers. Help him count the minimum time needed to form a line-up which the general will consider correct.\n\nInput\n\nThe first input line contains the only integer n (2 \u2264 n \u2264 100) which represents the number of soldiers in the line. The second line contains integers a1, a2, ..., an (1 \u2264 ai \u2264 100) the values of the soldiers' heights in the order of soldiers' heights' increasing in the order from the beginning of the line to its end. The numbers are space-separated. Numbers a1, a2, ..., an are not necessarily different.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["2<=n<=100", "1<=a_i<=100", "a_i!=a_j"]}}
{"name": "1428_A. Box is Pull", "description": "Wabbit is trying to move a box containing food for the rest of the zoo in the coordinate plane from the point (x_1,y_1) to the point (x_2,y_2).\n\nHe has a rope, which he can use to pull the box. He can only pull the box if he stands exactly 1 unit away from the box in the direction of one of two coordinate axes. He will pull the box to where he is standing before moving out of the way in the same direction by 1 unit. \n\n<image>\n\nFor example, if the box is at the point (1,2) and Wabbit is standing at the point (2,2), he can pull the box right by 1 unit, with the box ending up at the point (2,2) and Wabbit ending at the point (3,2).\n\nAlso, Wabbit can move 1 unit to the right, left, up, or down without pulling the box. In this case, it is not necessary for him to be in exactly 1 unit away from the box. If he wants to pull the box again, he must return to a point next to the box. Also, Wabbit can't move to the point where the box is located.\n\nWabbit can start at any point. It takes 1 second to travel 1 unit right, left, up, or down, regardless of whether he pulls the box while moving.\n\nDetermine the minimum amount of time he needs to move the box from (x_1,y_1) to (x_2,y_2). Note that the point where Wabbit ends up at does not matter.\n\nInput\n\nEach test contains multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 1000): the number of test cases. The description of the test cases follows.\n\nEach of the next t lines contains four space-separated integers x_1, y_1, x_2, y_2 (1 \u2264 x_1, y_1, x_2, y_2 \u2264 10^9), describing the next test case.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> x1 <s> y1 <s> x2 <s> y2", "<T_1>->x1 <s> y1 <s> x2 <s> y2"], "constraints": ["1<=t<=1000", "1<=x1,y1,x2,y2<=10^9"]}}
{"name": "1064_A. Make a triangle!", "description": "Masha has three sticks of length a, b and c centimeters respectively. In one minute Masha can pick one arbitrary stick and increase its length by one centimeter. She is not allowed to break sticks.\n\nWhat is the minimum number of minutes she needs to spend increasing the stick's length in order to be able to assemble a triangle of positive area. Sticks should be used as triangle's sides (one stick for one side) and their endpoints should be located at triangle's vertices.\n\nInput\n\nThe only line contains tree integers a, b and c (1 \u2264 a, b, c \u2264 100) \u2014 the lengths of sticks Masha possesses.", "grammar": {"productions": ["<S>->a <s> b <s> c"], "constraints": ["1<=a<=100", "1<=b<=100", "1<=c<=100"]}}
{"name": "p02669 AtCoder Grand Contest 044 - Pay to Win", "description": "You start with the number 0 and you want to reach the number N.\n\nYou can change the number, paying a certain amount of coins, with the following operations:\n\n* Multiply the number by 2, paying A coins.\n* Multiply the number by 3, paying B coins.\n* Multiply the number by 5, paying C coins.\n* Increase or decrease the number by 1, paying D coins.\n\n\n\nYou can perform these operations in arbitrary order and an arbitrary number of times.\n\nWhat is the minimum number of coins you need to reach N?\n\nYou have to solve T testcases.\n\nConstraints\n\n* 1 \\le T \\le 10\n* 1 \\le N \\le 10^{18}\n* 1 \\le A, B, C, D \\le 10^9\n* All numbers N, A, B, C, D are integers.\n\nInput\n\nThe input is given from Standard Input. The first line of the input is\n\n\nT\n\n\nThen, T lines follow describing the T testcases. Each of the T lines has the format\n\n\nN A B C D", "grammar": {"productions": ["<S>->[T] <n> <T_T>", "<T_i>-><T_i-1> <n> N <s> A <s> B <s> C <s> D", "<T_1>->N <s> A <s> B <s> C <s> D"], "constraints": ["1<=T<=10", "1<=N<=10^18", "1<=A<=10^9", "1<=B<=10^9", "1<=C<=10^9", "1<=D<=10^9"]}}
{"name": "1392_A. Omkar and Password", "description": "Lord Omkar has permitted you to enter the Holy Church of Omkar! To test your worthiness, Omkar gives you a password which you must interpret!\n\nA password is an array a of n positive integers. You apply the following operation to the array: pick any two adjacent numbers that are not equal to each other and replace them with their sum. Formally, choose an index i such that 1 \u2264 i < n and a_{i} \u2260 a_{i+1}, delete both a_i and a_{i+1} from the array and put a_{i}+a_{i+1} in their place. \n\nFor example, for array [7, 4, 3, 7] you can choose i = 2 and the array will become [7, 4+3, 7] = [7, 7, 7]. Note that in this array you can't apply this operation anymore.\n\nNotice that one operation will decrease the size of the password by 1. What is the shortest possible length of the password after some number (possibly 0) of operations?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains an integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the length of the password.\n\nThe second line of each test case contains n integers a_{1},a_{2},...,a_{n} (1 \u2264 a_{i} \u2264 10^9) \u2014 the initial contents of your password.\n\nThe sum of n over all test cases will not exceed 2 \u22c5 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> a_1", "<L_1>->a_1"], "constraints": ["1<=t<=100", "1<=n<=2*10^5", "1<=a_i<=10^9"]}}
{"name": "p02782 AtCoder Beginner Contest 154 - Many Many Paths", "description": "Snuke is standing on a two-dimensional plane. In one operation, he can move by 1 in the positive x-direction, or move by 1 in the positive y-direction.\n\nLet us define a function f(r, c) as follows:\n\n* f(r,c) :=  (The number of paths from the point (0, 0) to the point (r, c) that Snuke can trace by repeating the operation above)\n\n\n\nGiven are integers r_1, r_2, c_1, and c_2. Find the sum of f(i, j) over all pair of integers (i, j) such that r_1 \u2264 i \u2264 r_2 and c_1 \u2264 j \u2264 c_2, and compute this value modulo (10^9+7).\n\nConstraints\n\n* 1 \u2264 r_1 \u2264 r_2 \u2264 10^6\n* 1 \u2264 c_1 \u2264 c_2 \u2264 10^6\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nr_1 c_1 r_2 c_2", "grammar": {"productions": ["<S>->r1 <s> c1 <s> r2 <s> c2"], "constraints": ["1<=r1<=r2<=10^6", "1<=c1<=c2<=10^6"]}}
{"name": "1399_C. Boats Competition", "description": "There are n people who want to participate in a boat competition. The weight of the i-th participant is w_i. Only teams consisting of two people can participate in this competition. As an organizer, you think that it's fair to allow only teams with the same total weight.\n\nSo, if there are k teams (a_1, b_1), (a_2, b_2), ..., (a_k, b_k), where a_i is the weight of the first participant of the i-th team and b_i is the weight of the second participant of the i-th team, then the condition a_1 + b_1 = a_2 + b_2 = ... = a_k + b_k = s, where s is the total weight of each team, should be satisfied.\n\nYour task is to choose such s that the number of teams people can create is the maximum possible. Note that each participant can be in no more than one team.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (1 \u2264 n \u2264 50) \u2014 the number of participants. The second line of the test case contains n integers w_1, w_2, ..., w_n (1 \u2264 w_i \u2264 n), where w_i is the weight of the i-th participant.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> w_i", "<L_1>->w_1"], "constraints": ["1<=t<=1000", "1<=n<=50", "1<=w_i<=n"]}}
{"name": "1148_A. Another One Bites The Dust", "description": "Let's call a string good if and only if it consists of only two types of letters \u2014 'a' and 'b' and every two consecutive letters are distinct. For example \"baba\" and \"aba\" are good strings and \"abb\" is a bad string.\n\nYou have a strings \"a\", b strings \"b\" and c strings \"ab\". You want to choose some subset of these strings and concatenate them in any arbitrarily order.\n\nWhat is the length of the longest good string you can obtain this way?\n\nInput\n\nThe first line contains three positive integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of strings \"a\", \"b\" and \"ab\" respectively.", "grammar": {"productions": ["<S>->a <s> b <s> c"], "constraints": ["1<=a<=10^9", "1<=b<=10^9", "1<=c<=10^9"]}}
{"name": "450_B. Jzzhu and Sequences", "description": "Jzzhu has invented a kind of sequences, they meet the following property:\n\n<image>\n\nYou are given x and y, please calculate fn modulo 1000000007 (10^9 + 7).\n\nInput\n\nThe first line contains two integers x and y (|x|, |y| \u2264 10^9). The second line contains a single integer n (1 \u2264 n \u2264 2\u00b7109).", "grammar": {"productions": ["<S>->x <s> y <n> n"], "constraints": ["-10^9<=x,y<=10^9", "1<=n<=2*10^9"]}}
{"name": "p02946 AtCoder Beginner Contest 137 - One Clue", "description": "There are 2000001 stones placed on a number line. The coordinates of these stones are -1000000, -999999, -999998, \\ldots, 999999, 1000000.\n\nAmong them, some K consecutive stones are painted black, and the others are painted white.\n\nAdditionally, we know that the stone at coordinate X is painted black.\n\nPrint all coordinates that potentially contain a stone painted black, in ascending order.\n\nConstraints\n\n* 1 \\leq K \\leq 100\n* 0 \\leq X \\leq 100\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nK X", "grammar": {"productions": ["<S>->K <s> X"], "constraints": ["1<=K<=100", "0<=X<=100"]}}
{"name": "p02911 AtCoder Beginner Contest 141 - Attack Survival", "description": "Takahashi has decided to hold fastest-finger-fast quiz games. Kizahashi, who is in charge of making the scoreboard, is struggling to write the program that manages the players' scores in a game, which proceeds as follows.\n\nA game is played by N players, numbered 1 to N. At the beginning of a game, each player has K points.\n\nWhen a player correctly answers a question, each of the other N-1 players receives minus one (-1) point. There is no other factor that affects the players' scores.\n\nAt the end of a game, the players with 0 points or lower are eliminated, and the remaining players survive.\n\nIn the last game, the players gave a total of Q correct answers, the i-th of which was given by Player A_i. For Kizahashi, write a program that determines whether each of the N players survived this game.\n\nConstraints\n\n* All values in input are integers.\n* 2 \\leq N \\leq 10^5\n* 1 \\leq K \\leq 10^9\n* 1 \\leq Q \\leq 10^5\n* 1 \\leq A_i \\leq N\\ (1 \\leq i \\leq Q)\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K Q\nA_1\nA_2\n.\n.\n.\nA_Q", "grammar": {"productions": ["<S>->N <s> K <s> [Q] <n> <T_Q>", "<T_i>-><T_i-1> <n> A_i", "<T_1>->A_1"], "constraints": ["2<=N<=10^5", "1<=K<=10^9", "1<=Q<=10^5", "1<=A_i<=N"]}}
{"name": "1201_B. Zero Array", "description": "You are given an array a_1, a_2, \u2026, a_n.\n\nIn one operation you can choose two elements a_i and a_j (i \u2260 j) and decrease each of them by one.\n\nYou need to check whether it is possible to make all the elements equal to zero or not.\n\nInput\n\nThe first line contains a single integer n (2 \u2264 n \u2264 10^5) \u2014 the size of the array.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^9) \u2014 the elements of the array.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["2<=n<=10^5", "1<=a_i<=10^9", "i!=j"]}}
{"name": "p04031 AtCoder Beginner Contest 043 - Be Together", "description": "Evi has N integers a_1,a_2,..,a_N. His objective is to have N equal integers by transforming some of them.\n\nHe may transform each integer at most once. Transforming an integer x into another integer y costs him (x-y)^2 dollars. Even if a_i=a_j (i\u2260j), he has to pay the cost separately for transforming each of them (See Sample 2).\n\nFind the minimum total cost to achieve his objective.\n\nConstraints\n\n* 1\u2266N\u2266100\n* -100\u2266a_i\u2266100\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN\na_1 a_2 ... a_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=N<=100", "-100<=a_i<=100"]}}
{"name": "732_A. Buy a Shovel", "description": "Polycarp urgently needs a shovel! He comes to the shop and chooses an appropriate one. The shovel that Policarp chooses is sold for k burles. Assume that there is an unlimited number of such shovels in the shop.\n\nIn his pocket Polycarp has an unlimited number of \"10-burle coins\" and exactly one coin of r burles (1 \u2264 r \u2264 9).\n\nWhat is the minimum number of shovels Polycarp has to buy so that he can pay for the purchase without any change? It is obvious that he can pay for 10 shovels without any change (by paying the requied amount of 10-burle coins and not using the coin of r burles). But perhaps he can buy fewer shovels and pay without any change. Note that Polycarp should buy at least one shovel.\n\nInput\n\nThe single line of input contains two integers k and r (1 \u2264 k \u2264 1000, 1 \u2264 r \u2264 9) \u2014 the price of one shovel and the denomination of the coin in Polycarp's pocket that is different from \"10-burle coins\". \n\nRemember that he has an unlimited number of coins in the denomination of 10, that is, Polycarp has enough money to buy any number of shovels.", "grammar": {"productions": ["<S>->k <s> r"], "constraints": ["1<=k<=1000", "1<=r<=9"]}}
{"name": "841_A. Generous Kefa", "description": "One day Kefa found n baloons. For convenience, we denote color of i-th baloon as si \u2014 lowercase letter of the Latin alphabet. Also Kefa has k friends. Friend will be upset, If he get two baloons of the same color. Kefa want to give out all baloons to his friends. Help Kefa to find out, can he give out all his baloons, such that no one of his friens will be upset \u2014 print \u00abYES\u00bb, if he can, and \u00abNO\u00bb, otherwise. Note, that Kefa's friend will not upset, if he doesn't get baloons at all.\n\nInput\n\nThe first line contains two integers n and k (1 \u2264 n, k \u2264 100) \u2014 the number of baloons and friends.\n\nNext line contains string s \u2014 colors of baloons.", "grammar": {"productions": ["<S>->[n] <s> k <n> [a-z]{n}"], "constraints": ["1<=n<=100", "1<=k<=100"]}}
{"name": "6_A. Triangle", "description": "Johnny has a younger sister Anne, who is very clever and smart. As she came home from the kindergarten, she told his brother about the task that her kindergartener asked her to solve. The task was just to construct a triangle out of four sticks of different colours. Naturally, one of the sticks is extra. It is not allowed to break the sticks or use their partial length. Anne has perfectly solved this task, now she is asking Johnny to do the same.\n\nThe boy answered that he would cope with it without any difficulty. However, after a while he found out that different tricky things can occur. It can happen that it is impossible to construct a triangle of a positive area, but it is possible to construct a degenerate triangle. It can be so, that it is impossible to construct a degenerate triangle even. As Johnny is very lazy, he does not want to consider such a big amount of cases, he asks you to help him.\n\nInput\n\nThe first line of the input contains four space-separated positive integer numbers not exceeding 100 \u2014 lengthes of the sticks.", "grammar": {"productions": ["<S>->a <s> b <s> c <s> d"], "constraints": ["1<=a<=100", "1<=b<=100", "1<=c<=100", "1<=d<=100"]}}
{"name": "282_A. Bit++", "description": "The classic programming language of Bitland is Bit++. This language is so peculiar and complicated.\n\nThe language is that peculiar as it has exactly one variable, called x. Also, there are two operations:\n\n  * Operation ++ increases the value of variable x by 1. \n  * Operation -- decreases the value of variable x by 1. \n\n\n\nA statement in language Bit++ is a sequence, consisting of exactly one operation and one variable x. The statement is written without spaces, that is, it can only contain characters \"+\", \"-\", \"X\". Executing a statement means applying the operation it contains.\n\nA programme in Bit++ is a sequence of statements, each of them needs to be executed. Executing a programme means executing all the statements it contains.\n\nYou're given a programme in language Bit++. The initial value of x is 0. Execute the programme and find its final value (the value of the variable when this programme is executed).\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 150) \u2014 the number of statements in the programme.\n\nNext n lines contain a statement each. Each statement contains exactly one operation (++ or --) and exactly one variable x (denoted as letter \u00abX\u00bb). Thus, there are no empty statements. The operation and the variable can be written in any order.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> <C>", "<T_1>-><C>", "<C>->++X|--X|X++|X--"], "constraints": ["1<=n<=150"]}}
{"name": "727_A. Transformation: from A to B", "description": "Vasily has a number a, which he wants to turn into a number b. For this purpose, he can do two types of operations:\n\n  * multiply the current number by 2 (that is, replace the number x by 2\u00b7x); \n  * append the digit 1 to the right of current number (that is, replace the number x by 10\u00b7x + 1). \n\n\n\nYou need to help Vasily to transform the number a into the number b using only the operations described above, or find that it is impossible.\n\nNote that in this task you are not required to minimize the number of operations. It suffices to find any way to transform a into b.\n\nInput\n\nThe first line contains two positive integers a and b (1 \u2264 a < b \u2264 10^9) \u2014 the number which Vasily has and the number he wants to have.", "grammar": {"productions": ["<S>->a <s> b"], "constraints": ["1<=a<b<=10^9"]}}
{"name": "p02394 Circle in a Rectangle", "description": "Write a program which reads a rectangle and a circle, and determines whether the circle is arranged inside the rectangle. As shown in the following figures, the upper right coordinate $(W, H)$ of the rectangle and the central coordinate $(x, y)$ and radius $r$ of the circle are given.\n\n\nCircle inside a rectangle\n\n\nConstraints\n\n* $ -100 \\leq x, y \\leq 100$\n* $ 0 < W, H, r \\leq 100$\n\nInput\n\nFive integers $W$, $H$, $x$, $y$ and $r$ separated by a single space are given in a line.", "grammar": {"productions": ["<S>->x <s> y <s> W <s> H <s> r"], "constraints": ["-100<=x<=100", "-100<=y<=100", "0<W<=100", "0<H<=100", "0<r<=100"]}}
{"name": "1200_B. Block Adventure", "description": "Gildong is playing a video game called Block Adventure. In Block Adventure, there are n columns of blocks in a row, and the columns are numbered from 1 to n. All blocks have equal heights. The height of the i-th column is represented as h_i, which is the number of blocks stacked in the i-th column.\n\nGildong plays the game as a character that can stand only on the top of the columns. At the beginning, the character is standing on the top of the 1-st column. The goal of the game is to move the character to the top of the n-th column.\n\nThe character also has a bag that can hold infinitely many blocks. When the character is on the top of the i-th column, Gildong can take one of the following three actions as many times as he wants: \n\n  * if there is at least one block on the column, remove one block from the top of the i-th column and put it in the bag; \n  * if there is at least one block in the bag, take one block out of the bag and place it on the top of the i-th column; \n  * if i < n and |h_i - h_{i+1}| \u2264 k, move the character to the top of the i+1-st column. k is a non-negative integer given at the beginning of the game. Note that it is only possible to move to the next column. \n\n\n\nIn actions of the first two types the character remains in the i-th column, and the value h_i changes.\n\nThe character initially has m blocks in the bag. Gildong wants to know if it is possible to win the game. Help Gildong find the answer to his question.\n\nInput\n\nEach test contains one or more test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000). Description of the test cases follows.\n\nThe first line of each test case contains three integers n, m, and k (1 \u2264 n \u2264 100, 0 \u2264 m \u2264 10^6, 0 \u2264 k \u2264 10^6) \u2014 the number of columns in the game, the number of blocks in the character's bag at the beginning, and the non-negative integer k described in the statement.\n\nThe second line of each test case contains n integers. The i-th integer is h_i (0 \u2264 h_i \u2264 10^6), the initial height of the i-th column.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <s> m <s> k <n> <L_n>", "<T_1>->[n] <s> m <s> k <n> <L_n>", "<L_i>-><L_i-1> <s> h_i", "<L_1>->h_1"], "constraints": ["1<=t<=1000", "1<=n<=100", "0<=m<=10^6", "0<=k<=10^6", "0<=h_i<=10^6"]}}
{"name": "p03048 diverta 2019 Programming Contest - RGB Boxes", "description": "Snuke has come to a store that sells boxes containing balls. The store sells the following three kinds of boxes:\n\n* Red boxes, each containing R red balls\n* Green boxes, each containing G green balls\n* Blue boxes, each containing B blue balls\n\n\n\nSnuke wants to get a total of exactly N balls by buying r red boxes, g green boxes and b blue boxes. How many triples of non-negative integers (r,g,b) achieve this?\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq R,G,B,N \\leq 3000\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nR G B N", "grammar": {"productions": ["<S>->R <s> G <s> B <s> N"], "constraints": ["1<=R,G,B,N<=3000"]}}
{"name": "1138_A. Sushi for Two", "description": "Arkady invited Anna for a dinner to a sushi restaurant. The restaurant is a bit unusual: it offers n pieces of sushi aligned in a row, and a customer has to choose a continuous subsegment of these sushi to buy.\n\nThe pieces of sushi are of two types: either with tuna or with eel. Let's denote the type of the i-th from the left sushi as t_i, where t_i = 1 means it is with tuna, and t_i = 2 means it is with eel.\n\nArkady does not like tuna, Anna does not like eel. Arkady wants to choose such a continuous subsegment of sushi that it has equal number of sushi of each type and each half of the subsegment has only sushi of one type. For example, subsegment [2, 2, 2, 1, 1, 1] is valid, but subsegment [1, 2, 1, 2, 1, 2] is not, because both halves contain both types of sushi.\n\nFind the length of the longest continuous subsegment of sushi Arkady can buy.\n\nInput\n\nThe first line contains a single integer n (2 \u2264 n \u2264 100 000) \u2014 the number of pieces of sushi.\n\nThe second line contains n integers t_1, t_2, ..., t_n (t_i = 1, denoting a sushi with tuna or t_i = 2, denoting a sushi with eel), representing the types of sushi from left to right.\n\nIt is guaranteed that there is at least one piece of sushi of each type. Note that it means that there is at least one valid continuous segment.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> t_i", "<T_1>->t_1"], "constraints": ["2<=n<=100000", "1<=t_i<=2"]}}
{"name": "1291_A. Even But Not Even", "description": "Let's define a number ebne (even but not even) if and only if its sum of digits is divisible by 2 but the number itself is not divisible by 2. For example, 13, 1227, 185217 are ebne numbers, while 12, 2, 177013, 265918 are not. If you're still unsure what ebne numbers are, you can look at the sample notes for more clarification.\n\nYou are given a non-negative integer s, consisting of n digits. You can delete some digits (they are not necessary consecutive/successive) to make the given number ebne. You cannot change the order of the digits, that is, after deleting the digits the remaining digits collapse. The resulting number shouldn't contain leading zeros. You can delete any number of digits between 0 (do not delete any digits at all) and n-1.\n\nFor example, if you are given s=222373204424185217171912 then one of possible ways to make it ebne is: 222373204424185217171912 \u2192 2237344218521717191. The sum of digits of 2237344218521717191 is equal to 70 and is divisible by 2, but number itself is not divisible by 2: it means that the resulting number is ebne.\n\nFind any resulting number that is ebne. If it's impossible to create an ebne number from the given number report about it.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 3000) \u2014 the number of digits in the original number.\n\nThe second line of each test case contains a non-negative integer number s, consisting of n digits.\n\nIt is guaranteed that s does not contain leading zeros and the sum of n over all test cases does not exceed 3000.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> [0-9]{n}", "<T_1>->[n] <n> [0-9]{n}"], "constraints": ["1<=t<=1000", "1<=n<=3000"]}}
{"name": "219_A. k-String", "description": "A string is called a k-string if it can be represented as k concatenated copies of some string. For example, the string \"aabaabaabaab\" is at the same time a 1-string, a 2-string and a 4-string, but it is not a 3-string, a 5-string, or a 6-string and so on. Obviously any string is a 1-string.\n\nYou are given a string s, consisting of lowercase English letters and a positive integer k. Your task is to reorder the letters in the string s in such a way that the resulting string is a k-string.\n\nInput\n\nThe first input line contains integer k (1 \u2264 k \u2264 1000). The second line contains s, all characters in s are lowercase English letters. The string length s satisfies the inequality 1 \u2264 |s| \u2264 1000, where |s| is the length of string s.", "grammar": {"productions": ["<S>->[k] <n> [a-z]{1,1000}"], "constraints": ["1<=k<=1000"]}}
{"name": "p03480 AtCoder Beginner Contest 083 - Wide Flip", "description": "You are given a string S consisting of `0` and `1`. Find the maximum integer K not greater than |S| such that we can turn all the characters of S into `0` by repeating the following operation some number of times.\n\n* Choose a contiguous segment [l,r] in S whose length is at least K (that is, r-l+1\\geq K must be satisfied). For each integer i such that l\\leq i\\leq r, do the following: if S_i is `0`, replace it with `1`; if S_i is `1`, replace it with `0`.\n\nConstraints\n\n* 1\\leq |S|\\leq 10^5\n* S_i(1\\leq i\\leq N) is either `0` or `1`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>->[01]{1,10^5}"], "constraints": []}}
{"name": "p02630 AtCoder Beginner Contest 171 - Replacing", "description": "You have a sequence A composed of N positive integers: A_{1}, A_{2}, \\cdots, A_{N}.\n\nYou will now successively do the following Q operations:\n\n* In the i-th operation, you replace every element whose value is B_{i} with C_{i}.\n\n\n\nFor each i (1 \\leq i \\leq Q), find S_{i}: the sum of all elements in A just after the i-th operation.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N, Q, A_{i}, B_{i}, C_{i} \\leq 10^{5}\n* B_{i} \\neq C_{i}\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_{1} A_{2} \\cdots A_{N}\nQ\nB_{1} C_{1}\nB_{2} C_{2}\n\\vdots\nB_{Q} C_{Q}", "grammar": {"productions": ["<S>->[N] <n> <T_N> <n> [Q] <n> <L_Q>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1", "<L_i>-><L_i-1> <n> B_i <s> C_i", "<L_1>->B_1 <s> C_1"], "constraints": ["1<=N,Q,A_i,B_i,C_i<=10^5", "B_i!=C_i"]}}
{"name": "p03959 CODE FESTIVAL 2016 qual C - Two Alpinists", "description": "Mountaineers Mr. Takahashi and Mr. Aoki recently trekked across a certain famous mountain range. The mountain range consists of N mountains, extending from west to east in a straight line as Mt. 1, Mt. 2, ..., Mt. N. Mr. Takahashi traversed the range from the west and Mr. Aoki from the east.\n\nThe height of Mt. i is h_i, but they have forgotten the value of each h_i. Instead, for each i (1 \u2264 i \u2264 N), they recorded the maximum height of the mountains climbed up to the time they reached the peak of Mt. i (including Mt. i). Mr. Takahashi's record is T_i and Mr. Aoki's record is A_i.\n\nWe know that the height of each mountain h_i is a positive integer. Compute the number of the possible sequences of the mountains' heights, modulo 10^9 + 7.\n\nNote that the records may be incorrect and thus there may be no possible sequence of the mountains' heights. In such a case, output 0.\n\nConstraints\n\n* 1 \u2264 N \u2264 10^5\n* 1 \u2264 T_i \u2264 10^9\n* 1 \u2264 A_i \u2264 10^9\n* T_i \u2264 T_{i+1} (1 \u2264 i \u2264 N - 1)\n* A_i \u2265 A_{i+1} (1 \u2264 i \u2264 N - 1)\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN\nT_1 T_2 ... T_N\nA_1 A_2 ... A_N", "grammar": {"productions": ["<S>->[N] <n> <T_N> <n> <L_N>", "<T_i>-><T_i-1> <s> T_i", "<T_1>->T_1", "<L_i>-><L_i-1> <s> A_i", "<L_1>->A_1"], "constraints": ["1<=N<=10^5", "1<=T_i<=10^9", "1<=A_i<=10^9", "T_i<=T_i+1", "A_i>=A_i+1"]}}
{"name": "1225_B1. TV Subscriptions (Easy Version)", "description": "The only difference between easy and hard versions is constraints.\n\nThe BerTV channel every day broadcasts one episode of one of the k TV shows. You know the schedule for the next n days: a sequence of integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 k), where a_i is the show, the episode of which will be shown in i-th day.\n\nThe subscription to the show is bought for the entire show (i.e. for all its episodes), for each show the subscription is bought separately.\n\nHow many minimum subscriptions do you need to buy in order to have the opportunity to watch episodes of purchased shows d (1 \u2264 d \u2264 n) days in a row? In other words, you want to buy the minimum number of TV shows so that there is some segment of d consecutive days in which all episodes belong to the purchased shows.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases in the input. Then t test case descriptions follow.\n\nThe first line of each test case contains three integers n, k and d (1 \u2264 n \u2264 100, 1 \u2264 k \u2264 100, 1 \u2264 d \u2264 n). The second line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 k), where a_i is the show that is broadcasted on the i-th day.\n\nIt is guaranteed that the sum of the values \u200b\u200bof n for all test cases in the input does not exceed 100.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <s> k <s> d <n> <L_n>", "<T_1>->[n] <s> k <s> d <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=100", "1<=k<=100", "1<=n<=100", "1<=d<=n", "1<=a_i<=k"]}}
{"name": "p02933 AtCoder Beginner Contest 138 - Red or Not", "description": "You will be given an integer a and a string s consisting of lowercase English letters as input.\n\nWrite a program that prints s if a is not less than 3200 and prints `red` if a is less than 3200.\n\nConstraints\n\n* 2800 \\leq a < 5000\n* s is a string of length between 1 and 10 (inclusive).\n* Each character of s is a lowercase English letter.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\na\ns", "grammar": {"productions": ["<S>->a <n> [a-z]{1,10}"], "constraints": ["2800<=a<=5000"]}}
{"name": "1430_A. Number of Apartments", "description": "Recently a new building with a new layout was constructed in Monocarp's hometown. According to this new layout, the building consists of three types of apartments: three-room, five-room, and seven-room apartments. It's also known that each room of each apartment has exactly one window. In other words, a three-room apartment has three windows, a five-room \u2014 five windows, and a seven-room \u2014 seven windows.\n\nMonocarp went around the building and counted n windows. Now he is wondering, how many apartments of each type the building may have.\n\nUnfortunately, Monocarp only recently has learned to count, so he is asking you to help him to calculate the possible quantities of three-room, five-room, and seven-room apartments in the building that has n windows. If there are multiple answers, you can print any of them.\n\nHere are some examples:\n\n  * if Monocarp has counted 30 windows, there could have been 2 three-room apartments, 2 five-room apartments and 2 seven-room apartments, since 2 \u22c5 3 + 2 \u22c5 5 + 2 \u22c5 7 = 30; \n  * if Monocarp has counted 67 windows, there could have been 7 three-room apartments, 5 five-room apartments and 3 seven-room apartments, since 7 \u22c5 3 + 5 \u22c5 5 + 3 \u22c5 7 = 67; \n  * if Monocarp has counted 4 windows, he should have mistaken since no building with the aforementioned layout can have 4 windows. \n\nInput\n\nTh first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe only line of each test case contains one integer n (1 \u2264 n \u2264 1000) \u2014 the number of windows in the building.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n", "<T_1>->n"], "constraints": ["1<=t<=1000", "1<=n<=1000"]}}
{"name": "1221_A. 2048 Game", "description": "You are playing a variation of game 2048. Initially you have a multiset s of n integers. Every integer in this multiset is a power of two. \n\nYou may perform any number (possibly, zero) operations with this multiset.\n\nDuring each operation you choose two equal integers from s, remove them from s and insert the number equal to their sum into s.\n\nFor example, if s = \\{1, 2, 1, 1, 4, 2, 2\\} and you choose integers 2 and 2, then the multiset becomes \\{1, 1, 1, 4, 4, 2\\}.\n\nYou win if the number 2048 belongs to your multiset. For example, if s = \\{1024, 512, 512, 4\\} you can win as follows: choose 512 and 512, your multiset turns into \\{1024, 1024, 4\\}. Then choose 1024 and 1024, your multiset turns into \\{2048, 4\\} and you win.\n\nYou have to determine if you can win this game.\n\nYou have to answer q independent queries.\n\nInput\n\nThe first line contains one integer q (1 \u2264 q \u2264 100) \u2013 the number of queries.\n\nThe first line of each query contains one integer n (1 \u2264 n \u2264 100) \u2014 the number of elements in multiset.\n\nThe second line of each query contains n integers s_1, s_2, ..., s_n (1 \u2264 s_i \u2264 2^{29}) \u2014 the description of the multiset. It is guaranteed that all elements of the multiset are powers of two.", "grammar": {"productions": ["<S>->[q] <n> <T_q>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> s_i", "<L_1>->s_1"], "constraints": ["1<=q<=100", "1<=n<=100", "1<=s_i<=2^29"]}}
{"name": "199_A. Hexadecimal's theorem", "description": "Recently, a chaotic virus Hexadecimal advanced a new theorem which will shake the Universe. She thinks that each Fibonacci number can be represented as sum of three not necessary different Fibonacci numbers.\n\nLet's remember how Fibonacci numbers can be calculated. F0 = 0, F1 = 1, and all the next numbers are Fi = Fi - 2 + Fi - 1.\n\nSo, Fibonacci numbers make a sequence of numbers: 0, 1, 1, 2, 3, 5, 8, 13, ...\n\nIf you haven't run away from the PC in fear, you have to help the virus. Your task is to divide given Fibonacci number n by three not necessary different Fibonacci numbers or say that it is impossible.\n\nInput\n\nThe input contains of a single integer n (0 \u2264 n < 10^9) \u2014 the number that should be represented by the rules described above. It is guaranteed that n is a Fibonacci number.", "grammar": {"productions": ["<S>->n"], "constraints": ["0<=n<10^9"]}}
{"name": "266_A. Stones on the Table", "description": "There are n stones on the table in a row, each of them can be red, green or blue. Count the minimum number of stones to take from the table so that any two neighboring stones had different colors. Stones in a row are considered neighboring if there are no other stones between them.\n\nInput\n\nThe first line contains integer n (1 \u2264 n \u2264 50) \u2014 the number of stones on the table. \n\nThe next line contains string s, which represents the colors of the stones. We'll consider the stones in the row numbered from 1 to n from left to right. Then the i-th character s equals \"R\", if the i-th stone is red, \"G\", if it's green and \"B\", if it's blue.", "grammar": {"productions": ["<S>->[N] <n> [RGB]{N}"], "constraints": ["1<=N<=50"]}}
{"name": "118_B. Present from Lena", "description": "Vasya's birthday is approaching and Lena decided to sew a patterned handkerchief to him as a present. Lena chose digits from 0 to n as the pattern. The digits will form a rhombus. The largest digit n should be located in the centre. The digits should decrease as they approach the edges. For example, for n = 5 the handkerchief pattern should look like that: \n    \n    \n      \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00  \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00\u00a01\u00a00  \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a00\u00a01\u00a02\u00a01\u00a00  \n    \u00a0\u00a0\u00a0\u00a00\u00a01\u00a02\u00a03\u00a02\u00a01\u00a00  \n    \u00a0\u00a00\u00a01\u00a02\u00a03\u00a04\u00a03\u00a02\u00a01\u00a00  \n    0\u00a01\u00a02\u00a03\u00a04\u00a05\u00a04\u00a03\u00a02\u00a01\u00a00  \n    \u00a0\u00a00\u00a01\u00a02\u00a03\u00a04\u00a03\u00a02\u00a01\u00a00  \n    \u00a0\u00a0\u00a0\u00a00\u00a01\u00a02\u00a03\u00a02\u00a01\u00a00  \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a00\u00a01\u00a02\u00a01\u00a00  \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00\u00a01\u00a00  \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00  \n    \n\nYour task is to determine the way the handkerchief will look like by the given n.\n\nInput\n\nThe first line contains the single integer n (2 \u2264 n \u2264 9).", "grammar": {"productions": ["<S>->n"], "constraints": ["2<=n<=9"]}}
{"name": "1355_D. Game With Array", "description": "Petya and Vasya are competing with each other in a new interesting game as they always do.\n\nAt the beginning of the game Petya has to come up with an array of N positive integers. Sum of all elements in his array should be equal to S. Then Petya has to select an integer K such that 0 \u2264 K \u2264 S.\n\nIn order to win, Vasya has to find a non-empty subarray in Petya's array such that the sum of all selected elements equals to either K or S - K. Otherwise Vasya loses.\n\nYou are given integers N and S. You should determine if Petya can win, considering Vasya plays optimally. If Petya can win, help him to do that.\n\nInput\n\nThe first line contains two integers N and S (1 \u2264 N \u2264 S \u2264 10^{6}) \u2014 the required length of the array and the required sum of its elements.", "grammar": {"productions": ["<S>->N <s> S"], "constraints": ["1<=N<=S<=10^6"]}}
{"name": "805_B. 3-palindrome", "description": "In the beginning of the new year Keivan decided to reverse his name. He doesn't like palindromes, so he changed Naviek to Navick.\n\nHe is too selfish, so for a given n he wants to obtain a string of n characters, each of which is either 'a', 'b' or 'c', with no palindromes of length 3 appearing in the string as a substring. For example, the strings \"abc\" and \"abca\" suit him, while the string \"aba\" doesn't. He also want the number of letters 'c' in his string to be as little as possible.\n\nInput\n\nThe first line contains single integer n (1 \u2264 n \u2264 2\u00b710^5) \u2014 the length of the string.", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<= 2*10^5"]}}
{"name": "768_A. Oath of the Night's Watch", "description": "\"Night gathers, and now my watch begins. It shall not end until my death. I shall take no wife, hold no lands, father no children. I shall wear no crowns and win no glory. I shall live and die at my post. I am the sword in the darkness. I am the watcher on the walls. I am the shield that guards the realms of men. I pledge my life and honor to the Night's Watch, for this night and all the nights to come.\" \u2014 The Night's Watch oath.\n\nWith that begins the watch of Jon Snow. He is assigned the task to support the stewards.\n\nThis time he has n stewards with him whom he has to provide support. Each steward has his own strength. Jon Snow likes to support a steward only if there exists at least one steward who has strength strictly less than him and at least one steward who has strength strictly greater than him.\n\nCan you find how many stewards will Jon support?\n\nInput\n\nFirst line consists of a single integer n (1 \u2264 n \u2264 10^5) \u2014 the number of stewards with Jon Snow.\n\nSecond line consists of n space separated integers a1, a2, ..., an (0 \u2264 ai \u2264 10^9) representing the values assigned to the stewards.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=10^5", "0<=a_i<=10^9"]}}
{"name": "837_A. Text Volume", "description": "You are given a text of single-space separated words, consisting of small and capital Latin letters.\n\nVolume of the word is number of capital letters in the word. Volume of the text is maximum volume of all words in the text.\n\nCalculate the volume of the given text.\n\nInput\n\nThe first line contains one integer number n (1 \u2264 n \u2264 200) \u2014 length of the text.\n\nThe second line contains text of single-space separated words s1, s2, ..., si, consisting only of small and capital Latin letters.", "grammar": {"productions": ["<S>->[n] <n> [a-zA-Z<s>]{n}"], "constraints": ["1<=n<=200"]}}
{"name": "1005_A. Tanya and Stairways", "description": "Little girl Tanya climbs the stairs inside a multi-storey building. Every time Tanya climbs a stairway, she starts counting steps from 1 to the number of steps in this stairway. She speaks every number aloud. For example, if she climbs two stairways, the first of which contains 3 steps, and the second contains 4 steps, she will pronounce the numbers 1, 2, 3, 1, 2, 3, 4.\n\nYou are given all the numbers pronounced by Tanya. How many stairways did she climb? Also, output the number of steps in each stairway.\n\nThe given sequence will be a valid sequence that Tanya could have pronounced when climbing one or more stairways.\n\nInput\n\nThe first line contains n (1 \u2264 n \u2264 1000) \u2014 the total number of numbers pronounced by Tanya.\n\nThe second line contains integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 1000) \u2014 all the numbers Tanya pronounced while climbing the stairs, in order from the first to the last pronounced number. Passing a stairway with x steps, she will pronounce the numbers 1, 2, ..., x in that order.\n\nThe given sequence will be a valid sequence that Tanya could have pronounced when climbing one or more stairways.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=1000", "1<=a_i<=1000"]}}
{"name": "p02743 Panasonic Programming Contest 2020 - Sqrt Inequality", "description": "Does \\sqrt{a} + \\sqrt{b} < \\sqrt{c} hold?\n\nConstraints\n\n* 1 \\leq a, b, c \\leq 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\na \\ b \\ c", "grammar": {"productions": ["<S>->a <s> b <s> c"], "constraints": ["1<=a<=10^9", "1<=b<=10^9", "1<=c<=10^9"]}}
{"name": "p03075 AtCoder Beginner Contest 123 - Five Antennas", "description": "In AtCoder city, there are five antennas standing in a straight line. They are called Antenna A, B, C, D and E from west to east, and their coordinates are a, b, c, d and e, respectively.\nTwo antennas can communicate directly if the distance between them is k or less, and they cannot if the distance is greater than k.\nDetermine if there exists a pair of antennas that cannot communicate directly.\nHere, assume that the distance between two antennas at coordinates p and q (p < q) is q - p.\n\nConstraints\n\n* a, b, c, d, e and k are integers between 0 and 123 (inclusive).\n* a < b < c < d < e\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\na\nb\nc\nd\ne\nk", "grammar": {"productions": ["<S>->a <n> b <n> c <n> d <n> e <n> k"], "constraints": ["0<=a,b,c,d,e,k<=123", "a<b<c<d<e"]}}
{"name": "1066_A. Vova and Train", "description": "Vova plans to go to the conference by train. Initially, the train is at the point 1 and the destination point of the path is the point L. The speed of the train is 1 length unit per minute (i.e. at the first minute the train is at the point 1, at the second minute \u2014 at the point 2 and so on).\n\nThere are lanterns on the path. They are placed at the points with coordinates divisible by v (i.e. the first lantern is at the point v, the second is at the point 2v and so on).\n\nThere is also exactly one standing train which occupies all the points from l to r inclusive.\n\nVova can see the lantern at the point p if p is divisible by v and there is no standing train at this position (p not\u2208 [l; r]). Thus, if the point with the lantern is one of the points covered by the standing train, Vova can't see this lantern.\n\nYour problem is to say the number of lanterns Vova will see during the path. Vova plans to go to t different conferences, so you should answer t independent queries.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of queries.\n\nThen t lines follow. The i-th line contains four integers L_i, v_i, l_i, r_i (1 \u2264 L, v \u2264 10^9, 1 \u2264 l \u2264 r \u2264 L) \u2014 destination point of the i-th path, the period of the lantern appearance and the segment occupied by the standing train.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> L <s> v <s> l <s> r", "<T_1>->L <s> v <s> l <s> r"], "constraints": ["1<=t<=10^4", "1<=L,v<=10^9", "1<=l<=r<=L"]}}
{"name": "p02702 AtCoder Beginner Contest 164 - Multiple of 2019", "description": "Given is a string S consisting of digits from `1` through `9`.\n\nFind the number of pairs of integers (i,j) (1 \u2264 i \u2264 j \u2264 |S|) that satisfy the following condition:\n\nCondition: In base ten, the i-th through j-th characters of S form an integer that is a multiple of 2019.\n\nConstraints\n\n* 1 \u2264 |S| \u2264 200000\n* S is a string consisting of digits from `1` through `9`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>->[1-9]{S}"], "constraints": ["1<=S<=200000"]}}
{"name": "1374_B. Multiply by 2, divide by 6", "description": "You are given an integer n. In one move, you can either multiply n by two or divide n by 6 (if it is divisible by 6 without the remainder).\n\nYour task is to find the minimum number of moves needed to obtain 1 from n or determine if it's impossible to do that.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 2 \u22c5 10^4) \u2014 the number of test cases. Then t test cases follow. \n\nThe only line of the test case contains one integer n (1 \u2264 n \u2264 10^9).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n", "<T_1>->n"], "constraints": ["1<=t<=2*10^4", "1<=n<=10^9"]}}
{"name": "p02408 Finding Missing Cards", "description": "Taro is going to play a card game. However, now he has only n cards, even though there should be 52 cards (he has no Jokers).\n\nThe 52 cards include 13 ranks of each of the four suits: spade, heart, club and diamond.\n\nNote\n\n\u89e3\u8aac\n\n\n\nInput\n\nIn the first line, the number of cards n (n \u2264 52) is given.\n\nIn the following n lines, data of the n cards are given. Each card is given by a pair of a character and an integer which represent its suit and rank respectively. A suit is represented by 'S', 'H', 'C' and 'D' for spades, hearts, clubs and diamonds respectively. A rank is represented by an integer from 1 to 13.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> [SHCD]{1} <s> a_i", "<T_1>->[SHCD]{1} <s> a_1"], "constraints": ["1<=n<=52", "1<=a_i<=13"]}}
{"name": "p03325 AtCoder Beginner Contest 100 - *3 or /2", "description": "As AtCoder Beginner Contest 100 is taking place, the office of AtCoder, Inc. is decorated with a sequence of length N, a = {a_1, a_2, a_3, ..., a_N}.\nSnuke, an employee, would like to play with this sequence.\n\nSpecifically, he would like to repeat the following operation as many times as possible:\n\n\nFor every i satisfying 1 \\leq i \\leq N, perform one of the following: \"divide a_i by 2\" and \"multiply a_i by 3\".\nHere, choosing \"multiply a_i by 3\" for every i is not allowed, and the value of a_i after the operation must be an integer.\n\n\nAt most how many operations can be performed?\n\nConstraints\n\n* N is an integer between 1 and 10 \\ 000 (inclusive).\n* a_i is an integer between 1 and 1 \\ 000 \\ 000 \\ 000 (inclusive).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 a_2 a_3 ... a_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=N<=10000", "1<=a_i<=10^9"]}}
{"name": "233_A. Perfect Permutation", "description": "A permutation is a sequence of integers p1, p2, ..., pn, consisting of n distinct positive integers, each of them doesn't exceed n. Let's denote the i-th element of permutation p as pi. We'll call number n the size of permutation p1, p2, ..., pn.\n\nNickolas adores permutations. He likes some permutations more than the others. He calls such permutations perfect. A perfect permutation is such permutation p that for any i (1 \u2264 i \u2264 n) (n is the permutation size) the following equations hold ppi = i and pi \u2260 i. Nickolas asks you to print any perfect permutation of size n for the given n.\n\nInput\n\nA single line contains a single integer n (1 \u2264 n \u2264 100) \u2014 the permutation size.", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=100"]}}
{"name": "272_A. Dima and Friends", "description": "Dima and his friends have been playing hide and seek at Dima's place all night. As a result, Dima's place got messy. In the morning they decided that they need to clean the place.\n\nTo decide who exactly would clean the apartment, the friends want to play a counting-out game. First, all the guys stand in a circle, and then each of them shows some number of fingers on one hand (one to five), and then the boys count in a circle, starting from Dima, the number of people, respective to the total number of fingers shown. The person on who the countdown stops will clean the apartment.\n\nFor example, if Dima and one of his friends played hide and seek, and 7 fingers were shown during the counting-out, then Dima would clean the place. If there were 2 or say, 8 fingers shown, then his friend would clean the place.\n\nDima knows how many fingers each of his friends will show during the counting-out. Now he is interested in the number of ways to show some number of fingers on one hand (one to five), so that he did not have to clean the place. Help Dima.\n\nInput\n\nThe first line contains integer n (1 \u2264 n \u2264 100) \u2014 the number of Dima's friends. Dima himself isn't considered to be his own friend. The second line contains n positive integers, not exceeding 5, representing, how many fingers the Dima's friends will show. \n\nThe numbers in the lines are separated by a single space.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=100", "1<=a_i<=5"]}}
{"name": "p03730 AtCoder Beginner Contest 060 - Choose Integers", "description": "We ask you to select some number of positive integers, and calculate the sum of them.\n\nIt is allowed to select as many integers as you like, and as large integers as you wish. You have to follow these, however: each selected integer needs to be a multiple of A, and you need to select at least one integer.\n\nYour objective is to make the sum congruent to C modulo B. Determine whether this is possible.\n\nIf the objective is achievable, print `YES`. Otherwise, print `NO`.\n\nConstraints\n\n* 1 \u2264 A \u2264 100\n* 1 \u2264 B \u2264 100\n* 0 \u2264 C < B\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B C", "grammar": {"productions": ["<S>->A <s> B <s> C"], "constraints": ["1<=A<=100", "1<=B<=100", "0<=C<B"]}}
{"name": "p03719 AtCoder Beginner Contest 061 - Between Two Integers", "description": "You are given three integers A, B and C. Determine whether C is not less than A and not greater than B.\n\nConstraints\n\n* -100\u2264A,B,C\u2264100\n* A, B and C are all integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B C", "grammar": {"productions": ["<S>->A <s> B <s> C"], "constraints": ["-100<=A<=100", "-100<=B<=100", "-100<=C<=100"]}}
{"name": "p03089 AtCoder Grand Contest 032 - Limited Insertion", "description": "Snuke has an empty sequence a.\n\nHe will perform N operations on this sequence.\n\nIn the i-th operation, he chooses an integer j satisfying 1 \\leq j \\leq i, and insert j at position j in a (the beginning is position 1).\n\nYou are given a sequence b of length N. Determine if it is possible that a is equal to b after N operations. If it is, show one possible sequence of operations that achieves it.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 100\n* 1 \\leq b_i \\leq N\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nb_1 \\dots b_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> b_i", "<T_1>->b_1"], "constraints": ["1<=N<=100", "1<=b_i<=N"]}}
{"name": "363_B. Fence", "description": "There is a fence in front of Polycarpus's home. The fence consists of n planks of the same width which go one after another from left to right. The height of the i-th plank is hi meters, distinct planks can have distinct heights.\n\n<image> Fence for n = 7 and h = [1, 2, 6, 1, 1, 7, 1]\n\nPolycarpus has bought a posh piano and is thinking about how to get it into the house. In order to carry out his plan, he needs to take exactly k consecutive planks from the fence. Higher planks are harder to tear off the fence, so Polycarpus wants to find such k consecutive planks that the sum of their heights is minimal possible.\n\nWrite the program that finds the indexes of k consecutive planks with minimal total height. Pay attention, the fence is not around Polycarpus's home, it is in front of home (in other words, the fence isn't cyclic).\n\nInput\n\nThe first line of the input contains integers n and k (1 \u2264 n \u2264 1.5\u00b710^5, 1 \u2264 k \u2264 n) \u2014 the number of planks in the fence and the width of the hole for the piano. The second line contains the sequence of integers h1, h2, ..., hn (1 \u2264 hi \u2264 100), where hi is the height of the i-th plank of the fence.", "grammar": {"productions": ["<S>->[n] <s> k <n> <T_n>", "<T_i>-><T_i-1> <s> h_i", "<T_1>->h_1"], "constraints": ["1<=n<=1.5*10^5", "1<=k<=n", "1<=h_i<=100"]}}
{"name": "546_A. Soldier and Bananas", "description": "A soldier wants to buy w bananas in the shop. He has to pay k dollars for the first banana, 2k dollars for the second one and so on (in other words, he has to pay i\u00b7k dollars for the i-th banana). \n\nHe has n dollars. How many dollars does he have to borrow from his friend soldier to buy w bananas?\n\nInput\n\nThe first line contains three positive integers k, n, w (1 \u2264 k, w \u2264 1000, 0 \u2264 n \u2264 10^9), the cost of the first banana, initial number of dollars the soldier has and number of bananas he wants.", "grammar": {"productions": ["<S>->K <s> N <s> W"], "constraints": ["1<=K<=1000", "1<=W<=1000", "0<=N<=10^9"]}}
{"name": "96_A. Football", "description": "Petya loves football very much. One day, as he was watching a football match, he was writing the players' current positions on a piece of paper. To simplify the situation he depicted it as a string consisting of zeroes and ones. A zero corresponds to players of one team; a one corresponds to players of another team. If there are at least 7 players of some team standing one after another, then the situation is considered dangerous. For example, the situation 00100110111111101 is dangerous and 11110111011101 is not. You are given the current situation. Determine whether it is dangerous or not.\n\nInput\n\nThe first input line contains a non-empty string consisting of characters \"0\" and \"1\", which represents players. The length of the string does not exceed 100 characters. There's at least one player from each team present on the field.", "grammar": {"productions": ["<S>->[01]{0,100}"], "constraints": []}}
{"name": "1203_A. Circle of Students", "description": "There are n students standing in a circle in some order. The index of the i-th student is p_i. It is guaranteed that all indices of students are distinct integers from 1 to n (i. e. they form a permutation).\n\nStudents want to start a round dance. A clockwise round dance can be started if the student 2 comes right after the student 1 in clockwise order (there are no students between them), the student 3 comes right after the student 2 in clockwise order, and so on, and the student n comes right after the student n - 1 in clockwise order. A counterclockwise round dance is almost the same thing \u2014 the only difference is that the student i should be right after the student i - 1 in counterclockwise order (this condition should be met for every i from 2 to n). \n\nFor example, if the indices of students listed in clockwise order are [2, 3, 4, 5, 1], then they can start a clockwise round dance. If the students have indices [3, 2, 1, 4] in clockwise order, then they can start a counterclockwise round dance.\n\nYour task is to determine whether it is possible to start a round dance. Note that the students cannot change their positions before starting the dance; they cannot swap or leave the circle, and no other student can enter the circle. \n\nYou have to answer q independent queries.\n\nInput\n\nThe first line of the input contains one integer q (1 \u2264 q \u2264 200) \u2014 the number of queries. Then q queries follow.\n\nThe first line of the query contains one integer n (1 \u2264 n \u2264 200) \u2014 the number of students.\n\nThe second line of the query contains a permutation of indices p_1, p_2, ..., p_n (1 \u2264 p_i \u2264 n), where p_i is the index of the i-th student (in clockwise order). It is guaranteed that all p_i are distinct integers from 1 to n (i. e. they form a permutation).", "grammar": {"productions": ["<S>->[q] <n> <T_q>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> p_i", "<L_1>->p_1"], "constraints": ["1<=q<=200", "1<=n<=200", "1<=p_i<=n"]}}
{"name": "p04014 AtCoder Beginner Contest 044 - Digit Sum", "description": "For integers b (b \\geq 2) and n (n \\geq 1), let the function f(b,n) be defined as follows:\n\n* f(b,n) = n, when n < b\n* f(b,n) = f(b,\\,{\\rm floor}(n / b)) + (n \\ {\\rm mod} \\ b), when n \\geq b\n\n\n\nHere, {\\rm floor}(n / b) denotes the largest integer not exceeding n / b, and n \\ {\\rm mod} \\ b denotes the remainder of n divided by b.\n\nLess formally, f(b,n) is equal to the sum of the digits of n written in base b. For example, the following hold:\n\n* f(10,\\,87654)=8+7+6+5+4=30\n* f(100,\\,87654)=8+76+54=138\n\n\n\nYou are given integers n and s. Determine if there exists an integer b (b \\geq 2) such that f(b,n)=s. If the answer is positive, also find the smallest such b.\n\nConstraints\n\n* 1 \\leq n \\leq 10^{11}\n* 1 \\leq s \\leq 10^{11}\n* n,\\,s are integers.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nn\ns", "grammar": {"productions": ["<S>->n <n> s"], "constraints": ["1<=n<=10^11", "1<=s<=10^11"]}}
{"name": "p03000 AtCoder Beginner Contest 130 - Bounding", "description": "A ball will bounce along a number line, making N + 1 bounces. It will make the first bounce at coordinate D_1 = 0, and the i-th bounce (2 \\leq i \\leq N+1) at coordinate D_i = D_{i-1} + L_{i-1}.\n\nHow many times will the ball make a bounce where the coordinate is at most X?\n\nConstraints\n\n* 1 \\leq N \\leq 100\n* 1 \\leq L_i \\leq 100\n* 1 \\leq X \\leq 10000\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN X\nL_1 L_2 ... L_{N-1} L_N", "grammar": {"productions": ["<S>->[N] <s> X <n> <T_N>", "<T_i>-><T_i-1> <s> L_i", "<T_1>->L_1"], "constraints": ["1<=N<=100", "1<=L_i<=100", "1<=X<=10000"]}}
{"name": "p02835 AtCoder Beginner Contest 147 - Blackjack", "description": "Given are three integers A_1, A_2, and A_3.\n\nIf A_1+A_2+A_3 is greater than or equal to 22, print `bust`; otherwise, print `win`.\n\nConstraints\n\n* 1 \\leq A_i \\leq 13 \\ \\ (i=1,2,3)\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA_1 A_2 A_3", "grammar": {"productions": ["<S>->A1 <s> A2 <s> A3"], "constraints": ["1<=A1,A2,A3<=13"]}}
{"name": "1073_A. Diverse Substring", "description": "You are given a string s, consisting of n lowercase Latin letters.\n\nA substring of string s is a continuous segment of letters from s. For example, \"defor\" is a substring of \"codeforces\" and \"fors\" is not. \n\nThe length of the substring is the number of letters in it.\n\nLet's call some string of length n diverse if and only if there is no letter to appear strictly more than \\frac n 2 times. For example, strings \"abc\" and \"iltlml\" are diverse and strings \"aab\" and \"zz\" are not.\n\nYour task is to find any diverse substring of string s or report that there is none. Note that it is not required to maximize or minimize the length of the resulting substring.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 1000) \u2014 the length of string s.\n\nThe second line is the string s, consisting of exactly n lowercase Latin letters.", "grammar": {"productions": ["<S>->[n] <n> [a-z]{n}"], "constraints": ["1<=n<=1000"]}}
{"name": "320_A. Magic Numbers", "description": "A magic number is a number formed by concatenation of numbers 1, 14 and 144. We can use each of these numbers any number of times. Therefore 14144, 141414 and 1411 are magic numbers but 1444, 514 and 414 are not.\n\nYou're given a number. Determine if it is a magic number or not.\n\nInput\n\nThe first line of input contains an integer n, (1 \u2264 n \u2264 10^9). This number doesn't contain leading zeros.", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=10^9"]}}
{"name": "p02969 AtCoder Beginner Contest 134 - Dodecagon", "description": "It is known that the area of a regular dodecagon inscribed in a circle of radius a is 3a^2.\n\nGiven an integer r, find the area of a regular dodecagon inscribed in a circle of radius r.\n\nConstraints\n\n* 1 \\leq r \\leq 100\n* r is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nr", "grammar": {"productions": ["<S>->r"], "constraints": ["1<=r<=100"]}}
{"name": "263_A. Beautiful Matrix", "description": "You've got a 5 \u00d7 5 matrix, consisting of 24 zeroes and a single number one. Let's index the matrix rows by numbers from 1 to 5 from top to bottom, let's index the matrix columns by numbers from 1 to 5 from left to right. In one move, you are allowed to apply one of the two following transformations to the matrix:\n\n  1. Swap two neighboring matrix rows, that is, rows with indexes i and i + 1 for some integer i (1 \u2264 i < 5). \n  2. Swap two neighboring matrix columns, that is, columns with indexes j and j + 1 for some integer j (1 \u2264 j < 5). \n\n\n\nYou think that a matrix looks beautiful, if the single number one of the matrix is located in its middle (in the cell that is on the intersection of the third row and the third column). Count the minimum number of moves needed to make the matrix beautiful.\n\nInput\n\nThe input consists of five lines, each line contains five integers: the j-th integer in the i-th line of the input represents the element of the matrix that is located on the intersection of the i-th row and the j-th column. It is guaranteed that the matrix consists of 24 zeroes and a single number one.", "grammar": {"productions": ["<S>-><T_5,1>", "<T_i,1>-><T_i-1,1> <n> <L_5,0>|<T_i-1,0> <n> <L_5,1>", "<T_i,0>-><T_i-1,0> <n> <L_5,0>", "<T_1,1>-><L_5,1>", "<T_1,0>-><L_5,0>", "<L_i,1>-><L_i-1,1> <s> 0|<L_i-1,0> <s> 1", "<L_i,0>-><L_i-1,0> <s> 0", "<L_1,1>->1", "<L_1,0>->0"], "constraints": []}}
{"name": "p02257 Prime Numbers", "description": "A prime number is a natural number which has exactly two distinct natural number divisors: 1 and itself. For example, the first four prime numbers are: 2, 3, 5 and 7.\n\nWrite a program which reads a list of N integers and prints the number of prime numbers in the list.\n\nConstraints\n\n1 \u2264 N \u2264 10000\n\n2 \u2264 an element of the list \u2264 10^8\n\nInput\n\nThe first line contains an integer N, the number of elements in the list.\n\nN numbers are given in the following lines.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> a_i", "<T_1>->a_1"], "constraints": ["1<=N<=10000", "2<=a_i<=10^8"]}}
{"name": "1043_A. Elections", "description": "Awruk is taking part in elections in his school. It is the final round. He has only one opponent \u2014 Elodreip. The are n students in the school. Each student has exactly k votes and is obligated to use all of them. So Awruk knows that if a person gives a_i votes for Elodreip, than he will get exactly k - a_i votes from this person. Of course 0 \u2264 k - a_i holds.\n\nAwruk knows that if he loses his life is over. He has been speaking a lot with his friends and now he knows a_1, a_2, ..., a_n \u2014 how many votes for Elodreip each student wants to give. Now he wants to change the number k to win the elections. Of course he knows that bigger k means bigger chance that somebody may notice that he has changed something and then he will be disqualified.\n\nSo, Awruk knows a_1, a_2, ..., a_n \u2014 how many votes each student will give to his opponent. Help him select the smallest winning number k. In order to win, Awruk needs to get strictly more votes than Elodreip.\n\nInput\n\nThe first line contains integer n (1 \u2264 n \u2264 100) \u2014 the number of students in the school.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 100) \u2014 the number of votes each student gives to Elodreip.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=100", "1<=a_i<=100"]}}
{"name": "1360_E. Polygon", "description": "Polygon is not only the best platform for developing problems but also a square matrix with side n, initially filled with the character 0.\n\nOn the polygon, military training was held. The soldiers placed a cannon above each cell in the first row and a cannon to the left of each cell in the first column. Thus, exactly 2n cannons were placed.\n\n<image> Initial polygon for n=4.\n\nCannons shoot character 1. At any moment of time, no more than one cannon is shooting. When a 1 flies out of a cannon, it flies forward (in the direction of the shot) until it collides with a polygon border or another 1. After that, it takes the cell in which it was before the collision and remains there. Take a look at the examples for better understanding.\n\nMore formally: \n\n  * if a cannon stands in the row i, to the left of the first column, and shoots with a 1, then the 1 starts its flight from the cell (i, 1) and ends in some cell (i, j); \n  * if a cannon stands in the column j, above the first row, and shoots with a 1, then the 1 starts its flight from the cell (1, j) and ends in some cell (i, j). \n\n\n\nFor example, consider the following sequence of shots:\n\n<image>\n\n1. Shoot the cannon in the row 2. 2. Shoot the cannon in the row 2. 3. Shoot the cannon in column 3.\n\nYou have a report from the military training on your desk. This report is a square matrix with side length n consisting of 0 and 1. You wonder if the training actually happened. In other words, is there a sequence of shots such that, after the training, you get the given matrix?\n\nEach cannon can make an arbitrary number of shots. Before the training, each cell of the polygon contains 0.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case starts with a line containing an integer n (1 \u2264 n \u2264 50) \u2014 the size of the polygon.\n\nThis is followed by n lines of length n, consisting of 0 and 1 \u2014 the polygon matrix after the training.\n\nThe total area of the matrices in all test cases in one test does not exceed 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <n> [01]{n}", "<L_1>->[01]{n}"], "constraints": ["1<=t<=1000", "1<=n<=50"]}}
{"name": "467_B. Fedor and New Game", "description": "After you had helped George and Alex to move in the dorm, they went to help their friend Fedor play a new computer game \u00abCall of Soldiers 3\u00bb.\n\nThe game has (m + 1) players and n types of soldiers in total. Players \u00abCall of Soldiers 3\u00bb are numbered form 1 to (m + 1). Types of soldiers are numbered from 0 to n - 1. Each player has an army. Army of the i-th player can be described by non-negative integer xi. Consider binary representation of xi: if the j-th bit of number xi equal to one, then the army of the i-th player has soldiers of the j-th type. \n\nFedor is the (m + 1)-th player of the game. He assume that two players can become friends if their armies differ in at most k types of soldiers (in other words, binary representations of the corresponding numbers differ in at most k bits). Help Fedor and count how many players can become his friends.\n\nInput\n\nThe first line contains three integers n, m, k (1 \u2264 k \u2264 n \u2264 20; 1 \u2264 m \u2264 1000).\n\nThe i-th of the next (m + 1) lines contains a single integer xi (1 \u2264 xi \u2264 2n - 1), that describes the i-th player's army. We remind you that Fedor is the (m + 1)-th player.", "grammar": {"productions": ["<S>->n <s> [m] <s> k <n> <T_m+1>", "<T_i>-><T_i-1> <n> x_i", "<T_1>->x_1"], "constraints": ["1<=k<=20", "1<=n<=20", "1<=m<=1000", "1<=x_i<=(2n - 1)"]}}
{"name": "p02812 AtCoder Beginner Contest 150 - Count ABC", "description": "We have a string S of length N consisting of uppercase English letters.\n\nHow many times does `ABC` occur in S as contiguous subsequences (see Sample Inputs and Outputs)?\n\nConstraints\n\n* 3 \\leq N \\leq 50\n* S consists of uppercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nS", "grammar": {"productions": ["<S>->[N] <n> [A-Z]{N}"], "constraints": ["3<=N<=50"]}}
{"name": "900_A. Find Extra One", "description": "You have n distinct points on a plane, none of them lie on OY axis. Check that there is a point after removal of which the remaining points are located on one side of the OY axis.\n\nInput\n\nThe first line contains a single positive integer n (2 \u2264 n \u2264 10^5).\n\nThe following n lines contain coordinates of the points. The i-th of these lines contains two single integers xi and yi (|xi|, |yi| \u2264 10^9, xi \u2260 0). No two points coincide.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> x_i <s> y_i", "<T_1>->x_1 <s> y_1"], "constraints": ["2<=n<=10^5", "-10^9<=x_i<=10^9", "-10^9<=y_i<=10^9"]}}
{"name": "1175_A. From Hero to Zero", "description": "You are given an integer n and an integer k.\n\nIn one step you can do one of the following moves: \n\n  * decrease n by 1; \n  * divide n by k if n is divisible by k. \n\n\n\nFor example, if n = 27 and k = 3 you can do the following steps: 27 \u2192 26 \u2192 25 \u2192 24 \u2192 8 \u2192 7 \u2192 6 \u2192 2 \u2192 1 \u2192 0.\n\nYou are asked to calculate the minimum number of steps to reach 0 from n. \n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of queries.\n\nThe only line of each query contains two integers n and k (1 \u2264 n \u2264 10^{18}, 2 \u2264 k \u2264 10^{18}).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n <s> k", "<T_1>->n <s> k"], "constraints": ["1<=t<=100", "1<=n<=10^18", "2<=k<=10^18"]}}
{"name": "1244_C. The Football Season", "description": "The football season has just ended in Berland. According to the rules of Berland football, each match is played between two teams. The result of each match is either a draw, or a victory of one of the playing teams. If a team wins the match, it gets w points, and the opposing team gets 0 points. If the game results in a draw, both teams get d points.\n\nThe manager of the Berland capital team wants to summarize the results of the season, but, unfortunately, all information about the results of each match is lost. The manager only knows that the team has played n games and got p points for them.\n\nYou have to determine three integers x, y and z \u2014 the number of wins, draws and loses of the team. If there are multiple answers, print any of them. If there is no suitable triple (x, y, z), report about it.\n\nInput\n\nThe first line contains four integers n, p, w and d (1 \u2264 n \u2264 10^{12}, 0 \u2264 p \u2264 10^{17}, 1 \u2264 d < w \u2264 10^{5}) \u2014 the number of games, the number of points the team got, the number of points awarded for winning a match, and the number of points awarded for a draw, respectively. Note that w > d, so the number of points awarded for winning is strictly greater than the number of points awarded for draw.", "grammar": {"productions": ["<S>->n <s> p <s> w <s> d"], "constraints": ["1<=n<=10^12", "0<=p<=10^17", "1<=d<w<=10^5"]}}
{"name": "1131_A. Sea Battle", "description": "In order to make the \"Sea Battle\" game more interesting, Boris decided to add a new ship type to it. The ship consists of two rectangles. The first rectangle has a width of w_1 and a height of h_1, while the second rectangle has a width of w_2 and a height of h_2, where w_1 \u2265 w_2. In this game, exactly one ship is used, made up of two rectangles. There are no other ships on the field.\n\nThe rectangles are placed on field in the following way:\n\n  * the second rectangle is on top the first rectangle; \n  * they are aligned to the left, i.e. their left sides are on the same line; \n  * the rectangles are adjacent to each other without a gap. \n\n\n\nSee the pictures in the notes: the first rectangle is colored red, the second rectangle is colored blue.\n\nFormally, let's introduce a coordinate system. Then, the leftmost bottom cell of the first rectangle has coordinates (1, 1), the rightmost top cell of the first rectangle has coordinates (w_1, h_1), the leftmost bottom cell of the second rectangle has coordinates (1, h_1 + 1) and the rightmost top cell of the second rectangle has coordinates (w_2, h_1 + h_2).\n\nAfter the ship is completely destroyed, all cells neighboring by side or a corner with the ship are marked. Of course, only cells, which don't belong to the ship are marked. On the pictures in the notes such cells are colored green.\n\nFind out how many cells should be marked after the ship is destroyed. The field of the game is infinite in any direction.\n\nInput\n\nFour lines contain integers w_1, h_1, w_2 and h_2 (1 \u2264 w_1, h_1, w_2, h_2 \u2264 10^8, w_1 \u2265 w_2) \u2014 the width of the first rectangle, the height of the first rectangle, the width of the second rectangle and the height of the second rectangle. You can't rotate the rectangles.", "grammar": {"productions": ["<S>->w1 <s> h1 <s> w2 <s> h2"], "constraints": ["1<=w1<=10^8", "1<=w2<=10^8", "1<=h2<=10^8", "1<=h1<=10^8", "w1>=w2"]}}
{"name": "p02595 AtCoder Beginner Contest 174 - Distance", "description": "We have N points in the two-dimensional plane. The coordinates of the i-th point are (X_i,Y_i).\n\nAmong them, we are looking for the points such that the distance from the origin is at most D. How many such points are there?\n\nWe remind you that the distance between the origin and the point (p, q) can be represented as \\sqrt{p^2+q^2}.\n\nConstraints\n\n* 1 \\leq N \\leq 2\\times 10^5\n* 0 \\leq D \\leq 2\\times 10^5\n* |X_i|,|Y_i| \\leq 2\\times 10^5\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN D\nX_1 Y_1\n\\vdots\nX_N Y_N", "grammar": {"productions": ["<S>->[N] <s> D <n> <T_N>", "<T_i>-><T_i-1> <n> X_i <s> Y_i", "<T_1>->X_1 <s> Y_1"], "constraints": ["1<=N<=2*10^5", "0<=D<=2*10^5", "-2*10^5<=X_i<=2*10^5", "-2*10^5<=Y_i<=2*10^5"]}}
{"name": "1093_B. Letters Rearranging", "description": "You are given a string s consisting only of lowercase Latin letters.\n\nYou can rearrange all letters of this string as you wish. Your task is to obtain a good string by rearranging the letters of the given string or report that it is impossible to do it.\n\nLet's call a string good if it is not a palindrome. Palindrome is a string which is read from left to right the same as from right to left. For example, strings \"abacaba\", \"aa\" and \"z\" are palindromes and strings \"bba\", \"xd\" are not.\n\nYou have to answer t independent queries.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 number of queries.\n\nEach of the next t lines contains one string. The i-th line contains a string s_i consisting only of lowercase Latin letter. It is guaranteed that the length of s_i is from 1 to 1000 (inclusive).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [a-z]{1,1000}", "<T_1>->[a-z]{1,1000}"], "constraints": ["1<=t<=100"]}}
{"name": "p03212 AtCoder Beginner Contest 114 - 755", "description": "You are given an integer N. Among the integers between 1 and N (inclusive), how many Shichi-Go-San numbers (literally \"Seven-Five-Three numbers\") are there?\n\nHere, a Shichi-Go-San number is a positive integer that satisfies the following condition:\n\n* When the number is written in base ten, each of the digits `7`, `5` and `3` appears at least once, and the other digits never appear.\n\nConstraints\n\n* 1 \\leq N < 10^9\n* N is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["1<=N<=10^9"]}}
{"name": "p03416 AtCoder Beginner Contest 090 - Palindromic Numbers", "description": "Find the number of palindromic numbers among the integers between A and B (inclusive). Here, a palindromic number is a positive integer whose string representation in base 10 (without leading zeros) reads the same forward and backward.\n\nConstraints\n\n* 10000 \\leq A \\leq B \\leq 99999\n* All input values are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B", "grammar": {"productions": ["<S>->A <s> B"], "constraints": ["10000<=A<=B<=99999"]}}
{"name": "p02818 AtCoder Beginner Contest 149 - Greedy Takahashi", "description": "Takahashi has A cookies, and Aoki has B cookies. Takahashi will do the following action K times:\n\n* If Takahashi has one or more cookies, eat one of his cookies.\n* Otherwise, if Aoki has one or more cookies, eat one of Aoki's cookies.\n* If they both have no cookies, do nothing.\n\n\n\nIn the end, how many cookies will Takahashi and Aoki have, respectively?\n\nConstraints\n\n* 0 \\leq A \\leq 10^{12}\n* 0 \\leq B \\leq 10^{12}\n* 0 \\leq K \\leq 10^{12}\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B K", "grammar": {"productions": ["<S>->A <s> B <s> K"], "constraints": ["0<=A<=10^12", "0<=B<=10^12", "0<=K<=10^12"]}}
{"name": "p02687 AtCoder Beginner Contest 166 - A?C", "description": "AtCoder Inc. holds a contest every Saturday.\n\nThere are two types of contests called ABC and ARC, and just one of them is held at a time.\n\nThe company holds these two types of contests alternately: an ARC follows an ABC and vice versa.\n\nGiven a string S representing the type of the contest held last week, print the string representing the type of the contest held this week.\n\nConstraints\n\n* S is `ABC` or `ARC`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>->ABC|ARC"], "constraints": []}}
{"name": "p03031 AtCoder Beginner Contest 128 - Switches", "description": "We have N switches with \"on\" and \"off\" state, and M bulbs. The switches are numbered 1 to N, and the bulbs are numbered 1 to M.\n\nBulb i is connected to k_i switches: Switch s_{i1}, s_{i2}, ..., and s_{ik_i}. It is lighted when the number of switches that are \"on\" among these switches is congruent to p_i modulo 2.\n\nHow many combinations of \"on\" and \"off\" states of the switches light all the bulbs?\n\nConstraints\n\n* 1 \\leq N, M \\leq 10\n* 1 \\leq k_i \\leq N\n* 1 \\leq s_{ij} \\leq N\n* s_{ia} \\neq s_{ib} (a \\neq b)\n* p_i is 0 or 1.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nk_1 s_{11} s_{12} ... s_{1k_1}\n:\nk_M s_{M1} s_{M2} ... s_{Mk_M}\np_1 p_2 ... p_M", "grammar": {"productions": ["<S>->N <s> [M] <n> <T_M> <n> <L_M>", "<T_i>-><T_i-1> <n> [k] <s> <Z_k>", "<T_1>->[k] <s> <Z_k>", "<L_i>-><L_i-1> <s> <p_i>", "<L_1>-><p_1>", "<Z_i>-><Z_i-1> <s> s_i", "<Z_1>->s_1", "<p_i>->0|1"], "constraints": ["1<=N,M<=10", "1<=k<=N", "1<=s_i<=N", "s_i!=s_j"]}}
{"name": "p02719 AtCoder Beginner Contest 161 - Replacing Integer", "description": "Given any integer x, Aoki can do the operation below.\n\nOperation: Replace x with the absolute difference of x and K.\n\nYou are given the initial value of an integer N. Find the minimum possible value taken by N after Aoki does the operation zero or more times.\n\nConstraints\n\n* 0 \u2264 N \u2264 10^{18}\n* 1 \u2264 K \u2264 10^{18}\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K", "grammar": {"productions": ["<S>->N <s> K"], "constraints": ["0<=N<=10^18", "1<=K<=10^18"]}}
{"name": "p03206 AtCoder Beginner Contest 115 - Christmas Eve Eve Eve", "description": "In some other world, today is December D-th.\n\nWrite a program that prints `Christmas` if D = 25, `Christmas Eve` if D = 24, `Christmas Eve Eve` if D = 23 and `Christmas Eve Eve Eve` if D = 22.\n\nConstraints\n\n* 22 \\leq D \\leq 25\n* D is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nD", "grammar": {"productions": ["<S>->D"], "constraints": ["22<=D<=25"]}}
{"name": "61_A. Ultra-Fast Mathematician", "description": "Shapur was an extremely gifted student. He was great at everything including Combinatorics, Algebra, Number Theory, Geometry, Calculus, etc. He was not only smart but extraordinarily fast! He could manage to sum 1018 numbers in a single second.\n\nOne day in 230 AD Shapur was trying to find out if any one can possibly do calculations faster than him. As a result he made a very great contest and asked every one to come and take part.\n\nIn his contest he gave the contestants many different pairs of numbers. Each number is made from digits 0 or 1. The contestants should write a new number corresponding to the given pair of numbers. The rule is simple: The i-th digit of the answer is 1 if and only if the i-th digit of the two given numbers differ. In the other case the i-th digit of the answer is 0.\n\nShapur made many numbers and first tried his own speed. He saw that he can perform these operations on numbers of length \u221e (length of a number is number of digits in it) in a glance! He always gives correct answers so he expects the contestants to give correct answers, too. He is a good fellow so he won't give anyone very big numbers and he always gives one person numbers of same length.\n\nNow you are going to take part in Shapur's contest. See if you are faster and more accurate.\n\nInput\n\nThere are two lines in each input. Each of them contains a single number. It is guaranteed that the numbers are made from 0 and 1 only and that their length is same. The numbers may start with 0. The length of each number doesn't exceed 100.", "grammar": {"productions": ["<S>->[01]{S} <n> [01]{S}"], "constraints": ["1<=S<=100"]}}
{"name": "p03161 Educational DP Contest - Frog 2", "description": "There are N stones, numbered 1, 2, \\ldots, N. For each i (1 \\leq i \\leq N), the height of Stone i is h_i.\n\nThere is a frog who is initially on Stone 1. He will repeat the following action some number of times to reach Stone N:\n\n* If the frog is currently on Stone i, jump to one of the following: Stone i + 1, i + 2, \\ldots, i + K. Here, a cost of |h_i - h_j| is incurred, where j is the stone to land on.\n\n\n\nFind the minimum possible total cost incurred before the frog reaches Stone N.\n\nConstraints\n\n* All values in input are integers.\n* 2 \\leq N \\leq 10^5\n* 1 \\leq K \\leq 100\n* 1 \\leq h_i \\leq 10^4\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nh_1 h_2 \\ldots h_N", "grammar": {"productions": ["<S>->[N] <s> K <n> <T_N>", "<T_i>-><T_i-1> <s> h_i", "<T_1>->h_1"], "constraints": ["2<=N<=10^5", "1<=K<=100", "1<=h_i<=10^4"]}}
{"name": "p03017 AtCoder Grand Contest 034 - Kenken Race", "description": "There are N squares arranged in a row, numbered 1, 2, ..., N from left to right. You are given a string S of length N consisting of `.` and `#`. If the i-th character of S is `#`, Square i contains a rock; if the i-th character of S is `.`, Square i is empty.\n\nIn the beginning, Snuke stands on Square A, and Fnuke stands on Square B.\n\nYou can repeat the following operation any number of times:\n\n* Choose Snuke or Fnuke, and make him jump one or two squares to the right. The destination must be one of the squares, and it must not contain a rock or the other person.\n\n\n\nYou want to repeat this operation so that Snuke will stand on Square C and Fnuke will stand on Square D.\n\nDetermine whether this is possible.\n\nConstraints\n\n* 4 \\leq N \\leq 200\\ 000\n* S is a string of length N consisting of `.` and `#`.\n* 1 \\leq A, B, C, D \\leq N\n* Square A, B, C and D do not contain a rock.\n* A, B, C and D are all different.\n* A < B\n* A < C\n* B < D\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN A B C D\nS", "grammar": {"productions": ["<S>->[N] <s> A <s> B <s> C <s> D <n> [.#]{N}"], "constraints": ["4<=N<=200000", "1<=A<=N", "1<=B<=N", "1<=C<=N", "1<=D<=N", "A!=B", "B!=C", "C!=D", "A<B", "A<C", "B<D"]}}
{"name": "870_A. Search for Pretty Integers", "description": "You are given two lists of non-zero digits.\n\nLet's call an integer pretty if its (base 10) representation has at least one digit from the first list and at least one digit from the second list. What is the smallest positive pretty integer?\n\nInput\n\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 9) \u2014 the lengths of the first and the second lists, respectively.\n\nThe second line contains n distinct digits a1, a2, ..., an (1 \u2264 ai \u2264 9) \u2014 the elements of the first list.\n\nThe third line contains m distinct digits b1, b2, ..., bm (1 \u2264 bi \u2264 9) \u2014 the elements of the second list.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_n> <n> <L_m>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1", "<L_i>-><L_i-1> <s> b_i", "<L_1>->b_1"], "constraints": ["1<=n,m<=9", "1<=a_i<=9", "1<=b_i<=9"]}}
{"name": "p03544 AtCoder Beginner Contest 079 - Lucas Number", "description": "It is November 18 now in Japan. By the way, 11 and 18 are adjacent Lucas numbers.\n\nYou are given an integer N. Find the N-th Lucas number.\n\nHere, the i-th Lucas number L_i is defined as follows:\n\n* L_0=2\n* L_1=1\n* L_i=L_{i-1}+L_{i-2} (i\u22652)\n\nConstraints\n\n* 1\u2264N\u226486\n* It is guaranteed that the answer is less than 10^{18}.\n* N is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["1<=N<=86"]}}
{"name": "1204_B. Mislove Has Lost an Array", "description": "Mislove had an array a_1, a_2, \u22c5\u22c5\u22c5, a_n of n positive integers, but he has lost it. He only remembers the following facts about it:\n\n  * The number of different numbers in the array is not less than l and is not greater than r;\n  * For each array's element a_i either a_i = 1 or a_i is even and there is a number (a_i)/(2) in the array.\n\n\n\nFor example, if n=5, l=2, r=3 then an array could be [1,2,2,4,4] or [1,1,1,1,2]; but it couldn't be [1,2,2,4,8] because this array contains 4 different numbers; it couldn't be [1,2,2,3,3] because 3 is odd and isn't equal to 1; and it couldn't be [1,1,2,2,16] because there is a number 16 in the array but there isn't a number 16/2 = 8.\n\nAccording to these facts, he is asking you to count the minimal and the maximal possible sums of all elements in an array. \n\nInput\n\nThe only input line contains three integers n, l and r (1 \u2264 n \u2264 1 000, 1 \u2264 l \u2264 r \u2264 min(n, 20)) \u2014 an array's size, the minimal number and the maximal number of distinct elements in an array.", "grammar": {"productions": ["<S>->n <s> l <s> r"], "constraints": ["1<=n<=1000", "1<=l<=r<=min(n,20)"]}}
{"name": "p02678 AtCoder Beginner Contest 168 - .. (Double Dots)", "description": "There is a cave.\n\nThe cave has N rooms and M passages. The rooms are numbered 1 to N, and the passages are numbered 1 to M. Passage i connects Room A_i and Room B_i bidirectionally. One can travel between any two rooms by traversing passages. Room 1 is a special room with an entrance from the outside.\n\nIt is dark in the cave, so we have decided to place a signpost in each room except Room 1. The signpost in each room will point to one of the rooms directly connected to that room with a passage.\n\nSince it is dangerous in the cave, our objective is to satisfy the condition below for each room except Room 1.\n\n* If you start in that room and repeatedly move to the room indicated by the signpost in the room you are in, you will reach Room 1 after traversing the minimum number of passages possible.\n\n\n\nDetermine whether there is a way to place signposts satisfying our objective, and print one such way if it exists.\n\nConstraints\n\n* All values in input are integers.\n* 2 \\leq N \\leq 10^5\n* 1 \\leq M \\leq 2 \\times 10^5\n* 1 \\leq A_i, B_i \\leq N\\ (1 \\leq i \\leq M)\n* A_i \\neq B_i\\ (1 \\leq i \\leq M)\n* One can travel between any two rooms by traversing passages.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nA_1 B_1\n:\nA_M B_M", "grammar": {"productions": ["<S>->N <s> [M] <n> <T_M>", "<T_i>-><T_i-1> <n> A_i <s> B_i", "<T_1>->A_1 <s> B_1"], "constraints": ["2<=N<=10^5", "1<=M<=2*10^5", "1<=A_i,B_i<=N", "A_i!=B_i"]}}
{"name": "p02975 AtCoder Grand Contest 035 - XOR Circle", "description": "Snuke has N hats. The i-th hat has an integer a_i written on it.\n\nThere are N camels standing in a circle. Snuke will put one of his hats on each of these camels.\n\nIf there exists a way to distribute the hats to the camels such that the following condition is satisfied for every camel, print `Yes`; otherwise, print `No`.\n\n* The bitwise XOR of the numbers written on the hats on both adjacent camels is equal to the number on the hat on itself.\n\nWhat is XOR? The bitwise XOR x_1 \\oplus x_2 \\oplus \\ldots \\oplus x_n of n non-negative integers x_1, x_2, \\ldots, x_n is defined as follows: - When x_1 \\oplus x_2 \\oplus \\ldots \\oplus x_n is written in base two, the digit in the 2^k's place (k \\geq 0) is 1 if the number of integers among x_1, x_2, \\ldots, x_n whose binary representations have 1 in the 2^k's place is odd, and 0 if that count is even. For example, 3 \\oplus 5 = 6.\n\nConstraints\n\n* All values in input are integers.\n* 3 \\leq N \\leq 10^{5}\n* 0 \\leq a_i \\leq 10^{9}\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 a_2 \\ldots a_{N}", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["3<=N<=10^5", "0<=A_i<=10^9"]}}
{"name": "p03107 AtCoder Beginner Contest 120 - Unification", "description": "There are N cubes stacked vertically on a desk.\n\nYou are given a string S of length N. The color of the i-th cube from the bottom is red if the i-th character in S is `0`, and blue if that character is `1`.\n\nYou can perform the following operation any number of times: choose a red cube and a blue cube that are adjacent, and remove them. Here, the cubes that were stacked on the removed cubes will fall down onto the object below them.\n\nAt most how many cubes can be removed?\n\nConstraints\n\n* 1 \\leq N \\leq 10^5\n* |S| = N\n* Each character in S is `0` or `1`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>->[01]{N}"], "constraints": ["1<=N<=10^5"]}}
{"name": "1130_A. Be Positive", "description": "You are given an array of n integers: a_1, a_2, \u2026, a_n. Your task is to find some non-zero integer d (-10^3 \u2264 d \u2264 10^3) such that, after each number in the array is divided by d, the number of positive numbers that are presented in the array is greater than or equal to half of the array size (i.e., at least \u2308n/2\u2309). Note that those positive numbers do not need to be an integer (e.g., a 2.5 counts as a positive number). If there are multiple values of d that satisfy the condition, you may print any of them. In case that there is no such d, print a single integer 0.\n\nRecall that \u2308 x \u2309 represents the smallest integer that is not less than x and that zero (0) is neither positive nor negative.\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 100) \u2014 the number of elements in the array.\n\nThe second line contains n space-separated integers a_1, a_2, \u2026, a_n (-10^3 \u2264 a_i \u2264 10^3).", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=100", "-10^3<=a_i<=10^3"]}}
{"name": "p03210 AtCoder Beginner Contest 114 - 753", "description": "Shichi-Go-San (literally \"Seven-Five-Three\") is a traditional event in a certain country to celebrate the growth of seven-, five- and three-year-old children.\n\nTakahashi is now X years old. Will his growth be celebrated in Shichi-Go-San this time?\n\nConstraints\n\n* 1 \u2264 X \u2264 9\n* X is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX", "grammar": {"productions": ["<S>->X"], "constraints": ["1<=X<=9"]}}
{"name": "1197_A. DIY Wooden Ladder", "description": "Let's denote a k-step ladder as the following structure: exactly k + 2 wooden planks, of which\n\n  * two planks of length at least k+1 \u2014 the base of the ladder; \n  * k planks of length at least 1 \u2014 the steps of the ladder; \n\n\n\nNote that neither the base planks, nor the steps planks are required to be equal.\n\nFor example, ladders 1 and 3 are correct 2-step ladders and ladder 2 is a correct 1-step ladder. On the first picture the lengths of planks are [3, 3] for the base and [1] for the step. On the second picture lengths are [3, 3] for the base and [2] for the step. On the third picture lengths are [3, 4] for the base and [2, 3] for the steps. \n\n<image>\n\nYou have n planks. The length of the i-th planks is a_i. You don't have a saw, so you can't cut the planks you have. Though you have a hammer and nails, so you can assemble the improvised \"ladder\" from the planks.\n\nThe question is: what is the maximum number k such that you can choose some subset of the given planks and assemble a k-step ladder using them?\n\nInput\n\nThe first line contains a single integer T (1 \u2264 T \u2264 100) \u2014 the number of queries. The queries are independent.\n\nEach query consists of two lines. The first line contains a single integer n (2 \u2264 n \u2264 10^5) \u2014 the number of planks you have.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^5) \u2014 the lengths of the corresponding planks.\n\nIt's guaranteed that the total number of planks from all queries doesn't exceed 10^5.", "grammar": {"productions": ["<S>->[T] <n> <T_T>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=T<=100", "2<=n<=10^5", "1<=a_i<=10^5"]}}
{"name": "p04006 AtCoder Grand Contest 004 - Colorful Slimes", "description": "Snuke lives in another world, where slimes are real creatures and kept by some people. Slimes come in N colors. Those colors are conveniently numbered 1 through N. Snuke currently has no slime. His objective is to have slimes of all the colors together.\n\nSnuke can perform the following two actions:\n\n* Select a color i (1\u2264i\u2264N), such that he does not currently have a slime in color i, and catch a slime in color i. This action takes him a_i seconds.\n\n* Cast a spell, which changes the color of all the slimes that he currently has. The color of a slime in color i (1\u2264i\u2264N-1) will become color i+1, and the color of a slime in color N will become color 1. This action takes him x seconds.\n\n\n\n\nFind the minimum time that Snuke needs to have slimes in all N colors.\n\nConstraints\n\n* 2\u2264N\u22642,000\n* a_i are integers.\n* 1\u2264a_i\u226410^9\n* x is an integer.\n* 1\u2264x\u226410^9\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN x\na_1 a_2 ... a_N", "grammar": {"productions": ["<S>->[N] <s> x <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["2<=N<=2000", "1<=a_i<=10^9", "1<=x<=10^9"]}}
{"name": "1369_C. RationalLee", "description": "Lee just became Master in Codeforces, and so, he went out to buy some gifts for his friends. He bought n integers, now it's time to distribute them between his friends rationally...\n\nLee has n integers a_1, a_2, \u2026, a_n in his backpack and he has k friends. Lee would like to distribute all integers in his backpack between his friends, such that the i-th friend will get exactly w_i integers and each integer will be handed over to exactly one friend.\n\nLet's define the happiness of a friend as the sum of the maximum and the minimum integer he'll get.\n\nLee would like to make his friends as happy as possible, in other words, he'd like to maximize the sum of friends' happiness. Now he asks you to calculate the maximum sum of friends' happiness.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nNext 3t lines contain test cases \u2014 one per three lines.\n\nThe first line of each test case contains two integers n and k (1 \u2264 n \u2264 2 \u22c5 10^5; 1 \u2264 k \u2264 n) \u2014 the number of integers Lee has and the number of Lee's friends.\n\nThe second line of each test case contains n integers a_1, a_2, \u2026, a_n (-10^9 \u2264 a_i \u2264 10^9) \u2014 the integers Lee has.\n\nThe third line contains k integers w_1, w_2, \u2026, w_k (1 \u2264 w_i \u2264 n; w_1 + w_2 + \u2026 + w_k = n) \u2014 the number of integers Lee wants to give to each friend. \n\nIt's guaranteed that the sum of n over test cases is less than or equal to 2 \u22c5 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <s> [k] <n> <L_n> <n> <Z_k>", "<T_1>->[n] <s> [k] <n> <L_n> <n> <Z_k>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1", "<Z_i>-><Z_i-1> <s> w_i", "<Z_1>->w_1"], "constraints": ["1<=t<=10^4", "1<=n<=2*10^5", "1<=k<=n", "-10^9 <=a_i<=10^9", "1<=w_i<=n", "w_1 + w_2 + \u2026 + w_k = n"]}}
{"name": "1304_B. Longest Palindrome", "description": "Returning back to problem solving, Gildong is now studying about palindromes. He learned that a palindrome is a string that is the same as its reverse. For example, strings \"pop\", \"noon\", \"x\", and \"kkkkkk\" are palindromes, while strings \"moon\", \"tv\", and \"abab\" are not. An empty string is also a palindrome.\n\nGildong loves this concept so much, so he wants to play with it. He has n distinct strings of equal length m. He wants to discard some of the strings (possibly none or all) and reorder the remaining strings so that the concatenation becomes a palindrome. He also wants the palindrome to be as long as possible. Please help him find one.\n\nInput\n\nThe first line contains two integers n and m (1 \u2264 n \u2264 100, 1 \u2264 m \u2264 50) \u2014 the number of strings and the length of each string.\n\nNext n lines contain a string of length m each, consisting of lowercase Latin letters only. All strings are distinct.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_n>", "<T_i>-><T_i-1> <n> [a-z]{m}", "<T_1>->[a-z]{m}"], "constraints": ["1<=n<=100", "1<=m<=50"]}}
{"name": "393_A. Nineteen", "description": "Alice likes word \"nineteen\" very much. She has a string s and wants the string to contain as many such words as possible. For that reason she can rearrange the letters of the string.\n\nFor example, if she has string \"xiineteenppnnnewtnee\", she can get string \"xnineteenppnineteenw\", containing (the occurrences marked) two such words. More formally, word \"nineteen\" occurs in the string the number of times you can read it starting from some letter of the string. Of course, you shouldn't skip letters.\n\nHelp her to find the maximum number of \"nineteen\"s that she can get in her string.\n\nInput\n\nThe first line contains a non-empty string s, consisting only of lowercase English letters. The length of string s doesn't exceed 100.", "grammar": {"productions": ["<S>->[a-z]{1,100}"], "constraints": []}}
{"name": "p02848 AtCoder Beginner Contest 146 - ROT N", "description": "We have a string S consisting of uppercase English letters. Additionally, an integer N will be given.\n\nShift each character of S by N in alphabetical order (see below), and print the resulting string.\n\nWe assume that `A` follows `Z`. For example, shifting `A` by 2 results in `C` (`A` \\to `B` \\to `C`), and shifting `Y` by 3 results in `B` (`Y` \\to `Z` \\to `A` \\to `B`).\n\nConstraints\n\n* 0 \\leq N \\leq 26\n* 1 \\leq |S| \\leq 10^4\n* S consists of uppercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nS", "grammar": {"productions": ["<S>->N <n> [A-Z]{1,10^4}"], "constraints": ["0<=N<=26"]}}
{"name": "p02726 AtCoder Beginner Contest 160 - Line++", "description": "We have an undirected graph G with N vertices numbered 1 to N and N edges as follows:\n\n* For each i=1,2,...,N-1, there is an edge between Vertex i and Vertex i+1.\n* There is an edge between Vertex X and Vertex Y.\n\n\n\nFor each k=1,2,...,N-1, solve the problem below:\n\n* Find the number of pairs of integers (i,j) (1 \\leq i < j \\leq N) such that the shortest distance between Vertex i and Vertex j in G is k.\n\nConstraints\n\n* 3 \\leq N \\leq 2 \\times 10^3\n* 1 \\leq X,Y \\leq N\n* X+1 < Y\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN X Y", "grammar": {"productions": ["<S>->N <s> X <s> Y"], "constraints": ["3<=N<=2*10^3", "1<=X,Y<=N", "X+1<Y"]}}
{"name": "1253_A. Single Push", "description": "You're given two arrays a[1 ... n] and b[1 ... n], both of the same length n.\n\nIn order to perform a push operation, you have to choose three integers l, r, k satisfying 1 \u2264 l \u2264 r \u2264 n and k > 0. Then, you will add k to elements a_l, a_{l+1}, \u2026, a_r.\n\nFor example, if a = [3, 7, 1, 4, 1, 2] and you choose (l = 3, r = 5, k = 2), the array a will become [3, 7, \\underline{3, 6, 3}, 2].\n\nYou can do this operation at most once. Can you make array a equal to array b?\n\n(We consider that a = b if and only if, for every 1 \u2264 i \u2264 n, a_i = b_i)\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases in the input.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 100\\ 000) \u2014 the number of elements in each array.\n\nThe second line of each test case contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 1000).\n\nThe third line of each test case contains n integers b_1, b_2, \u2026, b_n (1 \u2264 b_i \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n> <n> <Z_n>", "<T_1>->[n] <n> <L_n> <n> <Z_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1", "<Z_i>-><Z_i-1> <s> b_i", "<Z_1>->b_1"], "constraints": ["1<=t<=20", "1<=n<=100000", "1<=a_i<=1000", "1<=b_i<=1000"]}}
{"name": "p02824 AtCoder Grand Contest 041 - Voting Judges", "description": "N problems are proposed for an upcoming contest. Problem i has an initial integer score of A_i points.\n\nM judges are about to vote for problems they like. Each judge will choose exactly V problems, independently from the other judges, and increase the score of each chosen problem by 1.\n\nAfter all M judges cast their vote, the problems will be sorted in non-increasing order of score, and the first P problems will be chosen for the problemset. Problems with the same score can be ordered arbitrarily, this order is decided by the chief judge.\n\nHow many problems out of the given N have a chance to be chosen for the problemset?\n\nConstraints\n\n* 2 \\le N \\le 10^5\n* 1 \\le M \\le 10^9\n* 1 \\le V \\le N - 1\n* 1 \\le P \\le N - 1\n* 0 \\le A_i \\le 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M V P\nA_1 A_2 ... A_N", "grammar": {"productions": ["<S>->[N] <s> M <s> V <s> P <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["2<=N<=10^5", "1<=M<=10^9", "1<=V<=N-1", "1<=P<=N-1", "0<=A_i<=10^9"]}}
{"name": "1372_B. Omkar and Last Class of Math", "description": "In Omkar's last class of math, he learned about the least common multiple, or LCM. LCM(a, b) is the smallest positive integer x which is divisible by both a and b.\n\nOmkar, having a laudably curious mind, immediately thought of a problem involving the LCM operation: given an integer n, find positive integers a and b such that a + b = n and LCM(a, b) is the minimum value possible.\n\nCan you help Omkar solve his ludicrously challenging math problem?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 10). Description of the test cases follows.\n\nEach test case consists of a single integer n (2 \u2264 n \u2264 10^{9}).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n", "<T_1>->n"], "constraints": ["1<=t<=10", "2<=n<=10^9"]}}
{"name": "897_A. Scarborough Fair", "description": "Are you going to Scarborough Fair?\n\nParsley, sage, rosemary and thyme.\n\nRemember me to one who lives there.\n\nHe once was the true love of mine.\n\nWillem is taking the girl to the highest building in island No.28, however, neither of them knows how to get there.\n\nWillem asks his friend, Grick for directions, Grick helped them, and gave them a task.\n\nAlthough the girl wants to help, Willem insists on doing it by himself.\n\nGrick gave Willem a string of length n.\n\nWillem needs to do m operations, each operation has four parameters l, r, c1, c2, which means that all symbols c1 in range [l, r] (from l-th to r-th, including l and r) are changed into c2. String is 1-indexed.\n\nGrick wants to know the final string after all the m operations.\n\nInput\n\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 100).\n\nThe second line contains a string s of length n, consisting of lowercase English letters.\n\nEach of the next m lines contains four parameters l, r, c1, c2 (1 \u2264 l \u2264 r \u2264 n, c1, c2 are lowercase English letters), separated by space.", "grammar": {"productions": ["<S>->[n] <s> m <n> [a-z]{n} <n> l <s> r <s> [a-z]{1} <s> [a-z]{1}"], "constraints": ["1<=n,m<=100", "1<=l<=r<=n"]}}
{"name": "p02677 AtCoder Beginner Contest 168 - : (Colon)", "description": "Consider an analog clock whose hour and minute hands are A and B centimeters long, respectively.\n\nAn endpoint of the hour hand and an endpoint of the minute hand are fixed at the same point, around which each hand rotates clockwise at constant angular velocity. It takes the hour and minute hands 12 hours and 1 hour to make one full rotation, respectively.\n\nAt 0 o'clock, the two hands overlap each other. H hours and M minutes later, what is the distance in centimeters between the unfixed endpoints of the hands?\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq A, B \\leq 1000\n* 0 \\leq H \\leq 11\n* 0 \\leq M \\leq 59\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B H M", "grammar": {"productions": ["<S>->A <s> B <s> H <s> M"], "constraints": ["1<=A,B<=1000", "0<=H<=11", "0<=M<=59"]}}
{"name": "1293_B. JOE is on TV!", "description": "[3R2 - Standby for Action](https://www.youtube.com/watch?v=P2ZVC9aoiKo)\n\nOur dear Cafe's owner, JOE Miller, will soon take part in a new game TV-show \"1 vs. n\"!\n\nThe game goes in rounds, where in each round the host asks JOE and his opponents a common question. All participants failing to answer are eliminated. The show ends when only JOE remains (we assume that JOE never answers a question wrong!).\n\nFor each question JOE answers, if there are s (s > 0) opponents remaining and t (0 \u2264 t \u2264 s) of them make a mistake on it, JOE receives \\displaystylet/s dollars, and consequently there will be s - t opponents left for the next question.\n\nJOE wonders what is the maximum possible reward he can receive in the best possible scenario. Yet he has little time before show starts, so can you help him answering it instead?\n\nInput\n\nThe first and single line contains a single integer n (1 \u2264 n \u2264 10^5), denoting the number of JOE's opponents in the show.", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=10^5"]}}
{"name": "p02629 AtCoder Beginner Contest 171 - One Quadrillion and One Dalmatians", "description": "1000000000000001 dogs suddenly appeared under the roof of Roger's house, all of which he decided to keep. The dogs had been numbered 1 through 1000000000000001, but he gave them new names, as follows:\n\n* the dogs numbered 1,2,\\cdots,26 were respectively given the names `a`, `b`, ..., `z`;\n* the dogs numbered 27,28,29,\\cdots,701,702  were respectively given the names `aa`, `ab`, `ac`, ..., `zy`, `zz`;\n* the dogs numbered 703,704,705,\\cdots,18277,18278  were respectively given the names `aaa`, `aab`, `aac`, ..., `zzy`, `zzz`;\n* the dogs numbered 18279,18280,18281,\\cdots,475253,475254  were respectively given the names `aaaa`, `aaab`, `aaac`, ..., `zzzy`, `zzzz`;\n* the dogs numbered 475255,475256,\\cdots  were respectively given the names `aaaaa`, `aaaab`, ...;\n* and so on.\n\n\n\nTo sum it up, the dogs numbered 1, 2, \\cdots were respectively given the following names:\n\n`a`, `b`, ..., `z`, `aa`, `ab`, ..., `az`, `ba`, `bb`, ..., `bz`, ..., `za`, `zb`, ..., `zz`, `aaa`, `aab`, ..., `aaz`, `aba`, `abb`, ..., `abz`, ..., `zzz`, `aaaa`, ...\n\nNow, Roger asks you:\n\n\"What is the name for the dog numbered N?\"\n\nConstraints\n\n* N is an integer.\n* 1 \\leq N \\leq 1000000000000001\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["1<=N<=1000000000000001"]}}
{"name": "75_A. Life Without Zeros", "description": "Can you imagine our life if we removed all zeros from it? For sure we will have many problems.\n\nIn this problem we will have a simple example if we removed all zeros from our life, it's the addition operation. Let's assume you are given this equation a + b = c, where a and b are positive integers, and c is the sum of a and b. Now let's remove all zeros from this equation. Will the equation remain correct after removing all zeros?\n\nFor example if the equation is 101 + 102 = 203, if we removed all zeros it will be 11 + 12 = 23 which is still a correct equation.\n\nBut if the equation is 105 + 106 = 211, if we removed all zeros it will be 15 + 16 = 211 which is not a correct equation.\n\nInput\n\nThe input will consist of two lines, the first line will contain the integer a, and the second line will contain the integer b which are in the equation as described above (1 \u2264 a, b \u2264 10^9). There won't be any leading zeros in both. The value of c should be calculated as c = a + b.", "grammar": {"productions": ["<S>->a <n> b"], "constraints": ["1<=a,b<=10^9"]}}
{"name": "p02606 AIsing Programming Contest 2020 - Number of Multiples", "description": "How many multiples of d are there among the integers between L and R (inclusive)?\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq L \\leq R \\leq 100\n* 1 \\leq d \\leq 100\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nL R d", "grammar": {"productions": ["<S>->L <s> R <s> d"], "constraints": ["1<=L<=R<=100", "1<=d<=100"]}}
{"name": "1421_B. Putting Bricks in the Wall", "description": "Pink Floyd are pulling a prank on Roger Waters. They know he doesn't like [walls](https://www.youtube.com/watch?v=YR5ApYxkU-U), he wants to be able to walk freely, so they are blocking him from exiting his room which can be seen as a grid.\n\nRoger Waters has a square grid of size n\u00d7 n and he wants to traverse his grid from the upper left (1,1) corner to the lower right corner (n,n). Waters can move from a square to any other square adjacent by a side, as long as he is still in the grid. Also except for the cells (1,1) and (n,n) every cell has a value 0 or 1 in it.\n\nBefore starting his traversal he will pick either a 0 or a 1 and will be able to only go to cells values in which are equal to the digit he chose. The starting and finishing cells (1,1) and (n,n) are exempt from this rule, he may go through them regardless of picked digit. Because of this the cell (1,1) takes value the letter 'S' and the cell (n,n) takes value the letter 'F'.\n\nFor example, in the first example test case, he can go from (1, 1) to (n, n) by using the zeroes on this path: (1, 1), (2, 1), (2, 2), (2, 3), (3, 3), (3, 4), (4, 4)\n\nThe rest of the band (Pink Floyd) wants Waters to not be able to do his traversal, so while he is not looking they will invert at most two cells in the grid (from 0 to 1 or vice versa). They are afraid they will not be quick enough and asked for your help in choosing the cells.  Note that you cannot invert cells (1, 1) and (n, n).\n\nWe can show that there always exists a solution for the given constraints.\n\nAlso note that Waters will pick his digit of the traversal after the band has changed his grid, so he must not be able to reach (n,n) no matter what digit he picks.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 50). Description of the test cases follows.\n\nThe first line of each test case contains one integers n (3 \u2264 n \u2264 200).\n\nThe following n lines of each test case contain the binary grid, square (1, 1) being colored in 'S' and square (n, n) being colored in 'F'.\n\nThe sum of values of n doesn't exceed 200.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <n> [01SF]{n}", "<L_1>->[01SF]{n}"], "constraints": ["1<=t<=50", "3<=n<=200"]}}
{"name": "651_A. Joysticks", "description": "Friends are going to play console. They have two joysticks and only one charger for them. Initially first joystick is charged at a1 percent and second one is charged at a2 percent. You can connect charger to a joystick only at the beginning of each minute. In one minute joystick either discharges by 2 percent (if not connected to a charger) or charges by 1 percent (if connected to a charger).\n\nGame continues while both joysticks have a positive charge. Hence, if at the beginning of minute some joystick is charged by 1 percent, it has to be connected to a charger, otherwise the game stops. If some joystick completely discharges (its charge turns to 0), the game also stops.\n\nDetermine the maximum number of minutes that game can last. It is prohibited to pause the game, i. e. at each moment both joysticks should be enabled. It is allowed for joystick to be charged by more than 100 percent.\n\nInput\n\nThe first line of the input contains two positive integers a1 and a2 (1 \u2264 a1, a2 \u2264 100), the initial charge level of first and second joystick respectively.", "grammar": {"productions": ["<S>->a1 <s> a2"], "constraints": ["1<=a1<=100", "1<=a2<=100"]}}
{"name": "p04012 AtCoder Beginner Contest 044 - Beautiful Strings", "description": "Let w be a string consisting of lowercase letters. We will call w beautiful if the following condition is satisfied:\n\n* Each lowercase letter of the English alphabet occurs even number of times in w.\n\n\n\nYou are given the string w. Determine if w is beautiful.\n\nConstraints\n\n* 1 \\leq |w| \\leq 100\n* w consists of lowercase letters (`a`-`z`).\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nw", "grammar": {"productions": ["<S>->[a-z]{1,100}"], "constraints": []}}
{"name": "552_B. Vanya and Books", "description": "Vanya got an important task \u2014 he should enumerate books in the library and label each book with its number. Each of the n books should be assigned with a number from 1 to n. Naturally, distinct books should be assigned distinct numbers.\n\nVanya wants to know how many digits he will have to write down as he labels the books.\n\nInput\n\nThe first line contains integer n (1 \u2264 n \u2264 10^9) \u2014 the number of books in the library.", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=10^9"]}}
{"name": "p03294 AtCoder Beginner Contest 103 - Modulo Summation", "description": "You are given N positive integers a_1, a_2, ..., a_N.\n\nFor a non-negative integer m, let f(m) = (m\\ mod\\ a_1) + (m\\ mod\\ a_2) + ... + (m\\ mod\\ a_N).\n\nHere, X\\ mod\\ Y denotes the remainder of the division of X by Y.\n\nFind the maximum value of f.\n\nConstraints\n\n* All values in input are integers.\n* 2 \\leq N \\leq 3000\n* 2 \\leq a_i \\leq 10^5\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 a_2 ... a_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["2<=N<=3000", "2<=a_i<=10^5"]}}
{"name": "p03556 AtCoder Beginner Contest 077 - Around Square", "description": "Find the largest square number not exceeding N. Here, a square number is an integer that can be represented as the square of an integer.\n\nConstraints\n\n* 1 \\leq N \\leq 10^9\n* N is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["1<=N<=10^9"]}}
{"name": "1225_A. Forgetting Things", "description": "Kolya is very absent-minded. Today his math teacher asked him to solve a simple problem with the equation a + 1 = b with positive integers a and b, but Kolya forgot the numbers a and b. He does, however, remember that the first (leftmost) digit of a was d_a, and the first (leftmost) digit of b was d_b.\n\nCan you reconstruct any equation a + 1 = b that satisfies this property? It may be possible that Kolya misremembers the digits, and there is no suitable equation, in which case report so.\n\nInput\n\nThe only line contains two space-separated digits d_a and d_b (1 \u2264 d_a, d_b \u2264 9).", "grammar": {"productions": ["<S>->da <s> db"], "constraints": ["1<=da<=9", "1<=db<=9"]}}
{"name": "149_A. Business trip", "description": "What joy! Petya's parents went on a business trip for the whole year and the playful kid is left all by himself. Petya got absolutely happy. He jumped on the bed and threw pillows all day long, until... \n\nToday Petya opened the cupboard and found a scary note there. His parents had left him with duties: he should water their favourite flower all year, each day, in the morning, in the afternoon and in the evening. \"Wait a second!\" \u2014 thought Petya. He know for a fact that if he fulfills the parents' task in the i-th (1 \u2264 i \u2264 12) month of the year, then the flower will grow by ai centimeters, and if he doesn't water the flower in the i-th month, then the flower won't grow this month. Petya also knows that try as he might, his parents won't believe that he has been watering the flower if it grows strictly less than by k centimeters. \n\nHelp Petya choose the minimum number of months when he will water the flower, given that the flower should grow no less than by k centimeters.\n\nInput\n\nThe first line contains exactly one integer k (0 \u2264 k \u2264 100). The next line contains twelve space-separated integers: the i-th (1 \u2264 i \u2264 12) number in the line represents ai (0 \u2264 ai \u2264 100).", "grammar": {"productions": ["<S>->k <n> a1 <s> a2 <s> a3 <s> a4 <s> a5 <s> a6 <s> a7 <s> a8 <s> a9 <s> a10 <s> a11 <s> a12"], "constraints": ["0<=k<=100", "0<=a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12<=100"]}}
{"name": "1311_B. WeirdSort", "description": "You are given an array a of length n.\n\nYou are also given a set of distinct positions p_1, p_2, ..., p_m, where 1 \u2264 p_i < n. The position p_i means that you can swap elements a[p_i] and a[p_i + 1]. You can apply this operation any number of times for each of the given positions.\n\nYour task is to determine if it is possible to sort the initial array in non-decreasing order (a_1 \u2264 a_2 \u2264 ... \u2264 a_n) using only allowed swaps.\n\nFor example, if a = [3, 2, 1] and p = [1, 2], then we can first swap elements a[2] and a[3] (because position 2 is contained in the given set p). We get the array a = [3, 1, 2]. Then we swap a[1] and a[2] (position 1 is also contained in p). We get the array a = [1, 3, 2]. Finally, we swap a[2] and a[3] again and get the array a = [1, 2, 3], sorted in non-decreasing order.\n\nYou can see that if a = [4, 1, 2, 3] and p = [3, 2] then you cannot sort the array.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThen t test cases follow. The first line of each test case contains two integers n and m (1 \u2264 m < n \u2264 100) \u2014 the number of elements in a and the number of elements in p. The second line of the test case contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 100). The third line of the test case contains m integers p_1, p_2, ..., p_m (1 \u2264 p_i < n, all p_i are distinct) \u2014 the set of positions described in the problem statement.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <s> [m] <n> <L_n> <n> <Z_m>", "<T_1>->[n] <s> [m] <n> <L_n> <n> <Z_m>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1", "<Z_i>-><Z_i-1> <s> p_i", "<Z_1>->p_1"], "constraints": ["1<=t<=100", "1<=m<n<=100", "1<=a_i<=100", "1<=p_i<n"]}}
{"name": "p03752 square869120Contest #4 - Buildings are Colorful!", "description": "Input Format\n\n\nN K\na_1 a_2 a_3 ... a_N\n\n\nOutput Format\n\nPrint the minimum cost in one line. In the end put a line break.\n\n\nConstraints\n\n* 1 \u2264 K \u2264 N \u2264 15\n* 1 \u2264 a_i \u2264 10^9\n\n\n\nScoring\n\nSubtask 1 [120 points]\n\n\n* N = K\n\nSubtask 2 [90 points]\n\n\n* N \u2264 5\n* a_i \u2264 7\n\nSubtask 3 [140 points]\n\n\n* There are no additional constraints.\n\nOutput Format\n\nPrint the minimum cost in one line. In the end put a line break.\n\n\nConstraints\n\n* 1 \u2264 K \u2264 N \u2264 15\n* 1 \u2264 a_i \u2264 10^9\n\n\n\nScoring\n\nSubtask 1 [120 points]\n\n\n* N = K\n\nSubtask 2 [90 points]\n\n\n* N \u2264 5\n* a_i \u2264 7\n\nSubtask 3 [140 points]\n\n\n* There are no additional constraints.\n\nInput Format\n\n\nN K\na_1 a_2 a_3 ... a_N\n\nExample\n\nInput\n\n5 5\n3949 3774 3598 3469 3424", "grammar": {"productions": ["<S>->[N] <s> K <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=K<=15", "1<=N<=15", "1<=a_i<=10^9"]}}
{"name": "785_A. Anton and Polyhedrons", "description": "Anton's favourite geometric figures are regular polyhedrons. Note that there are five kinds of regular polyhedrons: \n\n  * Tetrahedron. Tetrahedron has 4 triangular faces. \n  * Cube. Cube has 6 square faces. \n  * Octahedron. Octahedron has 8 triangular faces. \n  * Dodecahedron. Dodecahedron has 12 pentagonal faces. \n  * Icosahedron. Icosahedron has 20 triangular faces. \n\n\n\nAll five kinds of polyhedrons are shown on the picture below:\n\n<image>\n\nAnton has a collection of n polyhedrons. One day he decided to know, how many faces his polyhedrons have in total. Help Anton and find this number!\n\nInput\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 200 000) \u2014 the number of polyhedrons in Anton's collection.\n\nEach of the following n lines of the input contains a string si \u2014 the name of the i-th polyhedron in Anton's collection. The string can look like this:\n\n  * \"Tetrahedron\" (without quotes), if the i-th polyhedron in Anton's collection is a tetrahedron. \n  * \"Cube\" (without quotes), if the i-th polyhedron in Anton's collection is a cube. \n  * \"Octahedron\" (without quotes), if the i-th polyhedron in Anton's collection is an octahedron. \n  * \"Dodecahedron\" (without quotes), if the i-th polyhedron in Anton's collection is a dodecahedron. \n  * \"Icosahedron\" (without quotes), if the i-th polyhedron in Anton's collection is an icosahedron.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> <C>", "<T_1>-><C>", "<C>->Tetrahedron|Cube|Octahedron|Dodecahedron|Icosahedron"], "constraints": ["1<=N<=200000"]}}
{"name": "1417_B. Two Arrays", "description": "RedDreamer has an array a consisting of n non-negative integers, and an unlucky integer T.\n\nLet's denote the misfortune of array b having length m as f(b) \u2014 the number of pairs of integers (i, j) such that 1 \u2264 i < j \u2264 m and b_i + b_j = T. RedDreamer has to paint each element of a into one of two colors, white and black (for each element, the color is chosen independently), and then create two arrays c and d so that all white elements belong to c, and all black elements belong to d (it is possible that one of these two arrays becomes empty). RedDreamer wants to paint the elements in such a way that f(c) + f(d) is minimum possible.\n\nFor example:\n\n  * if n = 6, T = 7 and a = [1, 2, 3, 4, 5, 6], it is possible to paint the 1-st, the 4-th and the 5-th elements white, and all other elements black. So c = [1, 4, 5], d = [2, 3, 6], and f(c) + f(d) = 0 + 0 = 0; \n  * if n = 3, T = 6 and a = [3, 3, 3], it is possible to paint the 1-st element white, and all other elements black. So c = [3], d = [3, 3], and f(c) + f(d) = 0 + 1 = 1. \n\n\n\nHelp RedDreamer to paint the array optimally!\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Then t test cases follow.\n\nThe first line of each test case contains two integers n and T (1 \u2264 n \u2264 10^5, 0 \u2264 T \u2264 10^9) \u2014 the number of elements in the array and the unlucky integer, respectively. \n\nThe second line contains n integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^9) \u2014 the elements of the array. \n\nThe sum of n over all test cases does not exceed 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <s> T <n> <L_n>", "<T_1>->[n] <s> T <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=1000", "1<=n<=10^5", "0<=T<=10^9", "0<=a_i<=10^9"]}}
{"name": "p04043 AtCoder Beginner Contest 042 - Iroha and Haiku (ABC Edition)", "description": "Iroha loves Haiku. Haiku is a short form of Japanese poetry. A Haiku consists of three phrases with 5, 7 and 5 syllables, in this order.\n\nTo create a Haiku, Iroha has come up with three different phrases. These phrases have A, B and C syllables, respectively. Determine whether she can construct a Haiku by using each of the phrases once, in some order.\n\nConstraints\n\n* 1\u2266A,B,C\u226610\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nA B C", "grammar": {"productions": ["<S>->A <s> B <s> C"], "constraints": ["1<=A,B,C<=10"]}}
{"name": "112_A. Petya and Strings", "description": "Little Petya loves presents. His mum bought him two strings of the same size for his birthday. The strings consist of uppercase and lowercase Latin letters. Now Petya wants to compare those two strings lexicographically. The letters' case does not matter, that is an uppercase letter is considered equivalent to the corresponding lowercase letter. Help Petya perform the comparison.\n\nInput\n\nEach of the first two lines contains a bought string. The strings' lengths range from 1 to 100 inclusive. It is guaranteed that the strings are of the same length and also consist of uppercase and lowercase Latin letters.", "grammar": {"productions": ["<S>->[a-zA-Z]{S} <n> [a-zA-Z]{S}"], "constraints": ["0<S<=100"]}}
{"name": "1409_D. Decrease the Sum of Digits", "description": "You are given a positive integer n. In one move, you can increase n by one (i.e. make n := n + 1). Your task is to find the minimum number of moves you need to perform in order to make the sum of digits of n be less than or equal to s.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 2 \u22c5 10^4) \u2014 the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains two integers n and s (1 \u2264 n \u2264 10^{18}; 1 \u2264 s \u2264 162).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n <s> s", "<T_1>->n <s> s"], "constraints": ["1<=t<=2*10^4", "1<=n<=10^18", "1<=s<=162"]}}
{"name": "1009_A. Game Shopping", "description": "Maxim wants to buy some games at the local game shop. There are n games in the shop, the i-th game costs c_i.\n\nMaxim has a wallet which can be represented as an array of integers. His wallet contains m bills, the j-th bill has value a_j.\n\nGames in the shop are ordered from left to right, Maxim tries to buy every game in that order.\n\nWhen Maxim stands at the position i in the shop, he takes the first bill from his wallet (if his wallet is empty then he proceeds to the next position immediately) and tries to buy the i-th game using this bill. After Maxim tried to buy the n-th game, he leaves the shop.\n\nMaxim buys the i-th game if and only if the value of the first bill (which he takes) from his wallet is greater or equal to the cost of the i-th game. If he successfully buys the i-th game, the first bill from his wallet disappears and the next bill becomes first. Otherwise Maxim leaves the first bill in his wallet (this bill still remains the first one) and proceeds to the next game.\n\nFor example, for array c = [2, 4, 5, 2, 4] and array a = [5, 3, 4, 6] the following process takes place: Maxim buys the first game using the first bill (its value is 5), the bill disappears, after that the second bill (with value 3) becomes the first one in Maxim's wallet, then Maxim doesn't buy the second game because c_2 > a_2, the same with the third game, then he buys the fourth game using the bill of value a_2 (the third bill becomes the first one in Maxim's wallet) and buys the fifth game using the bill of value a_3.\n\nYour task is to get the number of games Maxim will buy.\n\nInput\n\nThe first line of the input contains two integers n and m (1 \u2264 n, m \u2264 1000) \u2014 the number of games and the number of bills in Maxim's wallet.\n\nThe second line of the input contains n integers c_1, c_2, ..., c_n (1 \u2264 c_i \u2264 1000), where c_i is the cost of the i-th game.\n\nThe third line of the input contains m integers a_1, a_2, ..., a_m (1 \u2264 a_j \u2264 1000), where a_j is the value of the j-th bill from the Maxim's wallet.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_n> <n> <L_m>", "<T_i>-><T_i-1> <s> c_i", "<T_1>->c_1", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=n<=1000", "1<=m<=1000", "1<=c_i<=1000", "1<=a_i<=1000"]}}
{"name": "550_C. Divisibility by Eight", "description": "You are given a non-negative integer n, its decimal representation consists of at most 100 digits and doesn't contain leading zeroes.\n\nYour task is to determine if it is possible in this case to remove some of the digits (possibly not remove any digit at all) so that the result contains at least one digit, forms a non-negative integer, doesn't have leading zeroes and is divisible by 8. After the removing, it is forbidden to rearrange the digits.\n\nIf a solution exists, you should print it.\n\nInput\n\nThe single line of the input contains a non-negative integer n. The representation of number n doesn't contain any leading zeroes and its length doesn't exceed 100 digits.", "grammar": {"productions": ["<S>->[0-9]{1,100}"], "constraints": []}}
{"name": "p03186 AtCoder Grand Contest 030 - Poisonous Cookies", "description": "Takahashi has A untasty cookies containing antidotes, B tasty cookies containing antidotes and C tasty cookies containing poison.\n\nEating a cookie containing poison results in a stomachache, and eating a cookie containing poison while having a stomachache results in a death. As he wants to live, he cannot eat one in such a situation. Eating a cookie containing antidotes while having a stomachache cures it, and there is no other way to cure stomachaches.\n\nFind the maximum number of tasty cookies that Takahashi can eat.\n\nConstraints\n\n* 0 \\leq A,B,C \\leq 10^9\n* A,B and C are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B C", "grammar": {"productions": ["<S>->A <s> B <s> C"], "constraints": ["0<=A,B,C<=10^9"]}}
{"name": "1205_A. Almost Equal", "description": "You are given integer n. You have to arrange numbers from 1 to 2n, using each of them exactly once, on the circle, so that the following condition would be satisfied:\n\nFor every n consecutive numbers on the circle write their sum on the blackboard. Then any two of written on the blackboard 2n numbers differ not more than by 1.\n\nFor example, choose n = 3. On the left you can see an example of a valid arrangement: 1 + 4 + 5 = 10, 4 + 5 + 2 = 11, 5 + 2 + 3 = 10, 2 + 3 + 6 = 11, 3 + 6 + 1 = 10, 6 + 1 + 4 = 11, any two numbers differ by at most 1. On the right you can see an invalid arrangement: for example, 5 + 1 + 6 = 12, and 3 + 2 + 4 = 9, 9 and 12 differ more than by 1.\n\n<image>\n\nInput\n\nThe first and the only line contain one integer n (1 \u2264 n \u2264 10^5).", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=10^5"]}}
{"name": "p02262 Shell Sort", "description": "Shell Sort\n\nShell Sort is a generalization of Insertion Sort to arrange a list of $n$ elements $A$.\n\n\n1  insertionSort(A, n, g)\n2      for i = g to n-1\n3          v = A[i]\n4          j = i - g\n5          while j >= 0 && A[j] > v\n6              A[j+g] = A[j]\n7              j = j - g\n8              cnt++\n9          A[j+g] = v\n10\n11 shellSort(A, n)\n12     cnt = 0\n13     m = ?\n14     G[] = {?, ?,..., ?}\n15     for i = 0 to m-1\n16         insertionSort(A, n, G[i])\n\n\nA function shellSort(A, n) performs a function insertionSort(A, n, g), which considers every $g$-th elements. Beginning with large values of $g$, it repeats the insertion sort with smaller $g$.\n\nYour task is to complete the above program by filling ?. Write a program which reads an integer $n$ and a sequence $A$, and prints $m$, $G_i (i = 0, 1, ..., m \u2212 1)$ in the pseudo code and the sequence $A$ in ascending order. The output of your program must meet the following requirements:\n\n* $1 \\leq m \\leq 100$\n* $0 \\leq G_i \\leq n$\n* cnt does not exceed $\\lceil n^{1.5}\\rceil$\n\nConstraints\n\n* $1 \\leq n \\leq 1,000,000$\n* $0 \\leq A_i \\leq 10^9$\n\nInput\n\nIn the first line, an integer $n$ is given. In the following $n$ lines, $A_i (i=0,1,...,n-1)$ are given for each line.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> A_i", "<T_1>->A_1"], "constraints": ["1<=n<=1000000", "0<=A_i<=10^9"]}}
{"name": "478_A. Initial Bet", "description": "There are five people playing a game called \"Generosity\". Each person gives some non-zero number of coins b as an initial bet. After all players make their bets of b coins, the following operation is repeated for several times: a coin is passed from one player to some other player.\n\nYour task is to write a program that can, given the number of coins each player has at the end of the game, determine the size b of the initial bet or find out that such outcome of the game cannot be obtained for any positive number of coins b in the initial bet.\n\nInput\n\nThe input consists of a single line containing five integers c1, c2, c3, c4 and c5 \u2014 the number of coins that the first, second, third, fourth and fifth players respectively have at the end of the game (0 \u2264 c1, c2, c3, c4, c5 \u2264 100).", "grammar": {"productions": ["<S>->c1 <s> c2 <s> c3 <s> c4 <s> c5"], "constraints": ["0<=c1<=100", "0<=c2<=100", "0<=c3<=100", "0<=c4<=100", "0<=c5<=100"]}}
{"name": "p03069 Tenka1 Programmer Beginner Contest 2019 - Stones", "description": "There are N stones arranged in a row. Every stone is painted white or black. A string S represents the color of the stones. The i-th stone from the left is white if the i-th character of S is `.`, and the stone is black if the character is `#`.\n\nTakahashi wants to change the colors of some stones to black or white so that there will be no white stone immediately to the right of a black stone. Find the minimum number of stones that needs to be recolored.\n\nConstraints\n\n* 1 \\leq N \\leq 2\\times 10^5\n* S is a string of length N consisting of `.` and `#`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nS", "grammar": {"productions": ["<S>->N <n> [.#]{N}"], "constraints": ["1<=N<=2*10^5"]}}
{"name": "p02791 AtCoder Beginner Contest 152 - Low Elements", "description": "Given is a permutation P_1, \\ldots, P_N of 1, \\ldots, N. Find the number of integers i (1 \\leq i \\leq N) that satisfy the following condition:\n\n* For any integer j (1 \\leq j \\leq i), P_i \\leq P_j.\n\nConstraints\n\n* 1 \\leq N \\leq 2 \\times 10^5\n* P_1, \\ldots, P_N is a permutation of 1, \\ldots, N.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nP_1 ... P_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> P_i", "<T_1>->P_1"], "constraints": ["1<=N<=2*10^5", "1<=P_i<=N", "P_i!=P_j"]}}
{"name": "1313_C1. Skyscrapers (easy version)", "description": "This is an easier version of the problem. In this version n \u2264 1000\n\nThe outskirts of the capital are being actively built up in Berland. The company \"Kernel Panic\" manages the construction of a residential complex of skyscrapers in New Berlskva. All skyscrapers are built along the highway. It is known that the company has already bought n plots along the highway and is preparing to build n skyscrapers, one skyscraper per plot.\n\nArchitects must consider several requirements when planning a skyscraper. Firstly, since the land on each plot has different properties, each skyscraper has a limit on the largest number of floors it can have. Secondly, according to the design code of the city, it is unacceptable for a skyscraper to simultaneously have higher skyscrapers both to the left and to the right of it.\n\nFormally, let's number the plots from 1 to n. Then if the skyscraper on the i-th plot has a_i floors, it must hold that a_i is at most m_i (1 \u2264 a_i \u2264 m_i). Also there mustn't be integers j and k such that j < i < k and a_j > a_i < a_k. Plots j and k are not required to be adjacent to i.\n\nThe company wants the total number of floors in the built skyscrapers to be as large as possible. Help it to choose the number of floors for each skyscraper in an optimal way, i.e. in such a way that all requirements are fulfilled, and among all such construction plans choose any plan with the maximum possible total number of floors.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 1000) \u2014 the number of plots.\n\nThe second line contains the integers m_1, m_2, \u2026, m_n (1 \u2264 m_i \u2264 10^9) \u2014 the limit on the number of floors for every possible number of floors for a skyscraper on each plot.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> m_i", "<T_1>->m_1"], "constraints": ["1<=n<=1000", "1<=m_i<=10^9"]}}
{"name": "1201_A. Important Exam", "description": "A class of students wrote a multiple-choice test.\n\nThere are n students in the class. The test had m questions, each of them had 5 possible answers (A, B, C, D or E). There is exactly one correct answer for each question. The correct answer for question i worth a_i points. Incorrect answers are graded with zero points.\n\nThe students remember what answers they gave on the exam, but they don't know what are the correct answers. They are very optimistic, so they want to know what is the maximum possible total score of all students in the class. \n\nInput\n\nThe first line contains integers n and m (1 \u2264 n, m \u2264 1000) \u2014 the number of students in the class and the number of questions in the test.\n\nEach of the next n lines contains string s_i (|s_i| = m), describing an answer of the i-th student. The j-th character represents the student answer (A, B, C, D or E) on the j-th question.\n\nThe last line contains m integers a_1, a_2, \u2026, a_m (1 \u2264 a_i \u2264 1000) \u2014 the number of points for the correct answer for every question.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_n> <n> <L_m>", "<T_i>-><T_i-1> <n> [ABCDE]{m}", "<T_1>->[ABCDE]{m}", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=n<=1000", "1<=m<=1000", "1<=a_i<=1000"]}}
{"name": "p03038 AtCoder Beginner Contest 127 - Integer Cards", "description": "You have N cards. On the i-th card, an integer A_i is written.\n\nFor each j = 1, 2, ..., M in this order, you will perform the following operation once:\n\nOperation: Choose at most B_j cards (possibly zero). Replace the integer written on each chosen card with C_j.\n\nFind the maximum possible sum of the integers written on the N cards after the M operations.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 10^5\n* 1 \\leq M \\leq 10^5\n* 1 \\leq A_i, C_i \\leq 10^9\n* 1 \\leq B_i \\leq N\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nA_1 A_2 ... A_N\nB_1 C_1\nB_2 C_2\n\\vdots\nB_M C_M", "grammar": {"productions": ["<S>->[N] <s> [M] <n> <T_N> <n> <L_M>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1", "<L_i>-><L_i-1> <n> B_i <s> C_i", "<L_1>->B_1 <s> C_1"], "constraints": ["1<=N<=10^5", "1<=M<=10^5", "1<=A_i<=10^9", "1<=C_i<=10^9", "1<=B_i<=N"]}}
{"name": "p02981 AtCoder Beginner Contest 133 - T or T", "description": "N of us are going on a trip, by train or taxi.\n\nThe train will cost each of us A yen (the currency of Japan).\n\nThe taxi will cost us a total of B yen.\n\nHow much is our minimum total travel expense?\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 20\n* 1 \\leq A \\leq 50\n* 1 \\leq B \\leq 50\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN A B", "grammar": {"productions": ["<S>->N <s> A <s> B"], "constraints": ["1<=N<=20", "1<=A<=50", "1<=B<=50"]}}
{"name": "1371_C. A Cookie for You", "description": "Anna is a girl so brave that she is loved by everyone in the city and citizens love her cookies. She is planning to hold a party with cookies. Now she has a vanilla cookies and b chocolate cookies for the party.\n\nShe invited n guests of the first type and m guests of the second type to the party. They will come to the party in some order. After coming to the party, each guest will choose the type of cookie (vanilla or chocolate) to eat. There is a difference in the way how they choose that type:\n\nIf there are v vanilla cookies and c chocolate cookies at the moment, when the guest comes, then\n\n  * if the guest of the first type: if v>c the guest selects a vanilla cookie. Otherwise, the guest selects a chocolate cookie. \n  * if the guest of the second type: if v>c the guest selects a chocolate cookie. Otherwise, the guest selects a vanilla cookie. \n\n\n\nAfter that:\n\n  * If there is at least one cookie of the selected type, the guest eats one. \n  * Otherwise (there are no cookies of the selected type), the guest gets angry and returns to home. \n\n\n\nAnna wants to know if there exists some order of guests, such that no one guest gets angry. Your task is to answer her question.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Next t lines contain descriptions of test cases.\n\nFor each test case, the only line contains four integers a, b, n, m (0 \u2264 a,b,n,m \u2264 10^{18}, n+m \u2260 0).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> a <s> b <s> n <s> m", "<T_1>->a <s> b <s> n <s> m"], "constraints": ["1<=t<=1000", "0<=a,b,n,m<=10^18"]}}
{"name": "p02663 NOMURA Programming Competition 2020 - Study Scheduling", "description": "In this problem, we use the 24-hour clock.\n\nTakahashi gets up exactly at the time H_1 : M_1 and goes to bed exactly at the time H_2 : M_2. (See Sample Inputs below for clarity.) He has decided to study for K consecutive minutes while he is up. What is the length of the period in which he can start studying?\n\nConstraints\n\n* 0 \\le H_1, H_2 \\le 23\n* 0 \\le M_1, M_2 \\le 59\n* The time H_1 : M_1 comes before the time H_2 : M_2.\n* K \\ge 1\n* Takahashi is up for at least K minutes.\n* All values in input are integers (without leading zeros).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nH_1 M_1 H_2 M_2 K", "grammar": {"productions": ["<S>->H1 <s> M1 <s> H2 <s> M2 <s> K"], "constraints": ["0<=H1,H2<=23", "0<=M1,M2<=59", "K>=1"]}}
{"name": "864_A. Fair Game", "description": "Petya and Vasya decided to play a game. They have n cards (n is an even number). A single integer is written on each card.\n\nBefore the game Petya will choose an integer and after that Vasya will choose another integer (different from the number that Petya chose). During the game each player takes all the cards with number he chose. For example, if Petya chose number 5 before the game he will take all cards on which 5 is written and if Vasya chose number 10 before the game he will take all cards on which 10 is written.\n\nThe game is considered fair if Petya and Vasya can take all n cards, and the number of cards each player gets is the same.\n\nDetermine whether Petya and Vasya can choose integer numbers before the game so that the game is fair. \n\nInput\n\nThe first line contains a single integer n (2 \u2264 n \u2264 100) \u2014 number of cards. It is guaranteed that n is an even number.\n\nThe following n lines contain a sequence of integers a1, a2, ..., an (one integer per line, 1 \u2264 ai \u2264 100) \u2014 numbers written on the n cards.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> a_i", "<T_1>->a_1"], "constraints": ["2<=n<=100", "1<=a_i<=100"]}}
{"name": "1362_B. Johnny and His Hobbies", "description": "Among Johnny's numerous hobbies, there are two seemingly harmless ones: applying bitwise operations and sneaking into his dad's office. As it is usually the case with small children, Johnny is unaware that combining these two activities can get him in a lot of trouble.\n\nThere is a set S containing very important numbers on his dad's desk. The minute Johnny heard about it, he decided that it's a good idea to choose a positive integer k and replace each element s of the set S with s \u2295 k (\u2295 denotes the [exclusive or](https://en.wikipedia.org/wiki/Exclusive_or#Computer_science) operation). \n\nHelp him choose such k that Johnny's dad will not see any difference after his son is done playing (i.e. Johnny will get the same set as before playing). It is possible that no such number exists. It is also possible that there are many of them. In such a case, output the smallest one. Note that the order of elements in a set doesn't matter, i.e. set \\{1, 2, 3\\} equals to set \\{2, 1, 3\\}.\n\nFormally, find the smallest positive integer k such that \\\\{s \u2295 k | s \u2208 S\\} = S or report that there is no such number.\n\nFor example, if S = \\{1, 3, 4\\} and k = 2, new set will be equal to \\{3, 1, 6\\}. If S = \\{0, 1, 2, 3\\} and k = 1, after playing set will stay the same.\n\nInput\n\nIn the first line of input, there is a single integer t (1 \u2264 t \u2264 10^24), the number of test cases. In the next lines, t test cases follow. Each of them consists of two lines. \n\nIn the first line there is a single integer n (1 \u2264 n \u2264 10^24) denoting the number of elements in set S. Second line consists of n distinct integers s_i (0 \u2264 s_i < 10^24), elements of S.\n\nIt is guaranteed that the sum of n over all test cases will not exceed 10^24.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> s_i", "<L_1>->s_1"], "constraints": ["1<=t<=1024", "1<=n<=1024", "0<=s_i<=1024"]}}
{"name": "p02607 AIsing Programming Contest 2020 - An Odd Problem", "description": "We have N squares assigned the numbers 1,2,3,\\ldots,N. Each square has an integer written on it, and the integer written on Square i is a_i.\n\nHow many squares i satisfy both of the following conditions?\n\n* The assigned number, i, is odd.\n* The written integer is odd.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N, a_i \\leq 100\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 a_2 \\cdots a_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=N<=100", "1<=a_i<=100"]}}
{"name": "1006_A. Adjacent Replacements", "description": "Mishka got an integer array a of length n as a birthday present (what a surprise!).\n\nMishka doesn't like this present and wants to change it somehow. He has invented an algorithm and called it \"Mishka's Adjacent Replacements Algorithm\". This algorithm can be represented as a sequence of steps:\n\n  * Replace each occurrence of 1 in the array a with 2; \n  * Replace each occurrence of 2 in the array a with 1; \n  * Replace each occurrence of 3 in the array a with 4; \n  * Replace each occurrence of 4 in the array a with 3; \n  * Replace each occurrence of 5 in the array a with 6; \n  * Replace each occurrence of 6 in the array a with 5; \n  * ... \n  * Replace each occurrence of 10^9 - 1 in the array a with 10^9; \n  * Replace each occurrence of 10^9 in the array a with 10^9 - 1. \n\n\n\nNote that the dots in the middle of this algorithm mean that Mishka applies these replacements for each pair of adjacent integers (2i - 1, 2i) for each i \u2208\\{1, 2, \u2026, 5 \u22c5 10^8\\} as described above.\n\nFor example, for the array a = [1, 2, 4, 5, 10], the following sequence of arrays represents the algorithm: \n\n[1, 2, 4, 5, 10] \u2192 (replace all occurrences of 1 with 2) \u2192 [2, 2, 4, 5, 10] \u2192 (replace all occurrences of 2 with 1) \u2192 [1, 1, 4, 5, 10] \u2192 (replace all occurrences of 3 with 4) \u2192 [1, 1, 4, 5, 10] \u2192 (replace all occurrences of 4 with 3) \u2192 [1, 1, 3, 5, 10] \u2192 (replace all occurrences of 5 with 6) \u2192 [1, 1, 3, 6, 10] \u2192 (replace all occurrences of 6 with 5) \u2192 [1, 1, 3, 5, 10] \u2192 ... \u2192 [1, 1, 3, 5, 10] \u2192 (replace all occurrences of 10 with 9) \u2192 [1, 1, 3, 5, 9]. The later steps of the algorithm do not change the array.\n\nMishka is very lazy and he doesn't want to apply these changes by himself. But he is very interested in their result. Help him find it.\n\nInput\n\nThe first line of the input contains one integer number n (1 \u2264 n \u2264 1000) \u2014 the number of elements in Mishka's birthday present (surprisingly, an array).\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9) \u2014 the elements of the array.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=1000", "1<=a_i<=10^9"]}}
{"name": "p03437 AtCoder Petrozavodsk Contest 001 - Two Integers", "description": "You are given positive integers X and Y. If there exists a positive integer not greater than 10^{18} that is a multiple of X but not a multiple of Y, choose one such integer and print it. If it does not exist, print -1.\n\nConstraints\n\n* 1 \u2264 X,Y \u2264 10^9\n* X and Y are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX Y", "grammar": {"productions": ["<S>->X <s> Y"], "constraints": ["1<=X<=10^9", "1<=Y<=10^9"]}}
{"name": "1099_B. Squares and Segments", "description": "Little Sofia is in fourth grade. Today in the geometry lesson she learned about segments and squares. On the way home, she decided to draw n squares in the snow with a side length of 1. For simplicity, we assume that Sofia lives on a plane and can draw only segments of length 1, parallel to the coordinate axes, with vertices at integer points.\n\nIn order to draw a segment, Sofia proceeds as follows. If she wants to draw a vertical segment with the coordinates of the ends (x, y) and (x, y+1). Then Sofia looks if there is already a drawn segment with the coordinates of the ends (x', y) and (x', y+1) for some x'. If such a segment exists, then Sofia quickly draws a new segment, using the old one as a guideline. If there is no such segment, then Sofia has to take a ruler and measure a new segment for a long time. Same thing happens when Sofia wants to draw a horizontal segment, but only now she checks for the existence of a segment with the same coordinates x, x+1 and the differing coordinate y.\n\nFor example, if Sofia needs to draw one square, she will have to draw two segments using a ruler: \n\n<image>\n\nAfter that, she can draw the remaining two segments, using the first two as a guide: \n\n<image>\n\nIf Sofia needs to draw two squares, she will have to draw three segments using a ruler: \n\n<image>\n\nAfter that, she can draw the remaining four segments, using the first three as a guide: \n\n<image>\n\nSofia is in a hurry, so she wants to minimize the number of segments that she will have to draw with a ruler without a guide. Help her find this minimum number.\n\nInput\n\nThe only line of input contains a single integer n (1 \u2264 n \u2264 10^{9}), the number of squares that Sofia wants to draw.", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=10^9"]}}
{"name": "p02923 AtCoder Beginner Contest 139 - Lower", "description": "There are N squares arranged in a row from left to right.\n\nThe height of the i-th square from the left is H_i.\n\nYou will land on a square of your choice, then repeat moving to the adjacent square on the right as long as the height of the next square is not greater than that of the current square.\n\nFind the maximum number of times you can move.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 10^5\n* 1 \\leq H_i \\leq 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nH_1 H_2 ... H_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> H_i", "<T_1>->H_1"], "constraints": ["1<=N<=10^5", "1<=H_i<=10^9"]}}
{"name": "1133_C. Balanced Team", "description": "You are a coach at your local university. There are n students under your supervision, the programming skill of the i-th student is a_i.\n\nYou have to create a team for a new programming competition. As you know, the more students some team has the more probable its victory is! So you have to create a team with the maximum number of students. But you also know that a team should be balanced. It means that the programming skill of each pair of students in a created team should differ by no more than 5.\n\nYour task is to report the maximum possible number of students in a balanced team.\n\nInput\n\nThe first line of the input contains one integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of students.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9), where a_i is a programming skill of the i-th student.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=2*10^5", "1<=a_i<=10^9"]}}
{"name": "1296_D. Fight with Monsters", "description": "There are n monsters standing in a row numbered from 1 to n. The i-th monster has h_i health points (hp). You have your attack power equal to a hp and your opponent has his attack power equal to b hp.\n\nYou and your opponent are fighting these monsters. Firstly, you and your opponent go to the first monster and fight it till his death, then you and your opponent go the second monster and fight it till his death, and so on. A monster is considered dead if its hp is less than or equal to 0.\n\nThe fight with a monster happens in turns. \n\n  1. You hit the monster by a hp. If it is dead after your hit, you gain one point and you both proceed to the next monster. \n  2. Your opponent hits the monster by b hp. If it is dead after his hit, nobody gains a point and you both proceed to the next monster. \n\n\n\nYou have some secret technique to force your opponent to skip his turn. You can use this technique at most k times in total (for example, if there are two monsters and k=4, then you can use the technique 2 times on the first monster and 1 time on the second monster, but not 2 times on the first monster and 3 times on the second monster).\n\nYour task is to determine the maximum number of points you can gain if you use the secret technique optimally.\n\nInput\n\nThe first line of the input contains four integers n, a, b and k (1 \u2264 n \u2264 2 \u22c5 10^5, 1 \u2264 a, b, k \u2264 10^9) \u2014 the number of monsters, your attack power, the opponent's attack power and the number of times you can use the secret technique.\n\nThe second line of the input contains n integers h_1, h_2, ..., h_n (1 \u2264 h_i \u2264 10^9), where h_i is the health points of the i-th monster.", "grammar": {"productions": ["<S>->[n] <s> a <s> b <s> k <n> <T_n>", "<T_i>-><T_i-1> <s> h_i", "<T_1>->h_1"], "constraints": ["1<=n<=2*10^5", "1<=a<=10^9", "1<=b<=10^9", "1<=k<=10^9", "1<=h_i<=10^9"]}}
{"name": "1406_A. Subset Mex", "description": "Given a set of integers (it can contain equal elements).\n\nYou have to split it into two subsets A and B (both of them can contain equal elements or be empty). You have to maximize the value of mex(A)+mex(B).\n\nHere mex of a set denotes the smallest non-negative integer that doesn't exist in the set. For example: \n\n  * mex(\\{1,4,0,2,2,1\\})=3 \n  * mex(\\{3,3,2,1,3,0,0\\})=4 \n  * mex(\u2205)=0 (mex for empty set) \n\n\n\nThe set is splitted into two subsets A and B if for any integer number x the number of occurrences of x into this set is equal to the sum of the number of occurrences of x into A and the number of occurrences of x into B.\n\nInput\n\nThe input consists of multiple test cases. The first line contains an integer t (1\u2264 t\u2264 100) \u2014 the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains an integer n (1\u2264 n\u2264 100) \u2014 the size of the set.\n\nThe second line of each testcase contains n integers a_1,a_2,... a_n (0\u2264 a_i\u2264 100) \u2014 the numbers in the set.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=100", "1<=n<=100", "0<=a_i<=100"]}}
{"name": "p02731 AtCoder Beginner Contest 159 - Maximum Volume", "description": "Given is a positive integer L. Find the maximum possible volume of a rectangular cuboid whose sum of the dimensions (not necessarily integers) is L.\n\nConstraints\n\n* 1 \u2264 L \u2264 1000\n* L is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nL", "grammar": {"productions": ["<S>->L"], "constraints": ["1<=L<=1000"]}}
{"name": "p03447 AtCoder Beginner Contest 087 - Buying Sweets", "description": "You went shopping to buy cakes and donuts with X yen (the currency of Japan).\n\nFirst, you bought one cake for A yen at a cake shop. Then, you bought as many donuts as possible for B yen each, at a donut shop.\n\nHow much do you have left after shopping?\n\nConstraints\n\n* 1 \\leq A, B \\leq 1 000\n* A + B \\leq X \\leq 10 000\n* X, A and B are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX\nA\nB", "grammar": {"productions": ["<S>->X <n> A <n> B <n>"], "constraints": ["1<=A<=1000", "1<=B<=1000", "(A+B)<=X<=10000"]}}
{"name": "1038_A. Equality", "description": "You are given a string s of length n, which consists only of the first k letters of the Latin alphabet. All letters in string s are uppercase.\n\nA subsequence of string s is a string that can be derived from s by deleting some of its symbols without changing the order of the remaining symbols. For example, \"ADE\" and \"BD\" are subsequences of \"ABCDE\", but \"DEA\" is not.\n\nA subsequence of s called good if the number of occurences of each of the first k letters of the alphabet is the same.\n\nFind the length of the longest good subsequence of s. \n\nInput\n\nThe first line of the input contains integers n (1\u2264 n \u2264 10^5) and k (1 \u2264 k \u2264 26).\n\nThe second line of the input contains the string s of length n. String s only contains uppercase letters from 'A' to the k-th letter of Latin alphabet.", "grammar": {"productions": ["<S>->[n] <s> k <n> A [A-Z]{n-1}"], "constraints": ["1<=n<=10^5", "1<=k<=26"]}}
{"name": "887_A. Div. 64", "description": "Top-model Izabella participates in the competition. She wants to impress judges and show her mathematical skills.\n\nHer problem is following: for given string, consisting of only 0 and 1, tell if it's possible to remove some digits in such a way, that remaining number is a representation of some positive integer, divisible by 64, in the binary numerical system.\n\nInput\n\nIn the only line given a non-empty binary string s with length up to 100.", "grammar": {"productions": ["<S>->[01]{1,100}"], "constraints": [""]}}
{"name": "p02682 AtCoder Beginner Contest 167 - Easy Linear Programming", "description": "We have A cards, each of which has an integer 1 written on it. Similarly, we also have B cards with 0s and C cards with -1s.\n\nWe will pick up K among these cards. What is the maximum possible sum of the numbers written on the cards chosen?\n\nConstraints\n\n* All values in input are integers.\n* 0 \\leq A, B, C\n* 1 \\leq K \\leq A + B + C \\leq 2 \\times 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B C K", "grammar": {"productions": ["<S>->A <s> B <s> C <s> K"], "constraints": ["0<=A,B,C", "1<=K<=A+B+C<=2*10^9"]}}
{"name": "p03044 AtCoder Beginner Contest 126 - Even Relation", "description": "We have a tree with N vertices numbered 1 to N. The i-th edge in the tree connects Vertex u_i and Vertex v_i, and its length is w_i. Your objective is to paint each vertex in the tree white or black (it is fine to paint all vertices the same color) so that the following condition is satisfied:\n\n* For any two vertices painted in the same color, the distance between them is an even number.\n\n\n\nFind a coloring of the vertices that satisfies the condition and print it. It can be proved that at least one such coloring exists under the constraints of this problem.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 10^5\n* 1 \\leq u_i < v_i \\leq N\n* 1 \\leq w_i \\leq 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nu_1 v_1 w_1\nu_2 v_2 w_2\n.\n.\n.\nu_{N - 1} v_{N - 1} w_{N - 1}", "grammar": {"productions": ["<S>->[N] <n> <T_N-1>", "<T_i>-><T_i-1> <n> u_i <s> v_i <s> w_i", "<T_1>->u_1 <s> v_1 <s> w_1"], "constraints": ["1<=N<=10^5", "1<=u_i<v_i<=N", "1<=w_i<=10^9"]}}
{"name": "p03828 AtCoder Beginner Contest 052 - Factors of Factorial", "description": "You are given an integer N. Find the number of the positive divisors of N!, modulo 10^9+7.\n\nConstraints\n\n* 1\u2264N\u226410^3\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["1<=N<=10^3"]}}
{"name": "1076_A. Minimizing the String", "description": "You are given a string s consisting of n lowercase Latin letters.\n\nYou have to remove at most one (i.e. zero or one) character of this string in such a way that the string you obtain will be lexicographically smallest among all strings that can be obtained using this operation.\n\nString s = s_1 s_2 ... s_n is lexicographically smaller than string t = t_1 t_2 ... t_m if n < m and s_1 = t_1, s_2 = t_2, ..., s_n = t_n or there exists a number p such that p \u2264 min(n, m) and s_1 = t_1, s_2 = t_2, ..., s_{p-1} = t_{p-1} and s_p < t_p.\n\nFor example, \"aaa\" is smaller than \"aaaa\", \"abb\" is smaller than \"abc\", \"pqr\" is smaller than \"z\".\n\nInput\n\nThe first line of the input contains one integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the length of s.\n\nThe second line of the input contains exactly n lowercase Latin letters \u2014 the string s.", "grammar": {"productions": ["<S>->[n] <n> [a-z]{n}"], "constraints": ["2<=n<=2*10^5"]}}
{"name": "p02787 AtCoder Beginner Contest 153 - Crested Ibis vs Monster", "description": "Ibis is fighting with a monster.\n\nThe health of the monster is H.\n\nIbis can cast N kinds of spells. Casting the i-th spell decreases the monster's health by A_i, at the cost of B_i Magic Points.\n\nThe same spell can be cast multiple times. There is no way other than spells to decrease the monster's health.\n\nIbis wins when the health of the monster becomes 0 or below.\n\nFind the minimum total Magic Points that have to be consumed before winning.\n\nConstraints\n\n* 1 \\leq H \\leq 10^4\n* 1 \\leq N \\leq 10^3\n* 1 \\leq A_i \\leq 10^4\n* 1 \\leq B_i \\leq 10^4\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nH N\nA_1 B_1\n:\nA_N B_N", "grammar": {"productions": ["<S>->H <s> [N] <n> <T_N>", "<T_i>-><T_i-1> <n> A_i <s> B_i", "<T_1>->A_1 <s> B_1"], "constraints": ["1<=H<=10^4", "1<=N<=10^3", "1<=A_i<=10^4", "1<=B_i<=10^4"]}}
{"name": "p03852 AtCoder Beginner Contest 049 - UOIAUAI", "description": "Given a lowercase English letter c, determine whether it is a vowel. Here, there are five vowels in the English alphabet: `a`, `e`, `i`, `o` and `u`.\n\nConstraints\n\n* c is a lowercase English letter.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nc", "grammar": {"productions": ["<S>->[a-z]{1}"], "constraints": []}}
{"name": "p02681 AtCoder Beginner Contest 167 - Registration", "description": "Takahashi wants to be a member of some web service.\n\nHe tried to register himself with the ID S, which turned out to be already used by another user.\n\nThus, he decides to register using a string obtained by appending one character at the end of S as his ID.\n\nHe is now trying to register with the ID T. Determine whether this string satisfies the property above.\n\nConstraints\n\n* S and T are strings consisting of lowercase English letters.\n* 1 \\leq |S| \\leq 10\n* |T| = |S| + 1\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS\nT", "grammar": {"productions": ["<S>->[a-z]{S} <n> [a-z]{T}"], "constraints": ["1<=S<=10", "T=S+1"]}}
{"name": "630_C. Lucky Numbers", "description": "The numbers of all offices in the new building of the Tax Office of IT City will have lucky numbers.\n\nLucky number is a number that consists of digits 7 and 8 only. Find the maximum number of offices in the new building of the Tax Office given that a door-plate can hold a number not longer than n digits.\n\nInput\n\nThe only line of input contains one integer n (1 \u2264 n \u2264 55) \u2014 the maximum length of a number that a door-plate can hold.", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=55"]}}
{"name": "p03986 AtCoder Grand Contest 005 - STring", "description": "We have a string X, which has an even number of characters. Half the characters are `S`, and the other half are `T`.\n\nTakahashi, who hates the string `ST`, will perform the following operation 10^{10000} times:\n\n* Among the occurrences of `ST` in X as (contiguous) substrings, remove the leftmost one. If there is no occurrence, do nothing.\n\n\n\nFind the eventual length of X.\n\nConstraints\n\n* 2 \u2266 |X| \u2266 200,000\n* The length of X is even.\n* Half the characters in X are `S`, and the other half are `T`.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nX", "grammar": {"productions": ["<S>->[ST]{X}"], "constraints": ["2<=X<=200000", "X is even"]}}
{"name": "p03844 AtCoder Beginner Contest 050 - Addition and Subtraction Easy", "description": "Joisino wants to evaluate the formula \"A op B\". Here, A and B are integers, and the binary operator op is either `+` or `-`. Your task is to evaluate the formula instead of her.\n\nConstraints\n\n* 1\u2266A,B\u226610^9\n* op is either `+` or `-`.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nA op B", "grammar": {"productions": ["<S>->A <s> +|- <s> B"], "constraints": ["1<=A<=10^9", "1<=B<=10^9"]}}
{"name": "1270_A. Card Game", "description": "Two players decided to play one interesting card game.\n\nThere is a deck of n cards, with values from 1 to n. The values of cards are pairwise different (this means that no two different cards have equal values). At the beginning of the game, the deck is completely distributed between players such that each player has at least one card. \n\nThe game goes as follows: on each turn, each player chooses one of their cards (whichever they want) and puts on the table, so that the other player doesn't see which card they chose. After that, both cards are revealed, and the player, value of whose card was larger, takes both cards in his hand. Note that as all cards have different values, one of the cards will be strictly larger than the other one. Every card may be played any amount of times. The player loses if he doesn't have any cards.\n\nFor example, suppose that n = 5, the first player has cards with values 2 and 3, and the second player has cards with values 1, 4, 5. Then one possible flow of the game is:\n\n  * The first player chooses the card 3. The second player chooses the card 1. As 3>1, the first player gets both cards. Now the first player has cards 1, 2, 3, the second player has cards 4, 5.\n\n  * The first player chooses the card 3. The second player chooses the card 4. As 3<4, the second player gets both cards. Now the first player has cards 1, 2. The second player has cards 3, 4, 5.\n\n  * The first player chooses the card 1. The second player chooses the card 3. As 1<3, the second player gets both cards. Now the first player has only the card 2. The second player has cards 1, 3, 4, 5.\n\n  * The first player chooses the card 2. The second player chooses the card 4. As 2<4, the second player gets both cards. Now the first player is out of cards and loses. Therefore, the second player wins.\n\n\n\n\nWho will win if both players are playing optimally? It can be shown that one of the players has a winning strategy.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). The description of the test cases follows.\n\nThe first line of each test case contains three integers n, k_1, k_2 (2 \u2264 n \u2264 100, 1 \u2264 k_1 \u2264 n - 1, 1 \u2264 k_2 \u2264 n - 1, k_1 + k_2 = n) \u2014 the number of cards, number of cards owned by the first player and second player correspondingly.\n\nThe second line of each test case contains k_1 integers a_1, ..., a_{k_1} (1 \u2264 a_i \u2264 n) \u2014 the values of cards of the first player.\n\nThe third line of each test case contains k_2 integers b_1, ..., b_{k_2} (1 \u2264 b_i \u2264 n) \u2014 the values of cards of the second player.\n\nIt is guaranteed that the values of all cards are different.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n <s> [k1] <s> [k2] <n> <L_k1> <n> <Z_k2>", "<T_1>->n <s> [k1] <s> [k2] <n> <L_k1> <n> <Z_k2>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1", "<Z_i>-><Z_i-1> <s> b_i", "<Z_1>->b_1"], "constraints": ["1<=t<=100", "2<=n<=100", "1<=k1<=n-1", "1<=k2<=n-1", "k1+k2=n", "1<=a_i<=n", "1<=b_i<=n"]}}
{"name": "1443_A. Kids Seating", "description": "Today the kindergarten has a new group of n kids who need to be seated at the dinner table. The chairs at the table are numbered from 1 to 4n. Two kids can't sit on the same chair. It is known that two kids who sit on chairs with numbers a and b (a \u2260 b) will indulge if: \n\n  1. gcd(a, b) = 1 or, \n  2. a divides b or b divides a. \n\n\n\ngcd(a, b) \u2014 the maximum number x such that a is divisible by x and b is divisible by x.\n\nFor example, if n=3 and the kids sit on chairs with numbers 2, 3, 4, then they will indulge since 4 is divided by 2 and gcd(2, 3) = 1. If kids sit on chairs with numbers 4, 6, 10, then they will not indulge.\n\nThe teacher really doesn't want the mess at the table, so she wants to seat the kids so there are no 2 of the kid that can indulge. More formally, she wants no pair of chairs a and b that the kids occupy to fulfill the condition above.\n\nSince the teacher is very busy with the entertainment of the kids, she asked you to solve this problem.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing an integer n (1 \u2264 n \u2264 100) \u2014 the number of kids.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> a_i", "<T_1>->a_1"], "constraints": ["1<=t<=100", "1<=n<=100", "-10^9<=a_i<=10^9"]}}
{"name": "1139_B. Chocolates", "description": "You went to the store, selling n types of chocolates. There are a_i chocolates of type i in stock.\n\nYou have unlimited amount of cash (so you are not restricted by any prices) and want to buy as many chocolates as possible. However if you buy x_i chocolates of type i (clearly, 0 \u2264 x_i \u2264 a_i), then for all 1 \u2264 j < i at least one of the following must hold:\n\n  * x_j = 0 (you bought zero chocolates of type j)\n  * x_j < x_i (you bought less chocolates of type j than of type i) \n\n\n\nFor example, the array x = [0, 0, 1, 2, 10] satisfies the requirement above (assuming that all a_i \u2265 x_i), while arrays x = [0, 1, 0], x = [5, 5] and x = [3, 2] don't.\n\nCalculate the maximum number of chocolates you can buy.\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 2 \u22c5 10^5), denoting the number of types of chocolate.\n\nThe next line contains n integers a_i (1 \u2264 a_i \u2264 10^9), denoting the number of chocolates of each type.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=N<=2*10^5", "1<=a_i<=10^9"]}}
{"name": "378_A. Playing with Dice", "description": "Two players are playing a game. First each of them writes an integer from 1 to 6, and then a dice is thrown. The player whose written number got closer to the number on the dice wins. If both payers have the same difference, it's a draw.\n\nThe first player wrote number a, the second player wrote number b. How many ways to throw a dice are there, at which the first player wins, or there is a draw, or the second player wins?\n\nInput\n\nThe single line contains two integers a and b (1 \u2264 a, b \u2264 6) \u2014 the numbers written on the paper by the first and second player, correspondingly.", "grammar": {"productions": ["<S>->a <s> b"], "constraints": ["1<=a<=6", "1<=b<=6"]}}
{"name": "1141_C. Polycarp Restores Permutation", "description": "An array of integers p_1, p_2, ..., p_n is called a permutation if it contains each number from 1 to n exactly once. For example, the following arrays are permutations: [3, 1, 2], [1], [1, 2, 3, 4, 5] and [4, 3, 1, 2]. The following arrays are not permutations: [2], [1, 1], [2, 3, 4].\n\nPolycarp invented a really cool permutation p_1, p_2, ..., p_n of length n. It is very disappointing, but he forgot this permutation. He only remembers the array q_1, q_2, ..., q_{n-1} of length n-1, where q_i=p_{i+1}-p_i.\n\nGiven n and q=q_1, q_2, ..., q_{n-1}, help Polycarp restore the invented permutation.\n\nInput\n\nThe first line contains the integer n (2 \u2264 n \u2264 2\u22c510^5) \u2014 the length of the permutation to restore. The second line contains n-1 integers q_1, q_2, ..., q_{n-1} (-n < q_i < n).", "grammar": {"productions": ["<S>->[n] <n> <T_n-1>", "<T_i>-><T_i-1> <s> q_i", "<T_1>->q_1"], "constraints": ["2<=n<=2*10^5", "-n<q_i<n"]}}
{"name": "1027_A. Palindromic Twist", "description": "You are given a string s consisting of n lowercase Latin letters. n is even.\n\nFor each position i (1 \u2264 i \u2264 n) in string s you are required to change the letter on this position either to the previous letter in alphabetic order or to the next one (letters 'a' and 'z' have only one of these options). Letter in every position must be changed exactly once.\n\nFor example, letter 'p' should be changed either to 'o' or to 'q', letter 'a' should be changed to 'b' and letter 'z' should be changed to 'y'.\n\nThat way string \"codeforces\", for example, can be changed to \"dpedepqbft\" ('c' \u2192 'd', 'o' \u2192 'p', 'd' \u2192 'e', 'e' \u2192 'd', 'f' \u2192 'e', 'o' \u2192 'p', 'r' \u2192 'q', 'c' \u2192 'b', 'e' \u2192 'f', 's' \u2192 't').\n\nString s is called a palindrome if it reads the same from left to right and from right to left. For example, strings \"abba\" and \"zz\" are palindromes and strings \"abca\" and \"zy\" are not.\n\nYour goal is to check if it's possible to make string s a palindrome by applying the aforementioned changes to every position. Print \"YES\" if string s can be transformed to a palindrome and \"NO\" otherwise.\n\nEach testcase contains several strings, for each of them you are required to solve the problem separately.\n\nInput\n\nThe first line contains a single integer T (1 \u2264 T \u2264 50) \u2014 the number of strings in a testcase.\n\nThen 2T lines follow \u2014 lines (2i - 1) and 2i of them describe the i-th string. The first line of the pair contains a single integer n (2 \u2264 n \u2264 100, n is even) \u2014 the length of the corresponding string. The second line of the pair contains a string s, consisting of n lowercase Latin letters.", "grammar": {"productions": ["<S>->[T] <n> <T_T>", "<T_i>-><T_i-1> <n> [n] <n> [a-z]{n}", "<T_1>->[n] <n> [a-z]{n}"], "constraints": ["1<=T<=50", "2<=n<=100", "n%2==0"]}}
{"name": "p02255 Insertion Sort", "description": "Write a program of the Insertion Sort algorithm which sorts a sequence A in ascending order. The algorithm should be based on the following pseudocode:\n\n\nfor i = 1 to A.length-1\nkey = A[i]\n/* insert A[i] into the sorted sequence A[0,...,j-1] */\nj = i - 1\nwhile j >= 0 and A[j] > key\nA[j+1] = A[j]\nj--\nA[j+1] = key\n\n\nNote that, indices for array elements are based on 0-origin.\n\nTo illustrate the algorithms, your program should trace intermediate result for each step.\n\nHint\n\nTemplate in C\n\nConstraints\n\n1 \u2264 N \u2264 100\n\nInput\n\nThe first line of the input includes an integer N, the number of elements in the sequence.\n\nIn the second line, N elements of the sequence are given separated by a single space.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["1<=N<=100", "1<=A_i<=N"]}}
{"name": "1197_B. Pillars", "description": "There are n pillars aligned in a row and numbered from 1 to n.\n\nInitially each pillar contains exactly one disk. The i-th pillar contains a disk having radius a_i.\n\nYou can move these disks from one pillar to another. You can take a disk from pillar i and place it on top of pillar j if all these conditions are met:\n\n  1. there is no other pillar between pillars i and j. Formally, it means that |i - j| = 1; \n  2. pillar i contains exactly one disk; \n  3. either pillar j contains no disks, or the topmost disk on pillar j has radius strictly greater than the radius of the disk you move. \n\n\n\nWhen you place a disk on a pillar that already has some disks on it, you put the new disk on top of previously placed disks, so the new disk will be used to check the third condition if you try to place another disk on the same pillar.\n\nYou may take any disk and place it on other pillar any number of times, provided that every time you do it, all three aforementioned conditions are met. Now you wonder, is it possible to place all n disks on the same pillar simultaneously?\n\nInput\n\nThe first line contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of pillars.\n\nThe second line contains n integers a_1, a_2, ..., a_i (1 \u2264 a_i \u2264 n), where a_i is the radius of the disk initially placed on the i-th pillar. All numbers a_i are distinct.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["3<=n<=2*10^5", "1<=a_i<=n"]}}
{"name": "719_A. Vitya in the Countryside", "description": "Every summer Vitya comes to visit his grandmother in the countryside. This summer, he got a huge wart. Every grandma knows that one should treat warts when the moon goes down. Thus, Vitya has to catch the moment when the moon is down.\n\nMoon cycle lasts 30 days. The size of the visible part of the moon (in Vitya's units) for each day is 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, and then cycle repeats, thus after the second 1 again goes 0.\n\nAs there is no internet in the countryside, Vitya has been watching the moon for n consecutive days and for each of these days he wrote down the size of the visible part of the moon. Help him find out whether the moon will be up or down next day, or this cannot be determined by the data he has.\n\nInput\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 92) \u2014 the number of consecutive days Vitya was watching the size of the visible part of the moon. \n\nThe second line contains n integers ai (0 \u2264 ai \u2264 15) \u2014 Vitya's records.\n\nIt's guaranteed that the input data is consistent.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=92", "0<=a_i<=15"]}}
{"name": "1216_B. Shooting", "description": "Recently Vasya decided to improve his pistol shooting skills. Today his coach offered him the following exercise. He placed n cans in a row on a table. Cans are numbered from left to right from 1 to n. Vasya has to knock down each can exactly once to finish the exercise. He is allowed to choose the order in which he will knock the cans down.\n\nVasya knows that the durability of the i-th can is a_i. It means that if Vasya has already knocked x cans down and is now about to start shooting the i-th one, he will need (a_i \u22c5 x + 1) shots to knock it down. You can assume that if Vasya starts shooting the i-th can, he will be shooting it until he knocks it down.\n\nYour task is to choose such an order of shooting so that the number of shots required to knock each of the n given cans down exactly once is minimum possible.\n\nInput\n\nThe first line of the input contains one integer n (2 \u2264 n \u2264 1 000) \u2014 the number of cans.\n\nThe second line of the input contains the sequence a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 1 000), where a_i is the durability of the i-th can.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["2<=n<=1000", "1<=a_i<=1000"]}}
{"name": "1145_A. Thanos Sort", "description": "[Thanos sort](https://codegolf.stackexchange.com/questions/182221/implement-the-thanos-sorting-algorithm) is a supervillain sorting algorithm, which works as follows: if the array is not sorted, snap your fingers* to remove the first or the second half of the items, and repeat the process.\n\nGiven an input array, what is the size of the longest sorted array you can obtain from it using Thanos sort?\n\n*Infinity Gauntlet required.\n\nInput\n\nThe first line of input contains a single number n (1 \u2264 n \u2264 16) \u2014 the size of the array. n is guaranteed to be a power of 2.\n\nThe second line of input contains n space-separated integers a_i (1 \u2264 a_i \u2264 100) \u2014 the elements of the array.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=16", "1<=a_i<=100"]}}
{"name": "p02742 Panasonic Programming Contest 2020 - Bishop", "description": "We have a board with H horizontal rows and W vertical columns of squares. There is a bishop at the top-left square on this board. How many squares can this bishop reach by zero or more movements?\n\nHere the bishop can only move diagonally. More formally, the bishop can move from the square at the r_1-th row (from the top) and the c_1-th column (from the left) to the square at the r_2-th row and the c_2-th column if and only if exactly one of the following holds:\n\n* r_1 + c_1 = r_2 + c_2\n* r_1 - c_1 = r_2 - c_2\n\n\n\nFor example, in the following figure, the bishop can move to any of the red squares in one move:\n\n<image>\n\nConstraints\n\n* 1 \\leq H, W \\leq 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nH \\ W", "grammar": {"productions": ["<S>->H <s> W"], "constraints": ["1<=H<=10^9", "1<=W<=10^9"]}}
{"name": "1344_A. Hilbert's Hotel", "description": "Hilbert's Hotel is a very unusual hotel since the number of rooms is infinite! In fact, there is exactly one room for every integer, including zero and negative integers. Even stranger, the hotel is currently at full capacity, meaning there is exactly one guest in every room. The hotel's manager, David Hilbert himself, decides he wants to shuffle the guests around because he thinks this will create a vacancy (a room without a guest).\n\nFor any integer k and positive integer n, let kmod n denote the remainder when k is divided by n. More formally, r=kmod n is the smallest non-negative integer such that k-r is divisible by n. It always holds that 0\u2264 kmod n\u2264 n-1. For example, 100mod 12=4 and (-1337)mod 3=1.\n\nThen the shuffling works as follows. There is an array of n integers a_0,a_1,\u2026,a_{n-1}. Then for each integer k, the guest in room k is moved to room number k+a_{kmod n}.\n\nAfter this shuffling process, determine if there is still exactly one guest assigned to each room. That is, there are no vacancies or rooms with multiple guests.\n\nInput\n\nEach test consists of multiple test cases. The first line contains a single integer t (1\u2264 t\u2264 10^4) \u2014 the number of test cases. Next 2t lines contain descriptions of test cases.\n\nThe first line of each test case contains a single integer n (1\u2264 n\u2264 2\u22c5 10^5) \u2014 the length of the array.\n\nThe second line of each test case contains n integers a_0,a_1,\u2026,a_{n-1} (-10^9\u2264 a_i\u2264 10^9).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2\u22c5 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=10^4", "1<=n<=2*10^5", "-10^9<=a_i<=10^9"]}}
{"name": "p03067 Tenka1 Programmer Beginner Contest 2019 - On the Way", "description": "There are three houses on a number line: House 1, 2 and 3, with coordinates A, B and C, respectively. Print `Yes` if we pass the coordinate of House 3 on the straight way from House 1 to House 2 without making a detour, and print `No` otherwise.\n\nConstraints\n\n* 0\\leq A,B,C\\leq 100\n* A, B and C are distinct integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B C", "grammar": {"productions": ["<S>->A <s> B <s> C"], "constraints": ["0<=A,B,C<=100"]}}
{"name": "p02954 AtCoder Beginner Contest 136 - Gathering Children", "description": "Given is a string S consisting of `L` and `R`.\n\nLet N be the length of S. There are N squares arranged from left to right, and the i-th character of S from the left is written on the i-th square from the left.\n\nThe character written on the leftmost square is always `R`, and the character written on the rightmost square is always `L`.\n\nInitially, one child is standing on each square.\n\nEach child will perform the move below 10^{100} times:\n\n* Move one square in the direction specified by the character written in the square on which the child is standing. `L` denotes left, and `R` denotes right.\n\n\n\nFind the number of children standing on each square after the children performed the moves.\n\nConstraints\n\n* S is a string of length between 2 and 10^5 (inclusive).\n* Each character of S is `L` or `R`.\n* The first and last characters of S are `R` and `L`, respectively.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>->[LR]{2,10^5}"], "constraints": []}}
{"name": "1101_A. Minimum Integer", "description": "You are given q queries in the following form:\n\nGiven three integers l_i, r_i and d_i, find minimum positive integer x_i such that it is divisible by d_i and it does not belong to the segment [l_i, r_i].\n\nCan you answer all the queries?\n\nRecall that a number x belongs to segment [l, r] if l \u2264 x \u2264 r.\n\nInput\n\nThe first line contains one integer q (1 \u2264 q \u2264 500) \u2014 the number of queries.\n\nThen q lines follow, each containing a query given in the format l_i r_i d_i (1 \u2264 l_i \u2264 r_i \u2264 10^9, 1 \u2264 d_i \u2264 10^9). l_i, r_i and d_i are integers.", "grammar": {"productions": ["<S>->[q] <n> <T_q>", "<T_i>-><T_i-1> <n> l_i <s> r_i <s> d_i", "<T_1>->l_1 <s> r_1 <s> d_1"], "constraints": ["1<=q<=500", "1<=l_i<=r_i<=10^9", "1<=d_i<=10^9"]}}
{"name": "p02596 AtCoder Beginner Contest 174 - Repsept", "description": "Takahashi loves the number 7 and multiples of K.\n\nWhere is the first occurrence of a multiple of K in the sequence 7,77,777,\\ldots? (Also see Output and Sample Input/Output below.)\n\nIf the sequence contains no multiples of K, print `-1` instead.\n\nConstraints\n\n* 1 \\leq K \\leq 10^6\n* K is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nK", "grammar": {"productions": ["<S>->K"], "constraints": ["1<=K<=10^6"]}}
{"name": "p03362 AtCoder Beginner Contest 096 - Five  Five Everywhere", "description": "Print a sequence a_1, a_2, ..., a_N whose length is N that satisfies the following conditions:\n\n* a_i (1 \\leq i \\leq N) is a prime number at most 55 555.\n* The values of a_1, a_2, ..., a_N are all different.\n* In every choice of five different integers from a_1, a_2, ..., a_N, the sum of those integers is a composite number.\n\n\n\nIf there are multiple such sequences, printing any of them is accepted.\n\nConstraints\n\n* N is an integer between 5 and 55 (inclusive).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["5<=N<=55"]}}
{"name": "p03477 AtCoder Beginner Contest 083 - Libra", "description": "A balance scale tips to the left if L>R, where L is the total weight of the masses on the left pan and R is the total weight of the masses on the right pan. Similarly, it balances if L=R, and tips to the right if L<R.\n\nTakahashi placed a mass of weight A and a mass of weight B on the left pan of a balance scale, and placed a mass of weight C and a mass of weight D on the right pan.\n\nPrint `Left` if the balance scale tips to the left; print `Balanced` if it balances; print `Right` if it tips to the right.\n\nConstraints\n\n* 1\\leq A,B,C,D \\leq 10\n* All input values are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B C D", "grammar": {"productions": ["<S>->A <s> B <s> C <s> D"], "constraints": ["1<=A<=10", "1<=B<=10", "1<=C<=10", "1<=D<=10"]}}
{"name": "p02927 Japanese Student Championship 2019 Qualification - Takahashi Calendar", "description": "Today is August 24, one of the five Product Days in a year.\n\nA date m-d (m is the month, d is the date) is called a Product Day when d is a two-digit number, and all of the following conditions are satisfied (here d_{10} is the tens digit of the day and d_1 is the ones digit of the day):\n\n* d_1 \\geq 2\n* d_{10} \\geq 2\n* d_1 \\times d_{10} = m\n\n\n\nTakahashi wants more Product Days, and he made a new calendar called Takahashi Calendar where a year consists of M month from Month 1 to Month M, and each month consists of D days from Day 1 to Day D.\n\nIn Takahashi Calendar, how many Product Days does a year have?\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq M \\leq 100\n* 1 \\leq D \\leq 99\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nM D", "grammar": {"productions": ["<S>->M <s> D"], "constraints": ["1<=M<=100", "1<=D<=99"]}}
{"name": "1335_A. Candies and Two Sisters", "description": "There are two sisters Alice and Betty. You have n candies. You want to distribute these n candies between two sisters in such a way that:\n\n  * Alice will get a (a > 0) candies; \n  * Betty will get b (b > 0) candies; \n  * each sister will get some integer number of candies; \n  * Alice will get a greater amount of candies than Betty (i.e. a > b); \n  * all the candies will be given to one of two sisters (i.e. a+b=n). \n\n\n\nYour task is to calculate the number of ways to distribute exactly n candies between sisters in a way described above. Candies are indistinguishable.\n\nFormally, find the number of ways to represent n as the sum of n=a+b, where a and b are positive integers and a>b.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Then t test cases follow.\n\nThe only line of a test case contains one integer n (1 \u2264 n \u2264 2 \u22c5 10^9) \u2014 the number of candies you have.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n", "<T_1>->n"], "constraints": ["1<=t<=10^4", "1<=n<=2*10^9"]}}
{"name": "p03385 AtCoder Beginner Contest 093 - abc of ABC", "description": "You are given a string S of length 3 consisting of `a`, `b` and `c`. Determine if S can be obtained by permuting `abc`.\n\nConstraints\n\n* |S|=3\n* S consists of `a`, `b` and `c`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>->[abc]{3}"], "constraints": []}}
{"name": "507_B. Amr and Pins", "description": "Amr loves Geometry. One day he came up with a very interesting problem.\n\nAmr has a circle of radius r and center in point (x, y). He wants the circle center to be in new position (x', y').\n\nIn one step Amr can put a pin to the border of the circle in a certain point, then rotate the circle around that pin by any angle and finally remove the pin.\n\nHelp Amr to achieve his goal in minimum number of steps.\n\nInput\n\nInput consists of 5 space-separated integers r, x, y, x' y' (1 \u2264 r \u2264 10^5,  - 10^5 \u2264 x, y, x', y' \u2264 10^5), circle radius, coordinates of original center of the circle and coordinates of destination center of the circle respectively.", "grammar": {"productions": ["<S>->r <s> x <s> y <s> x' <s> y'"], "constraints": ["1<=r<=10^5", "-10^5<=x<=10^5", "-10^5<=y<=10^5", "-10^5<=x'<=10^5", "-10^5<=y'<=10^5"]}}
{"name": "988_A. Diverse Team", "description": "There are n students in a school class, the rating of the i-th student on Codehorses is a_i. You have to form a team consisting of k students (1 \u2264 k \u2264 n) such that the ratings of all team members are distinct.\n\nIf it is impossible to form a suitable team, print \"NO\" (without quotes). Otherwise print \"YES\", and then print k distinct numbers which should be the indices of students in the team you form. If there are multiple answers, print any of them.\n\nInput\n\nThe first line contains two integers n and k (1 \u2264 k \u2264 n \u2264 100) \u2014 the number of students and the size of the team you have to form.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 100), where a_i is the rating of i-th student.", "grammar": {"productions": ["<S>->[n] <s> k <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=k<=n<=100", "1<=a_i<=100"]}}
{"name": "124_A. The number of positions", "description": "Petr stands in line of n people, but he doesn't know exactly which position he occupies. He can say that there are no less than a people standing in front of him and no more than b people standing behind him. Find the number of different positions Petr can occupy.\n\nInput\n\nThe only line contains three integers n, a and b (0 \u2264 a, b < n \u2264 100).", "grammar": {"productions": ["<S>->n <s> a <s> b"], "constraints": ["0<=a,b<n<=100"]}}
{"name": "912_A. Tricky Alchemy", "description": "During the winter holidays, the demand for Christmas balls is exceptionally high. Since it's already 2018, the advances in alchemy allow easy and efficient ball creation by utilizing magic crystals.\n\nGrisha needs to obtain some yellow, green and blue balls. It's known that to produce a yellow ball one needs two yellow crystals, green \u2014 one yellow and one blue, and for a blue ball, three blue crystals are enough.\n\nRight now there are A yellow and B blue crystals in Grisha's disposal. Find out how many additional crystals he should acquire in order to produce the required number of balls.\n\nInput\n\nThe first line features two integers A and B (0 \u2264 A, B \u2264 10^9), denoting the number of yellow and blue crystals respectively at Grisha's disposal.\n\nThe next line contains three integers x, y and z (0 \u2264 x, y, z \u2264 10^9) \u2014 the respective amounts of yellow, green and blue balls to be obtained.", "grammar": {"productions": ["<S>->A <s> B <n> x <s> y <s> z"], "constraints": ["0<=A<=10^9", "0<=B<=10^9", "0<=x<=10^9", "0<=y<=10^9", "0<=z<=10^9"]}}
{"name": "1399_A. Remove Smallest", "description": "You are given the array a consisting of n positive (greater than zero) integers.\n\nIn one move, you can choose two indices i and j (i \u2260 j) such that the absolute difference between a_i and a_j is no more than one (|a_i - a_j| \u2264 1) and remove the smallest of these two elements. If two elements are equal, you can remove any of them (but exactly one).\n\nYour task is to find if it is possible to obtain the array consisting of only one element using several (possibly, zero) such moves or not.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (1 \u2264 n \u2264 50) \u2014 the length of a. The second line of the test case contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 100), where a_i is the i-th element of a.", "grammar": {"productions": ["<S>->[T] <n> <L_T>", "<L_i>-><L_i-1> <n> [N] <n> <Z_N>", "<L_1>->[N] <n> <Z_N>", "<Z_i>-><Z_i-1> <s> A_i", "<Z_1>->A_1"], "constraints": ["1<=T<=1000", "1<=N<=50", "1<=A_i<=100"]}}
{"name": "1176_A. Divide it!", "description": "You are given an integer n.\n\nYou can perform any of the following operations with this number an arbitrary (possibly, zero) number of times: \n\n  1. Replace n with n/2 if n is divisible by 2; \n  2. Replace n with 2n/3 if n is divisible by 3; \n  3. Replace n with 4n/5 if n is divisible by 5. \n\n\n\nFor example, you can replace 30 with 15 using the first operation, with 20 using the second operation or with 24 using the third operation.\n\nYour task is to find the minimum number of moves required to obtain 1 from n or say that it is impossible to do it.\n\nYou have to answer q independent queries.\n\nInput\n\nThe first line of the input contains one integer q (1 \u2264 q \u2264 1000) \u2014 the number of queries.\n\nThe next q lines contain the queries. For each query you are given the integer number n (1 \u2264 n \u2264 10^{18}).", "grammar": {"productions": ["<S>->[q] <n> <T_q>", "<T_i>-><T_i-1> <n> n", "<T_1>->n"], "constraints": ["1<=q<=1000", "1<=n<=10^18"]}}
{"name": "1419_C. Killjoy", "description": "A new agent called Killjoy invented a virus COVID-2069 that infects accounts on Codeforces. Each account has a rating, described by an integer (it can possibly be negative or very large).\n\nKilljoy's account is already infected and has a rating equal to x. Its rating is constant. There are n accounts except hers, numbered from 1 to n. The i-th account's initial rating is a_i. Any infected account (initially the only infected account is Killjoy's) instantly infects any uninfected account if their ratings are equal. This can happen at the beginning (before any rating changes) and after each contest. If an account is infected, it can not be healed.\n\nContests are regularly held on Codeforces. In each contest, any of these n accounts (including infected ones) can participate. Killjoy can't participate. After each contest ratings are changed this way: each participant's rating is changed by an integer, but the sum of all changes must be equal to zero. New ratings can be any integer.\n\nFind out the minimal number of contests needed to infect all accounts. You can choose which accounts will participate in each contest and how the ratings will change.\n\nIt can be proven that all accounts can be infected in some finite number of contests.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. The next 2t lines contain the descriptions of all test cases.\n\nThe first line of each test case contains two integers n and x (2 \u2264 n \u2264 10^3, -4000 \u2264 x \u2264 4000) \u2014 the number of accounts on Codeforces and the rating of Killjoy's account.\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (-4000 \u2264 a_i \u2264 4000) \u2014 the ratings of other accounts.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <s> x <n> <L_n>", "<T_1>->[n] <s> x <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=100", "2<=n<=10^3", "-4000<=x<=4000", "-4000<=a_i<=4000"]}}
{"name": "p03304 SoundHound Inc. Programming Contest 2018 -Masters Tournament- - Ordinary Beauty", "description": "Let us define the beauty of a sequence (a_1,... ,a_n) as the number of pairs of two adjacent elements in it whose absolute differences are d. For example, when d=1, the beauty of the sequence (3, 2, 3, 10, 9) is 3.\n\nThere are a total of n^m sequences of length m where each element is an integer between 1 and n (inclusive). Find the beauty of each of these n^m sequences, and print the average of those values.\n\nConstraints\n\n* 0 \\leq d < n \\leq 10^9\n* 2 \\leq m \\leq 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nn m d", "grammar": {"productions": ["<S>->n <s> m <s> d"], "constraints": ["0<=d<n<=10^9", "2<=m<=10^9"]}}
{"name": "p03129 Yahoo Programming Contest 2019 - Anti-Adjacency", "description": "Determine if we can choose K different integers between 1 and N (inclusive) so that no two of them differ by 1.\n\nConstraints\n\n* 1\\leq N,K\\leq 100\n* N and K are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K", "grammar": {"productions": ["<S>->N <s> K"], "constraints": ["1<=N<=100", "1<=K<=100"]}}
{"name": "34_A. Reconnaissance 2", "description": "n soldiers stand in a circle. For each soldier his height ai is known. A reconnaissance unit can be made of such two neighbouring soldiers, whose heights difference is minimal, i.e. |ai - aj| is minimal. So each of them will be less noticeable with the other. Output any pair of soldiers that can form a reconnaissance unit.\n\nInput\n\nThe first line contains integer n (2 \u2264 n \u2264 100) \u2014 amount of soldiers. Then follow the heights of the soldiers in their order in the circle \u2014 n space-separated integers a1, a2, ..., an (1 \u2264 ai \u2264 1000). The soldier heights are given in clockwise or counterclockwise direction.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["2<=n<=100", "1<=a_i<=1000"]}}
{"name": "p02796 Keyence Programming Contest 2020 - Robot Arms", "description": "In a factory, there are N robots placed on a number line. Robot i is placed at coordinate X_i and can extend its arms of length L_i in both directions, positive and negative.\n\nWe want to remove zero or more robots so that the movable ranges of arms of no two remaining robots intersect. Here, for each i (1 \\leq i \\leq N), the movable range of arms of Robot i is the part of the number line between the coordinates X_i - L_i and X_i + L_i, excluding the endpoints.\n\nFind the maximum number of robots that we can keep.\n\nConstraints\n\n* 1 \\leq N \\leq 100,000\n* 0 \\leq X_i \\leq 10^9 (1 \\leq i \\leq N)\n* 1 \\leq L_i \\leq 10^9 (1 \\leq i \\leq N)\n* If i \\neq j, X_i \\neq X_j.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nX_1 L_1\nX_2 L_2\n\\vdots\nX_N L_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> X_i <s> L_i", "<T_1>->X_1 <s> L_1"], "constraints": ["1<=N<=100000", "0<=X_i<=10^9", "1<=L_i<=10^9", "X_i!=X_j"]}}
{"name": "p03583 Tenka1 Programmer Contest - 4/N", "description": "You are given an integer N.\n\nFind a triple of positive integers h, n and w such that 4/N = 1/h + 1/n + 1/w.\n\nIf there are multiple solutions, any of them will be accepted.\n\nConstraints\n\n* It is guaranteed that, for the given integer N, there exists a solution such that h,n,w \\leq 3500.\n\nInputs\n\nInput is given from Standard Input in the following format:\n\n\nN\n\n\nOutputs\n\nPrint a triple of positive integers h, n and w that satisfies the condition, in the following format:\n\n\nh n w\n\nExamples\n\nInput\n\n2", "grammar": {"productions": ["<S>->N"], "constraints": ["1<=N<=3500"]}}
{"name": "1197_C. Array Splitting", "description": "You are given a sorted array a_1, a_2, ..., a_n (for each index i > 1 condition a_i \u2265 a_{i-1} holds) and an integer k.\n\nYou are asked to divide this array into k non-empty consecutive subarrays. Every element in the array should be included in exactly one subarray. \n\nLet max(i) be equal to the maximum in the i-th subarray, and min(i) be equal to the minimum in the i-th subarray. The cost of division is equal to \u2211_{i=1}^{k} (max(i) - min(i)). For example, if a = [2, 4, 5, 5, 8, 11, 19] and we divide it into 3 subarrays in the following way: [2, 4], [5, 5], [8, 11, 19], then the cost of division is equal to (4 - 2) + (5 - 5) + (19 - 8) = 13.\n\nCalculate the minimum cost you can obtain by dividing the array a into k non-empty consecutive subarrays. \n\nInput\n\nThe first line contains two integers n and k (1 \u2264 k \u2264 n \u2264 3 \u22c5 10^5).\n\nThe second line contains n integers a_1, a_2, ..., a_n ( 1 \u2264 a_i \u2264 10^9, a_i \u2265 a_{i-1}).", "grammar": {"productions": ["<S>->[n] <s> k <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=k<=n<=3*10^5", "1<=a_i<=10^9", "a_i>=a_{i-1}"]}}
{"name": "675_A. Infinite Sequence", "description": "Vasya likes everything infinite. Now he is studying the properties of a sequence s, such that its first element is equal to a (s1 = a), and the difference between any two neighbouring elements is equal to c (si - si - 1 = c). In particular, Vasya wonders if his favourite integer b appears in this sequence, that is, there exists a positive integer i, such that si = b. Of course, you are the person he asks for a help.\n\nInput\n\nThe first line of the input contain three integers a, b and c ( - 10^9 \u2264 a, b, c \u2264 10^9) \u2014 the first element of the sequence, Vasya's favorite number and the difference between any two neighbouring elements of the sequence, respectively.", "grammar": {"productions": ["<S>->a <s> b <s> c"], "constraints": ["-10^9<=a,b,c<=10^9"]}}
{"name": "p02899 AtCoder Beginner Contest 142 - Go to School", "description": "Takahashi is a teacher responsible for a class of N students.\n\nThe students are given distinct student numbers from 1 to N.\n\nToday, all the students entered the classroom at different times.\n\nAccording to Takahashi's record, there were A_i students in the classroom when student number i entered the classroom (including student number i).\n\nFrom these records, reconstruct the order in which the students entered the classroom.\n\nConstraints\n\n* 1 \\le N \\le 10^5\n* 1 \\le A_i \\le N\n* A_i \\neq A_j  (i \\neq j)\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 A_2 \\ldots A_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["1<=N<=10^5", "1<=A_i<=N", "A_i!=A_j"]}}
{"name": "133_A. HQ9+", "description": "HQ9+ is a joke programming language which has only four one-character instructions:\n\n  * \"H\" prints \"Hello, World!\",\n  * \"Q\" prints the source code of the program itself,\n  * \"9\" prints the lyrics of \"99 Bottles of Beer\" song, \n  * \"+\" increments the value stored in the internal accumulator.\n\n\n\nInstructions \"H\" and \"Q\" are case-sensitive and must be uppercase. The characters of the program which are not instructions are ignored.\n\nYou are given a program written in HQ9+. You have to figure out whether executing this program will produce any output.\n\nInput\n\nThe input will consist of a single line p which will give a program in HQ9+. String p will contain between 1 and 100 characters, inclusive. ASCII-code of each character of p will be between 33 (exclamation mark) and 126 (tilde), inclusive.", "grammar": {"productions": ["<S>->[!-~]{1,100}"], "constraints": []}}
{"name": "265_A. Colorful Stones (Simplified Edition)", "description": "There is a sequence of colorful stones. The color of each stone is one of red, green, or blue. You are given a string s. The i-th (1-based) character of s represents the color of the i-th stone. If the character is \"R\", \"G\", or \"B\", the color of the corresponding stone is red, green, or blue, respectively.\n\nInitially Squirrel Liss is standing on the first stone. You perform instructions one or more times.\n\nEach instruction is one of the three types: \"RED\", \"GREEN\", or \"BLUE\". After an instruction c, if Liss is standing on a stone whose colors is c, Liss will move one stone forward, else she will not move.\n\nYou are given a string t. The number of instructions is equal to the length of t, and the i-th character of t represents the i-th instruction.\n\nCalculate the final position of Liss (the number of the stone she is going to stand on in the end) after performing all the instructions, and print its 1-based position. It is guaranteed that Liss don't move out of the sequence.\n\nInput\n\nThe input contains two lines. The first line contains the string s (1 \u2264 |s| \u2264 50). The second line contains the string t (1 \u2264 |t| \u2264 50). The characters of each string will be one of \"R\", \"G\", or \"B\". It is guaranteed that Liss don't move out of the sequence.", "grammar": {"productions": ["<S>->[RGB]{1,50} <n> [RGB]{1,50}"], "constraints": []}}
{"name": "p03029 AtCoder Beginner Contest 128 - Apple Pie", "description": "We have A apples and P pieces of apple.\n\nWe can cut an apple into three pieces of apple, and make one apple pie by simmering two pieces of apple in a pan.\n\nFind the maximum number of apple pies we can make with what we have now.\n\nConstraints\n\n* All values in input are integers.\n* 0 \\leq A, P \\leq 100\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA P", "grammar": {"productions": ["<S>->A <s> P"], "constraints": ["0<=A,P<=100"]}}
{"name": "p03086 AtCoder Beginner Contest 122 - ATCoder", "description": "You are given a string S consisting of uppercase English letters. Find the length of the longest ACGT string that is a substring (see Notes) of S.\n\nHere, a ACGT string is a string that contains no characters other than `A`, `C`, `G` and `T`.\n\nConstraints\n\n* S is a string of length between 1 and 10 (inclusive).\n* Each character in S is an uppercase English letter.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>->[A-Z]{1,10}"], "constraints": []}}
{"name": "1294_A. Collecting Coins", "description": "Polycarp has three sisters: Alice, Barbara, and Cerene. They're collecting coins. Currently, Alice has a coins, Barbara has b coins and Cerene has c coins. Recently Polycarp has returned from the trip around the world and brought n coins.\n\nHe wants to distribute all these n coins between his sisters in such a way that the number of coins Alice has is equal to the number of coins Barbara has and is equal to the number of coins Cerene has. In other words, if Polycarp gives A coins to Alice, B coins to Barbara and C coins to Cerene (A+B+C=n), then a + A = b + B = c + C.\n\nNote that A, B or C (the number of coins Polycarp gives to Alice, Barbara and Cerene correspondingly) can be 0.\n\nYour task is to find out if it is possible to distribute all n coins between sisters in a way described above.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next t lines describe test cases. Each test case is given on a new line and consists of four space-separated integers a, b, c and n (1 \u2264 a, b, c, n \u2264 10^8) \u2014 the number of coins Alice has, the number of coins Barbara has, the number of coins Cerene has and the number of coins Polycarp has.", "grammar": {"productions": ["<S>->t <n> <T_t>", "<T_i>-><T_i-1> <n> a <s> b <s> c <s> n", "<T_1>->a <s> b <s> c <s> n"], "constraints": ["1<=t<=10^4", "1<=a,b,c,n<=10^18"]}}
{"name": "459_B. Pashmak and Flowers", "description": "Pashmak decided to give Parmida a pair of flowers from the garden. There are n flowers in the garden and the i-th of them has a beauty number bi. Parmida is a very strange girl so she doesn't want to have the two most beautiful flowers necessarily. She wants to have those pairs of flowers that their beauty difference is maximal possible!\n\nYour task is to write a program which calculates two things:\n\n  1. The maximum beauty difference of flowers that Pashmak can give to Parmida. \n  2. The number of ways that Pashmak can pick the flowers. Two ways are considered different if and only if there is at least one flower that is chosen in the first way and not chosen in the second way. \n\nInput\n\nThe first line of the input contains n (2 \u2264 n \u2264 2\u00b710^5). In the next line there are n space-separated integers b1, b2, ..., bn (1 \u2264 bi \u2264 10^9).", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> b_i", "<T_1>->b_1"], "constraints": ["2<=n<=2*10^5", "1<=b_i<=10^9"]}}
{"name": "p02407 Reversing Numbers", "description": "Write a program which reads a sequence and prints it in the reverse order.\n\nNote\n\n\u89e3\u8aac\n\nConstraints\n\n* n \u2264 100\n* 0 \u2264 ai < 1000\n\nInput\n\nThe input is given in the following format:\n\n\nn\na1 a2 . . . an\n\n\nn is the size of the sequence and ai is the ith element of the sequence.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=100", "0<=a_i<=1000"]}}
{"name": "1181_B. Split a Number", "description": "Dima worked all day and wrote down on a long paper strip his favorite number n consisting of l digits. Unfortunately, the strip turned out to be so long that it didn't fit in the Dima's bookshelf.\n\nTo solve the issue, Dima decided to split the strip into two non-empty parts so that each of them contains a positive integer without leading zeros. After that he will compute the sum of the two integers and write it down on a new strip.\n\nDima wants the resulting integer to be as small as possible, because it increases the chances that the sum will fit it in the bookshelf. Help Dima decide what is the minimum sum he can obtain.\n\nInput\n\nThe first line contains a single integer l (2 \u2264 l \u2264 100 000) \u2014 the length of the Dima's favorite number.\n\nThe second line contains the positive integer n initially written on the strip: the Dima's favorite number.\n\nThe integer n consists of exactly l digits and it does not contain leading zeros. Dima guarantees, that there is at least one valid way to split the strip.", "grammar": {"productions": ["<S>->[l] <n> [0-9]{l}"], "constraints": ["2<=l<=100000"]}}
{"name": "1245_B. Restricted RPS", "description": "Let n be a positive integer. Let a, b, c be nonnegative integers such that a + b + c = n.\n\nAlice and Bob are gonna play rock-paper-scissors n times. Alice knows the sequences of hands that Bob will play. However, Alice has to play rock a times, paper b times, and scissors c times.\n\nAlice wins if she beats Bob in at least \u2308 n/2 \u2309 (n/2 rounded up to the nearest integer) hands, otherwise Alice loses.\n\nNote that in rock-paper-scissors:\n\n  * rock beats scissors; \n  * paper beats rock; \n  * scissors beat paper. \n\n\n\nThe task is, given the sequence of hands that Bob will play, and the numbers a, b, c, determine whether or not Alice can win. And if so, find any possible sequence of hands that Alice can use to win.\n\nIf there are multiple answers, print any of them.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThen, t testcases follow, each consisting of three lines: \n\n  * The first line contains a single integer n (1 \u2264 n \u2264 100). \n  * The second line contains three integers, a, b, c (0 \u2264 a, b, c \u2264 n). It is guaranteed that a + b + c = n. \n  * The third line contains a string s of length n. s is made up of only 'R', 'P', and 'S'. The i-th character is 'R' if for his i-th Bob plays rock, 'P' if paper, and 'S' if scissors.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> a <s> b <s> c <n> [RPS]{n}", "<T_1>->[n] <n> a <s> b <s> c <n> [RPS]{n}"], "constraints": ["1<=t<=100", "1<=n<=100", "0<=a<=n", "0<=b<=n", "0<=c<=n"]}}
{"name": "1409_C. Yet Another Array Restoration", "description": "We have a secret array. You don't know this array and you have to restore it. However, you know some facts about this array:\n\n  * The array consists of n distinct positive (greater than 0) integers. \n  * The array contains two elements x and y (these elements are known for you) such that x < y. \n  * If you sort the array in increasing order (such that a_1 < a_2 < \u2026 < a_n), differences between all adjacent (consecutive) elements are equal (i.e. a_2 - a_1 = a_3 - a_2 = \u2026 = a_n - a_{n-1}). \n\n\n\nIt can be proven that such an array always exists under the constraints given below.\n\nAmong all possible arrays that satisfy the given conditions, we ask you to restore one which has the minimum possible maximum element. In other words, you have to minimize max(a_1, a_2, ..., a_n).\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains three integers n, x and y (2 \u2264 n \u2264 50; 1 \u2264 x < y \u2264 50) \u2014 the length of the array and two elements that are present in the array, respectively.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n <s> x <s> y", "<T_1>->n <s> x <s> y"], "constraints": ["1<=t<=100", "2<=n<=50", "1<=x<y<=50"]}}
{"name": "p02728 AtCoder Beginner Contest 160 - Distributing Integers", "description": "We have a tree with N vertices numbered 1 to N. The i-th edge in this tree connects Vertex a_i and b_i. For each k=1, ..., N, solve the problem below:\n\n* Consider writing a number on each vertex in the tree in the following manner:\n* First, write 1 on Vertex k.\n* Then, for each of the numbers 2, ..., N in this order, write the number on the vertex chosen as follows:\n* Choose a vertex that still does not have a number written on it and is adjacent to a vertex with a number already written on it. If there are multiple such vertices, choose one of them at random.\n* Find the number of ways in which we can write the numbers on the vertices, modulo (10^9+7).\n\nConstraints\n\n* 2 \\leq N \\leq 2 \\times 10^5\n* 1 \\leq a_i,b_i \\leq N\n* The given graph is a tree.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 b_1\n:\na_{N-1} b_{N-1}", "grammar": {"productions": ["<S>->[N] <n> <T_N-1>", "<T_i>-><T_i-1> <n> a_i <s> b_i", "<T_1>->a_1 <s> b_1"], "constraints": ["2<=N<=200000", "1<=a_i<=N", "1<=b_i<=N"]}}
{"name": "1255_A. Changing Volume", "description": "Bob watches TV every day. He always sets the volume of his TV to b. However, today he is angry to find out someone has changed the volume to a. Of course, Bob has a remote control that can change the volume.\n\nThere are six buttons (-5, -2, -1, +1, +2, +5) on the control, which in one press can either increase or decrease the current volume by 1, 2, or 5. The volume can be arbitrarily large, but can never be negative. In other words, Bob cannot press the button if it causes the volume to be lower than 0.\n\nAs Bob is so angry, he wants to change the volume to b using as few button presses as possible. However, he forgets how to do such simple calculations, so he asks you for help. Write a program that given a and b, finds the minimum number of presses to change the TV volume from a to b.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases T (1 \u2264 T \u2264 1 000). Then the descriptions of the test cases follow.\n\nEach test case consists of one line containing two integers a and b (0 \u2264 a, b \u2264 10^{9}) \u2014 the current volume and Bob's desired volume, respectively.", "grammar": {"productions": ["<S>->[T] <n> <T_T>", "<T_i>-><T_i-1> <n> a <s> b", "<T_1>->a <s> b"], "constraints": ["1<=T<=1000", "0<=a<=10^9", "0<=b<=10^9"]}}
{"name": "1025_A. Doggo Recoloring", "description": "Panic is rising in the committee for doggo standardization \u2014 the puppies of the new brood have been born multi-colored! In total there are 26 possible colors of puppies in the nature and they are denoted by letters from 'a' to 'z' inclusive.\n\nThe committee rules strictly prohibit even the smallest diversity between doggos and hence all the puppies should be of the same color. Thus Slava, the committee employee, has been assigned the task to recolor some puppies into other colors in order to eliminate the difference and make all the puppies have one common color.\n\nUnfortunately, due to bureaucratic reasons and restricted budget, there's only one operation Slava can perform: he can choose a color x such that there are currently at least two puppies of color x and recolor all puppies of the color x into some arbitrary color y. Luckily, this operation can be applied multiple times (including zero).\n\nFor example, if the number of puppies is 7 and their colors are represented as the string \"abababc\", then in one operation Slava can get the results \"zbzbzbc\", \"bbbbbbc\", \"aaaaaac\", \"acacacc\" and others. However, if the current color sequence is \"abababc\", then he can't choose x='c' right now, because currently only one puppy has the color 'c'.\n\nHelp Slava and the committee determine whether it is possible to standardize all the puppies, i.e. after Slava's operations all the puppies should have the same color.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 10^5) \u2014 the number of puppies.\n\nThe second line contains a string s of length n consisting of lowercase Latin letters, where the i-th symbol denotes the i-th puppy's color.", "grammar": {"productions": ["<S>->[n] <n> [a-z]{n}"], "constraints": ["1<=n<=10^5"]}}
{"name": "1282_A. Temporarily unavailable", "description": "Polycarp lives on the coordinate axis Ox and travels from the point x=a to x=b. It moves uniformly rectilinearly at a speed of one unit of distance per minute.\n\nOn the axis Ox at the point x=c the base station of the mobile operator is placed. It is known that the radius of its coverage is r. Thus, if Polycarp is at a distance less than or equal to r from the point x=c, then he is in the network coverage area, otherwise \u2014 no. The base station can be located both on the route of Polycarp and outside it.\n\nPrint the time in minutes during which Polycarp will not be in the coverage area of the network, with a rectilinear uniform movement from x=a to x=b. His speed \u2014 one unit of distance per minute.\n\nInput\n\nThe first line contains a positive integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. In the following lines are written t test cases.\n\nThe description of each test case is one line, which contains four integers a, b, c and r (-10^8 \u2264 a,b,c \u2264 10^8, 0 \u2264 r \u2264 10^8) \u2014 the coordinates of the starting and ending points of the path, the base station, and its coverage radius, respectively.\n\nAny of the numbers a, b and c can be equal (either any pair or all three numbers). The base station can be located both on the route of Polycarp and outside it.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> a <s> b <s> c <s> r", "<T_1>->a <s> b <s> c <s> r"], "constraints": ["1<=t<=1000", "-10^8<=a,b,c<=10^8", "0<=r<=10^8"]}}
{"name": "976_A. Minimum Binary Number", "description": "String can be called correct if it consists of characters \"0\" and \"1\" and there are no redundant leading zeroes. Here are some examples: \"0\", \"10\", \"1001\".\n\nYou are given a correct string s.\n\nYou can perform two different operations on this string: \n\n  1. swap any pair of adjacent characters (for example, \"101\" <image> \"110\"); \n  2. replace \"11\" with \"1\" (for example, \"110\" <image> \"10\"). \n\n\n\nLet val(s) be such a number that s is its binary representation.\n\nCorrect string a is less than some other correct string b iff val(a) < val(b).\n\nYour task is to find the minimum correct string that you can obtain from the given one using the operations described above. You can use these operations any number of times in any order (or even use no operations at all).\n\nInput\n\nThe first line contains integer number n (1 \u2264 n \u2264 100) \u2014 the length of string s.\n\nThe second line contains the string s consisting of characters \"0\" and \"1\". It is guaranteed that the string s is correct.", "grammar": {"productions": ["<S>->[n] <n> [01]{n}"], "constraints": ["1<=n<=100"]}}
{"name": "516_A. Drazil and Factorial", "description": "Drazil is playing a math game with Varda.\n\nLet's define <image> for positive integer x as a product of factorials of its digits. For example, <image>.\n\nFirst, they choose a decimal number a consisting of n digits that contains at least one digit larger than 1. This number may possibly start with leading zeroes. Then they should find maximum positive number x satisfying following two conditions:\n\n1. x doesn't contain neither digit 0 nor digit 1.\n\n2. <image> = <image>.\n\nHelp friends find such number.\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 15) \u2014 the number of digits in a.\n\nThe second line contains n digits of a. There is at least one digit in a that is larger than 1. Number a may possibly contain leading zeroes.", "grammar": {"productions": ["<S>->[n] <n> [0-9]{n}"], "constraints": ["1<=n<=15"]}}
{"name": "1326_C. Permutation Partitions", "description": "You are given a permutation p_1, p_2, \u2026, p_n of integers from 1 to n and an integer k, such that 1 \u2264 k \u2264 n. A permutation means that every number from 1 to n is contained in p exactly once.\n\nLet's consider all partitions of this permutation into k disjoint segments. Formally, a partition is a set of segments \\{[l_1, r_1], [l_2, r_2], \u2026, [l_k, r_k]\\}, such that:\n\n  * 1 \u2264 l_i \u2264 r_i \u2264 n for all 1 \u2264 i \u2264 k; \n  * For all 1 \u2264 j \u2264 n there exists exactly one segment [l_i, r_i], such that l_i \u2264 j \u2264 r_i. \n\n\n\nTwo partitions are different if there exists a segment that lies in one partition but not the other.\n\nLet's calculate the partition value, defined as \u2211_{i=1}^{k} {max_{l_i \u2264 j \u2264 r_i} {p_j}}, for all possible partitions of the permutation into k disjoint segments. Find the maximum possible partition value over all such partitions, and the number of partitions with this value. As the second value can be very large, you should find its remainder when divided by 998 244 353.\n\nInput\n\nThe first line contains two integers, n and k (1 \u2264 k \u2264 n \u2264 200 000) \u2014 the size of the given permutation and the number of segments in a partition.\n\nThe second line contains n different integers p_1, p_2, \u2026, p_n (1 \u2264 p_i \u2264 n) \u2014 the given permutation.", "grammar": {"productions": ["<S>->[n] <s> k <n> <T_n>", "<T_i>-><T_i-1> <s> p_i", "<T_1>->p_1"], "constraints": ["1<=k<=n<=200000", "1<=p_i<=n"]}}
{"name": "1327_C. Game with Chips", "description": "Petya has a rectangular Board of size n \u00d7 m. Initially, k chips are placed on the board, i-th chip is located in the cell at the intersection of sx_i-th row and sy_i-th column.\n\nIn one action, Petya can move all the chips to the left, right, down or up by 1 cell.\n\nIf the chip was in the (x, y) cell, then after the operation: \n\n  * left, its coordinates will be (x, y - 1); \n  * right, its coordinates will be (x, y + 1); \n  * down, its coordinates will be (x + 1, y); \n  * up, its coordinates will be (x - 1, y). \n\n\n\nIf the chip is located by the wall of the board, and the action chosen by Petya moves it towards the wall, then the chip remains in its current position.\n\nNote that several chips can be located in the same cell.\n\nFor each chip, Petya chose the position which it should visit. Note that it's not necessary for a chip to end up in this position.\n\nSince Petya does not have a lot of free time, he is ready to do no more than 2nm actions.\n\nYou have to find out what actions Petya should do so that each chip visits the position that Petya selected for it at least once. Or determine that it is not possible to do this in 2nm actions.\n\nInput\n\nThe first line contains three integers n, m, k (1 \u2264 n, m, k \u2264 200) \u2014 the number of rows and columns of the board and the number of chips, respectively.\n\nThe next k lines contains two integers each sx_i, sy_i ( 1 \u2264 sx_i \u2264 n, 1 \u2264 sy_i \u2264 m) \u2014 the starting position of the i-th chip.\n\nThe next k lines contains two integers each fx_i, fy_i ( 1 \u2264 fx_i \u2264 n, 1 \u2264 fy_i \u2264 m) \u2014 the position that the i-chip should visit at least once.", "grammar": {"productions": ["<S>->n <s> m <s> [k] <n> <T_k> <n> <L_k>", "<T_i>-><T_i-1> <n> sx_i <s> sy_i", "<T_1>->sx_1 <s> sy_1", "<L_i>-><L_i-1> <n> fx_i <s> fy_i", "<L_1>->fx_1 <s> fy_i"], "constraints": ["1<=n<=200", "1<=m<=200", "1<=k<=200", "1<=sx_i<=n", "1<=sy_i<=m", "1<=fx_i<=n", "1<=fy_i<=m"]}}
{"name": "463_B. Caisa and Pylons", "description": "Caisa solved the problem with the sugar and now he is on the way back to home. \n\nCaisa is playing a mobile game during his path. There are (n + 1) pylons numbered from 0 to n in this game. The pylon with number 0 has zero height, the pylon with number i (i > 0) has height hi. The goal of the game is to reach n-th pylon, and the only move the player can do is to jump from the current pylon (let's denote its number as k) to the next one (its number will be k + 1). When the player have made such a move, its energy increases by hk - hk + 1 (if this value is negative the player loses energy). The player must have non-negative amount of energy at any moment of the time. \n\nInitially Caisa stand at 0 pylon and has 0 energy. The game provides a special opportunity: one can pay a single dollar and increase the height of anyone pylon by one. Caisa may use that opportunity several times, but he doesn't want to spend too much money. What is the minimal amount of money he must paid to reach the goal of the game?\n\nInput\n\nThe first line contains integer n (1 \u2264 n \u2264 10^5). The next line contains n integers h1, h2, ..., hn (1 \u2264 hi \u2264 10^5) representing the heights of the pylons.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> h_i", "<T_1>->h_1"], "constraints": ["1<=n<=10^5", "1<=h_i<=10^5"]}}
{"name": "p03315 AtCoder Beginner Contest 101 - Eating Symbols Easy", "description": "There is always an integer in Takahashi's mind.\n\nInitially, the integer in Takahashi's mind is 0. Takahashi is now going to eat four symbols, each of which is `+` or `-`. When he eats `+`, the integer in his mind increases by 1; when he eats `-`, the integer in his mind decreases by 1.\n\nThe symbols Takahashi is going to eat are given to you as a string S. The i-th character in S is the i-th symbol for him to eat.\n\nFind the integer in Takahashi's mind after he eats all the symbols.\n\nConstraints\n\n* The length of S is 4.\n* Each character in S is `+` or `-`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>->[+-]{4}"], "constraints": []}}
{"name": "1249_C1. Good Numbers (easy version)", "description": "The only difference between easy and hard versions is the maximum value of n.\n\nYou are given a positive integer number n. You really love good numbers so you want to find the smallest good number greater than or equal to n.\n\nThe positive integer is called good if it can be represented as a sum of distinct powers of 3 (i.e. no duplicates of powers of 3 are allowed).\n\nFor example:\n\n  * 30 is a good number: 30 = 3^3 + 3^1, \n  * 1 is a good number: 1 = 3^0, \n  * 12 is a good number: 12 = 3^2 + 3^1, \n  * but 2 is not a good number: you can't represent it as a sum of distinct powers of 3 (2 = 3^0 + 3^0), \n  * 19 is not a good number: you can't represent it as a sum of distinct powers of 3 (for example, the representations 19 = 3^2 + 3^2 + 3^0 = 3^2 + 3^1 + 3^1 + 3^1 + 3^0 are invalid), \n  * 20 is also not a good number: you can't represent it as a sum of distinct powers of 3 (for example, the representation 20 = 3^2 + 3^2 + 3^0 + 3^0 is invalid). \n\n\n\nNote, that there exist other representations of 19 and 20 as sums of powers of 3 but none of them consists of distinct powers of 3.\n\nFor the given positive integer n find such smallest m (n \u2264 m) that m is a good number.\n\nYou have to answer q independent queries.\n\nInput\n\nThe first line of the input contains one integer q (1 \u2264 q \u2264 500) \u2014 the number of queries. Then q queries follow.\n\nThe only line of the query contains one integer n (1 \u2264 n \u2264 10^4).", "grammar": {"productions": ["<S>->[q] <n> <T_q>", "<T_i>-><T_i-1> <n> n", "<T_1>->n"], "constraints": ["1<=q<=500", "1<=n<=10^4"]}}
{"name": "733_A. Grasshopper And the String", "description": "One day, the Grasshopper was jumping on the lawn and found a piece of paper with a string. Grasshopper became interested what is the minimum jump ability he should have in order to be able to reach the far end of the string, jumping only on vowels of the English alphabet. Jump ability is the maximum possible length of his jump. \n\nFormally, consider that at the begginning the Grasshopper is located directly in front of the leftmost character of the string. His goal is to reach the position right after the rightmost character of the string. In one jump the Grasshopper could jump to the right any distance from 1 to the value of his jump ability.\n\n<image> The picture corresponds to the first example.\n\nThe following letters are vowels: 'A', 'E', 'I', 'O', 'U' and 'Y'.\n\nInput\n\nThe first line contains non-empty string consisting of capital English letters. It is guaranteed that the length of the string does not exceed 100.", "grammar": {"productions": ["<S>->[A-Z]{1,100}"], "constraints": []}}
{"name": "478_B. Random Teams", "description": "n participants of the competition were split into m teams in some manner so that each team has at least one participant. After the competition each pair of participants from the same team became friends.\n\nYour task is to write a program that will find the minimum and the maximum number of pairs of friends that could have formed by the end of the competition.\n\nInput\n\nThe only line of input contains two integers n and m, separated by a single space (1 \u2264 m \u2264 n \u2264 10^9) \u2014 the number of participants and the number of teams respectively.", "grammar": {"productions": ["<S>->n <s> m"], "constraints": ["1<=m<=n<=10^9"]}}
{"name": "p03861 AtCoder Beginner Contest 048 - Between a and b ...", "description": "You are given nonnegative integers a and b (a \u2264 b), and a positive integer x. Among the integers between a and b, inclusive, how many are divisible by x?\n\nConstraints\n\n* 0 \u2264 a \u2264 b \u2264 10^{18}\n* 1 \u2264 x \u2264 10^{18}\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\na b x", "grammar": {"productions": ["<S>->a <s> b <s> x"], "constraints": ["0<=a<=b<=10^18", "1<=x<=10^18"]}}
{"name": "456_B. Fedya and Maths", "description": "Fedya studies in a gymnasium. Fedya's maths hometask is to calculate the following expression:\n\n(1n + 2n + 3n + 4n) mod 5\n\nfor given value of n. Fedya managed to complete the task. Can you? Note that given number n can be extremely large (e.g. it can exceed any integer type of your programming language).\n\nInput\n\nThe single line contains a single integer n (0 \u2264 n \u2264 10^(10^5)). The number doesn't contain any leading zeroes.", "grammar": {"productions": ["<S>->n"], "constraints": ["0<=n<=10^10^5"]}}
{"name": "228_A. Is your horseshoe on the other hoof?", "description": "Valera the Horse is going to the party with friends. He has been following the fashion trends for a while, and he knows that it is very popular to wear all horseshoes of different color. Valera has got four horseshoes left from the last year, but maybe some of them have the same color. In this case he needs to go to the store and buy some few more horseshoes, not to lose face in front of his stylish comrades.\n\nFortunately, the store sells horseshoes of all colors under the sun and Valera has enough money to buy any four of them. However, in order to save the money, he would like to spend as little money as possible, so you need to help Valera and determine what is the minimum number of horseshoes he needs to buy to wear four horseshoes of different colors to a party.\n\nInput\n\nThe first line contains four space-separated integers s1, s2, s3, s4 (1 \u2264 s1, s2, s3, s4 \u2264 10^9) \u2014 the colors of horseshoes Valera has.\n\nConsider all possible colors indexed with integers.", "grammar": {"productions": ["<S>->s1 <s> s2 <s> s3 <s> s4"], "constraints": ["1<=s1,s2,s3,s4<=10^9"]}}
{"name": "p03803 AtCoder Beginner Contest 054 - One Card Poker", "description": "Alice and Bob are playing One Card Poker.\nOne Card Poker is a two-player game using playing cards.\n\nEach card in this game shows an integer between `1` and `13`, inclusive.\nThe strength of a card is determined by the number written on it, as follows:\n\nWeak `2` < `3` < `4` < `5` < `6` < `7` < `8` < `9` < `10` < `11` < `12` < `13` < `1` Strong\n\nOne Card Poker is played as follows:\n\n1. Each player picks one card from the deck. The chosen card becomes the player's hand.\n2. The players reveal their hands to each other. The player with the stronger card wins the game.\nIf their cards are equally strong, the game is drawn.\n\n\n\nYou are watching Alice and Bob playing the game, and can see their hands.\nThe number written on Alice's card is A, and the number written on Bob's card is B.\nWrite a program to determine the outcome of the game.\n\nConstraints\n\n* 1\u2266A\u226613\n* 1\u2266B\u226613\n* A and B are integers.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nA B", "grammar": {"productions": ["<S>->A <s> B"], "constraints": ["1<=A<=13", "1<=B<=13"]}}
{"name": "p02580 AtCoder Beginner Contest 176 - Bomber", "description": "We have a two-dimensional grid with H \\times W squares. There are M targets to destroy in this grid - the position of the i-th target is \\left(h_i, w_i \\right).\n\nTakahashi will choose one square in this grid, place a bomb there, and ignite it. The bomb will destroy all targets that are in the row or the column where the bomb is placed. It is possible to place the bomb at a square with a target.\n\nTakahashi is trying to maximize the number of targets to destroy. Find the maximum number of targets that can be destroyed.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq H, W \\leq 3 \\times 10^5\n* 1 \\leq M \\leq \\min\\left(H\\times W, 3 \\times 10^5\\right)\n* 1 \\leq h_i \\leq H\n* 1 \\leq w_i \\leq W\n* \\left(h_i, w_i\\right) \\neq \\left(h_j, w_j\\right) \\left(i \\neq j\\right)\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nH W M\nh_1 w_1\n\\vdots\nh_M w_M", "grammar": {"productions": ["<S>->H <s> W <s> [M] <n> <T_M>", "<T_i>-><T_i-1> <n> H_i <s> W_i", "<T_1>->H_1 <s> W_1"], "constraints": ["1<=H,W<=3*10^5", "1<=M<=min(H*W,3*10^5)", "1<=H_i<=H", "1<=W_i<=W", "(H_i,W_i)!=(H_j,W_j)"]}}
{"name": "p03318 AtCoder Beginner Contest 101 - Snuke Numbers", "description": "Let S(n) denote the sum of the digits in the decimal notation of n. For example, S(123) = 1 + 2 + 3 = 6.\n\nWe will call an integer n a Snuke number when, for all positive integers m such that m > n, \\frac{n}{S(n)} \\leq \\frac{m}{S(m)} holds.\n\nGiven an integer K, list the K smallest Snuke numbers.\n\nConstraints\n\n* 1 \\leq K\n* The K-th smallest Snuke number is not greater than 10^{15}.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nK", "grammar": {"productions": ["<S>->K"], "constraints": ["1<=K<=10^15"]}}
{"name": "p03798 AtCoder Beginner Contest 055 - Menagerie", "description": "Snuke, who loves animals, built a zoo.\n\nThere are N animals in this zoo. They are conveniently numbered 1 through N, and arranged in a circle. The animal numbered i (2\u2264i\u2264N-1) is adjacent to the animals numbered i-1 and i+1. Also, the animal numbered 1 is adjacent to the animals numbered 2 and N, and the animal numbered N is adjacent to the animals numbered N-1 and 1.\n\nThere are two kinds of animals in this zoo: honest sheep that only speak the truth, and lying wolves that only tell lies.\n\nSnuke cannot tell the difference between these two species, and asked each animal the following question: \"Are your neighbors of the same species?\" The animal numbered i answered s_i. Here, if s_i is `o`, the animal said that the two neighboring animals are of the same species, and if s_i is `x`, the animal said that the two neighboring animals are of different species.\n\nMore formally, a sheep answered `o` if the two neighboring animals are both sheep or both wolves, and answered `x` otherwise. Similarly, a wolf answered `x` if the two neighboring animals are both sheep or both wolves, and answered `o` otherwise.\n\nSnuke is wondering whether there is a valid assignment of species to the animals that is consistent with these responses. If there is such an assignment, show one such assignment. Otherwise, print `-1`.\n\nConstraints\n\n* 3 \u2264 N \u2264 10^{5}\n* s is a string of length N consisting of `o` and `x`.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN\ns", "grammar": {"productions": ["<S>->[N] <n> [ox]{N}"], "constraints": ["3<=N<=10^5"]}}
{"name": "p02624 AtCoder Beginner Contest 172 - Sum of Divisors", "description": "For a positive integer X, let f(X) be the number of positive divisors of X.\n\nGiven a positive integer N, find \\sum_{K=1}^N K\\times f(K).\n\nConstraints\n\n* 1 \\leq N \\leq 10^7\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["1<N<=10^7"]}}
{"name": "p04029 AtCoder Beginner Contest 043 - Children and Candies (ABC Edit)", "description": "There are N children in AtCoder Kindergarten. Mr. Evi will arrange the children in a line, then give 1 candy to the first child in the line, 2 candies to the second child, ..., N candies to the N-th child. How many candies will be necessary in total?\n\nConstraints\n\n* 1\u2266N\u2266100\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["1<=N<=100"]}}
{"name": "p02921 AtCoder Beginner Contest 139 - Tenki", "description": "You will be given a string S of length 3 representing the weather forecast for three days in the past.\n\nThe i-th character (1 \\leq i \\leq 3) of S represents the forecast for the i-th day. `S`, `C`, and `R` stand for sunny, cloudy, and rainy, respectively.\n\nYou will also be given a string T of length 3 representing the actual weather on those three days.\n\nThe i-th character (1 \\leq i \\leq 3) of S represents the actual weather on the i-th day. `S`, `C`, and `R` stand for sunny, cloudy, and rainy, respectively.\n\nPrint the number of days for which the forecast was correct.\n\nConstraints\n\n* S and T are strings of length 3 each.\n* S and T consist of `S`, `C`, and `R`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS\nT", "grammar": {"productions": ["<S>->[SCR]{3} <n> [SCR]{3}"], "constraints": []}}
{"name": "1080_A. Petya and Origami", "description": "Petya is having a party soon, and he has decided to invite his n friends.\n\nHe wants to make invitations in the form of origami. For each invitation, he needs two red sheets, five green sheets, and eight blue sheets. The store sells an infinite number of notebooks of each color, but each notebook consists of only one color with k sheets. That is, each notebook contains k sheets of either red, green, or blue.\n\nFind the minimum number of notebooks that Petya needs to buy to invite all n of his friends.\n\nInput\n\nThe first line contains two integers n and k (1\u2264 n, k\u2264 10^8) \u2014 the number of Petya's friends and the number of sheets in each notebook respectively.", "grammar": {"productions": ["<S>->n <s> k"], "constraints": ["1<=n,k<=10^8"]}}
{"name": "1143_A. The Doors", "description": "Three years have passes and nothing changed. It is still raining in London, and Mr. Black has to close all the doors in his home in order to not be flooded. Once, however, Mr. Black became so nervous that he opened one door, then another, then one more and so on until he opened all the doors in his house.\n\nThere are exactly two exits from Mr. Black's house, let's name them left and right exits. There are several doors in each of the exits, so each door in Mr. Black's house is located either in the left or in the right exit. You know where each door is located. Initially all the doors are closed. Mr. Black can exit the house if and only if all doors in at least one of the exits is open. You are given a sequence in which Mr. Black opened the doors, please find the smallest index k such that Mr. Black can exit the house after opening the first k doors.\n\nWe have to note that Mr. Black opened each door at most once, and in the end all doors became open.\n\nInput\n\nThe first line contains integer n (2 \u2264 n \u2264 200 000) \u2014 the number of doors.\n\nThe next line contains n integers: the sequence in which Mr. Black opened the doors. The i-th of these integers is equal to 0 in case the i-th opened door is located in the left exit, and it is equal to 1 in case it is in the right exit.\n\nIt is guaranteed that there is at least one door located in the left exit and there is at least one door located in the right exit.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> [01]{1}", "<T_1>->[01]{1}"], "constraints": ["2<=n<=200000"]}}
{"name": "p03469 AtCoder Beginner Contest 085 - Already 2018", "description": "On some day in January 2018, Takaki is writing a document. The document has a column where the current date is written in `yyyy/mm/dd` format. For example, January 23, 2018 should be written as `2018/01/23`.\n\nAfter finishing the document, she noticed that she had mistakenly wrote `2017` at the beginning of the date column. Write a program that, when the string that Takaki wrote in the date column, S, is given as input, modifies the first four characters in S to `2018` and prints it.\n\nConstraints\n\n* S is a string of length 10.\n* The first eight characters in S are `2017/01/`.\n* The last two characters in S are digits and represent an integer between 1 and 31 (inclusive).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>->2017/01/ S"], "constraints": ["1<=S<=31"]}}
{"name": "1374_E1. Reading Books (easy version)", "description": "Easy and hard versions are actually different problems, so read statements of both problems completely and carefully.\n\nSummer vacation has started so Alice and Bob want to play and joy, but... Their mom doesn't think so. She says that they have to read some amount of books before all entertainments. Alice and Bob will read each book together to end this exercise faster.\n\nThere are n books in the family library. The i-th book is described by three integers: t_i \u2014 the amount of time Alice and Bob need to spend to read it, a_i (equals 1 if Alice likes the i-th book and 0 if not), and b_i (equals 1 if Bob likes the i-th book and 0 if not).\n\nSo they need to choose some books from the given n books in such a way that:\n\n  * Alice likes at least k books from the chosen set and Bob likes at least k books from the chosen set; \n  * the total reading time of these books is minimized (they are children and want to play and joy as soon a possible). \n\n\n\nThe set they choose is the same for both Alice an Bob (it's shared between them) and they read all books together, so the total reading time is the sum of t_i over all books that are in the chosen set.\n\nYour task is to help them and find any suitable set of books or determine that it is impossible to find such a set.\n\nInput\n\nThe first line of the input contains two integers n and k (1 \u2264 k \u2264 n \u2264 2 \u22c5 10^5).\n\nThe next n lines contain descriptions of books, one description per line: the i-th line contains three integers t_i, a_i and b_i (1 \u2264 t_i \u2264 10^4, 0 \u2264 a_i, b_i \u2264 1), where:\n\n  * t_i \u2014 the amount of time required for reading the i-th book; \n  * a_i equals 1 if Alice likes the i-th book and 0 otherwise; \n  * b_i equals 1 if Bob likes the i-th book and 0 otherwise.", "grammar": {"productions": ["<S>->[n] <s> k <n> <T_n>", "<T_i>-><T_i-1> <n> t_i <s> a_i <s> b_i", "<T_1>->t_1 <s> a_1 <s> b_1"], "constraints": ["1<=k<=n<=2*10^5", "1<=t_i<=10^4", "0<=a_i,b_i<=1"]}}
{"name": "p02802 AtCoder Beginner Contest 151 - Welcome to AtCoder", "description": "Takahashi participated in a contest on AtCoder.\n\nThe contest had N problems.\n\nTakahashi made M submissions during the contest.\n\nThe i-th submission was made for the p_i-th problem and received the verdict S_i (`AC` or `WA`).\n\nThe number of Takahashi's correct answers is the number of problems on which he received an `AC` once or more.\n\nThe number of Takahashi's penalties is the sum of the following count for the problems on which he received an `AC` once or more: the number of `WA`s received before receiving an `AC` for the first time on that problem.\n\nFind the numbers of Takahashi's correct answers and penalties.\n\nConstraints\n\n* N, M, and p_i are integers.\n* 1 \\leq N \\leq 10^5\n* 0 \\leq M \\leq 10^5\n* 1 \\leq p_i \\leq N\n* S_i is `AC` or `WA`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\np_1 S_1\n:\np_M S_M", "grammar": {"productions": ["<S>->N <s> [M] <n> <T_M>", "<T_i>-><T_i-1> <n> P_i <s> S_i", "<T_1>->P_1 <s> S_1", "<T_0>->\u03b5", "S_i->AC|WA"], "constraints": ["1<=N<=10^5", "0<=M<=10^5", "1<=P_i<=N"]}}
{"name": "1157_B. Long Number", "description": "You are given a long decimal number a consisting of n digits from 1 to 9. You also have a function f that maps every digit from 1 to 9 to some (possibly the same) digit from 1 to 9.\n\nYou can perform the following operation no more than once: choose a non-empty contiguous subsegment of digits in a, and replace each digit x from this segment with f(x). For example, if a = 1337, f(1) = 1, f(3) = 5, f(7) = 3, and you choose the segment consisting of three rightmost digits, you get 1553 as the result.\n\nWhat is the maximum possible number you can obtain applying this operation no more than once?\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of digits in a.\n\nThe second line contains a string of n characters, denoting the number a. Each character is a decimal digit from 1 to 9.\n\nThe third line contains exactly 9 integers f(1), f(2), ..., f(9) (1 \u2264 f(i) \u2264 9).", "grammar": {"productions": ["<S>->[n] <n> [1-9]{n} <n> [1-9]{1} <s> [1-9]{1} <s> [1-9]{1} <s> [1-9]{1} <s> [1-9]{1} <s> [1-9]{1} <s> [1-9]{1} <s> [1-9]{1} <s> [1-9]{1}"], "constraints": ["1<=n<=2*10^5"]}}
{"name": "1076_B. Divisor Subtraction", "description": "You are given an integer number n. The following algorithm is applied to it:\n\n  1. if n = 0, then end algorithm; \n  2. find the smallest prime divisor d of n; \n  3. subtract d from n and go to step 1. \n\n\n\nDetermine the number of subtrations the algorithm will make.\n\nInput\n\nThe only line contains a single integer n (2 \u2264 n \u2264 10^{10}).", "grammar": {"productions": ["<S>->n"], "constraints": ["2<=n<=10^10"]}}
{"name": "p03011 AtCoder Beginner Contest 129 - Airplane", "description": "There are three airports A, B and C, and flights between each pair of airports in both directions.\n\nA one-way flight between airports A and B takes P hours, a one-way flight between airports B and C takes Q hours, and a one-way flight between airports C and A takes R hours.\n\nConsider a route where we start at one of the airports, fly to another airport and then fly to the other airport.\n\nWhat is the minimum possible sum of the flight times?\n\nConstraints\n\n* 1 \\leq P,Q,R \\leq 100\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nP Q R", "grammar": {"productions": ["<S>->P <s> Q <s> R"], "constraints": ["1<=P<=100", "1<=Q<=100", "1<=R<=100"]}}
{"name": "p03073 AtCoder Beginner Contest 124 - Coloring Colorfully", "description": "N tiles are arranged in a row from left to right. The initial color of each tile is represented by a string S of length N.\n\nThe i-th tile from the left is painted black if the i-th character of S is `0`, and painted white if that character is `1`.\n\nYou want to repaint some of the tiles black or white, so that any two adjacent tiles have different colors.\n\nAt least how many tiles need to be repainted to satisfy the condition?\n\nConstraints\n\n* 1 \\leq |S| \\leq 10^5\n* S_i is `0` or `1`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>->[01]{1,10^5}"], "constraints": []}}
{"name": "1364_A. XXXXX", "description": "Ehab loves number theory, but for some reason he hates the number x. Given an array a, find the length of its longest subarray such that the sum of its elements isn't divisible by x, or determine that such subarray doesn't exist.\n\nAn array a is a subarray of an array b if a can be obtained from b by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 5) \u2014 the number of test cases you need to solve. The description of the test cases follows.\n\nThe first line of each test case contains 2 integers n and x (1 \u2264 n \u2264 10^5, 1 \u2264 x \u2264 10^4) \u2014 the number of elements in the array a and the number that Ehab hates.\n\nThe second line contains n space-separated integers a_1, a_2, \u2026, a_{n} (0 \u2264 a_i \u2264 10^4) \u2014 the elements of the array a.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <s> x <n> <L_n>", "<T_1>->[n] <s> x <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=5", "1<=n<=10^5", "1<=x<=10^4", "0<=a_i<=10^4"]}}
{"name": "p03425 AtCoder Beginner Contest 089 - March", "description": "There are N people. The name of the i-th person is S_i.\n\nWe would like to choose three people so that the following conditions are met:\n\n* The name of every chosen person begins with `M`, `A`, `R`, `C` or `H`.\n* There are no multiple people whose names begin with the same letter.\n\n\n\nHow many such ways are there to choose three people, disregarding order?\n\nNote that the answer may not fit into a 32-bit integer type.\n\nConstraints\n\n* 1 \\leq N \\leq 10^5\n* S_i consists of uppercase English letters.\n* 1 \\leq |S_i| \\leq 10\n* S_i \\neq S_j (i \\neq j)\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nS_1\n:\nS_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> [A-Z]{1,10}", "<T_1>->[A-Z]{1,10}"], "constraints": ["1<=N<=10^5", "S_i!=S_j"]}}
{"name": "69_A. Young Physicist", "description": "A guy named Vasya attends the final grade of a high school. One day Vasya decided to watch a match of his favorite hockey team. And, as the boy loves hockey very much, even more than physics, he forgot to do the homework. Specifically, he forgot to complete his physics tasks. Next day the teacher got very angry at Vasya and decided to teach him a lesson. He gave the lazy student a seemingly easy task: You are given an idle body in space and the forces that affect it. The body can be considered as a material point with coordinates (0; 0; 0). Vasya had only to answer whether it is in equilibrium. \"Piece of cake\" \u2014 thought Vasya, we need only to check if the sum of all vectors is equal to 0. So, Vasya began to solve the problem. But later it turned out that there can be lots and lots of these forces, and Vasya can not cope without your help. Help him. Write a program that determines whether a body is idle or is moving by the given vectors of forces.\n\nInput\n\nThe first line contains a positive integer n (1 \u2264 n \u2264 100), then follow n lines containing three integers each: the xi coordinate, the yi coordinate and the zi coordinate of the force vector, applied to the body ( - 100 \u2264 xi, yi, zi \u2264 100).", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> X_i <s> Y_i <s> Z_i", "<T_1>->X_1 <s> Y_1 <s> Z_1"], "constraints": ["1<=N<=100", "-100<=X_i<=100", "-100<=Y_i<=100", "-100<=Z_i<=100"]}}
{"name": "p03774 AtCoder Beginner Contest 057 - Checkpoints", "description": "There are N students and M checkpoints on the xy-plane.\nThe coordinates of the i-th student (1 \\leq i \\leq N) is (a_i,b_i), and the coordinates of the checkpoint numbered j (1 \\leq j \\leq M) is (c_j,d_j).\nWhen the teacher gives a signal, each student has to go to the nearest checkpoint measured in Manhattan distance.\nThe Manhattan distance between two points (x_1,y_1) and (x_2,y_2) is |x_1-x_2|+|y_1-y_2|.\nHere, |x| denotes the absolute value of x.\nIf there are multiple nearest checkpoints for a student, he/she will select the checkpoint with the smallest index.\nWhich checkpoint will each student go to?\n\nConstraints\n\n* 1 \\leq N,M \\leq 50\n* -10^8 \\leq a_i,b_i,c_j,d_j \\leq 10^8\n* All input values are integers.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN M\na_1 b_1\n:\na_N b_N\nc_1 d_1\n:\nc_M d_M", "grammar": {"productions": ["<S>->[N] <s> [M] <n> <T_N> <n> <L_M>", "<T_i>-><T_i-1> <n> a_i <s> b_i", "<T_1>->a_1 <s> b_1", "<L_i>-><L_i-1> <n> c_i <s> d_i", "<L_1>->c_1 <s> d_1"], "constraints": ["1<=N<=50", "1<=M<=50", "-10^8<=a_i<=10^8", "-10^8<=b_i<=10^8", "-10^8<=c_i<=10^8", "-10^8<=d_i<=10^8"]}}
{"name": "1133_A. Middle of the Contest", "description": "Polycarp is going to participate in the contest. It starts at h_1:m_1 and ends at h_2:m_2. It is guaranteed that the contest lasts an even number of minutes (i.e. m_1 \\% 2 = m_2 \\% 2, where x \\% y is x modulo y). It is also guaranteed that the entire contest is held during a single day. And finally it is guaranteed that the contest lasts at least two minutes.\n\nPolycarp wants to know the time of the midpoint of the contest. For example, if the contest lasts from 10:00 to 11:00 then the answer is 10:30, if the contest lasts from 11:10 to 11:12 then the answer is 11:11.\n\nInput\n\nThe first line of the input contains two integers h_1 and m_1 in the format hh:mm.\n\nThe second line of the input contains two integers h_2 and m_2 in the same format (hh:mm).\n\nIt is guaranteed that 0 \u2264 h_1, h_2 \u2264 23 and 0 \u2264 m_1, m_2 \u2264 59.\n\nIt is guaranteed that the contest lasts an even number of minutes (i.e. m_1 \\% 2 = m_2 \\% 2, where x \\% y is x modulo y). It is also guaranteed that the entire contest is held during a single day. And finally it is guaranteed that the contest lasts at least two minutes.", "grammar": {"productions": ["<S>->h1 : m1 <n> h2 : m2"], "constraints": ["0<=h1,h2<=23", "0<=m1,m2<=59", "m1%2==m2%2"]}}
{"name": "339_B. Xenia and Ringroad", "description": "Xenia lives in a city that has n houses built along the main ringroad. The ringroad houses are numbered 1 through n in the clockwise order. The ringroad traffic is one way and also is clockwise.\n\nXenia has recently moved into the ringroad house number 1. As a result, she's got m things to do. In order to complete the i-th task, she needs to be in the house number ai and complete all tasks with numbers less than i. Initially, Xenia is in the house number 1, find the minimum time she needs to complete all her tasks if moving from a house to a neighboring one along the ringroad takes one unit of time.\n\nInput\n\nThe first line contains two integers n and m (2 \u2264 n \u2264 10^5, 1 \u2264 m \u2264 10^5). The second line contains m integers a1, a2, ..., am (1 \u2264 ai \u2264 n). Note that Xenia can have multiple consecutive tasks in one house.", "grammar": {"productions": ["<S>->n <s> [m] <n> <T_m>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["2<=n<=10^5", "1<=m<=10^5", "1<=a_i<=n"]}}
{"name": "p03289 AtCoder Beginner Contest 104 - AcCepted", "description": "You are given a string S. Each character of S is uppercase or lowercase English letter. Determine if S satisfies all of the following conditions:\n\n* The initial character of S is an uppercase `A`.\n* There is exactly one occurrence of `C` between the third character from the beginning and the second to last character (inclusive).\n* All letters except the `A` and `C` mentioned above are lowercase.\n\nConstraints\n\n* 4 \u2264 |S| \u2264 10 (|S| is the length of the string S.)\n* Each character of S is uppercase or lowercase English letter.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>->[a-zA-Z]{4,10}"], "constraints": []}}
{"name": "1189_B. Number Circle", "description": "You are given n numbers a_1, a_2, \u2026, a_n. Is it possible to arrange them in a circle in such a way that every number is strictly less than the sum of its neighbors?\n\nFor example, for the array [1, 4, 5, 6, 7, 8], the arrangement on the left is valid, while arrangement on the right is not, as 5\u2265 4 + 1 and 8> 1 + 6.\n\n<image>\n\nInput\n\nThe first line contains a single integer n (3\u2264 n \u2264 10^5) \u2014 the number of numbers.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^9) \u2014 the numbers. The given numbers are not necessarily distinct (i.e. duplicates are allowed).", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["3<=n<=10^5", "1<=a_i<=10^9"]}}
{"name": "p02400 Circle", "description": "Write a program which calculates the area and circumference of a circle for given radius r.\n\nConstraints\n\n* 0 < r < 10000\n\nInput\n\nA real number r is given.", "grammar": {"productions": ["<S>->r"], "constraints": ["0<r<10000"]}}
{"name": "p03471 AtCoder Beginner Contest 085 - Otoshidama", "description": "The commonly used bills in Japan are 10000-yen, 5000-yen and 1000-yen bills. Below, the word \"bill\" refers to only these.\n\nAccording to Aohashi, he received an otoshidama (New Year money gift) envelope from his grandfather that contained N bills for a total of Y yen, but he may be lying. Determine whether such a situation is possible, and if it is, find a possible set of bills contained in the envelope. Assume that his grandfather is rich enough, and the envelope was large enough.\n\nConstraints\n\n* 1 \u2264 N \u2264 2000\n* 1000 \u2264 Y \u2264 2 \u00d7 10^7\n* N is an integer.\n* Y is a multiple of 1000.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN Y", "grammar": {"productions": ["<S>->N <s> Y"], "constraints": ["1<=N<=2000", "1000<=Y<=2*10^7"]}}
{"name": "1159_A. A pile of stones", "description": "Vasya has a pile, that consists of some number of stones. n times he either took one stone from the pile or added one stone to the pile. The pile was non-empty before each operation of taking one stone from the pile.\n\nYou are given n operations which Vasya has made. Find the minimal possible number of stones that can be in the pile after making these operations.\n\nInput\n\nThe first line contains one positive integer n \u2014 the number of operations, that have been made by Vasya (1 \u2264 n \u2264 100).\n\nThe next line contains the string s, consisting of n symbols, equal to \"-\" (without quotes) or \"+\" (without quotes). If Vasya took the stone on i-th operation, s_i is equal to \"-\" (without quotes), if added, s_i is equal to \"+\" (without quotes).", "grammar": {"productions": ["<S>->[n] <n> [+-]{n}"], "constraints": ["1<=n<=100"]}}
{"name": "p02651 AtCoder Grand Contest 045 - Xor Battle", "description": "There are two persons, numbered 0 and 1, and a variable x whose initial value is 0. The two persons now play a game. The game is played in N rounds. The following should be done in the i-th round (1 \\leq i \\leq N):\n\n* Person S_i does one of the following:\n* Replace x with x \\oplus A_i, where \\oplus represents bitwise XOR.\n* Do nothing.\n\n\n\nPerson 0 aims to have x=0 at the end of the game, while Person 1 aims to have x \\neq 0 at the end of the game.\n\nDetermine whether x becomes 0 at the end of the game when the two persons play optimally.\n\nSolve T test cases for each input file.\n\nConstraints\n\n* 1 \\leq T \\leq 100\n* 1 \\leq N \\leq 200\n* 1 \\leq A_i \\leq 10^{18}\n* S is a string of length N consisting of `0` and `1`.\n* All numbers in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format. The first line is as follows:\n\n\nT\n\n\nThen, T test cases follow. Each test case is given in the following format:\n\n\nN\nA_1 A_2 \\cdots A_N\nS", "grammar": {"productions": ["<S>->T <n> <T_T>", "<T_i>-><T_i-1> <n> [N] <n> <L_N> <n> [01]{N}", "<T_1>->[N] <n> <L_N> <n> [01]{N}", "<L_i>-><L_i-1> <s> A_i", "<L_1>->A_1"], "constraints": ["1<=T<=100", "1<=N<=200", "1<=A_i<=10^18"]}}
{"name": "1339_C. Powered Addition", "description": "You have an array a of length n. For every positive integer x you are going to perform the following operation during the x-th second:\n\n  * Select some distinct indices i_{1}, i_{2}, \u2026, i_{k} which are between 1 and n inclusive, and add 2^{x-1} to each corresponding position of a. Formally, a_{i_{j}} := a_{i_{j}} + 2^{x-1} for j = 1, 2, \u2026, k. Note that you are allowed to not select any indices at all.\n\n\n\nYou have to make a nondecreasing as fast as possible. Find the smallest number T such that you can make the array nondecreasing after at most T seconds.\n\nArray a is nondecreasing if and only if a_{1} \u2264 a_{2} \u2264 \u2026 \u2264 a_{n}.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^{4}) \u2014 the number of test cases.\n\nThe first line of each test case contains single integer n (1 \u2264 n \u2264 10^{5}) \u2014 the length of array a. It is guaranteed that the sum of values of n over all test cases in the input does not exceed 10^{5}.\n\nThe second line of each test case contains n integers a_{1}, a_{2}, \u2026, a_{n} (-10^{9} \u2264 a_{i} \u2264 10^{9}).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=10^4", "1<=n<=10^5", "-10^9<=a_i<=10^9"]}}
{"name": "908_A. New Year and Counting Cards", "description": "Your friend has n cards.\n\nYou know that each card has a lowercase English letter on one side and a digit on the other.\n\nCurrently, your friend has laid out the cards on a table so only one side of each card is visible.\n\nYou would like to know if the following statement is true for cards that your friend owns: \"If a card has a vowel on one side, then it has an even digit on the other side.\" More specifically, a vowel is one of 'a', 'e', 'i', 'o' or 'u', and even digit is one of '0', '2', '4', '6' or '8'.\n\nFor example, if a card has 'a' on one side, and '6' on the other side, then this statement is true for it. Also, the statement is true, for example, for a card with 'b' and '4', and for a card with 'b' and '3' (since the letter is not a vowel). The statement is false, for example, for card with 'e' and '5'. You are interested if the statement is true for all cards. In particular, if no card has a vowel, the statement is true.\n\nTo determine this, you can flip over some cards to reveal the other side. You would like to know what is the minimum number of cards you need to flip in the worst case in order to verify that the statement is true.\n\nInput\n\nThe first and only line of input will contain a string s (1 \u2264 |s| \u2264 50), denoting the sides of the cards that you can see on the table currently. Each character of s is either a lowercase English letter or a digit.", "grammar": {"productions": ["<S>->[a-z0-9]{1,50}"], "constraints": [""]}}
{"name": "p03151 KEYENCE Programming Contest 2019 - Exam and Wizard", "description": "A university student, Takahashi, has to take N examinations and pass all of them. Currently, his readiness for the i-th examination is A_{i}, and according to his investigation, it is known that he needs readiness of at least B_{i} in order to pass the i-th examination.\n\nTakahashi thinks that he may not be able to pass all the examinations, and he has decided to ask a magician, Aoki, to change the readiness for as few examinations as possible so that he can pass all of them, while not changing the total readiness.\n\nFor Takahashi, find the minimum possible number of indices i such that A_i and C_i are different, for a sequence C_1, C_2, ..., C_{N} that satisfies the following conditions:\n\n* The sum of the sequence A_1, A_2, ..., A_{N} and the sum of the sequence C_1, C_2, ..., C_{N} are equal.\n* For every i, B_i \\leq C_i holds.\n\n\n\nIf such a sequence C_1, C_2, ..., C_{N} cannot be constructed, print -1.\n\nConstraints\n\n* 1 \\leq N \\leq 10^5\n* 1 \\leq A_i \\leq 10^9\n* 1 \\leq B_i \\leq 10^9\n* A_i and B_i are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 A_2 ... A_{N}\nB_1 B_2 ... B_{N}", "grammar": {"productions": ["<S>->[N] <n> <T_N> <n> <L_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1", "<L_i>-><L_i-1> <s> B_i", "<L_1>->B_1"], "constraints": ["1<=N<=10^5", "1<=A_i<=10^9", "1<=B_i<=10^9"]}}
{"name": "p02616 AtCoder Beginner Contest 173 - Multiplication 4", "description": "Given are N integers A_1,\\ldots,A_N.\n\nWe will choose exactly K of these elements. Find the maximum possible product of the chosen elements.\n\nThen, print the maximum product modulo (10^9+7), using an integer between 0 and 10^9+6 (inclusive).\n\nConstraints\n\n* 1 \\leq K \\leq N \\leq 2\\times 10^5\n* |A_i| \\leq 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nA_1 \\ldots A_N", "grammar": {"productions": ["<S>->N <s> K <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["1<=N<=2*10^5", "1<=K<=2*10^5", "-10^9<=A_i<=10^9"]}}
{"name": "p03693 AtCoder Beginner Contest 064 - RGB Cards", "description": "AtCoDeer has three cards, one red, one green and one blue.\nAn integer between 1 and 9 (inclusive) is written on each card: r on the red card, g on the green card and b on the blue card.\nWe will arrange the cards in the order red, green and blue from left to right, and read them as a three-digit integer.\nIs this integer a multiple of 4?\n\nConstraints\n\n* 1 \u2264 r, g, b \u2264 9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nr g b", "grammar": {"productions": ["<S>->r <s> g <s> b"], "constraints": ["1<=r,g,b<=9"]}}
{"name": "946_A. Partition", "description": "You are given a sequence a consisting of n integers. You may partition this sequence into two sequences b and c in such a way that every element belongs exactly to one of these sequences. \n\nLet B be the sum of elements belonging to b, and C be the sum of elements belonging to c (if some of these sequences is empty, then its sum is 0). What is the maximum possible value of B - C?\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 100) \u2014 the number of elements in a.\n\nThe second line contains n integers a1, a2, ..., an ( - 100 \u2264 ai \u2264 100) \u2014 the elements of sequence a.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=100", "-100<=a_i<=100"]}}
{"name": "1187_A. Stickers and Toys", "description": "Your favorite shop sells n Kinder Surprise chocolate eggs. You know that exactly s stickers and exactly t toys are placed in n eggs in total.\n\nEach Kinder Surprise can be one of three types:\n\n  * it can contain a single sticker and no toy; \n  * it can contain a single toy and no sticker; \n  * it can contain both a single sticker and a single toy. \n\n\n\nBut you don't know which type a particular Kinder Surprise has. All eggs look identical and indistinguishable from each other.\n\nWhat is the minimum number of Kinder Surprise Eggs you have to buy to be sure that, whichever types they are, you'll obtain at least one sticker and at least one toy?\n\nNote that you do not open the eggs in the purchasing process, that is, you just buy some number of eggs. It's guaranteed that the answer always exists.\n\nInput\n\nThe first line contains the single integer T (1 \u2264 T \u2264 100) \u2014 the number of queries.\n\nNext T lines contain three integers n, s and t each (1 \u2264 n \u2264 10^9, 1 \u2264 s, t \u2264 n, s + t \u2265 n) \u2014 the number of eggs, stickers and toys.\n\nAll queries are independent.", "grammar": {"productions": ["<S>->[T] <n> <T_T>", "<T_i>-><T_i-1> <n> n <s> s <s> t", "<T_1>->n <s> s <s> t"], "constraints": ["1<=T<=100", "1<=n<=10^9", "1<=s<=n", "1<=t<=n", "s+t>=n"]}}
{"name": "p02623 AtCoder Beginner Contest 172 - Tsundoku", "description": "We have two desks: A and B. Desk A has a vertical stack of N books on it, and Desk B similarly has M books on it.\n\nIt takes us A_i minutes to read the i-th book from the top on Desk A (1 \\leq i \\leq N), and B_i minutes to read the i-th book from the top on Desk B (1 \\leq i \\leq M).\n\nConsider the following action:\n\n* Choose a desk with a book remaining, read the topmost book on that desk, and remove it from the desk.\n\n\n\nHow many books can we read at most by repeating this action so that it takes us at most K minutes in total? We ignore the time it takes to do anything other than reading.\n\nConstraints\n\n* 1 \\leq N, M \\leq 200000\n* 1 \\leq K \\leq 10^9\n* 1 \\leq A_i, B_i \\leq 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M K\nA_1 A_2 \\ldots A_N\nB_1 B_2 \\ldots B_M", "grammar": {"productions": ["<S>->[N] <s> [M] <s> K <n> <T_N> <n> <L_M>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1", "<L_i>-><L_i-1> <s> B_i", "<L_1>->B_1"], "constraints": ["1<=N<=200000", "1<=M<=200000", "1<=K<=10^9", "1<=A_i<=10^9", "1<=B_i<=10^9"]}}
{"name": "p03773 AtCoder Beginner Contest 057 - Remaining Time", "description": "Dolphin loves programming contests. Today, he will take part in a contest in AtCoder.\nIn this country, 24-hour clock is used. For example, 9:00 p.m. is referred to as \"21 o'clock\".\nThe current time is A o'clock, and a contest will begin in exactly B hours. When will the contest begin? Answer in 24-hour time.\n\nConstraints\n\n* 0 \\leq A,B \\leq 23\n* A and B are integers.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nA B", "grammar": {"productions": ["<S>->A <s> B"], "constraints": ["0<=A<=23", "0<=B<=23"]}}
{"name": "p02780 AtCoder Beginner Contest 154 - Dice in Line", "description": "We have N dice arranged in a line from left to right. The i-th die from the left shows p_i numbers from 1 to p_i with equal probability when thrown.\n\nWe will choose K adjacent dice, throw each of them independently, and compute the sum of the numbers shown. Find the maximum possible value of the expected value of this sum.\n\nConstraints\n\n* 1 \u2264 K \u2264 N \u2264 200000\n* 1 \u2264 p_i \u2264 1000\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\np_1 ... p_N", "grammar": {"productions": ["<S>->[N] <s> K <n> <T_N>", "<T_i>-><T_i-1> <s> P_i", "<T_1>->P_1"], "constraints": ["1<=N<=200000", "1<=K<=N", "1<=P_i<=1000"]}}
{"name": "448_A. Rewards", "description": "Bizon the Champion is called the Champion for a reason. \n\nBizon the Champion has recently got a present \u2014 a new glass cupboard with n shelves and he decided to put all his presents there. All the presents can be divided into two types: medals and cups. Bizon the Champion has a1 first prize cups, a2 second prize cups and a3 third prize cups. Besides, he has b1 first prize medals, b2 second prize medals and b3 third prize medals. \n\nNaturally, the rewards in the cupboard must look good, that's why Bizon the Champion decided to follow the rules:\n\n  * any shelf cannot contain both cups and medals at the same time; \n  * no shelf can contain more than five cups; \n  * no shelf can have more than ten medals. \n\n\n\nHelp Bizon the Champion find out if we can put all the rewards so that all the conditions are fulfilled.\n\nInput\n\nThe first line contains integers a1, a2 and a3 (0 \u2264 a1, a2, a3 \u2264 100). The second line contains integers b1, b2 and b3 (0 \u2264 b1, b2, b3 \u2264 100). The third line contains integer n (1 \u2264 n \u2264 100).\n\nThe numbers in the lines are separated by single spaces.", "grammar": {"productions": ["<S>->a1 <s> a2 <s> a3 <n> b1 <s> b2 <s> b3 <n> n"], "constraints": ["0<=a1<=100", "0<=a2<=100", "0<=a3<=100", "0<=b1<=100", "0<=b2<=100", "0<=b3<=100", "1<=n<=100"]}}
{"name": "p02829 AtCoder Beginner Contest 148 - Round One", "description": "Takahashi is solving quizzes. He has easily solved all but the last one.\n\nThe last quiz has three choices: 1, 2, and 3.\n\nWith his supernatural power, Takahashi has found out that the choices A and B are both wrong.\n\nPrint the correct choice for this problem.\n\nConstraints\n\n* Each of the numbers A and B is 1, 2, or 3.\n* A and B are different.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA\nB", "grammar": {"productions": ["<S>->[1-3]{1} <n> [1-3]{1}"], "constraints": []}}
{"name": "p03943 AtCoder Beginner Contest 047 - Fighting over Candies", "description": "Two students of AtCoder Kindergarten are fighting over candy packs.\n\nThere are three candy packs, each of which contains a, b, and c candies, respectively.\n\nTeacher Evi is trying to distribute the packs between the two students so that each student gets the same number of candies. Determine whether it is possible.\n\nNote that Evi cannot take candies out of the packs, and the whole contents of each pack must be given to one of the students.\n\nConstraints\n\n* 1 \u2266 a, b, c \u2266 100\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\na b c", "grammar": {"productions": ["<S>->a <s> b <s> c"], "constraints": ["1<=a,b,c<=100"]}}
{"name": "p02988 AtCoder Beginner Contest 132 - Ordinary Number", "description": "We have a permutation p = {p_1,\\ p_2,\\ ...,\\ p_n} of {1,\\ 2,\\ ...,\\ n}.\n\nPrint the number of elements p_i (1 < i < n) that satisfy the following condition:\n\n* p_i is the second smallest number among the three numbers p_{i - 1}, p_i, and p_{i + 1}.\n\nConstraints\n\n* All values in input are integers.\n* 3 \\leq n \\leq 20\n* p is a permutation of {1,\\ 2,\\ ...,\\ n}.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nn\np_1 p_2 ... p_n", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> p_i", "<T_1>->p_1"], "constraints": ["3<=n<=20", "1<=p_i<=n"]}}
{"name": "610_A. Pasha and Stick", "description": "Pasha has a wooden stick of some positive integer length n. He wants to perform exactly three cuts to get four parts of the stick. Each part must have some positive integer length and the sum of these lengths will obviously be n. \n\nPasha likes rectangles but hates squares, so he wonders, how many ways are there to split a stick into four parts so that it's possible to form a rectangle using these parts, but is impossible to form a square.\n\nYour task is to help Pasha and count the number of such ways. Two ways to cut the stick are considered distinct if there exists some integer x, such that the number of parts of length x in the first way differ from the number of parts of length x in the second way.\n\nInput\n\nThe first line of the input contains a positive integer n (1 \u2264 n \u2264 2\u00b710^9) \u2014 the length of Pasha's stick.", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=2*10^9"]}}
{"name": "p03326 AtCoder Beginner Contest 100 - Patisserie ABC", "description": "Takahashi became a pastry chef and opened a shop La Confiserie d'ABC to celebrate AtCoder Beginner Contest 100.\n\nThe shop sells N kinds of cakes.\nEach kind of cake has three parameters \"beauty\", \"tastiness\" and \"popularity\". The i-th kind of cake has the beauty of x_i, the tastiness of y_i and the popularity of z_i.\nThese values may be zero or negative.\n\nRingo has decided to have M pieces of cakes here. He will choose the set of cakes as follows:\n\n* Do not have two or more pieces of the same kind of cake.\n* Under the condition above, choose the set of cakes to maximize (the absolute value of the total beauty) + (the absolute value of the total tastiness) + (the absolute value of the total popularity).\n\n\n\nFind the maximum possible value of (the absolute value of the total beauty) + (the absolute value of the total tastiness) + (the absolute value of the total popularity) for the set of cakes that Ringo chooses.\n\nConstraints\n\n* N is an integer between 1 and 1 \\ 000 (inclusive).\n* M is an integer between 0 and N (inclusive).\n* x_i, y_i, z_i \\ (1 \\leq i \\leq N) are integers between -10 \\ 000 \\ 000 \\ 000 and 10 \\ 000 \\ 000 \\ 000 (inclusive).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nx_1 y_1 z_1\nx_2 y_2 z_2\n:  :\nx_N y_N z_N", "grammar": {"productions": ["<S>->[N] <s> M <n> <T_N>", "<T_i>-><T_i-1> <n> x_i <s> y_i <s> z_i", "<T_1>->x_1 <s> y_1 <s> z_1"], "constraints": ["1<=N<=1000", "0<=M<=N", "-10000000000<=x_i,y_i,z_i<=10000000000"]}}
{"name": "1401_C. Mere Array", "description": "You are given an array a_1, a_2, ..., a_n where all a_i are integers and greater than 0.\n\nIn one operation, you can choose two different indices i and j (1 \u2264 i, j \u2264 n). If gcd(a_i, a_j) is equal to the minimum element of the whole array a, you can swap a_i and a_j. gcd(x, y) denotes the [greatest common divisor (GCD)](https://en.wikipedia.org/wiki/Greatest_common_divisor) of integers x and y.\n\nNow you'd like to make a non-decreasing using the operation any number of times (possibly zero). Determine if you can do this.\n\nAn array a is non-decreasing if and only if a_1 \u2264 a_2 \u2264 \u2026 \u2264 a_n.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first line of each test case contains one integer n (1 \u2264 n \u2264 10^5) \u2014 the length of array a.\n\nThe second line of each test case contains n positive integers a_1, a_2, \u2026 a_n (1 \u2264 a_i \u2264 10^9) \u2014 the array itself.\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=10^4", "1<=n<=10^5", "1<=a_i<=10^9"]}}
{"name": "p02948 AtCoder Beginner Contest 137 - Summer Vacation", "description": "There are N one-off jobs available. If you take the i-th job and complete it, you will earn the reward of B_i after A_i days from the day you do it.\n\nYou can take and complete at most one of these jobs in a day.\n\nHowever, you cannot retake a job that you have already done.\n\nFind the maximum total reward that you can earn no later than M days from today.\n\nYou can already start working today.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 10^5\n* 1 \\leq M \\leq 10^5\n* 1 \\leq A_i \\leq 10^5\n* 1 \\leq B_i \\leq 10^4\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nA_1 B_1\nA_2 B_2\n\\vdots\nA_N B_N", "grammar": {"productions": ["<S>->[N] <s> M <n> <T_N>", "<T_i>-><T_i-1> <n> A_i <s> B_i", "<T_1>->A_1 <s> B_1"], "constraints": ["1<=N<=10^5", "1<=M<=10^5", "1<=A_i<=10^5", "1<=B_i<=10^4"]}}
{"name": "1350_B. Orac and Models", "description": "There are n models in the shop numbered from 1 to n, with sizes s_1, s_2, \u2026, s_n.\n\nOrac will buy some of the models and will arrange them in the order of increasing numbers (i.e. indices, but not sizes).\n\nOrac thinks that the obtained arrangement is beatiful, if for any two adjacent models with indices i_j and i_{j+1} (note that i_j < i_{j+1}, because Orac arranged them properly), i_{j+1} is divisible by i_j and s_{i_j} < s_{i_{j+1}}.\n\nFor example, for 6 models with sizes \\{3, 6, 7, 7, 7, 7\\}, he can buy models with indices 1, 2, and 6, and the obtained arrangement will be beautiful. Also, note that the arrangement with exactly one model is also considered beautiful.\n\nOrac wants to know the maximum number of models that he can buy, and he may ask you these queries many times.\n\nInput\n\nThe first line contains one integer t\\ (1 \u2264 t\u2264 100): the number of queries.\n\nEach query contains two lines. The first line contains one integer n\\ (1\u2264 n\u2264 100 000): the number of models in the shop, and the second line contains n integers s_1,...,s_n\\ (1\u2264 s_i\u2264 10^9): the sizes of models.\n\nIt is guaranteed that the total sum of n is at most 100 000.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> s_i", "<L_1>->s_1"], "constraints": ["1<=t<=100", "1<=n<=100000", "1<=s_i<=10^9"]}}
{"name": "1185_A. Ropewalkers", "description": "Polycarp decided to relax on his weekend and visited to the performance of famous ropewalkers: Agafon, Boniface and Konrad.\n\nThe rope is straight and infinite in both directions. At the beginning of the performance, Agafon, Boniface and Konrad are located in positions a, b and c respectively. At the end of the performance, the distance between each pair of ropewalkers was at least d.\n\nRopewalkers can walk on the rope. In one second, only one ropewalker can change his position. Every ropewalker can change his position exactly by 1 (i. e. shift by 1 to the left or right direction on the rope). Agafon, Boniface and Konrad can not move at the same time (Only one of them can move at each moment). Ropewalkers can be at the same positions at the same time and can \"walk past each other\".\n\nYou should find the minimum duration (in seconds) of the performance. In other words, find the minimum number of seconds needed so that the distance between each pair of ropewalkers can be greater or equal to d.\n\nRopewalkers can walk to negative coordinates, due to the rope is infinite to both sides.\n\nInput\n\nThe only line of the input contains four integers a, b, c, d (1 \u2264 a, b, c, d \u2264 10^9). It is possible that any two (or all three) ropewalkers are in the same position at the beginning of the performance.", "grammar": {"productions": ["<S>->a <s> b <s> c <s> d"], "constraints": ["1<=a<=10^9", "1<=b<=10^9", "1<=c<=10^9", "1<=d<=10^9"]}}
{"name": "p02648 Tokio Marine & Nichido Fire Insurance Programming Contest 2020 - Knapsack Queries on a tree", "description": "We have a rooted binary tree with N vertices, where the vertices are numbered 1 to N. Vertex 1 is the root, and the parent of Vertex i (i \\geq 2) is Vertex \\left[ \\frac{i}{2} \\right].\n\nEach vertex has one item in it. The item in Vertex i has a value of V_i and a weight of W_i. Now, process the following query Q times:\n\n* Given are a vertex v of the tree and a positive integer L. Let us choose some (possibly none) of the items in v and the ancestors of v so that their total weight is at most L. Find the maximum possible total value of the chosen items.\n\n\n\nHere, Vertex u is said to be an ancestor of Vertex v when u is an indirect parent of v, that is, there exists a sequence of vertices w_1,w_2,\\ldots,w_k (k\\geq 2) where w_1=v, w_k=u, and w_{i+1} is the parent of w_i for each i.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N < 2^{18}\n* 1 \\leq Q \\leq 10^5\n* 1 \\leq V_i \\leq 10^5\n* 1 \\leq W_i \\leq 10^5\n* For the values v and L given in each query, 1 \\leq v \\leq N and 1 \\leq L \\leq 10^5.\n\nInput\n\nLet v_i and L_i be the values v and L given in the i-th query. Then, Input is given from Standard Input in the following format:\n\n\nN\nV_1 W_1\n:\nV_N W_N\nQ\nv_1 L_1\n:\nv_Q L_Q", "grammar": {"productions": ["<S>->[N] <n> <T_N> <n> [Q] <n> <L_Q>", "<T_i>-><T_i-1> <n> V_i <s> W_i", "<T_1>->V_1 <s> W_1", "<L_i>-><L_i-1> <n> v <s> L", "<L_1>->v <s> L"], "constraints": ["1<=N<=2^18", "1<=Q<=10^5", "1<=V_i<=10^5", "1<=W_i<=10^5", "1<=v<=N", "1<=L<=10^5"]}}
{"name": "1139_A. Even Substrings", "description": "You are given a string s=s_1s_2... s_n of length n, which only contains digits 1, 2, ..., 9.\n\nA substring s[l ... r] of s is a string s_l s_{l + 1} s_{l + 2} \u2026 s_r. A substring s[l ... r] of s is called even if the number represented by it is even. \n\nFind the number of even substrings of s. Note, that even if some substrings are equal as strings, but have different l and r, they are counted as different substrings.\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 65000) \u2014 the length of the string s.\n\nThe second line contains a string s of length n. The string s consists only of digits 1, 2, ..., 9.", "grammar": {"productions": ["<S>->[n] <n> [0-9]{n}"], "constraints": ["1<=n<=65000"]}}
{"name": "1208_A. XORinacci", "description": "Cengiz recently learned Fibonacci numbers and now he is studying different algorithms to find them. After getting bored of reading them, he came with his own new type of numbers that he named XORinacci numbers. He defined them as follows: \n\n  * f(0) = a; \n  * f(1) = b; \n  * f(n) = f(n-1) \u2295 f(n-2) when n > 1, where \u2295 denotes the [bitwise XOR operation](https://en.wikipedia.org/wiki/Bitwise_operation#XOR). \n\n\n\nYou are given three integers a, b, and n, calculate f(n).\n\nYou have to answer for T independent test cases.\n\nInput\n\nThe input contains one or more independent test cases.\n\nThe first line of input contains a single integer T (1 \u2264 T \u2264 10^3), the number of test cases.\n\nEach of the T following lines contains three space-separated integers a, b, and n (0 \u2264 a, b, n \u2264 10^9) respectively.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> a <s> b <s> n", "<T_1>->a <s> b <s> n"], "constraints": ["1<=N<=10^3", "0<=a<=10^9", "0<=b<=10^9", "0<=n<=10^9"]}}
{"name": "1113_A. Sasha and His Trip", "description": "Sasha is a very happy guy, that's why he is always on the move. There are n cities in the country where Sasha lives. They are all located on one straight line, and for convenience, they are numbered from 1 to n in increasing order. The distance between any two adjacent cities is equal to 1 kilometer. Since all roads in the country are directed, it's possible to reach the city y from the city x only if x < y. \n\nOnce Sasha decided to go on a trip around the country and to visit all n cities. He will move with the help of his car, Cheetah-2677. The tank capacity of this model is v liters, and it spends exactly 1 liter of fuel for 1 kilometer of the way. At the beginning of the journey, the tank is empty. Sasha is located in the city with the number 1 and wants to get to the city with the number n. There is a gas station in each city. In the i-th city, the price of 1 liter of fuel is i dollars. It is obvious that at any moment of time, the tank can contain at most v liters of fuel.\n\nSasha doesn't like to waste money, that's why he wants to know what is the minimum amount of money is needed to finish the trip if he can buy fuel in any city he wants. Help him to figure it out!\n\nInput\n\nThe first line contains two integers n and v (2 \u2264 n \u2264 100, 1 \u2264 v \u2264 100) \u2014 the number of cities in the country and the capacity of the tank.", "grammar": {"productions": ["<S>->n <s> v"], "constraints": ["2<=n<=100", "1<=v<=100"]}}
{"name": "915_A. Garden", "description": "Luba thinks about watering her garden. The garden can be represented as a segment of length k. Luba has got n buckets, the i-th bucket allows her to water some continuous subsegment of garden of length exactly ai each hour. Luba can't water any parts of the garden that were already watered, also she can't water the ground outside the garden.\n\nLuba has to choose one of the buckets in order to water the garden as fast as possible (as mentioned above, each hour she will water some continuous subsegment of length ai if she chooses the i-th bucket). Help her to determine the minimum number of hours she has to spend watering the garden. It is guaranteed that Luba can always choose a bucket so it is possible water the garden.\n\nSee the examples for better understanding.\n\nInput\n\nThe first line of input contains two integer numbers n and k (1 \u2264 n, k \u2264 100) \u2014 the number of buckets and the length of the garden, respectively.\n\nThe second line of input contains n integer numbers ai (1 \u2264 ai \u2264 100) \u2014 the length of the segment that can be watered by the i-th bucket in one hour.\n\nIt is guaranteed that there is at least one bucket such that it is possible to water the garden in integer number of hours using only this bucket.", "grammar": {"productions": ["<S>->[N] <s> k <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=a_i<=100", "1<=N<=100", "1<=k<=100", "1<=a_i<=100"]}}
{"name": "1445_A. Array Rearrangment", "description": "You are given two arrays a and b, each consisting of n positive integers, and an integer x. Please determine if one can rearrange the elements of b so that a_i + b_i \u2264 x holds for each i (1 \u2264 i \u2264 n).\n\nInput\n\nThe first line of input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. t blocks follow, each describing an individual test case.\n\nThe first line of each test case contains two integers n and x (1 \u2264 n \u2264 50; 1 \u2264 x \u2264 1000) \u2014 the length of arrays a and b, and the parameter x, described in the problem statement.\n\nThe second line of each test case contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_1 \u2264 a_2 \u2264 ... \u2264 a_n \u2264 x) \u2014 the elements of array a in non-descending order.\n\nThe third line of each test case contains n integers b_1, b_2, \u2026, b_n (1 \u2264 b_1 \u2264 b_2 \u2264 ... \u2264 b_n \u2264 x) \u2014 the elements of array b in non-descending order.\n\nTest cases are separated by a blank line.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> <n> [n] <s> x <n> <L_n> <n> <M_n>", "<T_1>->[n] <s> x <n> <L_n> <n> <M_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1", "<M_i>-><M_i-1> <s> b_i", "<M_1>->b_1"], "constraints": ["1<=t<=100", "1<=n<=50", "1<=x<=1000", "1<=a_i<=x", "a_i<=a_i+1", "1<=b_i<=x", "b_i<=b_i+1"]}}
{"name": "p02900 AtCoder Beginner Contest 142 - Disjoint Set of Common Divisors", "description": "Given are positive integers A and B.\n\nLet us choose some number of positive common divisors of A and B.\n\nHere, any two of the chosen divisors must be coprime.\n\nAt most, how many divisors can we choose?\n\nDefinition of common divisor\n\nAn integer d is said to be a common divisor of integers x and y when d divides both x and y.\n\nDefinition of being coprime\n\nIntegers x and y are said to be coprime when x and y have no positive common divisors other than 1.\n\nDefinition of dividing\n\nAn integer x is said to divide another integer y when there exists an integer \\alpha such that y = \\alpha x.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq A, B \\leq 10^{12}\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B", "grammar": {"productions": ["<S>->A <s> B"], "constraints": ["1<=A<=10^12", "1<=B<=10^12"]}}
{"name": "p02868 NIKKEI Programming Contest 2019-2 - Shortest Path on a Line", "description": "We have N points numbered 1 to N arranged in a line in this order.\n\nTakahashi decides to make an undirected graph, using these points as the vertices. In the beginning, the graph has no edge. Takahashi will do M operations to add edges in this graph. The i-th operation is as follows:\n\n* The operation uses integers L_i and R_i between 1 and N (inclusive), and a positive integer C_i. For every pair of integers (s, t) such that L_i \\leq s < t \\leq R_i, add an edge of length C_i between Vertex s and Vertex t.\n\n\n\nThe integers L_1, ..., L_M, R_1, ..., R_M, C_1, ..., C_M are all given as input.\n\nTakahashi wants to solve the shortest path problem in the final graph obtained. Find the length of the shortest path from Vertex 1 to Vertex N in the final graph.\n\nConstraints\n\n* 2 \\leq N \\leq 10^5\n* 1 \\leq M \\leq 10^5\n* 1 \\leq L_i < R_i \\leq N\n* 1 \\leq C_i \\leq 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nL_1 R_1 C_1\n:\nL_M R_M C_M", "grammar": {"productions": ["<S>->N <s> [M] <n> <T_M>", "<T_i>-><T_i-1> <n> L_i <s> R_i <s> C_i", "<T_1>->L_1 <s> R_1 <s> C_1"], "constraints": ["2<=N<=10^5", "2<=M<=10^5", "1<=L_i<R_i<=N", "1<=C_i<=10^9"]}}
{"name": "p02880 AtCoder Beginner Contest 144 - 81", "description": "Having learned the multiplication table, Takahashi can multiply two integers between 1 and 9 (inclusive) together.\n\nGiven an integer N, determine whether N can be represented as the product of two integers between 1 and 9. If it can, print `Yes`; if it cannot, print `No`.\n\nConstraints\n\n* 1 \\leq N \\leq 100\n* N is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["1<=N<=100"]}}
{"name": "p02874 AtCoder Grand Contest 040 - Two Contests", "description": "10^9 contestants, numbered 1 to 10^9, will compete in a competition. There will be two contests in this competition.\n\nThe organizer prepared N problems, numbered 1 to N, to use in these contests. When Problem i is presented in a contest, it will be solved by all contestants from Contestant L_i to Contestant R_i (inclusive), and will not be solved by any other contestants.\n\nThe organizer will use these N problems in the two contests. Each problem must be used in exactly one of the contests, and each contest must have at least one problem.\n\nThe joyfulness of each contest is the number of contestants who will solve all the problems in the contest. Find the maximum possible total joyfulness of the two contests.\n\nConstraints\n\n* 2 \\leq N \\leq 10^5\n* 1 \\leq L_i \\leq R_i \\leq 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nL_1 R_1\nL_2 R_2\n\\vdots\nL_N R_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> L_i <s> R_i", "<T_1>->L_i <s> R_i"], "constraints": ["2<=N<=10^5", "1<= L_i <= R_i <= 10^9"]}}
{"name": "1173_A. Nauuo and Votes", "description": "Nauuo is a girl who loves writing comments.\n\nOne day, she posted a comment on Codeforces, wondering whether she would get upvotes or downvotes.\n\nIt's known that there were x persons who would upvote, y persons who would downvote, and there were also another z persons who would vote, but you don't know whether they would upvote or downvote. Note that each of the x+y+z people would vote exactly one time.\n\nThere are three different results: if there are more people upvote than downvote, the result will be \"+\"; if there are more people downvote than upvote, the result will be \"-\"; otherwise the result will be \"0\".\n\nBecause of the z unknown persons, the result may be uncertain (i.e. there are more than one possible results). More formally, the result is uncertain if and only if there exist two different situations of how the z persons vote, that the results are different in the two situations.\n\nTell Nauuo the result or report that the result is uncertain.\n\nInput\n\nThe only line contains three integers x, y, z (0\u2264 x,y,z\u2264100), corresponding to the number of persons who would upvote, downvote or unknown.", "grammar": {"productions": ["<S>->x <s> y <s> z"], "constraints": ["0<=x<=100", "0<=y<=100", "0<=z<=100"]}}
{"name": "1348_C. Phoenix and Distribution", "description": "Phoenix has a string s consisting of lowercase Latin letters. He wants to distribute all the letters of his string into k non-empty strings a_1, a_2, ..., a_k such that every letter of s goes to exactly one of the strings a_i. The strings a_i do not need to be substrings of s. Phoenix can distribute letters of s and rearrange the letters within each string a_i however he wants.\n\nFor example, if s =  baba and k=2, Phoenix may distribute the letters of his string in many ways, such as: \n\n  * ba and ba\n  * a and abb\n  * ab and ab\n  * aa and bb\n\n\n\nBut these ways are invalid: \n\n  * baa and ba\n  * b and ba\n  * baba and empty string (a_i should be non-empty) \n\n\n\nPhoenix wants to distribute the letters of his string s into k strings a_1, a_2, ..., a_k to minimize the lexicographically maximum string among them, i. e. minimize max(a_1, a_2, ..., a_k). Help him find the optimal distribution and print the minimal possible value of max(a_1, a_2, ..., a_k).\n\nString x is lexicographically less than string y if either x is a prefix of y and x \u2260 y, or there exists an index i (1 \u2264 i \u2264 min(|x|, |y|)) such that x_i < y_i and for every j (1 \u2264 j < i) x_j = y_j. Here |x| denotes the length of the string x.\n\nInput\n\nThe input consists of multiple test cases. The first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Each test case consists of two lines.\n\nThe first line of each test case consists of two integers n and k (1 \u2264 k \u2264 n \u2264 10^5) \u2014 the length of string s and the number of non-empty strings, into which Phoenix wants to distribute letters of s, respectively.\n\nThe second line of each test case contains a string s of length n consisting only of lowercase Latin letters.\n\nIt is guaranteed that the sum of n over all test cases is \u2264 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <s> k <n> [a-z]{n}", "<T_1>->[n] <s> k <n> [a-z]{n}"], "constraints": ["1<=t<=1000", "1<=k<=n<=10^5"]}}
{"name": "1183_B. Equalize Prices", "description": "There are n products in the shop. The price of the i-th product is a_i. The owner of the shop wants to equalize the prices of all products. However, he wants to change prices smoothly.\n\nIn fact, the owner of the shop can change the price of some product i in such a way that the difference between the old price of this product a_i and the new price b_i is at most k. In other words, the condition |a_i - b_i| \u2264 k should be satisfied (|x| is the absolute value of x).\n\nHe can change the price for each product not more than once. Note that he can leave the old prices for some products. The new price b_i of each product i should be positive (i.e. b_i > 0 should be satisfied for all i from 1 to n).\n\nYour task is to find out the maximum possible equal price B of all productts with the restriction that for all products the condiion |a_i - B| \u2264 k should be satisfied (where a_i is the old price of the product and B is the same new price of all products) or report that it is impossible to find such price B.\n\nNote that the chosen price B should be integer.\n\nYou should answer q independent queries.\n\nInput\n\nThe first line of the input contains one integer q (1 \u2264 q \u2264 100) \u2014 the number of queries. Each query is presented by two lines.\n\nThe first line of the query contains two integers n and k (1 \u2264 n \u2264 100, 1 \u2264 k \u2264 10^8) \u2014 the number of products and the value k. The second line of the query contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^8), where a_i is the price of the i-th product.", "grammar": {"productions": ["<S>->[q] <n> <T_q>", "<T_i>-><T_i-1> <n> [n] <s> k <n> <L_n>", "<T_1>->[n] <s> k <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=q<=100", "1<=n<=100", "1<=k<=10^8", "1<=a_i<=10^8"]}}
{"name": "p02958 AtCoder Beginner Contest 135 - 0 or 1 Swap", "description": "We have a sequence p = {p_1,\\ p_2,\\ ...,\\ p_N} which is a permutation of {1,\\ 2,\\ ...,\\ N}.\n\nYou can perform the following operation at most once: choose integers i and j (1 \\leq i < j \\leq N), and swap p_i and p_j. Note that you can also choose not to perform it.\n\nPrint `YES` if you can sort p in ascending order in this way, and `NO` otherwise.\n\nConstraints\n\n* All values in input are integers.\n* 2 \\leq N \\leq 50\n* p is a permutation of {1,\\ 2,\\ ...,\\ N}.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\np_1 p_2 ... p_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> p_i", "<T_1>->p_1"], "constraints": ["2<=N<=50", "1<=p_i<=N", "p_i!=p_j"]}}
{"name": "p02995 AtCoder Beginner Contest 131 - Anti-Division", "description": "You are given four integers A, B, C, and D. Find the number of integers between A and B (inclusive) that can be evenly divided by neither C nor D.\n\nConstraints\n\n* 1\\leq A\\leq B\\leq 10^{18}\n* 1\\leq C,D\\leq 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B C D", "grammar": {"productions": ["<S>->A <s> B <s> C <s> D"], "constraints": ["1<=A<=10^18", "A<=B<=10^18", "1<=C<=10^9", "1<=D<=10^19"]}}
{"name": "p03331 AtCoder Grand Contest 025 - Digits Sum", "description": "Takahashi has two positive integers A and B.\n\nIt is known that A plus B equals N. Find the minimum possible value of \"the sum of the digits of A\" plus \"the sum of the digits of B\" (in base 10).\n\nConstraints\n\n* 2 \u2264 N \u2264 10^5\n* N is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["2<=N<=10^5"]}}
{"name": "1362_C. Johnny and Another Rating Drop", "description": "The last contest held on Johnny's favorite competitive programming platform has been received rather positively. However, Johnny's rating has dropped again! He thinks that the presented tasks are lovely, but don't show the truth about competitors' skills.\n\nThe boy is now looking at the ratings of consecutive participants written in a binary system. He thinks that the more such ratings differ, the more unfair is that such people are next to each other. He defines the difference between two numbers as the number of bit positions, where one number has zero, and another has one (we suppose that numbers are padded with leading zeros to the same length). For example, the difference of 5 = 101_2 and 14 = 1110_2 equals to 3, since 0101 and 1110 differ in 3 positions. Johnny defines the unfairness of the contest as the sum of such differences counted for neighboring participants.\n\nJohnny has just sent you the rating sequence and wants you to find the unfairness of the competition. You have noticed that you've got a sequence of consecutive integers from 0 to n. That's strange, but the boy stubbornly says that everything is right. So help him and find the desired unfairness for received numbers.\n\nInput\n\nThe input consists of multiple test cases. The first line contains one integer t (1 \u2264 t \u2264 10 000) \u2014 the number of test cases. The following t lines contain a description of test cases.\n\nThe first and only line in each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n", "<T_1>->n"], "constraints": ["1<=t<=10000", "1<=n<=10^18"]}}
{"name": "1328_F. Make k Equal", "description": "You are given the array a consisting of n elements and the integer k \u2264 n.\n\nYou want to obtain at least k equal elements in the array a. In one move, you can make one of the following two operations:\n\n  * Take one of the minimum elements of the array and increase its value by one (more formally, if the minimum value of a is mn then you choose such index i that a_i = mn and set a_i := a_i + 1); \n  * take one of the maximum elements of the array and decrease its value by one (more formally, if the maximum value of a is mx then you choose such index i that a_i = mx and set a_i := a_i - 1). \n\n\n\nYour task is to calculate the minimum number of moves required to obtain at least k equal elements in the array.\n\nInput\n\nThe first line of the input contains two integers n and k (1 \u2264 k \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in a and the required number of equal elements.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9), where a_i is the i-th element of a.", "grammar": {"productions": ["<S>->[n] <s> k <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=k<=n<=2*10^5", "1<=a_i<=10^9"]}}
{"name": "p02713 AtCoder Beginner Contest 162 - Sum of gcd of Tuples (Easy)", "description": "Find \\displaystyle{\\sum_{a=1}^{K}\\sum_{b=1}^{K}\\sum_{c=1}^{K} \\gcd(a,b,c)}.\n\nHere \\gcd(a,b,c) denotes the greatest common divisor of a, b, and c.\n\nConstraints\n\n* 1 \\leq K \\leq 200\n* K is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nK", "grammar": {"productions": ["<S>->K"], "constraints": ["1<=K<=200"]}}
{"name": "996_A. Hit the Lottery", "description": "Allen has a LOT of money. He has n dollars in the bank. For security reasons, he wants to withdraw it in cash (we will not disclose the reasons here). The denominations for dollar bills are 1, 5, 10, 20, 100. What is the minimum number of bills Allen could receive after withdrawing his entire balance?\n\nInput\n\nThe first and only line of input contains a single integer n (1 \u2264 n \u2264 10^9).", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=10^9"]}}
{"name": "p02615 AtCoder Beginner Contest 173 - Chat in a Circle", "description": "Quickly after finishing the tutorial of the online game ATChat, you have decided to visit a particular place with N-1 players who happen to be there. These N players, including you, are numbered 1 through N, and the friendliness of Player i is A_i.\n\nThe N players will arrive at the place one by one in some order. To make sure nobody gets lost, you have set the following rule: players who have already arrived there should form a circle, and a player who has just arrived there should cut into the circle somewhere.\n\nWhen each player, except the first one to arrive, arrives at the place, the player gets comfort equal to the smaller of the friendliness of the clockwise adjacent player and that of the counter-clockwise adjacent player. The first player to arrive there gets the comfort of 0.\n\nWhat is the maximum total comfort the N players can get by optimally choosing the order of arrivals and the positions in the circle to cut into?\n\nConstraints\n\n* All values in input are integers.\n* 2 \\leq N \\leq 2 \\times 10^5\n* 1 \\leq A_i \\leq 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 A_2 \\dots A_N", "grammar": {"productions": ["<S>->N <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["2<=N<=2*10^5", "1<=A_i<=10^9"]}}
{"name": "1023_A. Single Wildcard Pattern Matching", "description": "You are given two strings s and t. The string s consists of lowercase Latin letters and at most one wildcard character '*', the string t consists only of lowercase Latin letters. The length of the string s equals n, the length of the string t equals m.\n\nThe wildcard character '*' in the string s (if any) can be replaced with an arbitrary sequence (possibly empty) of lowercase Latin letters. No other character of s can be replaced with anything. If it is possible to replace a wildcard character '*' in s to obtain a string t, then the string t matches the pattern s.\n\nFor example, if s=\"aba*aba\" then the following strings match it \"abaaba\", \"abacaba\" and \"abazzzaba\", but the following strings do not match: \"ababa\", \"abcaaba\", \"codeforces\", \"aba1aba\", \"aba?aba\".\n\nIf the given string t matches the given string s, print \"YES\", otherwise print \"NO\".\n\nInput\n\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 2 \u22c5 10^5) \u2014 the length of the string s and the length of the string t, respectively.\n\nThe second line contains string s of length n, which consists of lowercase Latin letters and at most one wildcard character '*'.\n\nThe third line contains string t of length m, which consists only of lowercase Latin letters.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> [a-z]{n} <n> [a-z]{m}"], "constraints": ["1<=n,m<=2*10^5"]}}
{"name": "1144_A. Diverse Strings", "description": "A string is called diverse if it contains consecutive (adjacent) letters of the Latin alphabet and each letter occurs exactly once. For example, the following strings are diverse: \"fced\", \"xyz\", \"r\" and \"dabcef\". The following string are not diverse: \"az\", \"aa\", \"bad\" and \"babc\". Note that the letters 'a' and 'z' are not adjacent.\n\nFormally, consider positions of all letters in the string in the alphabet. These positions should form contiguous segment, i.e. they should come one by one without any gaps. And all letters in the string should be distinct (duplicates are not allowed).\n\nYou are given a sequence of strings. For each string, if it is diverse, print \"Yes\". Otherwise, print \"No\".\n\nInput\n\nThe first line contains integer n (1 \u2264 n \u2264 100), denoting the number of strings to process. The following n lines contains strings, one string per line. Each string contains only lowercase Latin letters, its length is between 1 and 100, inclusive.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> [a-z]{1,100}", "<T_1>->[a-z]{1,100}"], "constraints": ["1<=n<=100"]}}
{"name": "p03231 AtCoder Grand Contest 028 - Two Abbreviations", "description": "You are given a string S of length N and another string T of length M. These strings consist of lowercase English letters.\n\nA string X is called a good string when the following conditions are all met:\n\n* Let L be the length of X. L is divisible by both N and M.\n* Concatenating the 1-st, (\\frac{L}{N}+1)-th, (2 \\times \\frac{L}{N}+1)-th, ..., ((N-1)\\times\\frac{L}{N}+1)-th characters of X, without changing the order, results in S.\n* Concatenating the 1-st, (\\frac{L}{M}+1)-th, (2 \\times \\frac{L}{M}+1)-th, ..., ((M-1)\\times\\frac{L}{M}+1)-th characters of X, without changing the order, results in T.\n\n\n\nDetermine if there exists a good string. If it exists, find the length of the shortest such string.\n\nConstraints\n\n* 1 \\leq N,M \\leq 10^5\n* S and T consist of lowercase English letters.\n* |S|=N\n* |T|=M\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nS\nT", "grammar": {"productions": ["<S>->[N] <s> [M] <n> [a-z]{N} <n> [a-z]{M}"], "constraints": ["1<=N,M<=10^5"]}}
{"name": "1271_A. Suits", "description": "A new delivery of clothing has arrived today to the clothing store. This delivery consists of a ties, b scarves, c vests and d jackets.\n\nThe store does not sell single clothing items \u2014 instead, it sells suits of two types:\n\n  * a suit of the first type consists of one tie and one jacket; \n  * a suit of the second type consists of one scarf, one vest and one jacket. \n\n\n\nEach suit of the first type costs e coins, and each suit of the second type costs f coins.\n\nCalculate the maximum possible cost of a set of suits that can be composed from the delivered clothing items. Note that one item cannot be used in more than one suit (though some items may be left unused).\n\nInput\n\nThe first line contains one integer a (1 \u2264 a \u2264 100 000) \u2014 the number of ties.\n\nThe second line contains one integer b (1 \u2264 b \u2264 100 000) \u2014 the number of scarves.\n\nThe third line contains one integer c (1 \u2264 c \u2264 100 000) \u2014 the number of vests.\n\nThe fourth line contains one integer d (1 \u2264 d \u2264 100 000) \u2014 the number of jackets.\n\nThe fifth line contains one integer e (1 \u2264 e \u2264 1 000) \u2014 the cost of one suit of the first type.\n\nThe sixth line contains one integer f (1 \u2264 f \u2264 1 000) \u2014 the cost of one suit of the second type.", "grammar": {"productions": ["<S>->a <n> b <n> c <n> d <n> e <n> f"], "constraints": ["1<=a<=100000", "1<=b<=100000", "1<=c<=100000", "1<=d<=100000", "1<=e<=100000", "1<=f<=100000"]}}
{"name": "807_A. Is it rated?", "description": "Is it rated?\n\nHere it is. The Ultimate Question of Competitive Programming, Codeforces, and Everything. And you are here to answer it.\n\nAnother Codeforces round has been conducted. No two participants have the same number of points. For each participant, from the top to the bottom of the standings, their rating before and after the round is known.\n\nIt's known that if at least one participant's rating has changed, then the round was rated for sure.\n\nIt's also known that if the round was rated and a participant with lower rating took a better place in the standings than a participant with higher rating, then at least one round participant's rating has changed.\n\nIn this problem, you should not make any other assumptions about the rating system.\n\nDetermine if the current round is rated, unrated, or it's impossible to determine whether it is rated of not.\n\nInput\n\nThe first line contains a single integer n (2 \u2264 n \u2264 1000) \u2014 the number of round participants.\n\nEach of the next n lines contains two integers ai and bi (1 \u2264 ai, bi \u2264 4126) \u2014 the rating of the i-th participant before and after the round, respectively. The participants are listed in order from the top to the bottom of the standings.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> a_i <s> b_i", "<T_1>->a_1 <s> b_1"], "constraints": ["2<=n<=1000", "1<=a_i<=4126", "1<=b_i<=4126"]}}
{"name": "1278_A. Shuffle Hashing", "description": "Polycarp has built his own web service. Being a modern web service it includes login feature. And that always implies password security problems.\n\nPolycarp decided to store the hash of the password, generated by the following algorithm:\n\n  1. take the password p, consisting of lowercase Latin letters, and shuffle the letters randomly in it to obtain p' (p' can still be equal to p); \n  2. generate two random strings, consisting of lowercase Latin letters, s_1 and s_2 (any of these strings can be empty); \n  3. the resulting hash h = s_1 + p' + s_2, where addition is string concatenation. \n\n\n\nFor example, let the password p = \"abacaba\". Then p' can be equal to \"aabcaab\". Random strings s1 = \"zyx\" and s2 = \"kjh\". Then h = \"zyxaabcaabkjh\".\n\nNote that no letters could be deleted or added to p to obtain p', only the order could be changed.\n\nNow Polycarp asks you to help him to implement the password check module. Given the password p and the hash h, check that h can be the hash for the password p.\n\nYour program should answer t independent test cases.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe first line of each test case contains a non-empty string p, consisting of lowercase Latin letters. The length of p does not exceed 100.\n\nThe second line of each test case contains a non-empty string h, consisting of lowercase Latin letters. The length of h does not exceed 100.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [a-z]{1,100} <n> [a-z]{1,100}", "<T_1>->[a-z]{1,100} <n> [a-z]{1,100}"], "constraints": ["1<=t<=100"]}}
{"name": "p02403 Print a Rectangle", "description": "Draw a rectangle which has a height of H cm and a width of W cm. Draw a 1-cm square by single '#'.\n\nConstraints\n\n* 1 \u2264 H \u2264 300\n* 1 \u2264 W \u2264 300\n\nInput\n\nThe input consists of multiple datasets. Each dataset consists of two integers H and W separated by a single space.\n\nThe input ends with two 0 (when both H and W are zero).", "grammar": {"productions": ["<S>->H <s> W <n> <S>|0 <s> 0"], "constraints": ["1<=H<=300", "1<=W<=300"]}}
{"name": "p03435 AtCoder Beginner Contest 088 - Takahashi's Information", "description": "We have a 3 \\times 3 grid. A number c_{i, j} is written in the square (i, j), where (i, j) denotes the square at the i-th row from the top and the j-th column from the left.\nAccording to Takahashi, there are six integers a_1, a_2, a_3, b_1, b_2, b_3 whose values are fixed, and the number written in the square (i, j) is equal to a_i + b_j.\nDetermine if he is correct.\n\nConstraints\n\n* c_{i, j} \\ (1 \\leq i \\leq 3, 1 \\leq j \\leq 3) is an integer between 0 and 100 (inclusive).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nc_{1,1} c_{1,2} c_{1,3}\nc_{2,1} c_{2,2} c_{2,3}\nc_{3,1} c_{3,2} c_{3,3}", "grammar": {"productions": ["<S>->C <s> C <s> C <n> C <s> C <s> C <n> C <s> C <s> C"], "constraints": ["0<=C<=100"]}}
{"name": "p03014 AtCoder Beginner Contest 129 - Lamp", "description": "There is a grid with H horizontal rows and W vertical columns, and there are obstacles on some of the squares.\n\nSnuke is going to choose one of the squares not occupied by an obstacle and place a lamp on it. The lamp placed on the square will emit straight beams of light in four cardinal directions: up, down, left, and right. In each direction, the beam will continue traveling until it hits a square occupied by an obstacle or it hits the border of the grid. It will light all the squares on the way, including the square on which the lamp is placed, but not the square occupied by an obstacle.\n\nSnuke wants to maximize the number of squares lighted by the lamp.\n\nYou are given H strings S_i (1 \\leq i \\leq H), each of length W. If the j-th character (1 \\leq j \\leq W) of S_i is `#`, there is an obstacle on the square at the i-th row from the top and the j-th column from the left; if that character is `.`, there is no obstacle on that square.\n\nFind the maximum possible number of squares lighted by the lamp.\n\nConstraints\n\n* 1 \\leq H \\leq 2,000\n* 1 \\leq W \\leq 2,000\n* S_i is a string of length W consisting of `#` and `.`.\n* `.` occurs at least once in one of the strings S_i (1 \\leq i \\leq H).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nH W\nS_1\n:\nS_H", "grammar": {"productions": ["<S>->[H] <s> [W] <n> <T_H>", "<T_i>-><T_i-1> <n> S_i", "<T_1>->S_1", "S_i->[#.]{W}"], "constraints": ["1<=H<=2000", "1<=W<=2000"]}}
{"name": "994_A. Fingerprints", "description": "You are locked in a room with a door that has a keypad with 10 keys corresponding to digits from 0 to 9. To escape from the room, you need to enter a correct code. You also have a sequence of digits.\n\nSome keys on the keypad have fingerprints. You believe the correct code is the longest not necessarily contiguous subsequence of the sequence you have that only contains digits with fingerprints on the corresponding keys. Find such code.\n\nInput\n\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 10) representing the number of digits in the sequence you have and the number of keys on the keypad that have fingerprints.\n\nThe next line contains n distinct space-separated integers x_1, x_2, \u2026, x_n (0 \u2264 x_i \u2264 9) representing the sequence.\n\nThe next line contains m distinct space-separated integers y_1, y_2, \u2026, y_m (0 \u2264 y_i \u2264 9) \u2014 the keys with fingerprints.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_n> <n> <L_m>", "<T_i>-><T_i-1> <s> x_i", "<T_1>->x_1", "<L_i>-><L_i-1> <s> y_i", "<L_1>->y_i"], "constraints": ["1<=n<=10", "1<=m<=10", "0<=x_i<=9", "0<=y_i<=9"]}}
{"name": "1401_B. Ternary Sequence", "description": "You are given two sequences a_1, a_2, ..., a_n and b_1, b_2, ..., b_n. Each element of both sequences is either 0, 1 or 2. The number of elements 0, 1, 2 in the sequence a is x_1, y_1, z_1 respectively, and the number of elements 0, 1, 2 in the sequence b is x_2, y_2, z_2 respectively.\n\nYou can rearrange the elements in both sequences a and b however you like. After that, let's define a sequence c as follows:\n\nc_i = \\begin{cases} a_i b_i & \\mbox{if }a_i > b_i \\\\\\ 0 & \\mbox{if }a_i = b_i \\\\\\ -a_i b_i & \\mbox{if }a_i < b_i \\end{cases}\n\nYou'd like to make \u2211_{i=1}^n c_i (the sum of all elements of the sequence c) as large as possible. What is the maximum possible sum?\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nEach test case consists of two lines. The first line of each test case contains three integers x_1, y_1, z_1 (0 \u2264 x_1, y_1, z_1 \u2264 10^8) \u2014 the number of 0-s, 1-s and 2-s in the sequence a.\n\nThe second line of each test case also contains three integers x_2, y_2, z_2 (0 \u2264 x_2, y_2, z_2 \u2264 10^8; x_1 + y_1 + z_1 = x_2 + y_2 + z_2 > 0) \u2014 the number of 0-s, 1-s and 2-s in the sequence b.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> x1 <s> y1 <s> z1 <n> x2 <s> y2 <s> z2", "<T_1>->x1 <s> y1 <s> z1 <n> x2 <s> y2 <s> z2"], "constraints": ["1<=t<=10^4", "0<=x1,y1,z1<=10^8", "0<=x2,y2,z2<=10^8", "x1+y1+z1=x2+y2+z2>0"]}}
{"name": "p03215 Dwango Programming Contest V - Sum AND Subarrays", "description": "One day, Niwango-kun, an employee of Dwango Co., Ltd., found an integer sequence (a_1, ..., a_N) of length N. He is interested in properties of the sequence a.\n\nFor a nonempty contiguous subsequence a_l, ..., a_r (1 \\leq l \\leq r \\leq N) of the sequence a, its beauty is defined as a_l + ... + a_r. Niwango-kun wants to know the maximum possible value of the bitwise AND of the beauties of K nonempty contiguous subsequences among all N(N+1)/2 nonempty contiguous subsequences. (Subsequences may share elements.)\n\nFind the maximum possible value for him.\n\nConstraints\n\n* 2 \\leq N \\leq 1000\n* 1 \\leq a_i \\leq 10^9\n* 1 \\leq K \\leq N(N+1)/2\n* All numbers given in input are integers\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\na_1 a_2 ... a_N", "grammar": {"productions": ["<S>->[N] <s> K <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T-1>->a_1"], "constraints": ["2<=N<=1000", "1<=a_i<=10^9", "1<=K<=N(N+1)/2"]}}
{"name": "p02727 AtCoder Beginner Contest 160 - Red and Green Apples", "description": "You are going to eat X red apples and Y green apples.\nYou have A red apples of deliciousness p_1,p_2, \\dots, p_A, B green apples of deliciousness q_1,q_2, \\dots, q_B, and C colorless apples of deliciousness r_1,r_2, \\dots, r_C.\nBefore eating a colorless apple, you can paint it red or green, and it will count as a red or green apple, respectively.\nFrom the apples above, you will choose the apples to eat while making the sum of the deliciousness of the eaten apples as large as possible.\nFind the maximum possible sum of the deliciousness of the eaten apples that can be achieved when optimally coloring zero or more colorless apples.\n\nConstraints\n\n* 1 \\leq X \\leq A \\leq 10^5\n* 1 \\leq Y \\leq B \\leq 10^5\n* 1 \\leq C \\leq 10^5\n* 1 \\leq p_i \\leq 10^9\n* 1 \\leq q_i \\leq 10^9\n* 1 \\leq r_i \\leq 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX Y A B C\np_1 p_2 ... p_A\nq_1 q_2 ... q_B\nr_1 r_2 ... r_C", "grammar": {"productions": ["<S>->X <s> Y <s> [A] <s> [B] <s> [C] <n> <T_A> <n> <L_B> <n> <Z_C>", "<T_i>-><T_i-1> <s> p_i", "<T_1>->p_1", "<L_i>-><L_i-1> <s> q_i", "<L_1>->q_1", "<Z_i>-><Z_i-1> <s> r_i", "<Z_1>->r_1"], "constraints": ["1<=X<=A<=10^5", "1<=Y<=B<=10^5", "1<=C<=10^5", "1<=p_i<=10^9", "1<=q_i<=10^9", "1<=r_i<=10^9"]}}
{"name": "1354_B. Ternary String", "description": "You are given a string s such that each its character is either 1, 2, or 3. You have to choose the shortest contiguous substring of s such that it contains each of these three characters at least once.\n\nA contiguous substring of string s is a string that can be obtained from s by removing some (possibly zero) characters from the beginning of s and some (possibly zero) characters from the end of s.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 20000) \u2014 the number of test cases.\n\nEach test case consists of one line containing the string s (1 \u2264 |s| \u2264 200000). It is guaranteed that each character of s is either 1, 2, or 3.\n\nThe sum of lengths of all strings in all test cases does not exceed 200000.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [1-3]{1,2000000}", "<T_1>->[1-3]{1,2000000}"], "constraints": ["1<=t<=200000"]}}
{"name": "p03479 AtCoder Beginner Contest 083 - Multiple Gift", "description": "As a token of his gratitude, Takahashi has decided to give his mother an integer sequence. The sequence A needs to satisfy the conditions below:\n\n* A consists of integers between X and Y (inclusive).\n* For each 1\\leq i \\leq |A|-1, A_{i+1} is a multiple of A_i and strictly greater than A_i.\n\n\n\nFind the maximum possible length of the sequence.\n\nConstraints\n\n* 1 \\leq X \\leq Y \\leq 10^{18}\n* All input values are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX Y", "grammar": {"productions": ["<S>->X <s> Y"], "constraints": ["1<=X<=Y<=10^18"]}}
{"name": "978_A. Remove Duplicates", "description": "Petya has an array a consisting of n integers. He wants to remove duplicate (equal) elements.\n\nPetya wants to leave only the rightmost entry (occurrence) for each element of the array. The relative order of the remaining unique elements should not be changed.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 50) \u2014 the number of elements in Petya's array.\n\nThe following line contains a sequence a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 1 000) \u2014 the Petya's array.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=50", "1<=a_i<=1000"]}}
{"name": "p02646 Tokio Marine & Nichido Fire Insurance Programming Contest 2020 - Tag", "description": "Two children are playing tag on a number line. (In the game of tag, the child called \"it\" tries to catch the other child.) The child who is \"it\" is now at coordinate A, and he can travel the distance of V per second. The other child is now at coordinate B, and she can travel the distance of W per second.\n\nHe can catch her when his coordinate is the same as hers. Determine whether he can catch her within T seconds (including exactly T seconds later). We assume that both children move optimally.\n\nConstraints\n\n* -10^9 \\leq A,B \\leq 10^9\n* 1 \\leq V,W \\leq 10^9\n* 1 \\leq T \\leq 10^9\n* A \\neq B\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA V\nB W\nT", "grammar": {"productions": ["<S>->A <s> V <n> B <s> W <n> T"], "constraints": ["-10^9<=A<=10^9", "-10^9<=B<=10^9", "1<=V<=10^9", "1<=W<=10^9", "1<=T<=10^9", "A!=B"]}}
{"name": "581_A. Vasya the Hipster", "description": "One day Vasya the Hipster decided to count how many socks he had. It turned out that he had a red socks and b blue socks.\n\nAccording to the latest fashion, hipsters should wear the socks of different colors: a red one on the left foot, a blue one on the right foot.\n\nEvery day Vasya puts on new socks in the morning and throws them away before going to bed as he doesn't want to wash them.\n\nVasya wonders, what is the maximum number of days when he can dress fashionable and wear different socks, and after that, for how many days he can then wear the same socks until he either runs out of socks or cannot make a single pair from the socks he's got.\n\nCan you help him?\n\nInput\n\nThe single line of the input contains two positive integers a and b (1 \u2264 a, b \u2264 100) \u2014 the number of red and blue socks that Vasya's got.", "grammar": {"productions": ["<S>->a <s> b"], "constraints": ["1<=a,b<=100"]}}
{"name": "686_A. Free Ice Cream", "description": "After their adventure with the magic mirror Kay and Gerda have returned home and sometimes give free ice cream to kids in the summer.\n\nAt the start of the day they have x ice cream packs. Since the ice cream is free, people start standing in the queue before Kay and Gerda's house even in the night. Each person in the queue wants either to take several ice cream packs for himself and his friends or to give several ice cream packs to Kay and Gerda (carriers that bring ice cream have to stand in the same queue).\n\nIf a carrier with d ice cream packs comes to the house, then Kay and Gerda take all his packs. If a child who wants to take d ice cream packs comes to the house, then Kay and Gerda will give him d packs if they have enough ice cream, otherwise the child will get no ice cream at all and will leave in distress.\n\nKay wants to find the amount of ice cream they will have after all people will leave from the queue, and Gerda wants to find the number of distressed kids.\n\nInput\n\nThe first line contains two space-separated integers n and x (1 \u2264 n \u2264 1000, 0 \u2264 x \u2264 10^9).\n\nEach of the next n lines contains a character '+' or '-', and an integer di, separated by a space (1 \u2264 di \u2264 10^9). Record \"+ di\" in i-th line means that a carrier with di ice cream packs occupies i-th place from the start of the queue, and record \"- di\" means that a child who wants to take di packs stands in i-th place.", "grammar": {"productions": ["<S>->[n] <s> x <n> <T_n>", "<T_i>-><T_i-1> <n> [+-]{1} <s> d_i", "<T_1>->[+-]{1} <s> d_1"], "constraints": ["1<=n<=1000", "0<=x<=10^9", "1<=d_i<=10^9"]}}
{"name": "p03767 AtCoder Grand Contest 012 - AtCoder Group Contest", "description": "There are 3N participants in AtCoder Group Contest. The strength of the i-th participant is represented by an integer a_i. They will form N teams, each consisting of three participants. No participant may belong to multiple teams.\n\nThe strength of a team is defined as the second largest strength among its members. For example, a team of participants of strength 1, 5, 2 has a strength 2, and a team of three participants of strength 3, 2, 3 has a strength 3.\n\nFind the maximum possible sum of the strengths of N teams.\n\nConstraints\n\n* 1 \u2264 N \u2264 10^5\n* 1 \u2264 a_i \u2264 10^{9}\n* a_i are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 a_2 ... a_{3N}", "grammar": {"productions": ["<S>->[N] <n> <T_3N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=N<=10^5", "1<=a_i<=10^9"]}}
{"name": "1194_A. Remove a Progression", "description": "You have a list of numbers from 1 to n written from left to right on the blackboard.\n\nYou perform an algorithm consisting of several steps (steps are 1-indexed). On the i-th step you wipe the i-th number (considering only remaining numbers). You wipe the whole number (not one digit).\n\n<image>\n\nWhen there are less than i numbers remaining, you stop your algorithm. \n\nNow you wonder: what is the value of the x-th remaining number after the algorithm is stopped?\n\nInput\n\nThe first line contains one integer T (1 \u2264 T \u2264 100) \u2014 the number of queries. The next T lines contain queries \u2014 one per line. All queries are independent.\n\nEach line contains two space-separated integers n and x (1 \u2264 x < n \u2264 10^{9}) \u2014 the length of the list and the position we wonder about. It's guaranteed that after the algorithm ends, the list will still contain at least x numbers.", "grammar": {"productions": ["<S>->[T] <n> <T_T>", "<T_i>-><T_i-1> <n> n <s> x", "<T_1>->n <s> x"], "constraints": ["1<=T<=100", "1<=x<n<=10^9"]}}
{"name": "p02885 AtCoder Beginner Contest 143 - Curtain", "description": "The window of Takahashi's room has a width of A. There are two curtains hung over the window, each of which has a horizontal length of B. (Vertically, the curtains are long enough to cover the whole window.)\n\nWe will close the window so as to minimize the total horizontal length of the uncovered part of the window. Find the total horizontal length of the uncovered parts of the window then.\n\nConstraints\n\n* 1 \\leq A \\leq 100\n* 1 \\leq B \\leq 100\n* A and B are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B", "grammar": {"productions": ["<S>->A <s> B"], "constraints": ["1<=A<=100", "1<=B<=100"]}}
{"name": "750_A. New Year and Hurry", "description": "Limak is going to participate in a contest on the last day of the 2016. The contest will start at 20:00 and will last four hours, exactly until midnight. There will be n problems, sorted by difficulty, i.e. problem 1 is the easiest and problem n is the hardest. Limak knows it will take him 5\u00b7i minutes to solve the i-th problem.\n\nLimak's friends organize a New Year's Eve party and Limak wants to be there at midnight or earlier. He needs k minutes to get there from his house, where he will participate in the contest first.\n\nHow many problems can Limak solve if he wants to make it to the party?\n\nInput\n\nThe only line of the input contains two integers n and k (1 \u2264 n \u2264 10, 1 \u2264 k \u2264 240) \u2014 the number of the problems in the contest and the number of minutes Limak needs to get to the party from his house.", "grammar": {"productions": ["<S>->n <s> k"], "constraints": ["1<=n<=10", "1<=k<=240"]}}
{"name": "p03341 AtCoder Regular Contest 098 - Attention", "description": "There are N people standing in a row from west to east. Each person is facing east or west. The directions of the people is given as a string S of length N. The i-th person from the west is facing east if S_i = `E`, and west if S_i = `W`.\n\nYou will appoint one of the N people as the leader, then command the rest of them to face in the direction of the leader. Here, we do not care which direction the leader is facing.\n\nThe people in the row hate to change their directions, so you would like to select the leader so that the number of people who have to change their directions is minimized. Find the minimum number of people who have to change their directions.\n\nConstraints\n\n* 2 \\leq N \\leq 3 \\times 10^5\n* |S| = N\n* S_i is `E` or `W`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nS", "grammar": {"productions": ["<S>->[N] <n> [EW]{N}"], "constraints": ["2<=N<=3*10^5"]}}
{"name": "1269_A. Equation", "description": "Let's call a positive integer composite if it has at least one divisor other than 1 and itself. For example:\n\n  * the following numbers are composite: 1024, 4, 6, 9; \n  * the following numbers are not composite: 13, 1, 2, 3, 37. \n\n\n\nYou are given a positive integer n. Find two composite integers a,b such that a-b=n.\n\nIt can be proven that solution always exists.\n\nInput\n\nThe input contains one integer n (1 \u2264 n \u2264 10^7): the given integer.", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=10^7"]}}
{"name": "32_B. Borze", "description": "Ternary numeric notation is quite popular in Berland. To telegraph the ternary number the Borze alphabet is used. Digit 0 is transmitted as \u00ab.\u00bb, 1 as \u00ab-.\u00bb and 2 as \u00ab--\u00bb. You are to decode the Borze code, i.e. to find out the ternary number given its representation in Borze alphabet.\n\nInput\n\nThe first line contains a number in Borze code. The length of the string is between 1 and 200 characters. It's guaranteed that the given string is a valid Borze code of some ternary number (this number can have leading zeroes).", "grammar": {"productions": ["<S>->[--.-.]{1,200}"], "constraints": []}}
{"name": "522_A. Reposts", "description": "One day Polycarp published a funny picture in a social network making a poll about the color of his handle. Many of his friends started reposting Polycarp's joke to their news feed. Some of them reposted the reposts and so on.\n\nThese events are given as a sequence of strings \"name1 reposted name2\", where name1 is the name of the person who reposted the joke, and name2 is the name of the person from whose news feed the joke was reposted. It is guaranteed that for each string \"name1 reposted name2\" user \"name1\" didn't have the joke in his feed yet, and \"name2\" already had it in his feed by the moment of repost. Polycarp was registered as \"Polycarp\" and initially the joke was only in his feed.\n\nPolycarp measures the popularity of the joke as the length of the largest repost chain. Print the popularity of Polycarp's joke.\n\nInput\n\nThe first line of the input contains integer n (1 \u2264 n \u2264 200) \u2014 the number of reposts. Next follow the reposts in the order they were made. Each of them is written on a single line and looks as \"name1 reposted name2\". All the names in the input consist of lowercase or uppercase English letters and/or digits and have lengths from 2 to 24 characters, inclusive.\n\nWe know that the user names are case-insensitive, that is, two names that only differ in the letter case correspond to the same social network user.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> [a-zA-Z0-9]{2,24} <s> reposted <s> [a-zA-Z0-9]{2,24}", "<T_1>->[a-zA-Z0-9]{2,24} <s> reposted <s> [a-zA-Z0-9]{2,24}"], "constraints": ["1<=n<=200"]}}
{"name": "313_B. Ilya and Queries", "description": "Ilya the Lion wants to help all his friends with passing exams. They need to solve the following problem to pass the IT exam.\n\nYou've got string s = s1s2... sn (n is the length of the string), consisting only of characters \".\" and \"#\" and m queries. Each query is described by a pair of integers li, ri (1 \u2264 li < ri \u2264 n). The answer to the query li, ri is the number of such integers i (li \u2264 i < ri), that si = si + 1.\n\nIlya the Lion wants to help his friends but is there anyone to help him? Help Ilya, solve the problem.\n\nInput\n\nThe first line contains string s of length n (2 \u2264 n \u2264 10^5). It is guaranteed that the given string only consists of characters \".\" and \"#\".\n\nThe next line contains integer m (1 \u2264 m \u2264 10^5) \u2014 the number of queries. Each of the next m lines contains the description of the corresponding query. The i-th line contains integers li, ri (1 \u2264 li < ri \u2264 n).", "grammar": {"productions": ["<S>->[.#]{n} <n> [m] <n> <T_m>", "<T_i>-><T_i-1> <n> l_i <s> r_i", "<T_1>->l_1 <s> r_1"], "constraints": ["2<=n<=10^5", "1<=m<=10^5", "1<=l_i<=r_i<=n"]}}
{"name": "p02755 AtCoder Beginner Contest 158 - Tax Increase", "description": "Find the price of a product before tax such that, when the consumption tax rate is 8 percent and 10 percent, the amount of consumption tax levied on it is A yen and B yen, respectively. (Yen is the currency of Japan.)\n\nHere, the price before tax must be a positive integer, and the amount of consumption tax is rounded down to the nearest integer.\n\nIf multiple prices satisfy the condition, print the lowest such price; if no price satisfies the condition, print `-1`.\n\nConstraints\n\n* 1 \\leq A \\leq B \\leq 100\n* A and B are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B", "grammar": {"productions": ["<S>->A <s> B"], "constraints": ["1<=A<=100", "A<=B<=100"]}}
{"name": "p02741 Panasonic Programming Contest 2020 - Kth Term", "description": "Print the K-th element of the following sequence of length 32:\n\n\n1, 1, 1, 2, 1, 2, 1, 5, 2, 2, 1, 5, 1, 2, 1, 14, 1, 5, 1, 5, 2, 2, 1, 15, 2, 2, 5, 4, 1, 4, 1, 51\n\nConstraints\n\n* 1 \\leq K \\leq 32\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nK", "grammar": {"productions": ["<S>->K"], "constraints": ["1<=K<=32"]}}
{"name": "1257_C. Dominated Subarray", "description": "Let's call an array t dominated by value v in the next situation.\n\nAt first, array t should have at least 2 elements. Now, let's calculate number of occurrences of each number num in t and define it as occ(num). Then t is dominated (by v) if (and only if) occ(v) > occ(v') for any other number v'. For example, arrays [1, 2, 3, 4, 5, 2], [11, 11] and [3, 2, 3, 2, 3] are dominated (by 2, 11 and 3 respectevitely) but arrays [3], [1, 2] and [3, 3, 2, 2, 1] are not.\n\nSmall remark: since any array can be dominated only by one number, we can not specify this number and just say that array is either dominated or not.\n\nYou are given array a_1, a_2, ..., a_n. Calculate its shortest dominated subarray or say that there are no such subarrays.\n\nThe subarray of a is a contiguous part of the array a, i. e. the array a_i, a_{i + 1}, ..., a_j for some 1 \u2264 i \u2264 j \u2264 n.\n\nInput\n\nThe first line contains single integer T (1 \u2264 T \u2264 1000) \u2014 the number of test cases. Each test case consists of two lines.\n\nThe first line contains single integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the length of the array a.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 n) \u2014 the corresponding values of the array a.\n\nIt's guaranteed that the total length of all arrays in one test doesn't exceed 2 \u22c5 10^5.", "grammar": {"productions": ["<S>->[T] <n> <T_T>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=T<=1000", "1<=n<=2*10^5", "1<=a_i<=n"]}}
{"name": "1243_A. Maximum Square", "description": "Ujan decided to make a new wooden roof for the house. He has n rectangular planks numbered from 1 to n. The i-th plank has size a_i \u00d7 1 (that is, the width is 1 and the height is a_i).\n\nNow, Ujan wants to make a square roof. He will first choose some of the planks and place them side by side in some order. Then he will glue together all of these planks by their vertical sides. Finally, he will cut out a square from the resulting shape in such a way that the sides of the square are horizontal and vertical.\n\nFor example, if Ujan had planks with lengths 4, 3, 1, 4 and 5, he could choose planks with lengths 4, 3 and 5. Then he can cut out a 3 \u00d7 3 square, which is the maximum possible. Note that this is not the only way he can obtain a 3 \u00d7 3 square.\n\n<image>\n\nWhat is the maximum side length of the square Ujan can get?\n\nInput\n\nThe first line of input contains a single integer k (1 \u2264 k \u2264 10), the number of test cases in the input.\n\nFor each test case, the first line contains a single integer n (1 \u2264 n \u2264 1 000), the number of planks Ujan has in store. The next line contains n integers a_1, \u2026, a_n (1 \u2264 a_i \u2264 n), the lengths of the planks.", "grammar": {"productions": ["<S>->[k] <n> <T_k>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=k<=10", "1<=n<=1000", "1<=a_i<=n"]}}
{"name": "p03806 AtCoder Beginner Contest 054 - Mixing Experiment", "description": "Dolphin is planning to generate a small amount of a certain chemical substance C.\nIn order to generate the substance C, he must prepare a solution which is a mixture of two substances A and B in the ratio of M_a:M_b.\nHe does not have any stock of chemicals, however, so he will purchase some chemicals at a local pharmacy.\nThe pharmacy sells N kinds of chemicals. For each kind of chemical, there is exactly one package of that chemical in stock.\nThe package of chemical i contains a_i grams of the substance A and b_i grams of the substance B, and is sold for c_i yen (the currency of Japan).\nDolphin will purchase some of these packages. For some reason, he must use all contents of the purchased packages to generate the substance C.\nFind the minimum amount of money required to generate the substance C.\nIf it is not possible to generate the substance C by purchasing any combination of packages at the pharmacy, report that fact.\n\nConstraints\n\n* 1\u2266N\u226640\n* 1\u2266a_i,b_i\u226610\n* 1\u2266c_i\u2266100\n* 1\u2266M_a,M_b\u226610\n* gcd(M_a,M_b)=1\n* a_i, b_i, c_i, M_a and M_b are integers.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN M_a M_b\na_1 b_1 c_1\na_2 b_2 c_2\n:\na_N b_N c_N", "grammar": {"productions": ["<S>->[N] <s> Ma <s> Mb <n> <T_N>", "<T_i>-><T_i-1> <n> a_i <s> b_i <s> c_i", "<T_1>->a_1 <s> b_1 <s> c_1"], "constraints": ["1<=N<=40", "1<=a_i,b_i<=10", "1<=c_i<=100", "1<=Ma<=Mb<=10", "gcd(Ma,Mb)=1"]}}
{"name": "p02697 AtCoder Beginner Contest 165 - Rotation Matching", "description": "You are going to hold a competition of one-to-one game called AtCoder Janken. (Janken is the Japanese name for Rock-paper-scissors.) N players will participate in this competition, and they are given distinct integers from 1 through N. The arena has M playing fields for two players. You need to assign each playing field two distinct integers between 1 and N (inclusive). You cannot assign the same integer to multiple playing fields. The competition consists of N rounds, each of which proceeds as follows:\n\n* For each player, if there is a playing field that is assigned the player's integer, the player goes to that field and fight the other player who comes there.\n* Then, each player adds 1 to its integer. If it becomes N+1, change it to 1.\n\n\n\nYou want to ensure that no player fights the same opponent more than once during the N rounds. Print an assignment of integers to the playing fields satisfying this condition. It can be proved that such an assignment always exists under the constraints given.\n\nConstraints\n\n* 1 \\leq M\n* M \\times 2 +1 \\leq N \\leq 200000\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M", "grammar": {"productions": ["<S>->N <s> M"], "constraints": ["1<=M", "M*2+1<=N<=200000"]}}
{"name": "p02578 AtCoder Beginner Contest 176 - Step", "description": "N persons are standing in a row. The height of the i-th person from the front is A_i.\n\nWe want to have each person stand on a stool of some heights - at least zero - so that the following condition is satisfied for every person:\n\nCondition: Nobody in front of the person is taller than the person. Here, the height of a person includes the stool.\n\nFind the minimum total height of the stools needed to meet this goal.\n\nConstraints\n\n* 1 \\leq N \\leq 2\\times 10^5\n* 1 \\leq A_i \\leq 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 \\ldots A_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["1<=N<=2*10^5", "1<=A_i<=10^9"]}}
{"name": "1102_A. Integer Sequence Dividing", "description": "You are given an integer sequence 1, 2, ..., n. You have to divide it into two sets A and B in such a way that each element belongs to exactly one set and |sum(A) - sum(B)| is minimum possible.\n\nThe value |x| is the absolute value of x and sum(S) is the sum of elements of the set S.\n\nInput\n\nThe first line of the input contains one integer n (1 \u2264 n \u2264 2 \u22c5 10^9).", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=2*10^9"]}}
{"name": "1117_B. Emotes", "description": "There are n emotes in very popular digital collectible card game (the game is pretty famous so we won't say its name). The i-th emote increases the opponent's happiness by a_i units (we all know that emotes in this game are used to make opponents happy).\n\nYou have time to use some emotes only m times. You are allowed to use any emotion once, more than once, or not use it at all. The only restriction is that you cannot use the same emote more than k times in a row (otherwise the opponent will think that you're trolling him).\n\nNote that two emotes i and j (i \u2260 j) such that a_i = a_j are considered different.\n\nYou have to make your opponent as happy as possible. Find the maximum possible opponent's happiness.\n\nInput\n\nThe first line of the input contains three integers n, m and k (2 \u2264 n \u2264 2 \u22c5 10^5, 1 \u2264 k \u2264 m \u2264 2 \u22c5 10^9) \u2014 the number of emotes, the number of times you can use emotes and the maximum number of times you may use the same emote in a row.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9), where a_i is value of the happiness of the i-th emote.", "grammar": {"productions": ["<S>->[n] <s> m <s> k <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["2<=n<=2*10^5", "1<=k<=m<=2*10^9", "1<=a_i<=10^9"]}}
{"name": "p03101 AtCoder Beginner Contest 121 - White Cells", "description": "There are H rows and W columns of white square cells.\n\nYou will choose h of the rows and w of the columns, and paint all of the cells contained in those rows or columns.\n\nHow many white cells will remain?\n\nIt can be proved that this count does not depend on what rows and columns are chosen.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq H, W \\leq 20\n* 1 \\leq h \\leq H\n* 1 \\leq w \\leq W\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nH W\nh w", "grammar": {"productions": ["<S>->H <s> W <n> h <s> w"], "constraints": ["1<=H<=20", "1<=W<=20", "1<=h<=H", "1<=w<=W"]}}
{"name": "1061_A. Coins", "description": "You have unlimited number of coins with values 1, 2, \u2026, n. You want to select some set of coins having the total value of S. \n\nIt is allowed to have multiple coins with the same value in the set. What is the minimum number of coins required to get sum S?\n\nInput\n\nThe only line of the input contains two integers n and S (1 \u2264 n \u2264 100 000, 1 \u2264 S \u2264 10^9)", "grammar": {"productions": ["<S>->n <s> S"], "constraints": ["1<=n<=100000", "1<=S<=10^9"]}}
{"name": "p02574 AtCoder Beginner Contest 177 - Coprime", "description": "We have N integers. The i-th number is A_i.\n\n\\\\{A_i\\\\} is said to be pairwise coprime when GCD(A_i,A_j)=1 holds for every pair (i, j) such that 1\\leq i < j \\leq N.\n\n\\\\{A_i\\\\} is said to be setwise coprime when \\\\{A_i\\\\} is not pairwise coprime but GCD(A_1,\\ldots,A_N)=1.\n\nDetermine if \\\\{A_i\\\\} is pairwise coprime, setwise coprime, or neither.\n\nHere, GCD(\\ldots) denotes greatest common divisor.\n\nConstraints\n\n* 2 \\leq N \\leq 10^6\n* 1 \\leq A_i\\leq 10^6\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 \\ldots A_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["2<=N<=10^6", "1<=A_i<=10^6"]}}
{"name": "p02745 Panasonic Programming Contest 2020 - Three Substrings", "description": "Snuke has a string s. From this string, Anuke, Bnuke, and Cnuke obtained strings a, b, and c, respectively, as follows:\n\n* Choose a non-empty (contiguous) substring of s (possibly s itself). Then, replace some characters (possibly all or none) in it with `?`s.\n\n\n\nFor example, if s is `mississippi`, we can choose the substring `ssissip` and replace its 1-st and 3-rd characters with `?` to obtain `?s?ssip`.\n\nYou are given the strings a, b, and c. Find the minimum possible length of s.\n\nConstraints\n\n* 1 \\leq |a|, |b|, |c| \\leq 2000\n* a, b, and c consists of lowercase English letters and `?`s.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\na\nb\nc", "grammar": {"productions": ["<S>->[a-z?]{1,2000} <n> [a-z?]{1,2000} <n> [a-z?]{1,2000}"], "constraints": [""]}}
{"name": "p03780 AtCoder Beginner Contest 056 - No Need", "description": "AtCoDeer the deer has N cards with positive integers written on them. The number on the i-th card (1\u2264i\u2264N) is a_i. Because he loves big numbers, he calls a subset of the cards good when the sum of the numbers written on the cards in the subset, is K or greater.\n\nThen, for each card i, he judges whether it is unnecessary or not, as follows:\n\n* If, for any good subset of the cards containing card i, the set that can be obtained by eliminating card i from the subset is also good, card i is unnecessary.\n* Otherwise, card i is NOT unnecessary.\n\n\n\nFind the number of the unnecessary cards. Here, he judges each card independently, and he does not throw away cards that turn out to be unnecessary.\n\nConstraints\n\n* All input values are integers.\n* 1\u2264N\u22645000\n* 1\u2264K\u22645000\n* 1\u2264a_i\u226410^9 (1\u2264i\u2264N)\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN K\na_1 a_2 ... a_N", "grammar": {"productions": ["<S>->[N] <s> K <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=N<=5000", "1<=K<=5000", "1<=a_i<=10^9"]}}
{"name": "p03241 AtCoder Beginner Contest 112 - Partition", "description": "You are given integers N and M.\n\nConsider a sequence a of length N consisting of positive integers such that a_1 + a_2 + ... + a_N = M. Find the maximum possible value of the greatest common divisor of a_1, a_2, ..., a_N.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 10^5\n* N \\leq M \\leq 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M", "grammar": {"productions": ["<S>->N <s> M"], "constraints": ["1<=N<=10^5", "1<=M<=10^9"]}}
{"name": "p02786 AtCoder Beginner Contest 153 - Caracal vs Monster", "description": "Caracal is fighting with a monster.\n\nThe health of the monster is H.\n\nCaracal can attack by choosing one monster. When a monster is attacked, depending on that monster's health, the following happens:\n\n* If the monster's health is 1, it drops to 0.\n* If the monster's health, X, is greater than 1, that monster disappears. Then, two new monsters appear, each with the health of \\lfloor X/2 \\rfloor.\n\n\n\n(\\lfloor r \\rfloor denotes the greatest integer not exceeding r.)\n\nCaracal wins when the healths of all existing monsters become 0 or below.\n\nFind the minimum number of attacks Caracal needs to make before winning.\n\nConstraints\n\n* 1 \\leq H \\leq 10^{12}\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nH", "grammar": {"productions": ["<S>->H"], "constraints": ["1<=H<=10^12"]}}
{"name": "p02605 M-SOLUTIONS Programming Contest 2020 - Air Safety", "description": "M-kun is a brilliant air traffic controller.\n\nOn the display of his radar, there are N airplanes numbered 1, 2, ..., N, all flying at the same altitude.\nEach of the airplanes flies at a constant speed of 0.1 per second in a constant direction. The current coordinates of the airplane numbered i are (X_i, Y_i), and the direction of the airplane is as follows:\n\n* if U_i is `U`, it flies in the positive y direction;\n* if U_i is `R`, it flies in the positive x direction;\n* if U_i is `D`, it flies in the negative y direction;\n* if U_i is `L`, it flies in the negative x direction.\n\n\n\nTo help M-kun in his work, determine whether there is a pair of airplanes that will collide with each other if they keep flying as they are now.\nIf there is such a pair, find the number of seconds after which the first collision will happen.\nWe assume that the airplanes are negligibly small so that two airplanes only collide when they reach the same coordinates simultaneously.\n\nConstraints\n\n* 1 \\leq N \\leq 200000\n* 0 \\leq X_i, Y_i \\leq 200000\n* U_i is `U`, `R`, `D`, or `L`.\n* The current positions of the N airplanes, (X_i, Y_i), are all distinct.\n* N, X_i, and Y_i are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nX_1 Y_1 U_1\nX_2 Y_2 U_2\nX_3 Y_3 U_3\n:\nX_N Y_N U_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> X_i <s> Y_i <s> [URDL]{1}", "<T_1>->X_1 <s> Y_1 <s> [URDL]{1}"], "constraints": ["1<=N<=200000", "0<=X_i<=200000", "0<=Y_i<=200000"]}}
{"name": "1367_A. Short Substrings", "description": "Alice guesses the strings that Bob made for her.\n\nAt first, Bob came up with the secret string a consisting of lowercase English letters. The string a has a length of 2 or more characters. Then, from string a he builds a new string b and offers Alice the string b so that she can guess the string a.\n\nBob builds b from a as follows: he writes all the substrings of length 2 of the string a in the order from left to right, and then joins them in the same order into the string b.\n\nFor example, if Bob came up with the string a=\"abac\", then all the substrings of length 2 of the string a are: \"ab\", \"ba\", \"ac\". Therefore, the string b=\"abbaac\".\n\nYou are given the string b. Help Alice to guess the string a that Bob came up with. It is guaranteed that b was built according to the algorithm given above. It can be proved that the answer to the problem is unique.\n\nInput\n\nThe first line contains a single positive integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases in the test. Then t test cases follow.\n\nEach test case consists of one line in which the string b is written, consisting of lowercase English letters (2 \u2264 |b| \u2264 100) \u2014 the string Bob came up with, where |b| is the length of the string b. It is guaranteed that b was built according to the algorithm given above.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [a-z]{2,100}", "<T_1>->[a-z]{2,100}"], "constraints": ["1<=t<=1000"]}}
{"name": "p03077 AtCoder Beginner Contest 123 - Five Transportations", "description": "In 2028 and after a continuous growth, AtCoder Inc. finally built an empire with six cities (City 1, 2, 3, 4, 5, 6)!\n\nThere are five means of transport in this empire:\n\n* Train: travels from City 1 to 2 in one minute. A train can occupy at most A people.\n* Bus: travels from City 2 to 3 in one minute. A bus can occupy at most B people.\n* Taxi: travels from City 3 to 4 in one minute. A taxi can occupy at most C people.\n* Airplane: travels from City 4 to 5 in one minute. An airplane can occupy at most D people.\n* Ship: travels from City 5 to 6 in one minute. A ship can occupy at most E people.\n\n\n\nFor each of them, one vehicle leaves the city at each integer time (time 0, 1, 2, ...).\n\nThere is a group of N people at City 1, and they all want to go to City 6.\nAt least how long does it take for all of them to reach there? You can ignore the time needed to transfer.\n\nConstraints\n\n* 1 \\leq N, A, B, C, D, E \\leq 10^{15}\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA\nB\nC\nD\nE", "grammar": {"productions": ["<S>->N <n> A <n> B <n> C <n> D <n> E"], "constraints": ["1<=N,A,B,C,D,E<=10^15"]}}
{"name": "978_C. Letters", "description": "There are n dormitories in Berland State University, they are numbered with integers from 1 to n. Each dormitory consists of rooms, there are a_i rooms in i-th dormitory. The rooms in i-th dormitory are numbered from 1 to a_i.\n\nA postman delivers letters. Sometimes there is no specific dormitory and room number in it on an envelope. Instead of it only a room number among all rooms of all n dormitories is written on an envelope. In this case, assume that all the rooms are numbered from 1 to a_1 + a_2 + ... + a_n and the rooms of the first dormitory go first, the rooms of the second dormitory go after them and so on.\n\nFor example, in case n=2, a_1=3 and a_2=5 an envelope can have any integer from 1 to 8 written on it. If the number 7 is written on an envelope, it means that the letter should be delivered to the room number 4 of the second dormitory.\n\nFor each of m letters by the room number among all n dormitories, determine the particular dormitory and the room number in a dormitory where this letter should be delivered.\n\nInput\n\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 2 \u22c5 10^{5}) \u2014 the number of dormitories and the number of letters.\n\nThe second line contains a sequence a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^{10}), where a_i equals to the number of rooms in the i-th dormitory. The third line contains a sequence b_1, b_2, ..., b_m (1 \u2264 b_j \u2264 a_1 + a_2 + ... + a_n), where b_j equals to the room number (among all rooms of all dormitories) for the j-th letter. All b_j are given in increasing order.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_n> <n> <L_m>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1", "<L_i>-><L_i-1> <s> b_i", "<L_1>->b_1"], "constraints": ["1<=n<=2*10^5", "1<=m<=2*10^5", "1<=a_i<=10^10", "1<=b_i<=a_1 + a_2 + ... + a_n"]}}
{"name": "p03455 AtCoder Beginner Contest 086 - Product", "description": "AtCoDeer the deer found two positive integers, a and b. Determine whether the product of a and b is even or odd.\n\nConstraints\n\n* 1 \u2264 a,b \u2264 10000\n* a and b are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\na b", "grammar": {"productions": ["<S>->a <s> b"], "constraints": ["1<=a,b<=10000"]}}
{"name": "433_B. Kuriyama Mirai's Stones", "description": "Kuriyama Mirai has killed many monsters and got many (namely n) stones. She numbers the stones from 1 to n. The cost of the i-th stone is vi. Kuriyama Mirai wants to know something about these stones so she will ask you two kinds of questions:\n\n  1. She will tell you two numbers, l and r (1 \u2264 l \u2264 r \u2264 n), and you should tell her <image>. \n  2. Let ui be the cost of the i-th cheapest stone (the cost that will be on the i-th place if we arrange all the stone costs in non-decreasing order). This time she will tell you two numbers, l and r (1 \u2264 l \u2264 r \u2264 n), and you should tell her <image>. \n\n\n\nFor every question you should give the correct answer, or Kuriyama Mirai will say \"fuyukai desu\" and then become unhappy.\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 10^5). The second line contains n integers: v1, v2, ..., vn (1 \u2264 vi \u2264 10^9) \u2014 costs of the stones. \n\nThe third line contains an integer m (1 \u2264 m \u2264 10^5) \u2014 the number of Kuriyama Mirai's questions. Then follow m lines, each line contains three integers type, l and r (1 \u2264 l \u2264 r \u2264 n; 1 \u2264 type \u2264 2), describing a question. If type equal to 1, then you should output the answer for the first question, else you should output the answer for the second one.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> v_i", "<T_1>->v_1 <n> m <n> <L_m>", "<L_i>-><L_i-1> <n> type <s> l <s> r", "<L_1>->type <s> l <s> r"], "constraints": ["1<=n<=10^5", "1<=v_i<=10^9", "1<=l<=r", "l<=r<=n", "1<=type<=2"]}}
{"name": "p02989 AtCoder Beginner Contest 132 - Divide the Problems", "description": "Takahashi made N problems for competitive programming. The problems are numbered 1 to N, and the difficulty of Problem i is represented as an integer d_i (the higher, the harder).\n\nHe is dividing the problems into two categories by choosing an integer K, as follows:\n\n* A problem with difficulty K or higher will be for ARCs.\n* A problem with difficulty lower than K will be for ABCs.\n\n\n\nHow many choices of the integer K make the number of problems for ARCs and the number of problems for ABCs the same?\n\n* 2 \\leq N \\leq 10^5\n* N is an even number.\n* 1 \\leq d_i \\leq 10^5\n* All values in input are integers.\n\n\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nd_1 d_2 ... d_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> d_i", "<T_1>->d_1"], "constraints": ["2<=N<=10^5", "1<=d_i<=10^5", "N%2==0"]}}
{"name": "1091_A. New Year and the Christmas Ornament", "description": "Alice and Bob are decorating a Christmas Tree. \n\nAlice wants only 3 types of ornaments to be used on the Christmas Tree: yellow, blue and red. They have y yellow ornaments, b blue ornaments and r red ornaments.\n\nIn Bob's opinion, a Christmas Tree will be beautiful if:\n\n  * the number of blue ornaments used is greater by exactly 1 than the number of yellow ornaments, and \n  * the number of red ornaments used is greater by exactly 1 than the number of blue ornaments. \n\n\n\nThat is, if they have 8 yellow ornaments, 13 blue ornaments and 9 red ornaments, we can choose 4 yellow, 5 blue and 6 red ornaments (5=4+1 and 6=5+1).\n\nAlice wants to choose as many ornaments as possible, but she also wants the Christmas Tree to be beautiful according to Bob's opinion.\n\nIn the example two paragraphs above, we would choose 7 yellow, 8 blue and 9 red ornaments. If we do it, we will use 7+8+9=24 ornaments. That is the maximum number.\n\nSince Alice and Bob are busy with preparing food to the New Year's Eve, they are asking you to find out the maximum number of ornaments that can be used in their beautiful Christmas Tree! \n\nIt is guaranteed that it is possible to choose at least 6 (1+2+3=6) ornaments.\n\nInput\n\nThe only line contains three integers y, b, r (1 \u2264 y \u2264 100, 2 \u2264 b \u2264 100, 3 \u2264 r \u2264 100) \u2014 the number of yellow, blue and red ornaments. \n\nIt is guaranteed that it is possible to choose at least 6 (1+2+3=6) ornaments.", "grammar": {"productions": ["<S>->y <s> b <s> r"], "constraints": ["1<=y<=100", "2<=b<=100", "3<=r<=100"]}}
{"name": "p02964 AtCoder Grand Contest 036 - Do Not Duplicate", "description": "We have a sequence of N \\times K integers: X=(X_0,X_1,\\cdots,X_{N \\times K-1}). Its elements are represented by another sequence of N integers: A=(A_0,A_1,\\cdots,A_{N-1}). For each pair i, j (0 \\leq i \\leq K-1,\\ 0 \\leq j \\leq N-1), X_{i \\times N + j}=A_j holds.\n\nSnuke has an integer sequence s, which is initially empty. For each i=0,1,2,\\cdots,N \\times K-1, in this order, he will perform the following operation:\n\n* If s does not contain X_i: add X_i to the end of s.\n* If s does contain X_i: repeatedly delete the element at the end of s until s no longer contains X_i. Note that, in this case, we do not add X_i to the end of s.\n\n\n\nFind the elements of s after Snuke finished the operations.\n\nConstraints\n\n* 1 \\leq N \\leq 2 \\times 10^5\n* 1 \\leq K \\leq 10^{12}\n* 1 \\leq A_i \\leq 2 \\times 10^5\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nA_0 A_1 \\cdots A_{N-1}", "grammar": {"productions": ["<S>->[N] <s> K <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["1<=N<=2*10^5", "1<=K<=10^12", "1<=A_i<=2*10^5"]}}
{"name": "p03284 AtCoder Beginner Contest 105 - AtCoder Crackers", "description": "Takahashi has decided to distribute N AtCoder Crackers to K users of as evenly as possible. When all the crackers are distributed, find the minimum possible (absolute) difference between the largest number of crackers received by a user and the smallest number received by a user.\n\nConstraints\n\n* 1 \\leq N,K \\leq 100\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K", "grammar": {"productions": ["<S>->N <s> K"], "constraints": ["1<=N,K<=100"]}}
{"name": "1358_C. Celex Update", "description": "During the quarantine, Sicromoft has more free time to create the new functions in \"Celex-2021\". The developers made a new function GAZ-GIZ, which infinitely fills an infinite table to the right and down from the upper left corner as follows:\n\n<image> The cell with coordinates (x, y) is at the intersection of x-th row and y-th column. Upper left cell (1,1) contains an integer 1.\n\nThe developers of the SUM function don't sleep either. Because of the boredom, they teamed up with the developers of the RAND function, so they added the ability to calculate the sum on an arbitrary path from one cell to another, moving down or right. Formally, from the cell (x,y) in one step you can move to the cell (x+1, y) or (x, y+1). \n\nAfter another Dinwows update, Levian started to study \"Celex-2021\" (because he wants to be an accountant!). After filling in the table with the GAZ-GIZ function, he asked you to calculate the quantity of possible different amounts on the path from a given cell (x_1, y_1) to another given cell (x_2, y_2), if you can only move one cell down or right.\n\nFormally, consider all the paths from the cell (x_1, y_1) to cell (x_2, y_2) such that each next cell in the path is located either to the down or to the right of the previous one. Calculate the number of different sums of elements for all such paths.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 57179) \u2014 the number of test cases.\n\nEach of the following t lines contains four natural numbers x_1, y_1, x_2, y_2 (1 \u2264 x_1 \u2264 x_2 \u2264 10^9, 1 \u2264 y_1 \u2264 y_2 \u2264 10^9) \u2014 coordinates of the start and the end cells.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> x1 <s> y1 <s> x2 <s> y2", "<T_1>->x1 <s> y1 <s> x2 <s> y2"], "constraints": ["1<=t<=57179", "1<=x1<=x2<=10^9", "1<=y1<=y2<=10^9"]}}
{"name": "746_B. Decoding", "description": "Polycarp is mad about coding, that is why he writes Sveta encoded messages. He calls the median letter in a word the letter which is in the middle of the word. If the word's length is even, the median letter is the left of the two middle letters. In the following examples, the median letter is highlighted: contest, info. If the word consists of single letter, then according to above definition this letter is the median letter. \n\nPolycarp encodes each word in the following way: he writes down the median letter of the word, then deletes it and repeats the process until there are no letters left. For example, he encodes the word volga as logva.\n\nYou are given an encoding s of some word, your task is to decode it. \n\nInput\n\nThe first line contains a positive integer n (1 \u2264 n \u2264 2000) \u2014 the length of the encoded word.\n\nThe second line contains the string s of length n consisting of lowercase English letters \u2014 the encoding.", "grammar": {"productions": ["<S>->[n] <n> [a-z]{n}"], "constraints": ["1<=n<=2000"]}}
{"name": "938_A. Word Correction", "description": "Victor tries to write his own text editor, with word correction included. However, the rules of word correction are really strange.\n\nVictor thinks that if a word contains two consecutive vowels, then it's kinda weird and it needs to be replaced. So the word corrector works in such a way: as long as there are two consecutive vowels in the word, it deletes the first vowel in a word such that there is another vowel right before it. If there are no two consecutive vowels in the word, it is considered to be correct.\n\nYou are given a word s. Can you predict what will it become after correction?\n\nIn this problem letters a, e, i, o, u and y are considered to be vowels.\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 100) \u2014 the number of letters in word s before the correction.\n\nThe second line contains a string s consisting of exactly n lowercase Latin letters \u2014 the word before the correction.", "grammar": {"productions": ["<S>->[n] <n> [a-z]{n}"], "constraints": ["1<=n<=100"]}}
{"name": "p03131 Yahoo Programming Contest 2019 - When I hit my pocket...", "description": "Snuke has one biscuit and zero Japanese yen (the currency) in his pocket. He will perform the following operations exactly K times in total, in the order he likes:\n\n* Hit his pocket, which magically increases the number of biscuits by one.\n* Exchange A biscuits to 1 yen.\n* Exchange 1 yen to B biscuits.\n\n\n\nFind the maximum possible number of biscuits in Snuke's pocket after K operations.\n\nConstraints\n\n* 1 \\leq K,A,B \\leq 10^9\n* K,A and B are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nK A B", "grammar": {"productions": ["<S>->K <s> A <s> B"], "constraints": ["1<=K<=10^9", "1<=A<=10^9", "1<=B<=10^9"]}}
{"name": "p02844 Sumitomo Mitsui Trust Bank Programming Contest 2019 - Lucky PIN", "description": "AtCoder Inc. has decided to lock the door of its office with a 3-digit PIN code.\n\nThe company has an N-digit lucky number, S. Takahashi, the president, will erase N-3 digits from S and concatenate the remaining 3 digits without changing the order to set the PIN code.\n\nHow many different PIN codes can he set this way?\n\nBoth the lucky number and the PIN code may begin with a 0.\n\nConstraints\n\n* 4 \\leq N \\leq 30000\n* S is a string of length N consisting of digits.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nS", "grammar": {"productions": ["<S>->N <n> S", "S->[0-9]{N}"], "constraints": ["4<=N<=30000"]}}
{"name": "p02833 AtCoder Beginner Contest 148 - Double Factorial", "description": "For an integer n not less than 0, let us define f(n) as follows:\n\n* f(n) = 1 (if n < 2)\n* f(n) = n f(n-2) (if n \\geq 2)\n\n\n\nGiven is an integer N. Find the number of trailing zeros in the decimal notation of f(N).\n\nConstraints\n\n* 0 \\leq N \\leq 10^{18}\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["0<=N<=10^18"]}}
{"name": "p02845 Sumitomo Mitsui Trust Bank Programming Contest 2019 - Colorful Hats 2", "description": "N people are standing in a queue, numbered 1, 2, 3, ..., N from front to back. Each person wears a hat, which is red, blue, or green.\n\nThe person numbered i says:\n\n* \"In front of me, exactly A_i people are wearing hats with the same color as mine.\"\n\n\n\nAssuming that all these statements are correct, find the number of possible combinations of colors of the N people's hats.\n\nSince the count can be enormous, compute it modulo 1000000007.\n\nConstraints\n\n* 1 \\leq N \\leq 100000\n* 0 \\leq A_i \\leq N-1\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 A_2 A_3 ... A_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["1<=N<=100000", "0<=A_i<=N-1"]}}
{"name": "1352_G. Special Permutation", "description": "A permutation of length n is an array p=[p_1,p_2,...,p_n], which contains every integer from 1 to n (inclusive) and, moreover, each number appears exactly once. For example, p=[3,1,4,2,5] is a permutation of length 5.\n\nFor a given number n (n \u2265 2), find a permutation p in which absolute difference (that is, the absolute value of difference) of any two neighboring (adjacent) elements is between 2 and 4, inclusive. Formally, find such permutation p that 2 \u2264 |p_i - p_{i+1}| \u2264 4 for each i (1 \u2264 i < n).\n\nPrint any such permutation for the given integer n or determine that it does not exist.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases in the input. Then t test cases follow.\n\nEach test case is described by a single line containing an integer n (2 \u2264 n \u2264 1000).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n", "<T_1>->n"], "constraints": ["1<=t<=100", "2<=n<=1000"]}}
{"name": "501_A. Contest", "description": "Misha and Vasya participated in a Codeforces contest. Unfortunately, each of them solved only one problem, though successfully submitted it at the first attempt. Misha solved the problem that costs a points and Vasya solved the problem that costs b points. Besides, Misha submitted the problem c minutes after the contest started and Vasya submitted the problem d minutes after the contest started. As you know, on Codeforces the cost of a problem reduces as a round continues. That is, if you submit a problem that costs p points t minutes after the contest started, you get <image> points. \n\nMisha and Vasya are having an argument trying to find out who got more points. Help them to find out the truth.\n\nInput\n\nThe first line contains four integers a, b, c, d (250 \u2264 a, b \u2264 3500, 0 \u2264 c, d \u2264 180). \n\nIt is guaranteed that numbers a and b are divisible by 250 (just like on any real Codeforces round).", "grammar": {"productions": ["<S>->a <s> b <s> c <s> d"], "constraints": ["250<=a<=3500", "250<=b<=3500", "0<=c<=180", "0<=d<=180"]}}
{"name": "962_A. Equator", "description": "Polycarp has created his own training plan to prepare for the programming contests. He will train for n days, all days are numbered from 1 to n, beginning from the first.\n\nOn the i-th day Polycarp will necessarily solve a_i problems. One evening Polycarp plans to celebrate the equator. He will celebrate it on the first evening of such a day that from the beginning of the training and to this day inclusive he will solve half or more of all the problems.\n\nDetermine the index of day when Polycarp will celebrate the equator.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 200 000) \u2014 the number of days to prepare for the programming contests.\n\nThe second line contains a sequence a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10 000), where a_i equals to the number of problems, which Polycarp will solve on the i-th day.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=200000", "1<=a_i<=10000"]}}
{"name": "1375_A. Sign Flipping", "description": "You are given n integers a_1, a_2, ..., a_n, where n is odd. You are allowed to flip the sign of some (possibly all or none) of them. You wish to perform these flips in such a way that the following conditions hold:\n\n  1. At least (n - 1)/(2) of the adjacent differences a_{i + 1} - a_i for i = 1, 2, ..., n - 1 are greater than or equal to 0. \n  2. At least (n - 1)/(2) of the adjacent differences a_{i + 1} - a_i for i = 1, 2, ..., n - 1 are less than or equal to 0. \n\n\n\nFind any valid way to flip the signs. It can be shown that under the given constraints, there always exists at least one choice of signs to flip that satisfies the required condition. If there are several solutions, you can find any of them.\n\nInput\n\nThe input consists of multiple test cases. The first line contains an integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains an integer n (3 \u2264 n \u2264 99, n is odd) \u2014 the number of integers given to you.\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (-10^9 \u2264 a_i \u2264 10^9) \u2014 the numbers themselves.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10000.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=50", "3<=n<=99", "-10^9<=a_i<=10^9", "n%2!=0"]}}
{"name": "p03547 AtCoder Beginner Contest 078 - HEX", "description": "In programming, hexadecimal notation is often used.\n\nIn hexadecimal notation, besides the ten digits 0, 1, ..., 9, the six letters `A`, `B`, `C`, `D`, `E` and `F` are used to represent the values 10, 11, 12, 13, 14 and 15, respectively.\n\nIn this problem, you are given two letters X and Y. Each X and Y is `A`, `B`, `C`, `D`, `E` or `F`.\n\nWhen X and Y are seen as hexadecimal numbers, which is larger?\n\nConstraints\n\n* Each X and Y is `A`, `B`, `C`, `D`, `E` or `F`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX Y", "grammar": {"productions": ["<S>->[A-F]{1} <s> [A-F]{1}"], "constraints": []}}
{"name": "141_A. Amusing Joke", "description": "So, the New Year holidays are over. Santa Claus and his colleagues can take a rest and have guests at last. When two \"New Year and Christmas Men\" meet, thear assistants cut out of cardboard the letters from the guest's name and the host's name in honor of this event. Then the hung the letters above the main entrance. One night, when everyone went to bed, someone took all the letters of our characters' names. Then he may have shuffled the letters and put them in one pile in front of the door.\n\nThe next morning it was impossible to find the culprit who had made the disorder. But everybody wondered whether it is possible to restore the names of the host and his guests from the letters lying at the door? That is, we need to verify that there are no extra letters, and that nobody will need to cut more letters.\n\nHelp the \"New Year and Christmas Men\" and their friends to cope with this problem. You are given both inscriptions that hung over the front door the previous night, and a pile of letters that were found at the front door next morning.\n\nInput\n\nThe input file consists of three lines: the first line contains the guest's name, the second line contains the name of the residence host and the third line contains letters in a pile that were found at the door in the morning. All lines are not empty and contain only uppercase Latin letters. The length of each line does not exceed 100.", "grammar": {"productions": ["<S>->[A-Z]{1,100} <n> [A-Z]{1,100} <n> [A-Z]{1,100}"], "constraints": []}}
{"name": "1165_B. Polycarp Training", "description": "Polycarp wants to train before another programming competition. During the first day of his training he should solve exactly 1 problem, during the second day \u2014 exactly 2 problems, during the third day \u2014 exactly 3 problems, and so on. During the k-th day he should solve k problems.\n\nPolycarp has a list of n contests, the i-th contest consists of a_i problems. During each day Polycarp has to choose exactly one of the contests he didn't solve yet and solve it. He solves exactly k problems from this contest. Other problems are discarded from it. If there are no contests consisting of at least k problems that Polycarp didn't solve yet during the k-th day, then Polycarp stops his training.\n\nHow many days Polycarp can train if he chooses the contests optimally?\n\nInput\n\nThe first line of the input contains one integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of contests.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 2 \u22c5 10^5) \u2014 the number of problems in the i-th contest.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=2*10^5", "1<=a_i<=2*10^5"]}}
{"name": "1323_A. Even Subset Sum Problem", "description": "You are given an array a consisting of n positive integers. Find a non-empty subset of its elements such that their sum is even (i.e. divisible by 2) or determine that there is no such subset.\n\nBoth the given array and required subset may contain equal values.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 100), number of test cases to solve. Descriptions of t test cases follow.\n\nA description of each test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 100), length of array a.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 100), elements of a. The given array a can contain equal values (duplicates).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=100", "1<=n<=100", "1<=a_i<=100"]}}
{"name": "1313_A. Fast Food Restaurant", "description": "Tired of boring office work, Denis decided to open a fast food restaurant.\n\nOn the first day he made a portions of dumplings, b portions of cranberry juice and c pancakes with condensed milk.\n\nThe peculiarity of Denis's restaurant is the procedure of ordering food. For each visitor Denis himself chooses a set of dishes that this visitor will receive. When doing so, Denis is guided by the following rules:\n\n  * every visitor should receive at least one dish (dumplings, cranberry juice, pancakes with condensed milk are all considered to be dishes); \n  * each visitor should receive no more than one portion of dumplings, no more than one portion of cranberry juice and no more than one pancake with condensed milk; \n  * all visitors should receive different sets of dishes. \n\n\n\nWhat is the maximum number of visitors Denis can feed?\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases to solve.\n\nEach of the remaining t lines contains integers a, b and c (0 \u2264 a, b, c \u2264 10) \u2014 the number of portions of dumplings, the number of portions of cranberry juice and the number of condensed milk pancakes Denis made.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> a <s> b <s> c", "<T_1>->a <s> b <s> c"], "constraints": ["1<=t<=500", "0<=a<=10", "0<=b<=10", "0<=c<=10"]}}
{"name": "p03043 AtCoder Beginner Contest 126 - Dice and Coin", "description": "Snuke has a fair N-sided die that shows the integers from 1 to N with equal probability and a fair coin. He will play the following game with them:\n\n1. Throw the die. The current score is the result of the die.\n2. As long as the score is between 1 and K-1 (inclusive), keep flipping the coin. The score is doubled each time the coin lands heads up, and the score becomes 0 if the coin lands tails up.\n3. The game ends when the score becomes 0 or becomes K or above. Snuke wins if the score is K or above, and loses if the score is 0.\n\n\n\nYou are given N and K. Find the probability that Snuke wins the game.\n\nConstraints\n\n* 1 \u2264 N \u2264 10^5\n* 1 \u2264 K \u2264 10^5\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K", "grammar": {"productions": ["<S>->N <s> K"], "constraints": ["1<=N<=10^5", "1<=K<=10^5"]}}
{"name": "p02793 AtCoder Beginner Contest 152 - Flatten", "description": "Given are N positive integers A_1,...,A_N.\n\nConsider positive integers B_1, ..., B_N that satisfy the following condition.\n\nCondition: For any i, j such that 1 \\leq i < j \\leq N, A_i B_i = A_j B_j holds.\n\nFind the minimum possible value of B_1 + ... + B_N for such B_1,...,B_N.\n\nSince the answer can be enormous, print the sum modulo (10^9 +7).\n\nConstraints\n\n* 1 \\leq N \\leq 10^4\n* 1 \\leq A_i \\leq 10^6\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 ... A_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["1<=N<=10^4", "1<=A_i<=10^6"]}}
{"name": "p02846 Sumitomo Mitsui Trust Bank Programming Contest 2019 - Interval Running", "description": "Takahashi and Aoki are training for long-distance races in an infinitely long straight course running from west to east.\n\nThey start simultaneously at the same point and moves as follows towards the east:\n\n* Takahashi runs A_1 meters per minute for the first T_1 minutes, then runs at A_2 meters per minute for the subsequent T_2 minutes, and alternates between these two modes forever.\n* Aoki runs B_1 meters per minute for the first T_1 minutes, then runs at B_2 meters per minute for the subsequent T_2 minutes, and alternates between these two modes forever.\n\n\n\nHow many times will Takahashi and Aoki meet each other, that is, come to the same point? We do not count the start of the run. If they meet infinitely many times, report that fact.\n\nConstraints\n\n* 1 \\leq T_i \\leq 100000\n* 1 \\leq A_i \\leq 10^{10}\n* 1 \\leq B_i \\leq 10^{10}\n* A_1 \\neq B_1\n* A_2 \\neq B_2\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nT_1 T_2\nA_1 A_2\nB_1 B_2", "grammar": {"productions": ["<S>->T1 <s> T2 <n> A1 <s> B1 <n> A2 <s> B2"], "constraints": ["1<=T1,T2<=100000", "1<=A1,A2<=10^10", "1<=B1,B2<=10^10", "A1!=B1", "A2!=B2"]}}
{"name": "672_A. Summer Camp", "description": "Every year, hundreds of people come to summer camps, they learn new algorithms and solve hard problems.\n\nThis is your first year at summer camp, and you are asked to solve the following problem. All integers starting with 1 are written in one line. The prefix of these line is \"123456789101112131415...\". Your task is to print the n-th digit of this string (digits are numbered starting with 1.\n\nInput\n\nThe only line of the input contains a single integer n (1 \u2264 n \u2264 1000) \u2014 the position of the digit you need to print.", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=1000"]}}
{"name": "p02609 AIsing Programming Contest 2020 - Anything Goes to Zero", "description": "Let \\mathrm{popcount}(n) be the number of `1`s in the binary representation of n. For example, \\mathrm{popcount}(3) = 2, \\mathrm{popcount}(7) = 3, and \\mathrm{popcount}(0) = 0.\n\nLet f(n) be the number of times the following operation will be done when we repeat it until n becomes 0: \"replace n with the remainder when n is divided by \\mathrm{popcount}(n).\" (It can be proved that, under the constraints of this problem, n always becomes 0 after a finite number of operations.)\n\nFor example, when n=7, it becomes 0 after two operations, as follows:\n\n* \\mathrm{popcount}(7)=3, so we divide 7 by 3 and replace it with the remainder, 1.\n* \\mathrm{popcount}(1)=1, so we divide 1 by 1 and replace it with the remainder, 0.\n\n\n\nYou are given an integer X with N digits in binary. For each integer i such that 1 \\leq i \\leq N, let X_i be what X becomes when the i-th bit from the top is inverted. Find f(X_1), f(X_2), \\ldots, f(X_N).\n\nConstraints\n\n* 1 \\leq N \\leq 2 \\times 10^5\n* X is an integer with N digits in binary, possibly with leading zeros.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nX", "grammar": {"productions": ["<S>->[N] <n> [01]{N}"], "constraints": ["1<=N<=2*10^5"]}}
{"name": "71_A. Way Too Long Words", "description": "Sometimes some words like \"localization\" or \"internationalization\" are so long that writing them many times in one text is quite tiresome.\n\nLet's consider a word too long, if its length is strictly more than 10 characters. All too long words should be replaced with a special abbreviation.\n\nThis abbreviation is made like this: we write down the first and the last letter of a word and between them we write the number of letters between the first and the last letters. That number is in decimal system and doesn't contain any leading zeroes.\n\nThus, \"localization\" will be spelt as \"l10n\", and \"internationalization\u00bb will be spelt as \"i18n\".\n\nYou are suggested to automatize the process of changing the words with abbreviations. At that all too long words should be replaced by the abbreviation and the words that are not too long should not undergo any changes.\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 100). Each of the following n lines contains one word. All the words consist of lowercase Latin letters and possess the lengths of from 1 to 100 characters.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> [a-z]{1,100}", "<T_1>->[a-z]{1,100}"], "constraints": ["1<=n<=100"]}}
{"name": "p03408 AtCoder Beginner Contest 091 - Two Colors Card Game", "description": "Takahashi has N blue cards and M red cards. A string is written on each card. The string written on the i-th blue card is s_i, and the string written on the i-th red card is t_i.\n\nTakahashi will now announce a string, and then check every card. Each time he finds a blue card with the string announced by him, he will earn 1 yen (the currency of Japan); each time he finds a red card with that string, he will lose 1 yen.\n\nHere, we only consider the case where the string announced by Takahashi and the string on the card are exactly the same. For example, if he announces `atcoder`, he will not earn money even if there are blue cards with `atcoderr`, `atcode`, `btcoder`, and so on. (On the other hand, he will not lose money even if there are red cards with such strings, either.)\n\nAt most how much can he earn on balance?\n\nNote that the same string may be written on multiple cards.\n\nConstraints\n\n* N and M are integers.\n* 1 \\leq N, M \\leq 100\n* s_1, s_2, ..., s_N, t_1, t_2, ..., t_M are all strings of lengths between 1 and 10 (inclusive) consisting of lowercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\ns_1\ns_2\n:\ns_N\nM\nt_1\nt_2\n:\nt_M", "grammar": {"productions": ["<S>->[N] <n> <T_N> <n> [M] <n> <L_M>", "<T_i>-><T_i-1> <n> [a-z]{1,10}", "<T_1>->[a-z]{1,10}", "<L_i>-><L_i-1> <n> [a-z]{1,10}", "<L_1>->[a-z]{1,10}"], "constraints": ["1<=N<=100", "1<=M<=100"]}}
{"name": "1176_B. Merge it!", "description": "You are given an array a consisting of n integers a_1, a_2, ... , a_n.\n\nIn one operation you can choose two elements of the array and replace them with the element equal to their sum (it does not matter where you insert the new element). For example, from the array [2, 1, 4] you can obtain the following arrays: [3, 4], [1, 6] and [2, 5].\n\nYour task is to find the maximum possible number of elements divisible by 3 that are in the array after performing this operation an arbitrary (possibly, zero) number of times.\n\nYou have to answer t independent queries.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 the number of queries.\n\nThe first line of each query contains one integer n (1 \u2264 n \u2264 100).\n\nThe second line of each query contains n integers a_1, a_2, ... , a_n (1 \u2264 a_i \u2264 10^9).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=1000", "1<=n<=100", "1<=a_i<=10^9"]}}
{"name": "672_B. Different is Good", "description": "A wise man told Kerem \"Different is good\" once, so Kerem wants all things in his life to be different. \n\nKerem recently got a string s consisting of lowercase English letters. Since Kerem likes it when things are different, he wants all substrings of his string s to be distinct. Substring is a string formed by some number of consecutive characters of the string. For example, string \"aba\" has substrings \"\" (empty substring), \"a\", \"b\", \"a\", \"ab\", \"ba\", \"aba\".\n\nIf string s has at least two equal substrings then Kerem will change characters at some positions to some other lowercase English letters. Changing characters is a very tiring job, so Kerem want to perform as few changes as possible.\n\nYour task is to find the minimum number of changes needed to make all the substrings of the given string distinct, or determine that it is impossible.\n\nInput\n\nThe first line of the input contains an integer n (1 \u2264 n \u2264 100 000) \u2014 the length of the string s.\n\nThe second line contains the string s of length n consisting of only lowercase English letters.", "grammar": {"productions": ["<S>->[n] <n> [a-z]{n}"], "constraints": ["1<=n<=100000"]}}
{"name": "1029_B. Creating the Contest", "description": "You are given a problemset consisting of n problems. The difficulty of the i-th problem is a_i. It is guaranteed that all difficulties are distinct and are given in the increasing order.\n\nYou have to assemble the contest which consists of some problems of the given problemset. In other words, the contest you have to assemble should be a subset of problems (not necessary consecutive) of the given problemset. There is only one condition that should be satisfied: for each problem but the hardest one (the problem with the maximum difficulty) there should be a problem with the difficulty greater than the difficulty of this problem but not greater than twice the difficulty of this problem. In other words, let a_{i_1}, a_{i_2}, ..., a_{i_p} be the difficulties of the selected problems in increasing order. Then for each j from 1 to p-1 a_{i_{j + 1}} \u2264 a_{i_j} \u22c5 2 should hold. It means that the contest consisting of only one problem is always valid.\n\nAmong all contests satisfying the condition above you have to assemble one with the maximum number of problems. Your task is to find this number of problems.\n\nInput\n\nThe first line of the input contains one integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of problems in the problemset.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9) \u2014 difficulties of the problems. It is guaranteed that difficulties of the problems are distinct and are given in the increasing order.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=2*10^5", "1<=a_i<=10^9"]}}
{"name": "p02761 AtCoder Beginner Contest 157 - Guess The Number", "description": "If there is an integer not less than 0 satisfying the following conditions, print the smallest such integer; otherwise, print `-1`.\n\n* The integer has exactly N digits in base ten. (We assume 0 to be a 1-digit integer. For other integers, leading zeros are not allowed.)\n* The s_i-th digit from the left is c_i. \\left(i = 1, 2, \\cdots, M\\right)\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 3\n* 0 \\leq M \\leq 5\n* 1 \\leq s_i \\leq N\n* 0 \\leq c_i \\leq 9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\ns_1 c_1\n\\vdots\ns_M c_M", "grammar": {"productions": ["<S>->N <s> [M] <n> <T_M>", "<T_i>-><T_i-1> <n> S_i <s> C_i", "<T_1>->S_1 <s> C_1", "<T_0>->\u03b5"], "constraints": ["1<=N<=3", "0<=M<=5", "1<=S_i<=N", "0<=C_i<=9"]}}
{"name": "p02685 AtCoder Beginner Contest 167 - Colorful Blocks", "description": "There are N blocks arranged in a row. Let us paint these blocks.\n\nWe will consider two ways to paint the blocks different if and only if there is a block painted in different colors in those two ways.\n\nFind the number of ways to paint the blocks under the following conditions:\n\n* For each block, use one of the M colors, Color 1 through Color M, to paint it. It is not mandatory to use all the colors.\n* There may be at most K pairs of adjacent blocks that are painted in the same color.\n\n\n\nSince the count may be enormous, print it modulo 998244353.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N, M \\leq 2 \\times 10^5\n* 0 \\leq K \\leq N - 1\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M K", "grammar": {"productions": ["<S>->N <s> M <s> K"], "constraints": ["1<=N,M<=2*10^5", "0<=K<=N-1"]}}
{"name": "p02792 AtCoder Beginner Contest 152 - Handstand 2", "description": "Given is a positive integer N.\nFind the number of pairs (A, B) of positive integers not greater than N that satisfy the following condition:\n\n* When A and B are written in base ten without leading zeros, the last digit of A is equal to the first digit of B, and the first digit of A is equal to the last digit of B.\n\nConstraints\n\n* 1 \\leq N \\leq 2 \\times 10^5\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["1<=N<=2*10^5"]}}
{"name": "p03250 AtCoder Beginner Contest 110 - Maximize the Formula", "description": "You have decided to give an allowance to your child depending on the outcome of the game that he will play now.\n\nThe game is played as follows:\n\n* There are three \"integer panels\", each with a digit between 1 and 9 (inclusive) printed on it, and one \"operator panel\" with a `+` printed on it.\n* The player should construct a formula of the form X + Y, by arranging the four panels from left to right. (The operator panel should not be placed at either end of the formula.)\n* Then, the amount of the allowance will be equal to the resulting value of the formula.\n\n\n\nGiven the values A, B and C printed on the integer panels used in the game, find the maximum possible amount of the allowance.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq A, B, C \\leq 9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B C", "grammar": {"productions": ["<S>->A <s> B <s> C"], "constraints": ["1<=A<=9", "1<=B<=9", "1<=C<=9"]}}
{"name": "p03037 AtCoder Beginner Contest 127 - Prison", "description": "We have N ID cards, and there are M gates.\n\nWe can pass the i-th gate if we have one of the following ID cards: the L_i-th, (L_i+1)-th, ..., and R_i-th ID cards.\n\nHow many of the ID cards allow us to pass all the gates alone?\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 10^5\n* 1 \\leq M \\leq 10^5\n* 1 \\leq L_i \\leq R_i \\leq N\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nL_1 R_1\nL_2 R_2\n\\vdots\nL_M R_M", "grammar": {"productions": ["<S>->N <s> [M] <n> <T_M>", "<T_i>-><T_i-1> <n> L_i <s> R_i", "<T_1>->L_1 <s> R_1"], "constraints": ["1<=N<=10^5", "1<=M<=10^5", "1<=L_i<=R_i<=N"]}}
{"name": "p03060 AtCoder Beginner Contest 125 - Resale", "description": "There are N gems. The value of the i-th gem is V_i.\n\nYou will choose some of these gems, possibly all or none, and get them.\n\nHowever, you need to pay a cost of C_i to get the i-th gem.\n\nLet X be the sum of the values of the gems obtained, and Y be the sum of the costs paid.\n\nFind the maximum possible value of X-Y.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 20\n* 1 \\leq C_i, V_i \\leq 50\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nV_1 V_2 ... V_N\nC_1 C_2 ... C_N", "grammar": {"productions": ["<S>->[N] <n> <T_N> <n> <L_N>", "<T_i>-><T_i-1> <s> V_i", "<T_1>->V_1", "<L_i>-><L_i-1> <s> C_i", "<L_1>->C_1"], "constraints": ["1<=N<=20", "1<=C_i<=50", "1<=V_i<=50"]}}
{"name": "118_A. String Task", "description": "Petya started to attend programming lessons. On the first lesson his task was to write a simple program. The program was supposed to do the following: in the given string, consisting if uppercase and lowercase Latin letters, it: \n\n  * deletes all the vowels, \n  * inserts a character \".\" before each consonant, \n  * replaces all uppercase consonants with corresponding lowercase ones. \n\n\n\nVowels are letters \"A\", \"O\", \"Y\", \"E\", \"U\", \"I\", and the rest are consonants. The program's input is exactly one string, it should return the output as a single string, resulting after the program's processing the initial string.\n\nHelp Petya cope with this easy task.\n\nInput\n\nThe first line represents input string of Petya's program. This string only consists of uppercase and lowercase Latin letters and its length is from 1 to 100, inclusive.", "grammar": {"productions": ["<S>->[a-zA-Z]{S}"], "constraints": ["1<=S<=100"]}}
{"name": "p02970 AtCoder Beginner Contest 134 - Golden Apple", "description": "There are N apple trees in a row. People say that one of them will bear golden apples.\n\nWe want to deploy some number of inspectors so that each of these trees will be inspected.\n\nEach inspector will be deployed under one of the trees. For convenience, we will assign numbers from 1 through N to the trees. An inspector deployed under the i-th tree (1 \\leq i \\leq N) will inspect the trees with numbers between i-D and i+D (inclusive).\n\nFind the minimum number of inspectors that we need to deploy to achieve the objective.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 20\n* 1 \\leq D \\leq 20\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN D", "grammar": {"productions": ["<S>->N <s> D"], "constraints": ["1<=N<=20", "1<=D<=20"]}}
{"name": "34_B. Sale", "description": "Once Bob got to a sale of old TV sets. There were n TV sets at that sale. TV set with index i costs ai bellars. Some TV sets have a negative price \u2014 their owners are ready to pay Bob if he buys their useless apparatus. Bob can \u00abbuy\u00bb any TV sets he wants. Though he's very strong, Bob can carry at most m TV sets, and he has no desire to go to the sale for the second time. Please, help Bob find out the maximum sum of money that he can earn.\n\nInput\n\nThe first line contains two space-separated integers n and m (1 \u2264 m \u2264 n \u2264 100) \u2014 amount of TV sets at the sale, and amount of TV sets that Bob can carry. The following line contains n space-separated integers ai ( - 1000 \u2264 ai \u2264 1000) \u2014 prices of the TV sets.", "grammar": {"productions": ["<S>->[n] <s> m <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=m<=n<=100", "-1000<=a_i<=1000"]}}
{"name": "1343_B. Balanced Array", "description": "You are given a positive integer n, it is guaranteed that n is even (i.e. divisible by 2).\n\nYou want to construct the array a of length n such that: \n\n  * The first n/2 elements of a are even (divisible by 2); \n  * the second n/2 elements of a are odd (not divisible by 2); \n  * all elements of a are distinct and positive; \n  * the sum of the first half equals to the sum of the second half (\u2211_{i=1}^{n/2} a_i = \u2211_{i=n/2 + 1}^{n} a_i). \n\n\n\nIf there are multiple answers, you can print any. It is not guaranteed that the answer exists.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains one integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the length of the array. It is guaranteed that that n is even (i.e. divisible by 2).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5 (\u2211 n \u2264 2 \u22c5 10^5).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n", "<T_1>->n"], "constraints": ["1<=t<=10^4", "2<=n<=2*10^5", "n is even", "sum(n)<=10^5"]}}
{"name": "p03523 CODE FESTIVAL 2017 Final - AKIBA", "description": "You are given a string S.\n\nTakahashi can insert the character `A` at any position in this string any number of times.\n\nCan he change S into `AKIHABARA`?\n\nConstraints\n\n* 1 \\leq |S| \\leq 50\n* S consists of uppercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>->[A-Z]{1,50}"], "constraints": []}}
{"name": "p02855 DISCO Presents Discovery Channel Code Contest 2020 Qual - Strawberry Cakes", "description": "Chokudai made a rectangular cake for contestants in DDCC 2020 Finals.\n\nThe cake has H - 1 horizontal notches and W - 1 vertical notches, which divide the cake into H \\times W equal sections. K of these sections has a strawberry on top of each of them.\n\nThe positions of the strawberries are given to you as H \\times W characters s_{i, j} (1 \\leq i \\leq H, 1 \\leq j \\leq W). If s_{i, j} is `#`, the section at the i-th row from the top and the j-th column from the left contains a strawberry; if s_{i, j} is `.`, the section does not contain one. There are exactly K occurrences of `#`s.\n\nTakahashi wants to cut this cake into K pieces and serve them to the contestants. Each of these pieces must satisfy the following conditions:\n\n* Has a rectangular shape.\n* Contains exactly one strawberry.\n\n\n\nOne possible way to cut the cake is shown below:\n\n\n\nFind one way to cut the cake and satisfy the condition. We can show that this is always possible, regardless of the number and positions of the strawberries.\n\nConstraints\n\n* 1 \\leq H \\leq 300\n* 1 \\leq W \\leq 300\n* 1 \\leq K \\leq H \\times W\n* s_{i, j} is `#` or `.`.\n* There are exactly K occurrences of `#` in s.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nH W K\ns_{1, 1} s_{1, 2} \\cdots s_{1, W}\ns_{2, 1} s_{2, 2} \\cdots s_{2, W}\n:\ns_{H, 1} s_{H, 2} \\cdots s_{H, W}", "grammar": {"productions": ["<S>->[H] <s> [W] <s> K <n> <T_H,W>", "<T_i,j>-><T_i,j-1> #|.", "<T_i,1>-><T_i-1,W> #|."], "constraints": ["1<=H<=300", "1<=W<=300", "1<=K<=H*W"]}}
{"name": "1326_D1. Prefix-Suffix Palindrome (Easy version)", "description": "This is the easy version of the problem. The difference is the constraint on the sum of lengths of strings and the number of test cases. You can make hacks only if you solve all versions of this task.\n\nYou are given a string s, consisting of lowercase English letters. Find the longest string, t, which satisfies the following conditions: \n\n  * The length of t does not exceed the length of s. \n  * t is a palindrome. \n  * There exists two strings a and b (possibly empty), such that t = a + b ( \"+\" represents concatenation), and a is prefix of s while b is suffix of s. \n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 1000), the number of test cases. The next t lines each describe a test case.\n\nEach test case is a non-empty string s, consisting of lowercase English letters.\n\nIt is guaranteed that the sum of lengths of strings over all test cases does not exceed 5000.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [a-z]{1,5000}", "<T_1>->[a-z]{1,5000}"], "constraints": ["1<=t<=1000"]}}
{"name": "798_A. Mike and palindrome", "description": "Mike has a string s consisting of only lowercase English letters. He wants to change exactly one character from the string so that the resulting one is a palindrome. \n\nA palindrome is a string that reads the same backward as forward, for example strings \"z\", \"aaa\", \"aba\", \"abccba\" are palindromes, but strings \"codeforces\", \"reality\", \"ab\" are not.\n\nInput\n\nThe first and single line contains string s (1 \u2264 |s| \u2264 15).", "grammar": {"productions": ["<S>->[a-z]{1,15}"], "constraints": [""]}}
{"name": "271_A. Beautiful Year", "description": "It seems like the year of 2013 came only yesterday. Do you know a curious fact? The year of 2013 is the first year after the old 1987 with only distinct digits.\n\nNow you are suggested to solve the following problem: given a year number, find the minimum year number which is strictly larger than the given one and has only distinct digits.\n\nInput\n\nThe single line contains integer y (1000 \u2264 y \u2264 9000) \u2014 the year number.", "grammar": {"productions": ["<S>->Y"], "constraints": ["1000<=Y<=9000"]}}
{"name": "1348_B. Phoenix and Beauty", "description": "Phoenix loves beautiful arrays. An array is beautiful if all its subarrays of length k have the same sum. A subarray of an array is any sequence of consecutive elements.\n\nPhoenix currently has an array a of length n. He wants to insert some number of integers, possibly zero, into his array such that it becomes beautiful. The inserted integers must be between 1 and n inclusive. Integers may be inserted anywhere (even before the first or after the last element), and he is not trying to minimize the number of inserted integers.\n\nInput\n\nThe input consists of multiple test cases. The first line contains an integer t (1 \u2264 t \u2264 50) \u2014 the number of test cases.\n\nThe first line of each test case contains two integers n and k (1 \u2264 k \u2264 n \u2264 100).\n\nThe second line of each test case contains n space-separated integers (1 \u2264 a_i \u2264 n) \u2014 the array that Phoenix currently has. This array may or may not be already beautiful.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <s> k <n> <L_n>", "<T_1>->[n] <s> k <n> <L_n>", "<L_i>-><L_i-1> <s> a_1", "<L_1>->a_1"], "constraints": ["1<=t<=50", "1<=k<=n<=100", "1<=a_i<=n"]}}
{"name": "p03776 AtCoder Beginner Contest 057 - Maximum Average Sets", "description": "You are given N items.\nThe value of the i-th item (1 \\leq i \\leq N) is v_i.\nYour have to select at least A and at most B of these items.\nUnder this condition, find the maximum possible arithmetic mean of the values of selected items.\nAdditionally, find the number of ways to select items so that the mean of the values of selected items is maximized.\n\nConstraints\n\n* 1 \\leq N \\leq 50\n* 1 \\leq A,B \\leq N\n* 1 \\leq v_i \\leq 10^{15}\n* Each v_i is an integer.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN A B\nv_1\nv_2\n...\nv_N", "grammar": {"productions": ["<S>->[N] <s> A <s> B <n> <T_N>", "<T_i>-><T_i-1> <s> v_i", "<T_1>->v_1"], "constraints": ["1<=N<=50", "1<=A,B<=N", "1<=v_i<=10^15"]}}
{"name": "p03657 AtCoder Beginner Contest 067 - Sharing Cookies", "description": "Snuke is giving cookies to his three goats.\n\nHe has two cookie tins. One contains A cookies, and the other contains B cookies. He can thus give A cookies, B cookies or A+B cookies to his goats (he cannot open the tins).\n\nYour task is to determine whether Snuke can give cookies to his three goats so that each of them can have the same number of cookies.\n\nConstraints\n\n* 1 \\leq A,B \\leq 100\n* Both A and B are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B", "grammar": {"productions": ["<S>->A <s> B"], "constraints": ["1<=A<=100", "1<=B<=100"]}}
{"name": "688_A. Opponents", "description": "Arya has n opponents in the school. Each day he will fight with all opponents who are present this day. His opponents have some fighting plan that guarantees they will win, but implementing this plan requires presence of them all. That means if one day at least one of Arya's opponents is absent at the school, then Arya will beat all present opponents. Otherwise, if all opponents are present, then they will beat Arya.\n\nFor each opponent Arya knows his schedule \u2014 whether or not he is going to present on each particular day. Tell him the maximum number of consecutive days that he will beat all present opponents.\n\nNote, that if some day there are no opponents present, Arya still considers he beats all the present opponents.\n\nInput\n\nThe first line of the input contains two integers n and d (1 \u2264 n, d \u2264 100) \u2014 the number of opponents and the number of days, respectively.\n\nThe i-th of the following d lines contains a string of length n consisting of characters '0' and '1'. The j-th character of this string is '0' if the j-th opponent is going to be absent on the i-th day.", "grammar": {"productions": ["<S>->[n] <s> [d] <n> <T_d>", "<T_i>-><T_i-1> <n> [01]{n}", "<T_1>->[01]{n}"], "constraints": ["1<=n,d<=100"]}}
{"name": "1353_C. Board Moves", "description": "You are given a board of size n \u00d7 n, where n is odd (not divisible by 2). Initially, each cell of the board contains one figure.\n\nIn one move, you can select exactly one figure presented in some cell and move it to one of the cells sharing a side or a corner with the current cell, i.e. from the cell (i, j) you can move the figure to cells: \n\n  * (i - 1, j - 1); \n  * (i - 1, j); \n  * (i - 1, j + 1); \n  * (i, j - 1); \n  * (i, j + 1); \n  * (i + 1, j - 1); \n  * (i + 1, j); \n  * (i + 1, j + 1); \n\n\n\nOf course, you can not move figures to cells out of the board. It is allowed that after a move there will be several figures in one cell.\n\nYour task is to find the minimum number of moves needed to get all the figures into one cell (i.e. n^2-1 cells should contain 0 figures and one cell should contain n^2 figures).\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 200) \u2014 the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains one integer n (1 \u2264 n < 5 \u22c5 10^5) \u2014 the size of the board. It is guaranteed that n is odd (not divisible by 2).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 5 \u22c5 10^5 (\u2211 n \u2264 5 \u22c5 10^5).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n", "<T_1>->n"], "constraints": ["1<=t<=200", "1<=n<=5*10^5", "\u2211n<=5*10^5"]}}
{"name": "p02700 AtCoder Beginner Contest 164 - Battle", "description": "Takahashi and Aoki will have a battle using their monsters.\n\nThe health and strength of Takahashi's monster are A and B, respectively, and those of Aoki's monster are C and D, respectively.\n\nThe two monsters will take turns attacking, in the order Takahashi's, Aoki's, Takahashi's, Aoki's, ... Here, an attack decreases the opponent's health by the value equal to the attacker's strength. The monsters keep attacking until the health of one monster becomes 0 or below. The person with the monster whose health becomes 0 or below loses, and the other person wins.\n\nIf Takahashi will win, print `Yes`; if he will lose, print `No`.\n\nConstraints\n\n* 1 \\leq A,B,C,D \\leq 100\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B C D", "grammar": {"productions": ["<S>->A <s> B <s> C <s> D"], "constraints": ["1<=A,B,C,D<=100"]}}
{"name": "677_A. Vanya and Fence", "description": "Vanya and his friends are walking along the fence of height h and they do not want the guard to notice them. In order to achieve this the height of each of the friends should not exceed h. If the height of some person is greater than h he can bend down and then he surely won't be noticed by the guard. The height of the i-th person is equal to ai.\n\nConsider the width of the person walking as usual to be equal to 1, while the width of the bent person is equal to 2. Friends want to talk to each other while walking, so they would like to walk in a single row. What is the minimum width of the road, such that friends can walk in a row and remain unattended by the guard?\n\nInput\n\nThe first line of the input contains two integers n and h (1 \u2264 n \u2264 1000, 1 \u2264 h \u2264 1000) \u2014 the number of friends and the height of the fence, respectively.\n\nThe second line contains n integers ai (1 \u2264 ai \u2264 2h), the i-th of them is equal to the height of the i-th person.", "grammar": {"productions": ["<S>->[N] <s> [H] <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["1<=N<=1000", "1<=H<=1000", "1<=A_i<=2H"]}}
{"name": "1183_C. Computer Game", "description": "Vova is playing a computer game. There are in total n turns in the game and Vova really wants to play all of them. The initial charge of his laptop battery (i.e. the charge before the start of the game) is k.\n\nDuring each turn Vova can choose what to do: \n\n  * If the current charge of his laptop battery is strictly greater than a, Vova can just play, and then the charge of his laptop battery will decrease by a; \n  * if the current charge of his laptop battery is strictly greater than b (b<a), Vova can play and charge his laptop, and then the charge of his laptop battery will decrease by b; \n  * if the current charge of his laptop battery is less than or equal to a and b at the same time then Vova cannot do anything and loses the game. \n\n\n\nRegardless of Vova's turns the charge of the laptop battery is always decreases.\n\nVova wants to complete the game (Vova can complete the game if after each of n turns the charge of the laptop battery is strictly greater than 0). Vova has to play exactly n turns. Among all possible ways to complete the game, Vova wants to choose the one where the number of turns when he just plays (first type turn) is the maximum possible. It is possible that Vova cannot complete the game at all.\n\nYour task is to find out the maximum possible number of turns Vova can just play (make the first type turn) or report that Vova cannot complete the game.\n\nYou have to answer q independent queries.\n\nInput\n\nThe first line of the input contains one integer q (1 \u2264 q \u2264 10^5) \u2014 the number of queries. Each query is presented by a single line.\n\nThe only line of the query contains four integers k, n, a and b (1 \u2264 k, n \u2264 10^9, 1 \u2264 b < a \u2264 10^9) \u2014 the initial charge of Vova's laptop battery, the number of turns in the game and values a and b, correspondingly.", "grammar": {"productions": ["<S>->[q] <n> <T_q>", "<T_i>-><T_i-1> <n> k <s> n <s> a <s> b", "<T_1>->k <s> n <s> a <s> b"], "constraints": ["1<=q<=10^5", "1<=k<=10^9", "1<=n<=10^9", "1<=b<a<=10^9"]}}
{"name": "p03328 AtCoder Beginner Contest 099 - Stone Monument", "description": "In some village, there are 999 towers that are 1,(1+2),(1+2+3),...,(1+2+3+...+999) meters high from west to east, at intervals of 1 meter.\n\nIt had been snowing for a while before it finally stopped. For some two adjacent towers located 1 meter apart, we measured the lengths of the parts of those towers that are not covered with snow, and the results are a meters for the west tower, and b meters for the east tower.\n\nAssuming that the depth of snow cover and the altitude are the same everywhere in the village, find the amount of the snow cover.\n\nAssume also that the depth of the snow cover is always at least 1 meter.\n\nConstraints\n\n* 1 \\leq a < b < 499500(=1+2+3+...+999)\n* All values in input are integers.\n* There is no input that contradicts the assumption.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\na b", "grammar": {"productions": ["<S>->a <s> b"], "constraints": ["1<=a<b<499500"]}}
{"name": "p03110 AtCoder Beginner Contest 119 - Digital Gifts", "description": "Takahashi received otoshidama (New Year's money gifts) from N of his relatives.\n\nYou are given N values x_1, x_2, ..., x_N and N strings u_1, u_2, ..., u_N as input. Each string u_i is either `JPY` or `BTC`, and x_i and u_i represent the content of the otoshidama from the i-th relative.\n\nFor example, if x_1 = `10000` and u_1 = `JPY`, the otoshidama from the first relative is 10000 Japanese yen; if x_2 = `0.10000000` and u_2 = `BTC`, the otoshidama from the second relative is 0.1 bitcoins.\n\nIf we convert the bitcoins into yen at the rate of 380000.0 JPY per 1.0 BTC, how much are the gifts worth in total?\n\nConstraints\n\n* 2 \\leq N \\leq 10\n* u_i = `JPY` or `BTC`.\n* If u_i = `JPY`, x_i is an integer such that 1 \\leq x_i \\leq 10^8.\n* If u_i = `BTC`, x_i is a decimal with 8 decimal digits, such that 0.00000001 \\leq x_i \\leq 100.00000000.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nx_1 u_1\nx_2 u_2\n:\nx_N u_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> x_i <s> u_i", "<T_1>->x_1 <s> u_1", "u_i->JPY|BTC"], "constraints": ["2<=N<=10", "1<=x_i<=10^8", "0.00000001<=x_i<=100.0000000"]}}
{"name": "822_A. I'm bored with life", "description": "Holidays have finished. Thanks to the help of the hacker Leha, Noora managed to enter the university of her dreams which is located in a town Pavlopolis. It's well known that universities provide students with dormitory for the period of university studies. Consequently Noora had to leave Vi\u010dkopolis and move to Pavlopolis. Thus Leha was left completely alone in a quiet town Vi\u010dkopolis. He almost even fell into a depression from boredom!\n\nLeha came up with a task for himself to relax a little. He chooses two integers A and B and then calculates the greatest common divisor of integers \"A factorial\" and \"B factorial\". Formally the hacker wants to find out GCD(A!, B!). It's well known that the factorial of an integer x is a product of all positive integers less than or equal to x. Thus x! = 1\u00b72\u00b73\u00b7...\u00b7(x - 1)\u00b7x. For example 4! = 1\u00b72\u00b73\u00b74 = 24. Recall that GCD(x, y) is the largest positive integer q that divides (without a remainder) both x and y.\n\nLeha has learned how to solve this task very effective. You are able to cope with it not worse, aren't you?\n\nInput\n\nThe first and single line contains two integers A and B (1 \u2264 A, B \u2264 10^9, min(A, B) \u2264 12).", "grammar": {"productions": ["<S>->A <s> B"], "constraints": ["1<=A,B<=10^9", "min(A,B)<=12"]}}
{"name": "1093_A. Dice Rolling", "description": "Mishka got a six-faced dice. It has integer numbers from 2 to 7 written on its faces (all numbers on faces are different, so this is an almost usual dice).\n\nMishka wants to get exactly x points by rolling his dice. The number of points is just a sum of numbers written at the topmost face of the dice for all the rolls Mishka makes.\n\nMishka doesn't really care about the number of rolls, so he just wants to know any number of rolls he can make to be able to get exactly x points for them. Mishka is very lucky, so if the probability to get x points with chosen number of rolls is non-zero, he will be able to roll the dice in such a way. Your task is to print this number. It is guaranteed that at least one answer exists.\n\nMishka is also very curious about different number of points to score so you have to answer t independent queries.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of queries.\n\nEach of the next t lines contains one integer each. The i-th line contains one integer x_i (2 \u2264 x_i \u2264 100) \u2014 the number of points Mishka wants to get.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> x_i", "<T_1>->x_1"], "constraints": ["1<=t<=100", "2<=x_i<=100"]}}
{"name": "476_A. Dreamoon and Stairs", "description": "Dreamoon wants to climb up a stair of n steps. He can climb 1 or 2 steps at each move. Dreamoon wants the number of moves to be a multiple of an integer m. \n\nWhat is the minimal number of moves making him climb to the top of the stairs that satisfies his condition?\n\nInput\n\nThe single line contains two space separated integers n, m (0 < n \u2264 10000, 1 < m \u2264 10).", "grammar": {"productions": ["<S>->n <s> m"], "constraints": ["0<n<=10000", "1<m<=10"]}}
{"name": "p03286 AtCoder Beginner Contest 105 - Base -2 Number", "description": "Given an integer N, find the base -2 representation of N.\n\nHere, S is the base -2 representation of N when the following are all satisfied:\n\n* S is a string consisting of `0` and `1`.\n* Unless S = `0`, the initial character of S is `1`.\n* Let S = S_k S_{k-1} ... S_0, then S_0 \\times (-2)^0 + S_1 \\times (-2)^1 + ... + S_k \\times (-2)^k = N.\n\n\n\nIt can be proved that, for any integer M, the base -2 representation of M is uniquely determined.\n\nConstraints\n\n* Every value in input is integer.\n* -10^9 \\leq N \\leq 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["-10^9<=N<=10^9"]}}
{"name": "1392_C. Omkar and Waterslide", "description": "Omkar is building a waterslide in his water park, and he needs your help to ensure that he does it as efficiently as possible.\n\nOmkar currently has n supports arranged in a line, the i-th of which has height a_i. Omkar wants to build his waterslide from the right to the left, so his supports must be nondecreasing in height in order to support the waterslide. In 1 operation, Omkar can do the following: take any contiguous subsegment of supports which is nondecreasing by heights and add 1 to each of their heights. \n\nHelp Omkar find the minimum number of operations he needs to perform to make his supports able to support his waterslide!\n\nAn array b is a subsegment of an array c if b can be obtained from c by deletion of several (possibly zero or all) elements from the beginning and several (possibly zero or all) elements from the end.\n\nAn array b_1, b_2, ..., b_n is called nondecreasing if b_i\u2264 b_{i+1} for every i from 1 to n-1.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains an integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of supports Omkar has.\n\nThe second line of each test case contains n integers a_{1},a_{2},...,a_{n} (0 \u2264 a_{i} \u2264 10^9) \u2014 the heights of the supports.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=100", "1<=n<=2*10^5", "0<=a_i<=10^9"]}}
{"name": "1030_C. Vasya and Golden Ticket", "description": "Recently Vasya found a golden ticket \u2014 a sequence which consists of n digits a_1a_2... a_n. Vasya considers a ticket to be lucky if it can be divided into two or more non-intersecting segments with equal sums. For example, ticket 350178 is lucky since it can be divided into three segments 350, 17 and 8: 3+5+0=1+7=8. Note that each digit of sequence should belong to exactly one segment.\n\nHelp Vasya! Tell him if the golden ticket he found is lucky or not.\n\nInput\n\nThe first line contains one integer n (2 \u2264 n \u2264 100) \u2014 the number of digits in the ticket.\n\nThe second line contains n digits a_1 a_2 ... a_n (0 \u2264 a_i \u2264 9) \u2014 the golden ticket. Digits are printed without spaces.", "grammar": {"productions": ["<S>->[n] <n> [0-9]{n}"], "constraints": ["2<=n<=100", "0<=a_i<=9"]}}
{"name": "1263_A. Sweet Problem", "description": "You have three piles of candies: red, green and blue candies:\n\n  * the first pile contains only red candies and there are r candies in it, \n  * the second pile contains only green candies and there are g candies in it, \n  * the third pile contains only blue candies and there are b candies in it. \n\n\n\nEach day Tanya eats exactly two candies of different colors. She is free to choose the colors of eaten candies: the only restriction that she can't eat two candies of the same color in a day.\n\nFind the maximal number of days Tanya can eat candies? Each day she needs to eat exactly two candies.\n\nInput\n\nThe first line contains integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases in the input. Then t test cases follow.\n\nEach test case is given as a separate line of the input. It contains three integers r, g and b (1 \u2264 r, g, b \u2264 10^8) \u2014 the number of red, green and blue candies, respectively.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> r <s> g <s> b", "<T_1>->r <s> g <s> b"], "constraints": ["1<=t<=1000", "1<=r<=10^8", "1<=g<=10^8", "1<=b<=10^8"]}}
{"name": "1307_A. Cow and Haybales", "description": "The USA Construction Operation (USACO) recently ordered Farmer John to arrange a row of n haybale piles on the farm. The i-th pile contains a_i haybales. \n\nHowever, Farmer John has just left for vacation, leaving Bessie all on her own. Every day, Bessie the naughty cow can choose to move one haybale in any pile to an adjacent pile. Formally, in one day she can choose any two indices i and j (1 \u2264 i, j \u2264 n) such that |i-j|=1 and a_i>0 and apply a_i = a_i - 1, a_j = a_j + 1. She may also decide to not do anything on some days because she is lazy.\n\nBessie wants to maximize the number of haybales in pile 1 (i.e. to maximize a_1), and she only has d days to do so before Farmer John returns. Help her find the maximum number of haybales that may be in pile 1 if she acts optimally!\n\nInput\n\nThe input consists of multiple test cases. The first line contains an integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Next 2t lines contain a description of test cases \u2014 two lines per test case.\n\nThe first line of each test case contains integers n and d (1 \u2264 n,d \u2264 100) \u2014 the number of haybale piles and the number of days, respectively. \n\nThe second line of each test case contains n integers a_1, a_2, \u2026, a_n (0 \u2264 a_i \u2264 100) \u2014 the number of haybales in each pile.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <s> d <n> <L_n>", "<T_1>->[n] <s> d <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=100", "1<=n<=100", "1<=d<=100", "0<=a_i<=100"]}}
{"name": "1399_B. Gifts Fixing", "description": "You have n gifts and you want to give all of them to children. Of course, you don't want to offend anyone, so all gifts should be equal between each other. The i-th gift consists of a_i candies and b_i oranges.\n\nDuring one move, you can choose some gift 1 \u2264 i \u2264 n and do one of the following operations:\n\n  * eat exactly one candy from this gift (decrease a_i by one); \n  * eat exactly one orange from this gift (decrease b_i by one); \n  * eat exactly one candy and exactly one orange from this gift (decrease both a_i and b_i by one). \n\n\n\nOf course, you can not eat a candy or orange if it's not present in the gift (so neither a_i nor b_i can become less than zero).\n\nAs said above, all gifts should be equal. This means that after some sequence of moves the following two conditions should be satisfied: a_1 = a_2 = ... = a_n and b_1 = b_2 = ... = b_n (and a_i equals b_i is not necessary).\n\nYour task is to find the minimum number of moves required to equalize all the given gifts.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (1 \u2264 n \u2264 50) \u2014 the number of gifts. The second line of the test case contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9), where a_i is the number of candies in the i-th gift. The third line of the test case contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^9), where b_i is the number of oranges in the i-th gift.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n> <n> <Z_n>", "<T_1>->[n] <n> <L_n> <n> <Z_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1", "<Z_i>-><Z_i-1> <s> b_i", "<Z_1>->b_1"], "constraints": ["1<=t<=1000", "1<=n<=50", "1<=a_i<=10^9", "1<=b_i<=10^9"]}}
{"name": "p03026 M-SOLUTIONS Programming Contest - Maximum Sum of Minimum", "description": "You are given a tree with N vertices 1,2,\\ldots,N, and positive integers c_1,c_2,\\ldots,c_N. The i-th edge in the tree (1 \\leq i \\leq N-1) connects Vertex a_i and Vertex b_i.\n\nWe will write a positive integer on each vertex in T and calculate our score as follows:\n\n* On each edge, write the smaller of the integers written on the two endpoints.\n* Let our score be the sum of the integers written on all the edges.\n\n\n\nFind the maximum possible score when we write each of c_1,c_2,\\ldots,c_N on one vertex in T, and show one way to achieve it. If an integer occurs multiple times in c_1,c_2,\\ldots,c_N, we must use it that number of times.\n\nConstraints\n\n* 1 \\leq N \\leq 10000\n* 1 \\leq a_i,b_i \\leq N\n* 1 \\leq c_i \\leq 10^5\n* The given graph is a tree.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 b_1\n:\na_{N-1} b_{N-1}\nc_1 \\ldots c_N", "grammar": {"productions": ["<S>->[N] <n> <T_N-1> <n> <L_N>", "<T_i>-><T_i-1> <n> a_i <s> b_i", "<T_1>->a_1 <s> b_1", "<L_i>-><L_i-1> <s> c_i", "<L_1>->c_1"], "constraints": ["1<=N<=1000", "1<=a_i<=N", "1<=b_i<=N", "1<=c_i<=10^5"]}}
{"name": "p03147 AtCoder Beginner Contest 116 - Grand Garden", "description": "In a flower bed, there are N flowers, numbered 1,2,......,N. Initially, the heights of all flowers are 0. You are given a sequence h=\\\\{h_1,h_2,h_3,......\\\\} as input. You would like to change the height of Flower k to h_k for all k (1 \\leq k \\leq N), by repeating the following \"watering\" operation:\n\n* Specify integers l and r. Increase the height of Flower x by 1 for all x such that l \\leq x \\leq r.\n\n\n\nFind the minimum number of watering operations required to satisfy the condition.\n\nConstraints\n\n* 1 \\leq N \\leq 100\n* 0 \\leq h_i \\leq 100\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nh_1 h_2 h_3 ...... h_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> h_i", "<T_1>->h_1"], "constraints": ["1<=N<=100", "0<=h_i<=100"]}}
{"name": "1371_B. Magical Calendar", "description": "A competitive eater, Alice is scheduling some practices for an eating contest on a magical calendar. The calendar is unusual because a week contains not necessarily 7 days!\n\nIn detail, she can choose any integer k which satisfies 1 \u2264 k \u2264 r, and set k days as the number of days in a week.\n\nAlice is going to paint some n consecutive days on this calendar. On this calendar, dates are written from the left cell to the right cell in a week. If a date reaches the last day of a week, the next day's cell is the leftmost cell in the next (under) row.\n\nShe wants to make all of the painted cells to be connected by side. It means, that for any two painted cells there should exist at least one sequence of painted cells, started in one of these cells, and ended in another, such that any two consecutive cells in this sequence are connected by side.\n\nAlice is considering the shape of the painted cells. Two shapes are the same if there exists a way to make them exactly overlapped using only parallel moves, parallel to the calendar's sides.\n\nFor example, in the picture, a week has 4 days and Alice paints 5 consecutive days. [1] and [2] are different shapes, but [1] and [3] are equal shapes.\n\n<image>\n\nAlice wants to know how many possible shapes exists if she set how many days a week has and choose consecutive n days and paints them in calendar started in one of the days of the week. As was said before, she considers only shapes, there all cells are connected by side.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Next t lines contain descriptions of test cases.\n\nFor each test case, the only line contains two integers n, r (1 \u2264 n \u2264 10^9, 1 \u2264 r \u2264 10^9).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n <s> r", "<T_1>->n <s> r"], "constraints": ["1<=t<=1000", "1<=n<=10^9", "1<=r<=10^9"]}}
{"name": "p02971 AtCoder Beginner Contest 134 - Exception Handling", "description": "You are given a sequence of length N: A_1, A_2, ..., A_N. For each integer i between 1 and N (inclusive), answer the following question:\n\n* Find the maximum value among the N-1 elements other than A_i in the sequence.\n\nConstraints\n\n* 2 \\leq N \\leq 200000\n* 1 \\leq A_i \\leq 200000\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1\n:\nA_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> A_i", "<T_1>->A_1"], "constraints": ["2<=N<=200000", "1<=A_i<=200000"]}}
{"name": "p03360 AtCoder Beginner Contest 096 - Maximum Sum", "description": "There are three positive integers A, B and C written on a blackboard. E869120 performs the following operation K times:\n\n* Choose one integer written on the blackboard and let the chosen integer be n. Replace the chosen integer with 2n.\n\n\n\nWhat is the largest possible sum of the integers written on the blackboard after K operations?\n\nConstraints\n\n* A, B and C are integers between 1 and 50 (inclusive).\n* K is an integer between 1 and 10 (inclusive).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B C\nK", "grammar": {"productions": ["<S>->A <s> B <s> C <n> K"], "constraints": ["1<=A<=50", "1<=B<=50", "1<=C<=50", "1<=K<=10"]}}
{"name": "p03287 AtCoder Beginner Contest 105 - Candy Distribution", "description": "There are N boxes arranged in a row from left to right. The i-th box from the left contains A_i candies.\n\nYou will take out the candies from some consecutive boxes and distribute them evenly to M children.\n\nSuch being the case, find the number of the pairs (l, r) that satisfy the following:\n\n* l and r are both integers and satisfy 1 \\leq l \\leq r \\leq N.\n* A_l + A_{l+1} + ... + A_r is a multiple of M.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 10^5\n* 2 \\leq M \\leq 10^9\n* 1 \\leq A_i \\leq 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nA_1 A_2 ... A_N", "grammar": {"productions": ["<S>->[N] <s> M <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["1<=N<=10^5", "2<=M<=10^9", "1<=A_i<=10^9"]}}
{"name": "1157_A. Reachable Numbers", "description": "Let's denote a function f(x) in such a way: we add 1 to x, then, while there is at least one trailing zero in the resulting number, we remove that zero. For example, \n\n  * f(599) = 6: 599 + 1 = 600 \u2192 60 \u2192 6; \n  * f(7) = 8: 7 + 1 = 8; \n  * f(9) = 1: 9 + 1 = 10 \u2192 1; \n  * f(10099) = 101: 10099 + 1 = 10100 \u2192 1010 \u2192 101. \n\n\n\nWe say that some number y is reachable from x if we can apply function f to x some (possibly zero) times so that we get y as a result. For example, 102 is reachable from 10098 because f(f(f(10098))) = f(f(10099)) = f(101) = 102; and any number is reachable from itself.\n\nYou are given a number n; your task is to count how many different numbers are reachable from n.\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 10^9).", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=10^9"]}}
{"name": "236_A. Boy or Girl", "description": "Those days, many boys use beautiful girls' photos as avatars in forums. So it is pretty hard to tell the gender of a user at the first glance. Last year, our hero went to a forum and had a nice chat with a beauty (he thought so). After that they talked very often and eventually they became a couple in the network. \n\nBut yesterday, he came to see \"her\" in the real world and found out \"she\" is actually a very strong man! Our hero is very sad and he is too tired to love again now. So he came up with a way to recognize users' genders by their user names.\n\nThis is his method: if the number of distinct characters in one's user name is odd, then he is a male, otherwise she is a female. You are given the string that denotes the user name, please help our hero to determine the gender of this user by his method.\n\nInput\n\nThe first line contains a non-empty string, that contains only lowercase English letters \u2014 the user name. This string contains at most 100 letters.", "grammar": {"productions": ["<S>->[a-z]{0,100}"], "constraints": []}}
{"name": "1380_A. Three Indices", "description": "You are given a permutation p_1, p_2, ..., p_n. Recall that sequence of n integers is called a permutation if it contains all integers from 1 to n exactly once.\n\nFind three indices i, j and k such that: \n\n  * 1 \u2264 i < j < k \u2264 n; \n  * p_i < p_j and p_j > p_k. \n\nOr say that there are no such indices.\n\nInput\n\nThe first line contains a single integer T (1 \u2264 T \u2264 200) \u2014 the number of test cases.\n\nNext 2T lines contain test cases \u2014 two lines per test case. The first line of each test case contains the single integer n (3 \u2264 n \u2264 1000) \u2014 the length of the permutation p.\n\nThe second line contains n integers p_1, p_2, ..., p_n (1 \u2264 p_i \u2264 n; p_i \u2260 p_j if i \u2260 j) \u2014 the permutation p.", "grammar": {"productions": ["<S>->[T] <n> <T_T>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> p_i", "<L_1>->p_1"], "constraints": ["1<=T<=200", "3<=n<=1000", "1<=p_i<=n"]}}
{"name": "1379_A. Acacius and String", "description": "Acacius is studying strings theory. Today he came with the following problem.\n\nYou are given a string s of length n consisting of lowercase English letters and question marks. It is possible to replace question marks with lowercase English letters in such a way that a string \"abacaba\" occurs as a substring in a resulting string exactly once?\n\nEach question mark should be replaced with exactly one lowercase English letter. For example, string \"a?b?c\" can be transformed into strings \"aabbc\" and \"azbzc\", but can't be transformed into strings \"aabc\", \"a?bbc\" and \"babbc\".\n\nOccurrence of a string t of length m in the string s of length n as a substring is a index i (1 \u2264 i \u2264 n - m + 1) such that string s[i..i+m-1] consisting of m consecutive symbols of s starting from i-th equals to string t. For example string \"ababa\" has two occurrences of a string \"aba\" as a substring with i = 1 and i = 3, but there are no occurrences of a string \"aba\" in the string \"acba\" as a substring.\n\nPlease help Acacius to check if it is possible to replace all question marks with lowercase English letters in such a way that a string \"abacaba\" occurs as a substring in a resulting string exactly once.\n\nInput\n\nFirst line of input contains an integer T (1 \u2264 T \u2264 5000), number of test cases. T pairs of lines with test case descriptions follow.\n\nThe first line of a test case description contains a single integer n (7 \u2264 n \u2264 50), length of a string s.\n\nThe second line of a test case description contains string s of length n consisting of lowercase English letters and question marks.", "grammar": {"productions": ["<S>->[T] <n> <T_T>", "<T_i>-><T_i-1> <n> [n] <n> [a-z?]{n}", "<T_1>->[n] <n> [a-z?]{n}"], "constraints": ["1<=T<=5000", "7<=n<=50", "1<=i<=(n - m + 1)"]}}
{"name": "p02886 AtCoder Beginner Contest 143 - TAKOYAKI FESTIVAL 2019", "description": "It's now the season of TAKOYAKI FESTIVAL!\n\nThis year, N takoyaki (a ball-shaped food with a piece of octopus inside) will be served. The deliciousness of the i-th takoyaki is d_i.\n\nAs is commonly known, when you eat two takoyaki of deliciousness x and y together, you restore x \\times y health points.\n\nThere are \\frac{N \\times (N - 1)}{2} ways to choose two from the N takoyaki served in the festival. For each of these choices, find the health points restored from eating the two takoyaki, then compute the sum of these \\frac{N \\times (N - 1)}{2} values.\n\nConstraints\n\n* All values in input are integers.\n* 2 \\leq N \\leq 50\n* 0 \\leq d_i \\leq 100\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nd_1 d_2 ... d_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> d_i", "<T_1>->d_1"], "constraints": ["2<=N<=50", "0<=d_i<=100"]}}
{"name": "514_B. Han Solo and Lazer Gun", "description": "There are n Imperial stormtroopers on the field. The battle field is a plane with Cartesian coordinate system. Each stormtrooper is associated with his coordinates (x, y) on this plane. \n\nHan Solo has the newest duplex lazer gun to fight these stormtroopers. It is situated at the point (x0, y0). In one shot it can can destroy all the stormtroopers, situated on some line that crosses point (x0, y0).\n\nYour task is to determine what minimum number of shots Han Solo needs to defeat all the stormtroopers.\n\nThe gun is the newest invention, it shoots very quickly and even after a very large number of shots the stormtroopers don't have enough time to realize what's happening and change their location. \n\nInput\n\nThe first line contains three integers n, x0 \u0438 y0 (1 \u2264 n \u2264 1000,  - 10^4 \u2264 x0, y0 \u2264 10^4) \u2014 the number of stormtroopers on the battle field and the coordinates of your gun.\n\nNext n lines contain two integers each xi, yi ( - 10^4 \u2264 xi, yi \u2264 10^4) \u2014 the coordinates of the stormtroopers on the battlefield. It is guaranteed that no stormtrooper stands at the same point with the gun. Multiple stormtroopers can stand at the same point.", "grammar": {"productions": ["<S>->[n] <s> x0 <s> y0 <n> <T_n>", "<T_i>-><T_i-1> <n> x_i <s> y_i", "<T_1>->x_1 <s> y_1"], "constraints": ["1<=n<=1000", "-10^4<=x0<=10^4", "-10^4<=y0<=10^4", "-10^4<=x_i<=10^4", "-10^4<=y_i<=10^4"]}}
{"name": "1013_A. Piles With Stones", "description": "There is a beautiful garden of stones in Innopolis.\n\nIts most beautiful place is the n piles with stones numbered from 1 to n.\n\nEJOI participants have visited this place twice. \n\nWhen they first visited it, the number of stones in piles was x_1, x_2, \u2026, x_n, correspondingly. One of the participants wrote down this sequence in a notebook. \n\nThey visited it again the following day, and the number of stones in piles was equal to y_1, y_2, \u2026, y_n. One of the participants also wrote it down in a notebook.\n\nIt is well known that every member of the EJOI jury during the night either sits in the room 108 or comes to the place with stones. Each jury member who comes there either takes one stone for himself or moves one stone from one pile to another. We can assume that there is an unlimited number of jury members. No one except the jury goes to the place with stones at night.\n\nParticipants want to know whether their notes can be correct or they are sure to have made a mistake.\n\nInput\n\nThe first line of the input file contains a single integer n, the number of piles with stones in the garden (1 \u2264 n \u2264 50).\n\nThe second line contains n integers separated by spaces x_1, x_2, \u2026, x_n, the number of stones in piles recorded in the notebook when the participants came to the place with stones for the first time (0 \u2264 x_i \u2264 1000).\n\nThe third line contains n integers separated by spaces y_1, y_2, \u2026, y_n, the number of stones in piles recorded in the notebook when the participants came to the place with stones for the second time (0 \u2264 y_i \u2264 1000).", "grammar": {"productions": ["<S>->[n] <n> <T_n> <n> <L_n>", "<T_i>-><T_i-1> <s> x_1", "<T_1>->x_1", "<L_i>-><L_i-1> <s> y_i", "<L_1>->y_1"], "constraints": ["1<=n<=50", "0<=x_i<=1000", "0<=y_i<=1000"]}}
{"name": "p02850 AtCoder Beginner Contest 146 - Coloring Edges on Tree", "description": "Given is a tree G with N vertices. The vertices are numbered 1 through N, and the i-th edge connects Vertex a_i and Vertex b_i.\n\nConsider painting the edges in G with some number of colors. We want to paint them so that, for each vertex, the colors of the edges incident to that vertex are all different.\n\nAmong the colorings satisfying the condition above, construct one that uses the minimum number of colors.\n\nConstraints\n\n* 2 \\le N \\le 10^5\n* 1 \\le a_i \\lt b_i \\le N\n* All values in input are integers.\n* The given graph is a tree.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 b_1\na_2 b_2\n\\vdots\na_{N-1} b_{N-1}", "grammar": {"productions": ["<S>->[N] <n> <T_N-1>", "<T_i>-><T_i-1> <n> a_i <s> b_i", "<T_1>->a_1 <s> b_1"], "constraints": ["2<=N<=10^5", "1<=a_i<b_i<=N"]}}
{"name": "p02585 AtCoder Beginner Contest 175 - Moving Piece", "description": "Takahashi will play a game using a piece on an array of squares numbered 1, 2, \\cdots, N. Square i has an integer C_i written on it. Also, he is given a permutation of 1, 2, \\cdots, N: P_1, P_2, \\cdots, P_N.\n\nNow, he will choose one square and place the piece on that square. Then, he will make the following move some number of times between 1 and K (inclusive):\n\n* In one move, if the piece is now on Square i (1 \\leq i \\leq N), move it to Square P_i. Here, his score increases by C_{P_i}.\n\n\n\nHelp him by finding the maximum possible score at the end of the game. (The score is 0 at the beginning of the game.)\n\nConstraints\n\n* 2 \\leq N \\leq 5000\n* 1 \\leq K \\leq 10^9\n* 1 \\leq P_i \\leq N\n* P_i \\neq i\n* P_1, P_2, \\cdots, P_N are all different.\n* -10^9 \\leq C_i \\leq 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nP_1 P_2 \\cdots P_N\nC_1 C_2 \\cdots C_N", "grammar": {"productions": ["<S>->[N] <s> K <n> <T_N> <n> <L_N>", "<T_i>-><T_i-1> <s> P_i", "<T_1>->P_1", "<L_i>-><L_i-1> <s> C_i", "<L_1>->C_1"], "constraints": ["2<=N<=500", "1<=K<=10^9", "1<=P_i<=N", "P_i!=i", "P_i!=P_j", "-10^9<=C_i<=10^9"]}}
{"name": "1020_B. Badge", "description": "In Summer Informatics School, if a student doesn't behave well, teachers make a hole in his badge. And today one of the teachers caught a group of n students doing yet another trick. \n\nLet's assume that all these students are numbered from 1 to n. The teacher came to student a and put a hole in his badge. The student, however, claimed that the main culprit is some other student p_a.\n\nAfter that, the teacher came to student p_a and made a hole in his badge as well. The student in reply said that the main culprit was student p_{p_a}.\n\nThis process went on for a while, but, since the number of students was finite, eventually the teacher came to the student, who already had a hole in his badge.\n\nAfter that, the teacher put a second hole in the student's badge and decided that he is done with this process, and went to the sauna.\n\nYou don't know the first student who was caught by the teacher. However, you know all the numbers p_i. Your task is to find out for every student a, who would be the student with two holes in the badge if the first caught student was a.\n\nInput\n\nThe first line of the input contains the only integer n (1 \u2264 n \u2264 1000) \u2014 the number of the naughty students.\n\nThe second line contains n integers p_1, ..., p_n (1 \u2264 p_i \u2264 n), where p_i indicates the student who was reported to the teacher by student i.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> p_i", "<T_1>->p_1"], "constraints": ["1<=n<=1000", "1<=p_i<=n"]}}
{"name": "1392_B. Omkar and Infinity Clock", "description": "Being stuck at home, Ray became extremely bored. To pass time, he asks Lord Omkar to use his time bending power: Infinity Clock! However, Lord Omkar will only listen to mortals who can solve the following problem:\n\nYou are given an array a of n integers. You are also given an integer k. Lord Omkar wants you to do k operations with this array.\n\nDefine one operation as the following: \n\n  1. Set d to be the maximum value of your array. \n  2. For every i from 1 to n, replace a_{i} with d-a_{i}. \n\n\n\nThe goal is to predict the contents in the array after k operations. Please help Ray determine what the final sequence will look like!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains two integers n and k (1 \u2264 n \u2264 2 \u22c5 10^5, 1 \u2264 k \u2264 10^{18}) \u2013 the length of your array and the number of operations to perform.\n\nThe second line of each test case contains n integers a_{1},a_{2},...,a_{n} (-10^9 \u2264 a_{i} \u2264 10^9) \u2013 the initial contents of your array.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <s> k <n> <L_n>", "<T_1>->[n] <s> k <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=100", "1<=n<=2*10^5", "1<=k<=10^18", "-10^9<=a_i<=10^9"]}}
{"name": "1270_B. Interesting Subarray", "description": "For an array a of integers let's denote its maximal element as max(a), and minimal as min(a). We will call an array a of k integers interesting if max(a) - min(a) \u2265 k. For example, array [1, 3, 4, 3] isn't interesting as max(a) - min(a) = 4 - 1 = 3 < 4 while array [7, 3, 0, 4, 3] is as max(a) - min(a) = 7 - 0 = 7 \u2265 5.\n\nYou are given an array a of n integers. Find some interesting nonempty subarray of a, or tell that it doesn't exist.\n\nAn array b is a subarray of an array a if b can be obtained from a by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end. In particular, an array is a subarray of itself.\n\nInput\n\nThe first line contains integer number t (1 \u2264 t \u2264 10 000). Then t test cases follow.\n\nThe first line of each test case contains a single integer n (2\u2264 n \u2264 2\u22c5 10^5) \u2014 the length of the array.\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (0\u2264 a_i \u2264 10^9) \u2014 the elements of the array.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=10000", "2<=n<=2*10^5", "0<=a_i<=10^9"]}}
{"name": "p03502 AtCoder Beginner Contest 080 - Harshad Number", "description": "An integer X is called a Harshad number if X is divisible by f(X), where f(X) is the sum of the digits in X when written in base 10.\n\nGiven an integer N, determine whether it is a Harshad number.\n\nConstraints\n\n* 1?N?10^8\n* N is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["1<=N<=10^8"]}}
{"name": "1316_B. String Modification", "description": "Vasya has a string s of length n. He decides to make the following modification to the string: \n\n  1. Pick an integer k, (1 \u2264 k \u2264 n). \n  2. For i from 1 to n-k+1, reverse the substring s[i:i+k-1] of s. For example, if string s is qwer and k = 2, below is the series of transformations the string goes through: \n    * qwer (original string) \n    * wqer (after reversing the first substring of length 2) \n    * weqr (after reversing the second substring of length 2) \n    * werq (after reversing the last substring of length 2) \nHence, the resulting string after modifying s with k = 2 is werq. \n\n\n\nVasya wants to choose a k such that the string obtained after the above-mentioned modification is lexicographically smallest possible among all choices of k. Among all such k, he wants to choose the smallest one. Since he is busy attending Felicity 2020, he asks for your help.\n\nA string a is lexicographically smaller than a string b if and only if one of the following holds: \n\n  * a is a prefix of b, but a \u2260 b; \n  * in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b. \n\nInput\n\nEach test contains multiple test cases. \n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 5000). The description of the test cases follows.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 5000) \u2014 the length of the string s.\n\nThe second line of each test case contains the string s of n lowercase latin letters.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 5000.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> [a-z]{n}", "<T_1>->[n] <n> [a-z]{n}"], "constraints": ["1<=t<=5000", "1<=n<=5000"]}}
{"name": "p03200 AtCoder Grand Contest 029 - Irreversible operation", "description": "There are N Reversi pieces arranged in a row. (A Reversi piece is a disc with a black side and a white side.) The state of each piece is represented by a string S of length N. If S_i=`B`, the i-th piece from the left is showing black; If S_i=`W`, the i-th piece from the left is showing white.\n\nConsider performing the following operation:\n\n* Choose i (1 \\leq i < N) such that the i-th piece from the left is showing black and the (i+1)-th piece from the left is showing white, then flip both of those pieces. That is, the i-th piece from the left is now showing white and the (i+1)-th piece from the left is now showing black.\n\n\n\nFind the maximum possible number of times this operation can be performed.\n\nConstraints\n\n* 1 \\leq |S| \\leq 2\\times 10^5\n* S_i=`B` or `W`\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>->[BW]{1,2*10^5}"], "constraints": []}}
{"name": "892_A. Greed", "description": "Jafar has n cans of cola. Each can is described by two integers: remaining volume of cola ai and can's capacity bi (ai \u2264  bi).\n\nJafar has decided to pour all remaining cola into just 2 cans, determine if he can do this or not!\n\nInput\n\nThe first line of the input contains one integer n (2 \u2264 n \u2264 100 000) \u2014 number of cola cans.\n\nThe second line contains n space-separated integers a1, a2, ..., an (0 \u2264 ai \u2264 10^9) \u2014 volume of remaining cola in cans.\n\nThe third line contains n space-separated integers that b1, b2, ..., bn (ai \u2264 bi \u2264 10^9) \u2014 capacities of the cans.", "grammar": {"productions": ["<S>->[n] <n> <T_n> <n> <L_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1", "<L_i>-><L_i-1> <s> b_i", "<L_1>->b_1"], "constraints": ["2<=n<=100000", "0<=a_i<=10^9", "a_i<=b_i<=10^9"]}}
{"name": "977_D. Divide by three, multiply by two", "description": "Polycarp likes to play with numbers. He takes some integer number x, writes it down on the board, and then performs with it n - 1 operations of the two kinds: \n\n  * divide the number x by 3 (x must be divisible by 3); \n  * multiply the number x by 2. \n\n\n\nAfter each operation, Polycarp writes down the result on the board and replaces x by the result. So there will be n numbers on the board after all.\n\nYou are given a sequence of length n \u2014 the numbers that Polycarp wrote down. This sequence is given in arbitrary order, i.e. the order of the sequence can mismatch the order of the numbers written on the board.\n\nYour problem is to rearrange (reorder) elements of this sequence in such a way that it can match possible Polycarp's game in the order of the numbers written on the board. I.e. each next number will be exactly two times of the previous number or exactly one third of previous number.\n\nIt is guaranteed that the answer exists.\n\nInput\n\nThe first line of the input contatins an integer number n (2 \u2264 n \u2264 100) \u2014 the number of the elements in the sequence. The second line of the input contains n integer numbers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 3 \u22c5 10^{18}) \u2014 rearranged (reordered) sequence that Polycarp can wrote down on the board.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["2<=n<=100", "1<=a_i<=3*10^18"]}}
{"name": "p02409 Official House", "description": "You manage 4 buildings, each of which has 3 floors, each of which consists of 10 rooms. Write a program which reads a sequence of tenant/leaver notices, and reports the number of tenants for each room.\n\nFor each notice, you are given four integers b, f, r and v which represent that v persons entered to room r of fth floor at building b. If v is negative, it means that \u2212v persons left.\n\nAssume that initially no person lives in the building.\n\nConstraints\n\n* No incorrect building, floor and room numbers are given.\n* 0 \u2264 the number of tenants during the management \u2264 9\n\nInput\n\nIn the first line, the number of notices n is given. In the following n lines, a set of four integers b, f, r and v which represents ith notice is given in a line.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> b <s> f <s> r <s> v", "<T_1>->b <s> f <s> r <s> v"], "constraints": ["1<=N<=9", "1<=b<=4", "1<=f<=3", "1<=r<=10", "0<=v<9"]}}
{"name": "1006_C. Three Parts of the Array", "description": "You are given an array d_1, d_2, ..., d_n consisting of n integer numbers.\n\nYour task is to split this array into three parts (some of which may be empty) in such a way that each element of the array belongs to exactly one of the three parts, and each of the parts forms a consecutive contiguous subsegment (possibly, empty) of the original array. \n\nLet the sum of elements of the first part be sum_1, the sum of elements of the second part be sum_2 and the sum of elements of the third part be sum_3. Among all possible ways to split the array you have to choose a way such that sum_1 = sum_3 and sum_1 is maximum possible.\n\nMore formally, if the first part of the array contains a elements, the second part of the array contains b elements and the third part contains c elements, then:\n\n$$$sum_1 = \u2211_{1 \u2264 i \u2264 a}d_i, sum_2 = \u2211_{a + 1 \u2264 i \u2264 a + b}d_i, sum_3 = \u2211_{a + b + 1 \u2264 i \u2264 a + b + c}d_i.$$$\n\nThe sum of an empty array is 0.\n\nYour task is to find a way to split the array such that sum_1 = sum_3 and sum_1 is maximum possible.\n\nInput\n\nThe first line of the input contains one integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array d.\n\nThe second line of the input contains n integers d_1, d_2, ..., d_n (1 \u2264 d_i \u2264 10^9) \u2014 the elements of the array d.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> d_i", "<T_1>->d_1"], "constraints": ["1<=n<=2*10^5", "1<=d_i<=10^9"]}}
{"name": "1136_A. Nastya Is Reading a Book", "description": "After lessons Nastya decided to read a book. The book contains n chapters, going one after another, so that one page of the book belongs to exactly one chapter and each chapter contains at least one page.\n\nYesterday evening Nastya did not manage to finish reading the book, so she marked the page with number k as the first page which was not read (i.e. she read all pages from the 1-st to the (k-1)-th).\n\nThe next day Nastya's friend Igor came and asked her, how many chapters remain to be read by Nastya? Nastya is too busy now, so she asks you to compute the number of chapters she has not completely read yet (i.e. the number of chapters she has not started to read or has finished reading somewhere in the middle).\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 100) \u2014 the number of chapters in the book.\n\nThere are n lines then. The i-th of these lines contains two integers l_i, r_i separated by space (l_1 = 1, l_i \u2264 r_i) \u2014 numbers of the first and the last pages of the i-th chapter. It's guaranteed that l_{i+1} = r_i + 1 for all 1 \u2264 i \u2264 n-1, and also that every chapter contains at most 100 pages.\n\nThe (n+2)-th line contains a single integer k (1 \u2264 k \u2264 r_n) \u2014 the index of the marked page.", "grammar": {"productions": ["<S>->[n] <n> <T_n> <n> k", "<T_i>-><T_i-1> <n> l_i <s> r_i", "<T_1>->1 <s> r_1"], "constraints": ["1<=n<=100", "l_i+1=r_i + 1", "1<=k<=r_n"]}}
{"name": "p03160 Educational DP Contest - Frog 1", "description": "There are N stones, numbered 1, 2, \\ldots, N. For each i (1 \\leq i \\leq N), the height of Stone i is h_i.\n\nThere is a frog who is initially on Stone 1. He will repeat the following action some number of times to reach Stone N:\n\n* If the frog is currently on Stone i, jump to Stone i + 1 or Stone i + 2. Here, a cost of |h_i - h_j| is incurred, where j is the stone to land on.\n\n\n\nFind the minimum possible total cost incurred before the frog reaches Stone N.\n\nConstraints\n\n* All values in input are integers.\n* 2 \\leq N \\leq 10^5\n* 1 \\leq h_i \\leq 10^4\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nh_1 h_2 \\ldots h_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> h_i", "<T_1>->h_1"], "constraints": ["2<=N<=10^5", "1<=h_i<=10^4"]}}
{"name": "p03457 AtCoder Beginner Contest 086 - Traveling", "description": "AtCoDeer the deer is going on a trip in a two-dimensional plane. In his plan, he will depart from point (0, 0) at time 0, then for each i between 1 and N (inclusive), he will visit point (x_i,y_i) at time t_i.\n\nIf AtCoDeer is at point (x, y) at time t, he can be at one of the following points at time t+1: (x+1,y), (x-1,y), (x,y+1) and (x,y-1). Note that he cannot stay at his place. Determine whether he can carry out his plan.\n\nConstraints\n\n* 1 \u2264 N \u2264 10^5\n* 0 \u2264 x_i \u2264 10^5\n* 0 \u2264 y_i \u2264 10^5\n* 1 \u2264 t_i \u2264 10^5\n* t_i < t_{i+1} (1 \u2264 i \u2264 N-1)\n* All input values are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nt_1 x_1 y_1\nt_2 x_2 y_2\n:\nt_N x_N y_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> t_i <s> x_i <s> y_i", "<T_1>->t_1 <s> x_1 <s> y_1"], "constraints": ["1<=N<=10^5", "0<=x_i<=10^5", "0<=y_i<=10^5", "1<=t_i<=10^5", "t_i<=t_i+1"]}}
{"name": "479_A. Expression", "description": "Petya studies in a school and he adores Maths. His class has been studying arithmetic expressions. On the last class the teacher wrote three positive integers a, b, c on the blackboard. The task was to insert signs of operations '+' and '*', and probably brackets between the numbers so that the value of the resulting expression is as large as possible. Let's consider an example: assume that the teacher wrote numbers 1, 2 and 3 on the blackboard. Here are some ways of placing signs and brackets:\n\n  * 1+2*3=7 \n  * 1*(2+3)=5 \n  * 1*2*3=6 \n  * (1+2)*3=9 \n\n\n\nNote that you can insert operation signs only between a and b, and between b and c, that is, you cannot swap integers. For instance, in the given sample you cannot get expression (1+3)*2.\n\nIt's easy to see that the maximum value that you can obtain is 9.\n\nYour task is: given a, b and c print the maximum value that you can get.\n\nInput\n\nThe input contains three integers a, b and c, each on a single line (1 \u2264 a, b, c \u2264 10).", "grammar": {"productions": ["<S>->a <n> b <n> c"], "constraints": ["1<=a,b,c<=10"]}}
{"name": "1379_B. Dubious Cyrpto", "description": "Pasha loves to send strictly positive integers to his friends. Pasha cares about security, therefore when he wants to send an integer n, he encrypts it in the following way: he picks three integers a, b and c such that l \u2264 a,b,c \u2264 r, and then he computes the encrypted value m = n \u22c5 a + b - c.\n\nUnfortunately, an adversary intercepted the values l, r and m. Is it possible to recover the original values of a, b and c from this information? More formally, you are asked to find any values of a, b and c such that\n\n  * a, b and c are integers, \n  * l \u2264 a, b, c \u2264 r, \n  * there exists a strictly positive integer n, such that n \u22c5 a + b - c = m. \n\nInput\n\nThe first line contains the only integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases. The following t lines describe one test case each.\n\nEach test case consists of three integers l, r and m (1 \u2264 l \u2264 r \u2264 500 000, 1 \u2264 m \u2264 10^{10}). The numbers are such that the answer to the problem exists.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> l <s> r <s> m", "<T_1>->l <s> r <s> m"], "constraints": ["1<=t<=20", "1<=l<=r<=5000000", "1<=m<=10^10"]}}
{"name": "p03054 AtCoder Grand Contest 033 - LRUD Game", "description": "We have a rectangular grid of squares with H horizontal rows and W vertical columns. Let (i,j) denote the square at the i-th row from the top and the j-th column from the left. On this grid, there is a piece, which is initially placed at square (s_r,s_c).\n\nTakahashi and Aoki will play a game, where each player has a string of length N. Takahashi's string is S, and Aoki's string is T. S and T both consist of four kinds of letters: `L`, `R`, `U` and `D`.\n\nThe game consists of N steps. The i-th step proceeds as follows:\n\n* First, Takahashi performs a move. He either moves the piece in the direction of S_i, or does not move the piece.\n* Second, Aoki performs a move. He either moves the piece in the direction of T_i, or does not move the piece.\n\n\n\nHere, to move the piece in the direction of `L`, `R`, `U` and `D`, is to move the piece from square (r,c) to square (r,c-1), (r,c+1), (r-1,c) and (r+1,c), respectively. If the destination square does not exist, the piece is removed from the grid, and the game ends, even if less than N steps are done.\n\nTakahashi wants to remove the piece from the grid in one of the N steps. Aoki, on the other hand, wants to finish the N steps with the piece remaining on the grid. Determine if the piece will remain on the grid at the end of the game when both players play optimally.\n\nConstraints\n\n* 2 \\leq H,W \\leq 2 \\times 10^5\n* 2 \\leq N \\leq 2 \\times 10^5\n* 1 \\leq s_r \\leq H\n* 1 \\leq s_c \\leq W\n* |S|=|T|=N\n* S and T consists of the four kinds of letters `L`, `R`, `U` and `D`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nH W N\ns_r s_c\nS\nT", "grammar": {"productions": ["<S>->H <s> W <s> [N] <n> sr <s> sc <n> [LRUD]{N} <n> [LRUD]{N}"], "constraints": ["2<=H<=2*10^5", "2<=W<=2*10^5", "2<=N<=2*10^5", "1<=sr<=H", "1<=sc<=W"]}}
{"name": "136_A. Presents", "description": "Little Petya very much likes gifts. Recently he has received a new laptop as a New Year gift from his mother. He immediately decided to give it to somebody else as what can be more pleasant than giving somebody gifts. And on this occasion he organized a New Year party at his place and invited n his friends there.\n\nIf there's one thing Petya likes more that receiving gifts, that's watching others giving gifts to somebody else. Thus, he safely hid the laptop until the next New Year and made up his mind to watch his friends exchanging gifts while he does not participate in the process. He numbered all his friends with integers from 1 to n. Petya remembered that a friend number i gave a gift to a friend number pi. He also remembered that each of his friends received exactly one gift.\n\nNow Petya wants to know for each friend i the number of a friend who has given him a gift.\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 100) \u2014 the quantity of friends Petya invited to the party. The second line contains n space-separated integers: the i-th number is pi \u2014 the number of a friend who gave a gift to friend number i. It is guaranteed that each friend received exactly one gift. It is possible that some friends do not share Petya's ideas of giving gifts to somebody else. Those friends gave the gifts to themselves.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> p_i", "<T_1>->p_1"], "constraints": ["1<=n<=100", "1<=p_i<=n", "p_i!=p_j"]}}
{"name": "p02836 AtCoder Beginner Contest 147 - Palindrome-philia", "description": "Takahashi loves palindromes. Non-palindromic strings are unacceptable to him. Each time he hugs a string, he can change one of its characters to any character of his choice.\n\nGiven is a string S. Find the minimum number of hugs needed to make S palindromic.\n\nConstraints\n\n* S is a string consisting of lowercase English letters.\n* The length of S is between 1 and 100 (inclusive).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>->[a-z]{1,100}"], "constraints": []}}
{"name": "p02851 AtCoder Beginner Contest 146 - Rem of Sum is Num", "description": "Given are a sequence of N positive integers A_1, A_2, \\ldots, A_N, and a positive integer K.\n\nFind the number of non-empty contiguous subsequences in A such that the remainder when dividing the sum of its elements by K is equal to the number of its elements. We consider two subsequences different if they are taken from different positions, even if they are equal sequences.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 2\\times 10^5\n* 1 \\leq K \\leq 10^9\n* 1 \\leq A_i \\leq 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nA_1 A_2 \\cdots A_N", "grammar": {"productions": ["<S>->[N] <s> K <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["1<=N<=2*10^5", "1<=K<=10^9", "1<=A_i<=10^9"]}}
{"name": "984_A. Game", "description": "Two players play a game.\n\nInitially there are n integers a_1, a_2, \u2026, a_n written on the board. Each turn a player selects one number and erases it from the board. This continues until there is only one number left on the board, i. e. n - 1 turns are made. The first player makes the first move, then players alternate turns.\n\nThe first player wants to minimize the last number that would be left on the board, while the second player wants to maximize it.\n\nYou want to know what number will be left on the board after n - 1 turns if both players make optimal moves.\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 1000) \u2014 the number of numbers on the board.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^6).", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=1000", "1<=a_i<=10^6"]}}
{"name": "p03386 AtCoder Beginner Contest 093 - Small and Large Integers", "description": "Print all the integers that satisfies the following in ascending order:\n\n* Among the integers between A and B (inclusive), it is either within the K smallest integers or within the K largest integers.\n\nConstraints\n\n* 1 \\leq A \\leq B \\leq 10^9\n* 1 \\leq K \\leq 100\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B K", "grammar": {"productions": ["<S>->A <s> B <s> K"], "constraints": ["1<=A<=B<=10^9", "1<=K<=100"]}}
{"name": "p02555 AtCoder Beginner Contest 178 - Redistribution", "description": "Given is an integer S. Find how many sequences there are whose terms are all integers greater than or equal to 3, and whose sum is equal to S. The answer can be very large, so output it modulo 10^9 + 7.\n\nConstraints\n\n* 1 \\leq S \\leq 2000\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>->S"], "constraints": ["1<=S<=20000"]}}
{"name": "703_A. Mishka and Game", "description": "Mishka is a little polar bear. As known, little bears loves spending their free time playing dice for chocolates. Once in a wonderful sunny morning, walking around blocks of ice, Mishka met her friend Chris, and they started playing the game.\n\nRules of the game are very simple: at first number of rounds n is defined. In every round each of the players throws a cubical dice with distinct numbers from 1 to 6 written on its faces. Player, whose value after throwing the dice is greater, wins the round. In case if player dice values are equal, no one of them is a winner.\n\nIn average, player, who won most of the rounds, is the winner of the game. In case if two players won the same number of rounds, the result of the game is draw.\n\nMishka is still very little and can't count wins and losses, so she asked you to watch their game and determine its result. Please help her!\n\nInput\n\nThe first line of the input contains single integer n n (1 \u2264 n \u2264 100) \u2014 the number of game rounds.\n\nThe next n lines contains rounds description. i-th of them contains pair of integers mi and ci (1 \u2264 mi, ci \u2264 6) \u2014 values on dice upper face after Mishka's and Chris' throws in i-th round respectively.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> m_i <s> c_i", "<T_1>->m_1 <s> c_1"], "constraints": ["1<=n<=100", "1<=m_i,c_i<=6"]}}
{"name": "p04020 AtCoder Grand Contest 003 - Simplified mahjong", "description": "Snuke has a large collection of cards. Each card has an integer between 1 and N, inclusive, written on it. He has A_i cards with an integer i.\n\nTwo cards can form a pair if the absolute value of the difference of the integers written on them is at most 1.\n\nSnuke wants to create the maximum number of pairs from his cards, on the condition that no card should be used in multiple pairs. Find the maximum number of pairs that he can create.\n\nConstraints\n\n* 1 \u2266 N \u2266 10^5\n* 0 \u2266 A_i \u2266 10^9 (1 \u2266 i \u2266 N)\n* All input values are integers.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN\nA_1\n:\nA_N", "grammar": {"productions": ["<S>->N <n> <T_N>", "<T_i>-><T_i-1> <n> A_i", "<T_1>->A_1"], "constraints": ["1<=N<=10^5", "0<=A_i<=10^9"]}}
{"name": "1266_A. Competitive Programmer", "description": "Bob is a competitive programmer. He wants to become red, and for that he needs a strict training regime. He went to the annual meeting of grandmasters and asked n of them how much effort they needed to reach red.\n\n\"Oh, I just spent x_i hours solving problems\", said the i-th of them. \n\nBob wants to train his math skills, so for each answer he wrote down the number of minutes (60 \u22c5 x_i), thanked the grandmasters and went home. Bob could write numbers with leading zeroes \u2014 for example, if some grandmaster answered that he had spent 2 hours, Bob could write 000120 instead of 120.\n\nAlice wanted to tease Bob and so she took the numbers Bob wrote down, and for each of them she did one of the following independently: \n\n  * rearranged its digits, or \n  * wrote a random number. \n\n\n\nThis way, Alice generated n numbers, denoted y_1, ..., y_n.\n\nFor each of the numbers, help Bob determine whether y_i can be a permutation of a number divisible by 60 (possibly with leading zeroes).\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 418) \u2014 the number of grandmasters Bob asked.\n\nThen n lines follow, the i-th of which contains a single integer y_i \u2014 the number that Alice wrote down.\n\nEach of these numbers has between 2 and 100 digits '0' through '9'. They can contain leading zeroes.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> [0-9]{2,100}", "<T_1>->[0-9]{2,100}"], "constraints": ["1<=n<=418"]}}
{"name": "p03252 AtCoder Beginner Contest 110 - String Transformation", "description": "You are given strings S and T consisting of lowercase English letters.\n\nYou can perform the following operation on S any number of times:\n\nOperation: Choose two distinct lowercase English letters c_1 and c_2, then replace every occurrence of c_1 with c_2, and every occurrence of c_2 with c_1.\n\nDetermine if S and T can be made equal by performing the operation zero or more times.\n\nConstraints\n\n* 1 \\leq |S| \\leq 2 \\times 10^5\n* |S| = |T|\n* S and T consists of lowercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS\nT", "grammar": {"productions": ["<S>->[a-z]{S} <n> [a-z]{T}"], "constraints": ["1<=S<=10", "S=T"]}}
{"name": "349_A. Cinema Line", "description": "The new \"Die Hard\" movie has just been released! There are n people at the cinema box office standing in a huge line. Each of them has a single 100, 50 or 25 ruble bill. A \"Die Hard\" ticket costs 25 rubles. Can the booking clerk sell a ticket to each person and give the change if he initially has no money and sells the tickets strictly in the order people follow in the line?\n\nInput\n\nThe first line contains integer n (1 \u2264 n \u2264 10^5) \u2014 the number of people in the line. The next line contains n integers, each of them equals 25, 50 or 100 \u2014 the values of the bills the people have. The numbers are given in the order from the beginning of the line (at the box office) to the end of the line.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1", "a_i->25|50|100"], "constraints": ["1<=n<=10^5"]}}
{"name": "p03260 AtCoder Beginner Contest 109 - ABC333", "description": "You are given integers A and B, each between 1 and 3 (inclusive).\n\nDetermine if there is an integer C between 1 and 3 (inclusive) such that A \\times B \\times C is an odd number.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq A, B \\leq 3\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B", "grammar": {"productions": ["<S>->A <s> B"], "constraints": ["1<=A<=3", "1<=B<=3"]}}
{"name": "1332_A. Exercising Walk", "description": "Alice has a cute cat. To keep her cat fit, Alice wants to design an exercising walk for her cat! \n\nInitially, Alice's cat is located in a cell (x,y) of an infinite grid. According to Alice's theory, cat needs to move: \n\n  * exactly a steps left: from (u,v) to (u-1,v); \n  * exactly b steps right: from (u,v) to (u+1,v); \n  * exactly c steps down: from (u,v) to (u,v-1); \n  * exactly d steps up: from (u,v) to (u,v+1). \n\n\n\nNote that the moves can be performed in an arbitrary order. For example, if the cat has to move 1 step left, 3 steps right and 2 steps down, then the walk right, down, left, right, right, down is valid.\n\nAlice, however, is worrying that her cat might get lost if it moves far away from her. So she hopes that her cat is always in the area [x_1,x_2]\u00d7 [y_1,y_2], i.e. for every cat's position (u,v) of a walk x_1 \u2264 u \u2264 x_2 and y_1 \u2264 v \u2264 y_2 holds.\n\nAlso, note that the cat can visit the same cell multiple times.\n\nCan you help Alice find out if there exists a walk satisfying her wishes?\n\nFormally, the walk should contain exactly a+b+c+d unit moves (a to the left, b to the right, c to the down, d to the up). Alice can do the moves in any order. Her current position (u, v) should always satisfy the constraints: x_1 \u2264 u \u2264 x_2, y_1 \u2264 v \u2264 y_2. The staring point is (x, y).\n\nYou are required to answer t test cases independently.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^3) \u2014 the number of testcases. \n\nThe first line of each test case contains four integers a, b, c, d (0 \u2264 a,b,c,d \u2264 10^8, a+b+c+d \u2265 1).\n\nThe second line of the test case contains six integers x, y, x_1, y_1, x_2, y_2 (-10^8 \u2264 x_1\u2264 x \u2264 x_2 \u2264 10^8, -10^8 \u2264 y_1 \u2264 y \u2264 y_2 \u2264 10^8).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> a <s> b <s> c <s> d <n> x <s> y <s> x1 <s> y1 <s> x2 <s> y2", "<T_1>->a <s> b <s> c <s> d <n> x <s> y <s> x1 <s> y1 <s> x2 <s> y2"], "constraints": ["1<=t<=10^3", "0<=a,b,c,d<=10^8", "-10^8<=x1<=x<=x2<=10^8", "-10^8<=y1<=y<=y2<=10^8"]}}
{"name": "p03651 AtCoder Grand Contest 018 - Getting Difference", "description": "There is a box containing N balls. The i-th ball has the integer A_i written on it. Snuke can perform the following operation any number of times:\n\n* Take out two balls from the box. Then, return them to the box along with a new ball, on which the absolute difference of the integers written on the two balls is written.\n\n\n\nDetermine whether it is possible for Snuke to reach the state where the box contains a ball on which the integer K is written.\n\nConstraints\n\n* 1 \\leq N \\leq 10^5\n* 1 \\leq A_i \\leq 10^9\n* 1 \\leq K \\leq 10^9\n* All input values are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nA_1 A_2 ... A_N", "grammar": {"productions": ["<S>->[N] <s> K <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["1<=N<=10^5", "1<=A_i<=10^9", "1<=K<=10^9"]}}
{"name": "p02754 AtCoder Beginner Contest 158 - Count Balls", "description": "Takahashi has many red balls and blue balls. Now, he will place them in a row.\n\nInitially, there is no ball placed.\n\nTakahashi, who is very patient, will do the following operation 10^{100} times:\n\n* Place A blue balls at the end of the row of balls already placed. Then, place B red balls at the end of the row.\n\n\n\nHow many blue balls will be there among the first N balls in the row of balls made this way?\n\nConstraints\n\n* 1 \\leq N \\leq 10^{18}\n* A, B \\geq 0\n* 0 < A + B \\leq 10^{18}\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN A B", "grammar": {"productions": ["<S>->N <s> A <s> B"], "constraints": ["1<=N<=10^18", "0<=A", "0<=B", "0<A+B<=10^18"]}}
{"name": "344_A. Magnets", "description": "Mad scientist Mike entertains himself by arranging rows of dominoes. He doesn't need dominoes, though: he uses rectangular magnets instead. Each magnet has two poles, positive (a \"plus\") and negative (a \"minus\"). If two magnets are put together at a close distance, then the like poles will repel each other and the opposite poles will attract each other.\n\nMike starts by laying one magnet horizontally on the table. During each following step Mike adds one more magnet horizontally to the right end of the row. Depending on how Mike puts the magnet on the table, it is either attracted to the previous one (forming a group of multiple magnets linked together) or repelled by it (then Mike lays this magnet at some distance to the right from the previous one). We assume that a sole magnet not linked to others forms a group of its own.\n\n<image>\n\nMike arranged multiple magnets in a row. Determine the number of groups that the magnets formed.\n\nInput\n\nThe first line of the input contains an integer n (1 \u2264 n \u2264 100000) \u2014 the number of magnets. Then n lines follow. The i-th line (1 \u2264 i \u2264 n) contains either characters \"01\", if Mike put the i-th magnet in the \"plus-minus\" position, or characters \"10\", if Mike put the magnet in the \"minus-plus\" position.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> A_i", "<T_1>->A_1", "A_i->01|10"], "constraints": ["1<=n<=100000"]}}
{"name": "p03162 Educational DP Contest - Vacation", "description": "Taro's summer vacation starts tomorrow, and he has decided to make plans for it now.\n\nThe vacation consists of N days. For each i (1 \\leq i \\leq N), Taro will choose one of the following activities and do it on the i-th day:\n\n* A: Swim in the sea. Gain a_i points of happiness.\n* B: Catch bugs in the mountains. Gain b_i points of happiness.\n* C: Do homework at home. Gain c_i points of happiness.\n\n\n\nAs Taro gets bored easily, he cannot do the same activities for two or more consecutive days.\n\nFind the maximum possible total points of happiness that Taro gains.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 10^5\n* 1 \\leq a_i, b_i, c_i \\leq 10^4\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 b_1 c_1\na_2 b_2 c_2\n:\na_N b_N c_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> a_i <s> b_i <s> c_i", "<T_1>->a_1 <s> b_1 <s> c_1"], "constraints": ["1<=N<=10^5", "1<=a_i,b_i,c_i<=10^4"]}}
{"name": "1017_A. The Rank", "description": "John Smith knows that his son, Thomas Smith, is among the best students in his class and even in his school. After the students of the school took the exams in English, German, Math, and History, a table of results was formed.\n\nThere are n students, each of them has a unique id (from 1 to n). Thomas's id is 1. Every student has four scores correspond to his or her English, German, Math, and History scores. The students are given in order of increasing of their ids.\n\nIn the table, the students will be sorted by decreasing the sum of their scores. So, a student with the largest sum will get the first place. If two or more students have the same sum, these students will be sorted by increasing their ids. \n\nPlease help John find out the rank of his son. \n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 1000) \u2014 the number of students.\n\nEach of the next n lines contains four integers a_i, b_i, c_i, and d_i (0\u2264 a_i, b_i, c_i, d_i\u2264 100) \u2014 the grades of the i-th student on English, German, Math, and History. The id of the i-th student is equal to i.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> a_i <s> b_i <s> c_i <s> d_i", "<T_1>->a_1 <s> b_1 <s> c_1 <s> d_1"], "constraints": ["1<=n<=1000", "0<=a_i<=100", "0<=b_i<=100", "0<=c_i<=100", "0<=d_i<=100"]}}
{"name": "1285_C. Fadi and LCM", "description": "Today, Osama gave Fadi an integer X, and Fadi was wondering about the minimum possible value of max(a, b) such that LCM(a, b) equals X. Both a and b should be positive integers.\n\nLCM(a, b) is the smallest positive integer that is divisible by both a and b. For example, LCM(6, 8) = 24, LCM(4, 12) = 12, LCM(2, 3) = 6.\n\nOf course, Fadi immediately knew the answer. Can you be just like Fadi and find any such pair?\n\nInput\n\nThe first and only line contains an integer X (1 \u2264 X \u2264 10^{12}).", "grammar": {"productions": ["<S>->X"], "constraints": ["1<=X<=10^12"]}}
{"name": "p03136 AtCoder Beginner Contest 117 - Polygon", "description": "Determine if an N-sided polygon (not necessarily convex) with sides of length L_1, L_2, ..., L_N can be drawn in a two-dimensional plane.\n\nYou can use the following theorem:\n\nTheorem: an N-sided polygon satisfying the condition can be drawn if and only if the longest side is strictly shorter than the sum of the lengths of the other N-1 sides.\n\nConstraints\n\n* All values in input are integers.\n* 3 \\leq N \\leq 10\n* 1 \\leq L_i \\leq 100\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nL_1 L_2 ... L_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> L_i", "<T_1>->L_1"], "constraints": ["3<=N<=10", "1<=L_i<=100"]}}
{"name": "p03323 AtCoder Beginner Contest 100 - Happy Birthday!", "description": "E869120's and square1001's 16-th birthday is coming soon.\nTakahashi from AtCoder Kingdom gave them a round cake cut into 16 equal fan-shaped pieces.\n\nE869120 and square1001 were just about to eat A and B of those pieces, respectively,\nwhen they found a note attached to the cake saying that \"the same person should not take two adjacent pieces of cake\".\n\nCan both of them obey the instruction in the note and take desired numbers of pieces of cake?\n\nConstraints\n\n* A and B are integers between 1 and 16 (inclusive).\n* A+B is at most 16.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B", "grammar": {"productions": ["<S>->A <s> B"], "constraints": ["1<=A<=16", "1<=B<=16", "A+B<=16"]}}
{"name": "p02597 AtCoder Beginner Contest 174 - Alter Altar", "description": "An altar enshrines N stones arranged in a row from left to right. The color of the i-th stone from the left (1 \\leq i \\leq N) is given to you as a character c_i; `R` stands for red and `W` stands for white.\n\nYou can do the following two kinds of operations any number of times in any order:\n\n* Choose two stones (not necessarily adjacent) and swap them.\n* Choose one stone and change its color (from red to white and vice versa).\n\n\n\nAccording to a fortune-teller, a white stone placed to the immediate left of a red stone will bring a disaster. At least how many operations are needed to reach a situation without such a white stone?\n\nConstraints\n\n* 2 \\leq N \\leq 200000\n* c_i is `R` or `W`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nc_{1}c_{2}...c_{N}", "grammar": {"productions": ["<S>->[N] <n> [RW]{N}"], "constraints": ["2<=N<=200000"]}}
{"name": "1065_A. Vasya and Chocolate", "description": "There is a special offer in Vasya's favourite supermarket: if the customer buys a chocolate bars, he or she may take b additional bars for free. This special offer can be used any number of times.\n\nVasya currently has s roubles, and he wants to get as many chocolate bars for free. Each chocolate bar costs c roubles. Help Vasya to calculate the maximum possible number of chocolate bars he can get!\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of testcases.\n\nEach of the next t lines contains four integers s, a, b, c~(1 \u2264 s, a, b, c \u2264 10^9) \u2014 the number of roubles Vasya has, the number of chocolate bars you have to buy to use the special offer, the number of bars you get for free, and the cost of one bar, respectively.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> s <s> a <s> b <s> c", "<T_1>->s <s> a <s> b <s> c"], "constraints": ["1<=t<=100", "1<=s<=10^9", "1<=a<=10^9", "1<=b<=10^9", "1<=c<=10^9"]}}
{"name": "1141_A. Game 23", "description": "Polycarp plays \"Game 23\". Initially he has a number n and his goal is to transform it to m. In one move, he can multiply n by 2 or multiply n by 3. He can perform any number of moves.\n\nPrint the number of moves needed to transform n to m. Print -1 if it is impossible to do so.\n\nIt is easy to prove that any way to transform n to m contains the same number of moves (i.e. number of moves doesn't depend on the way of transformation).\n\nInput\n\nThe only line of the input contains two integers n and m (1 \u2264 n \u2264 m \u2264 5\u22c510^8).", "grammar": {"productions": ["<S>->n <s> m"], "constraints": ["1<=n<=m<=5*10^8"]}}
{"name": "p03008 diverta 2019 Programming Contest 2 - Squirrel Merchant", "description": "The squirrel Chokudai has N acorns. One day, he decides to do some trades in multiple precious metal exchanges to make more acorns.\n\nHis plan is as follows:\n\n1. Get out of the nest with N acorns in his hands.\n2. Go to Exchange A and do some trades.\n3. Go to Exchange B and do some trades.\n4. Go to Exchange A and do some trades.\n5. Go back to the nest.\n\n\n\nIn Exchange X (X = A, B), he can perform the following operations any integer number of times (possibly zero) in any order:\n\n* Lose g_{X} acorns and gain 1 gram of gold.\n* Gain g_{X} acorns and lose 1 gram of gold.\n* Lose s_{X} acorns and gain 1 gram of silver.\n* Gain s_{X} acorns and lose 1 gram of silver.\n* Lose b_{X} acorns and gain 1 gram of bronze.\n* Gain b_{X} acorns and lose 1 gram of bronze.\n\n\n\nNaturally, he cannot perform an operation that would leave him with a negative amount of acorns, gold, silver, or bronze.\n\nWhat is the maximum number of acorns that he can bring to the nest? Note that gold, silver, or bronze brought to the nest would be worthless because he is just a squirrel.\n\nConstraints\n\n* 1 \\leq N \\leq 5000\n* 1 \\leq g_{X} \\leq 5000\n* 1 \\leq s_{X} \\leq 5000\n* 1 \\leq b_{X} \\leq 5000\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\ng_A s_A b_A\ng_B s_B b_B", "grammar": {"productions": ["<S>->[N] <n> gA <s> sA <s> bA <n> gB <s> sB <s> bB"], "constraints": ["1<=N<=5000", "1<=gA,sA,bA,gB,sB,bB<=5000"]}}
{"name": "1236_A. Stones", "description": "Alice is playing with some stones.\n\nNow there are three numbered heaps of stones. The first of them contains a stones, the second of them contains b stones and the third of them contains c stones.\n\nEach time she can do one of two operations:\n\n  1. take one stone from the first heap and two stones from the second heap (this operation can be done only if the first heap contains at least one stone and the second heap contains at least two stones); \n  2. take one stone from the second heap and two stones from the third heap (this operation can be done only if the second heap contains at least one stone and the third heap contains at least two stones). \n\n\n\nShe wants to get the maximum number of stones, but she doesn't know what to do. Initially, she has 0 stones. Can you help her?\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Next t lines describe test cases in the following format:\n\nLine contains three non-negative integers a, b and c, separated by spaces (0 \u2264 a,b,c \u2264 100) \u2014 the number of stones in the first, the second and the third heap, respectively.\n\nIn hacks it is allowed to use only one test case in the input, so t = 1 should be satisfied.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> a <s> b <s> c", "<T_1>->a <s> b <s> c"], "constraints": ["1<=t<=100", "0<=a<=100", "0<=b<=100", "0<=c<=100"]}}
{"name": "1433_D. Districts Connection", "description": "There are n districts in the town, the i-th district belongs to the a_i-th bandit gang. Initially, no districts are connected to each other.\n\nYou are the mayor of the city and want to build n-1 two-way roads to connect all districts (two districts can be connected directly or through other connected districts).\n\nIf two districts belonging to the same gang are connected directly with a road, this gang will revolt.\n\nYou don't want this so your task is to build n-1 two-way roads in such a way that all districts are reachable from each other (possibly, using intermediate districts) and each pair of directly connected districts belong to different gangs, or determine that it is impossible to build n-1 roads to satisfy all the conditions.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (2 \u2264 n \u2264 5000) \u2014 the number of districts. The second line of the test case contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^9), where a_i is the gang the i-th district belongs to.\n\nIt is guaranteed that the sum of n does not exceed 5000 (\u2211 n \u2264 5000).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=500", "2<=n<=5000", "1<=a_i<=10^9"]}}
{"name": "p02647 Tokio Marine & Nichido Fire Insurance Programming Contest 2020 - Lamps", "description": "We have N bulbs arranged on a number line, numbered 1 to N from left to right. Bulb i is at coordinate i.\n\nEach bulb has a non-negative integer parameter called intensity. When there is a bulb of intensity d at coordinate x, the bulb illuminates the segment from coordinate x-d-0.5 to x+d+0.5. Initially, the intensity of Bulb i is A_i. We will now do the following operation K times in a row:\n\n* For each integer i between 1 and N (inclusive), let B_i be the number of bulbs illuminating coordinate i. Then, change the intensity of each bulb i to B_i.\n\n\n\nFind the intensity of each bulb after the K operations.\n\nConstraints\n\n* 1 \\leq N \\leq 2 \\times 10^5\n* 1 \\leq K \\leq 2 \\times 10^5\n* 0 \\leq A_i \\leq N\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nA_1 A_2 \\ldots A_N", "grammar": {"productions": ["<S>->[N] <s> K <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["1<=N<=2*10^5", "1<=K<=2*10^5", "0<=A_i<=N"]}}
{"name": "p02721 AtCoder Beginner Contest 161 - Yutori", "description": "Takahashi has decided to work on K days of his choice from the N days starting with tomorrow.\n\nYou are given an integer C and a string S. Takahashi will choose his workdays as follows:\n\n* After working for a day, he will refrain from working on the subsequent C days.\n* If the i-th character of S is `x`, he will not work on Day i, where Day 1 is tomorrow, Day 2 is the day after tomorrow, and so on.\n\n\n\nFind all days on which Takahashi is bound to work.\n\nConstraints\n\n* 1 \\leq N \\leq 2 \\times 10^5\n* 1 \\leq K \\leq N\n* 0 \\leq C \\leq N\n* The length of S is N.\n* Each character of S is `o` or `x`.\n* Takahashi can choose his workdays so that the conditions in Problem Statement are satisfied.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K C\nS", "grammar": {"productions": ["<S>->[N] <s> K <s> C <n> [ox]{N}"], "constraints": ["1<=N<=2*10^5", "1<=K<=N", "0<=C<=N"]}}
{"name": "1373_C. Pluses and Minuses", "description": "You are given a string s consisting only of characters + and -. You perform some process with this string. This process can be described by the following pseudocode: \n    \n    \n    res = 0  \n    for init = 0 to inf  \n        cur = init  \n        ok = true  \n        for i = 1 to |s|  \n            res = res + 1  \n            if s[i] == '+'  \n                cur = cur + 1  \n            else  \n                cur = cur - 1  \n            if cur < 0  \n                ok = false  \n                break  \n        if ok  \n            break  \n    \n\nNote that the inf denotes infinity, and the characters of the string are numbered from 1 to |s|.\n\nYou have to calculate the value of the res after the process ends.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe only lines of each test case contains string s (1 \u2264 |s| \u2264 10^6) consisting only of characters + and -.\n\nIt's guaranteed that sum of |s| over all test cases doesn't exceed 10^6.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [+-]{1,10^6}", "<T_1>->[+-]{1,10^6}"], "constraints": ["1<=t<=1000"]}}
{"name": "281_A. Word Capitalization", "description": "Capitalization is writing a word with its first letter as a capital letter. Your task is to capitalize the given word.\n\nNote, that during capitalization all the letters except the first one remains unchanged.\n\nInput\n\nA single line contains a non-empty word. This word consists of lowercase and uppercase English letters. The length of the word will not exceed 10^3.", "grammar": {"productions": ["<S>->[a-zA-Z]{0,10^3}"], "constraints": []}}
{"name": "p03696 AtCoder Beginner Contest 064 - Insertion", "description": "You are given a string S of length N consisting of `(` and `)`. Your task is to insert some number of `(` and `)` into S to obtain a correct bracket sequence.\nHere, a correct bracket sequence is defined as follows:\n\n* `()` is a correct bracket sequence.\n* If X is a correct bracket sequence, the concatenation of `(`, X and `)` in this order is also a correct bracket sequence.\n* If X and Y are correct bracket sequences, the concatenation of X and Y in this order is also a correct bracket sequence.\n* Every correct bracket sequence can be derived from the rules above.\n\n\n\nFind the shortest correct bracket sequence that can be obtained. If there is more than one such sequence, find the lexicographically smallest one.\n\nConstraints\n\n* The length of S is N.\n* 1 \u2264 N \u2264 100\n* S consists of `(` and `)`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nS", "grammar": {"productions": ["<S>->[N] <n> [()]{N}"], "constraints": ["1<=N<=100"]}}
{"name": "1248_B. Grow The Tree", "description": "Gardener Alexey teaches competitive programming to high school students. To congratulate Alexey on the Teacher's Day, the students have gifted him a collection of wooden sticks, where every stick has an integer length. Now Alexey wants to grow a tree from them.\n\nThe tree looks like a polyline on the plane, consisting of all sticks. The polyline starts at the point (0, 0). While constructing the polyline, Alexey will attach sticks to it one by one in arbitrary order. Each stick must be either vertical or horizontal (that is, parallel to OX or OY axis). It is not allowed for two consecutive sticks to be aligned simultaneously horizontally or simultaneously vertically. See the images below for clarification.\n\nAlexey wants to make a polyline in such a way that its end is as far as possible from (0, 0). Please help him to grow the tree this way.\n\nNote that the polyline defining the form of the tree may have self-intersections and self-touches, but it can be proved that the optimal answer does not contain any self-intersections or self-touches.\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 100 000) \u2014 the number of sticks Alexey got as a present.\n\nThe second line contains n integers a_1, \u2026, a_n (1 \u2264 a_i \u2264 10 000) \u2014 the lengths of the sticks.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=100000", "1<=a_i<=10000"]}}
{"name": "982_A. Row", "description": "You're given a row with n chairs. We call a seating of people \"maximal\" if the two following conditions hold:\n\n  1. There are no neighbors adjacent to anyone seated. \n  2. It's impossible to seat one more person without violating the first rule. \n\n\n\nThe seating is given as a string consisting of zeros and ones (0 means that the corresponding seat is empty, 1 \u2014 occupied). The goal is to determine whether this seating is \"maximal\".\n\nNote that the first and last seats are not adjacent (if n \u2260 2).\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 1000) \u2014 the number of chairs.\n\nThe next line contains a string of n characters, each of them is either zero or one, describing the seating.", "grammar": {"productions": ["<S>->[n] <n> [10]{n}"], "constraints": ["1<=n<=1000"]}}
{"name": "p03777 AtCoder Beginner Contest 056 - HonestOrDishonest", "description": "Two deer, AtCoDeer and TopCoDeer, are playing a game called Honest or Dishonest. In this game, an honest player always tells the truth, and an dishonest player always tell lies. You are given two characters a and b as the input. Each of them is either `H` or `D`, and carries the following information:\n\nIf a=`H`, AtCoDeer is honest; if a=`D`, AtCoDeer is dishonest. If b=`H`, AtCoDeer is saying that TopCoDeer is honest; if b=`D`, AtCoDeer is saying that TopCoDeer is dishonest.\n\nGiven this information, determine whether TopCoDeer is honest.\n\nConstraints\n\n* a=`H` or a=`D`.\n* b=`H` or b=`D`.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\na b", "grammar": {"productions": ["<S>->a <s> b", "a->H|D", "b->H|D"], "constraints": []}}
{"name": "p03760 AtCoder Beginner Contest 058 - \u2235\u2234\u2235", "description": "Snuke signed up for a new website which holds programming competitions. He worried that he might forget his password, and he took notes of it. Since directly recording his password would cause him trouble if stolen, he took two notes: one contains the characters at the odd-numbered positions, and the other contains the characters at the even-numbered positions.\n\nYou are given two strings O and E. O contains the characters at the odd-numbered positions retaining their relative order, and E contains the characters at the even-numbered positions retaining their relative order. Restore the original password.\n\nConstraints\n\n* O and E consists of lowercase English letters (`a` - `z`).\n* 1 \\leq |O|,|E| \\leq 50\n* |O| - |E| is either 0 or 1.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nO\nE", "grammar": {"productions": ["<S>->[a-z]{1,50} <n> [a-z]{1,50}"], "constraints": []}}
{"name": "p02960 AtCoder Beginner Contest 135 - Digits Parade", "description": "Given is a string S. Each character in S is either a digit (`0`, ..., `9`) or `?`.\n\nAmong the integers obtained by replacing each occurrence of `?` with a digit, how many have a remainder of 5 when divided by 13? An integer may begin with 0.\n\nSince the answer can be enormous, print the count modulo 10^9+7.\n\nConstraints\n\n* S is a string consisting of digits (`0`, ..., `9`) and `?`.\n* 1 \\leq |S| \\leq 10^5\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>->[0-9?]{1,10^5}"], "constraints": []}}
{"name": "1407_B. Big Vova", "description": "Alexander is a well-known programmer. Today he decided to finally go out and play football, but with the first hit he left a dent on the new Rolls-Royce of the wealthy businessman Big Vova. Vladimir has recently opened a store on the popular online marketplace \"Zmey-Gorynych\", and offers Alex a job: if he shows his programming skills by solving a task, he'll work as a cybersecurity specialist. Otherwise, he'll be delivering some doubtful products for the next two years.\n\nYou're given n positive integers a_1, a_2, ..., a_n. Using each of them exactly at once, you're to make such sequence b_1, b_2, ..., b_n that sequence c_1, c_2, ..., c_n is lexicographically maximal, where c_i=GCD(b_1,...,b_i) - the greatest common divisor of the first i elements of b. \n\nAlexander is really afraid of the conditions of this simple task, so he asks you to solve it.\n\nA sequence a is lexicographically smaller than a sequence b if and only if one of the following holds:\n\n  * a is a prefix of b, but a \u2260 b;\n  * in the first position where a and b differ, the sequence a has a smaller element than the corresponding element in b.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 10^3). Description of the test cases follows.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^3) \u2014 the length of the sequence a.\n\nThe second line of each test case contains n integers a_1,...,a_n (1 \u2264 a_i \u2264 10^3) \u2014 the sequence a.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^3.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=10^3", "1<=n<=10^3", "1<=a_i<=10^3"]}}
{"name": "p03494 AtCoder Beginner Contest 081 - Shift only", "description": "There are N positive integers written on a blackboard: A_1, ..., A_N.\n\nSnuke can perform the following operation when all integers on the blackboard are even:\n\n* Replace each integer X on the blackboard by X divided by 2.\n\n\n\nFind the maximum possible number of operations that Snuke can perform.\n\nConstraints\n\n* 1 \\leq N \\leq 200\n* 1 \\leq A_i \\leq 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 A_2 ... A_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["1<=N<=200", "1<=A_i<=10^9"]}}
{"name": "1322_A. Unusual Competitions", "description": "A bracketed sequence is called correct (regular) if by inserting \"+\" and \"1\" you can get a well-formed mathematical expression from it. For example, sequences \"(())()\", \"()\" and \"(()(()))\" are correct, while \")(\", \"(()\" and \"(()))(\" are not.\n\nThe teacher gave Dmitry's class a very strange task \u2014 she asked every student to come up with a sequence of arbitrary length, consisting only of opening and closing brackets. After that all the students took turns naming the sequences they had invented. When Dima's turn came, he suddenly realized that all his classmates got the correct bracketed sequence, and whether he got the correct bracketed sequence, he did not know.\n\nDima suspects now that he simply missed the word \"correct\" in the task statement, so now he wants to save the situation by modifying his sequence slightly. More precisely, he can the arbitrary number of times (possibly zero) perform the reorder operation.\n\nThe reorder operation consists of choosing an arbitrary consecutive subsegment (substring) of the sequence and then reordering all the characters in it in an arbitrary way. Such operation takes l nanoseconds, where l is the length of the subsegment being reordered. It's easy to see that reorder operation doesn't change the number of opening and closing brackets. For example for \"))((\" he can choose the substring \")(\" and do reorder \")()(\" (this operation will take 2 nanoseconds).\n\nSince Dima will soon have to answer, he wants to make his sequence correct as fast as possible. Help him to do this, or determine that it's impossible.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 10^6) \u2014 the length of Dima's sequence.\n\nThe second line contains string of length n, consisting of characters \"(\" and \")\" only.", "grammar": {"productions": ["<S>->[n] <n> [()]{n}"], "constraints": ["1<=n<=10^6"]}}
{"name": "p03108 AtCoder Beginner Contest 120 - Decayed Bridges", "description": "There are N islands and M bridges.\n\nThe i-th bridge connects the A_i-th and B_i-th islands bidirectionally.\n\nInitially, we can travel between any two islands using some of these bridges.\n\nHowever, the results of a survey show that these bridges will all collapse because of aging, in the order from the first bridge to the M-th bridge.\n\nLet the inconvenience be the number of pairs of islands (a, b) (a < b) such that we are no longer able to travel between the a-th and b-th islands using some of the bridges remaining.\n\nFor each i (1 \\leq i \\leq M), find the inconvenience just after the i-th bridge collapses.\n\nConstraints\n\n* All values in input are integers.\n* 2 \\leq N \\leq 10^5\n* 1 \\leq M \\leq 10^5\n* 1 \\leq A_i < B_i \\leq N\n* All pairs (A_i, B_i) are distinct.\n* The inconvenience is initially 0.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nA_1 B_1\nA_2 B_2\n\\vdots\nA_M B_M", "grammar": {"productions": ["<S>->N <s> [M] <n> <T_M>", "<T_i>-><T_i-1> <n> A_i <s> B_i", "<T_1>->A_1 <s> B_1"], "constraints": ["2<=N<=10^5", "1<=M<=10^5", "1<=A_i<B_i<=N", "(A_i,B_i)!=(A_j,B_j)"]}}
{"name": "1380_B. Universal Solution", "description": "Recently, you found a bot to play \"Rock paper scissors\" with. Unfortunately, the bot uses quite a simple algorithm to play: he has a string s = s_1 s_2 ... s_{n} of length n where each letter is either R, S or P.\n\nWhile initializing, the bot is choosing a starting index pos (1 \u2264 pos \u2264 n), and then it can play any number of rounds. In the first round, he chooses \"Rock\", \"Scissors\" or \"Paper\" based on the value of s_{pos}: \n\n  * if s_{pos} is equal to R the bot chooses \"Rock\"; \n  * if s_{pos} is equal to S the bot chooses \"Scissors\"; \n  * if s_{pos} is equal to P the bot chooses \"Paper\"; \n\n\n\nIn the second round, the bot's choice is based on the value of s_{pos + 1}. In the third round \u2014 on s_{pos + 2} and so on. After s_n the bot returns to s_1 and continues his game.\n\nYou plan to play n rounds and you've already figured out the string s but still don't know what is the starting index pos. But since the bot's tactic is so boring, you've decided to find n choices to each round to maximize the average number of wins.\n\nIn other words, let's suggest your choices are c_1 c_2 ... c_n and if the bot starts from index pos then you'll win in win(pos) rounds. Find c_1 c_2 ... c_n such that (win(1) + win(2) + ... + win(n))/(n) is maximum possible.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nNext t lines contain test cases \u2014 one per line. The first and only line of each test case contains string s = s_1 s_2 ... s_{n} (1 \u2264 n \u2264 2 \u22c5 10^5; s_i \u2208 \\{R, S, P\\}) \u2014 the string of the bot.\n\nIt's guaranteed that the total length of all strings in one test doesn't exceed 2 \u22c5 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [RSP]{1,2*10^5}", "<T_1>->[RSP]{1,2*10^5}"], "constraints": ["1<=t<=1000"]}}
{"name": "1177_A. Digits Sequence (Easy Edition)", "description": "Let's write all the positive integer numbers one after another from 1 without any delimiters (i.e. as a single string). It will be the infinite sequence starting with 123456789101112131415161718192021222324252627282930313233343536...\n\nYour task is to print the k-th digit of this sequence.\n\nInput\n\nThe first and only line contains integer k (1 \u2264 k \u2264 10000) \u2014 the position to process (1-based index).", "grammar": {"productions": ["<S>->k"], "constraints": ["1<=k<=10000"]}}
{"name": "p04034 AtCoder Grand Contest 002 - Box and Ball", "description": "We have N boxes, numbered 1 through N. At first, box 1 contains one red ball, and each of the other boxes contains one white ball.\n\nSnuke will perform the following M operations, one by one. In the i-th operation, he randomly picks one ball from box x_i, then he puts it into box y_i.\n\nFind the number of boxes that may contain the red ball after all operations are performed.\n\nConstraints\n\n* 2\u2264N\u226410^5\n* 1\u2264M\u226410^5\n* 1\u2264x_i,y_i\u2264N\n* x_i\u2260y_i\n* Just before the i-th operation is performed, box x_i contains at least 1 ball.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN M\nx_1 y_1\n:\nx_M y_M", "grammar": {"productions": ["<S>->N <s> [M] <n> <T_M>", "<T_i>-><T_i-1> <n> x_i <s> y_i", "<T_1>->x_1 <s> y_1"], "constraints": ["2<=N<=10^5", "1<=M<=2*10^5", "1<=x_i,y_i<=N", "x_i!=y_i"]}}
{"name": "p02916 AtCoder Beginner Contest 140 - Buffet", "description": "Takahashi went to an all-you-can-eat buffet with N kinds of dishes and ate all of them (Dish 1, Dish 2, \\ldots, Dish N) once.\n\nThe i-th dish (1 \\leq i \\leq N) he ate was Dish A_i.\n\nWhen he eats Dish i (1 \\leq i \\leq N), he gains B_i satisfaction points.\n\nAdditionally, when he eats Dish i+1 just after eating Dish i (1 \\leq i \\leq N - 1), he gains C_i more satisfaction points.\n\nFind the sum of the satisfaction points he gained.\n\nConstraints\n\n* All values in input are integers.\n* 2 \\leq N \\leq 20\n* 1 \\leq A_i \\leq N\n* A_1, A_2, ..., A_N are all different.\n* 1 \\leq B_i \\leq 50\n* 1 \\leq C_i \\leq 50\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 A_2 ... A_N\nB_1 B_2 ... B_N\nC_1 C_2 ... C_{N-1}", "grammar": {"productions": ["<S>->[N] <n> <T_N> <n> <L_N> <n> <Z_N-1>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1", "<L_i>-><L_i-1> <s> B_i", "<L_1>->B_1", "<Z_i>-><Z_i-1> <s> C_i", "<Z_1>->C_1"], "constraints": ["2<=N<=20", "1<=A_i<=N", "1<=B_i<=50", "1<=C_i<=50", "A_i!=A_j"]}}
{"name": "p02703 AtCoder Beginner Contest 164 - Two Currencies", "description": "There are N cities numbered 1 to N, connected by M railroads.\n\nYou are now at City 1, with 10^{100} gold coins and S silver coins in your pocket.\n\nThe i-th railroad connects City U_i and City V_i bidirectionally, and a one-way trip costs A_i silver coins and takes B_i minutes. You cannot use gold coins to pay the fare.\n\nThere is an exchange counter in each city. At the exchange counter in City i, you can get C_i silver coins for 1 gold coin. The transaction takes D_i minutes for each gold coin you give. You can exchange any number of gold coins at each exchange counter.\n\nFor each t=2, ..., N, find the minimum time needed to travel from City 1 to City t. You can ignore the time spent waiting for trains.\n\nConstraints\n\n* 2 \\leq N \\leq 50\n* N-1 \\leq M \\leq 100\n* 0 \\leq S \\leq 10^9\n* 1 \\leq A_i \\leq 50\n* 1 \\leq B_i,C_i,D_i \\leq 10^9\n* 1 \\leq U_i < V_i \\leq N\n* There is no pair i, j(i \\neq j) such that (U_i,V_i)=(U_j,V_j).\n* Each city t=2,...,N can be reached from City 1 with some number of railroads.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M S\nU_1 V_1 A_1 B_1\n:\nU_M V_M A_M B_M\nC_1 D_1\n:\nC_N D_N", "grammar": {"productions": ["<S>->[N] <s> [M] <s> S <n> <T_M> <n> <L_N>", "<T_i>-><T_i-1> <n> U_i <s> V_i <s> A_i <s> B_i", "<T_1>->U_1 <s> V_1 <s> A_1 <s> B_1", "<L_i>-><L_i-1> <n> C_i <s> D_i", "<L_1>->C_1 <s> D_1"], "constraints": ["2<=N<=50", "N-1<=M<=100", "0<=S<=10^9", "1<=A_i<=50", "1<=B_i,C_i,D_i<=10^9", "1<=U_i<V_i<=N"]}}
{"name": "58_A. Chat room", "description": "Vasya has recently learned to type and log on to the Internet. He immediately entered a chat room and decided to say hello to everybody. Vasya typed the word s. It is considered that Vasya managed to say hello if several letters can be deleted from the typed word so that it resulted in the word \"hello\". For example, if Vasya types the word \"ahhellllloou\", it will be considered that he said hello, and if he types \"hlelo\", it will be considered that Vasya got misunderstood and he didn't manage to say hello. Determine whether Vasya managed to say hello by the given word s.\n\nInput\n\nThe first and only line contains the word s, which Vasya typed. This word consisits of small Latin letters, its length is no less that 1 and no more than 100 letters.", "grammar": {"productions": ["<S>->[a-z]{1,100}"], "constraints": []}}
{"name": "1366_B. Shuffle", "description": "You are given an array consisting of n integers a_1, a_2, ..., a_n. Initially a_x = 1, all other elements are equal to 0.\n\nYou have to perform m operations. During the i-th operation, you choose two indices c and d such that l_i \u2264 c, d \u2264 r_i, and swap a_c and a_d.\n\nCalculate the number of indices k such that it is possible to choose the operations so that a_k = 1 in the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then the description of t testcases follow.\n\nThe first line of each test case contains three integers n, x and m (1 \u2264 n \u2264 10^9; 1 \u2264 m \u2264 100; 1 \u2264 x \u2264 n).\n\nEach of next m lines contains the descriptions of the operations; the i-th line contains two integers l_i and r_i (1 \u2264 l_i \u2264 r_i \u2264 n).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n <s> x <s> [m] <n> <L_m>", "<T_1>->n <s> x <s> [m] <n> <L_m>", "<L_i>-><L_i-1> <n> l_i <s> r_i", "<L_1>->l_1 <s> r_1"], "constraints": ["1<=t<=100", "1<=n<=10^9", "1<=m<=100", "1<=x<=n", "1<=l_i<=r_i<=n"]}}
{"name": "p02258 Maximum Profit", "description": "You can obtain profits from foreign exchange margin transactions. For example, if you buy 1000 dollar at a rate of 100 yen per dollar, and sell them at a rate of 108 yen per dollar, you can obtain (108 - 100) \u00d7 1000 = 8000 yen.\n\nWrite a program which reads values of a currency $R_t$ at a certain time $t$ ($t = 0, 1, 2, ... n-1$), and reports the maximum value of $R_j - R_i$ where $j > i$ .\n\nConstraints\n\n* $2 \\leq n \\leq 200,000$\n* $1 \\leq R_t \\leq 10^9$\n\nInput\n\nThe first line contains an integer $n$. In the following $n$ lines, $R_t$ ($t = 0, 1, 2, ... n-1$) are given in order.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> R_i", "<T_1>->R_1"], "constraints": ["2<=n<=200000", "1<=R_i<=10^9"]}}
{"name": "1237_A. Balanced Rating Changes", "description": "Another Codeforces Round has just finished! It has gathered n participants, and according to the results, the expected rating change of participant i is a_i. These rating changes are perfectly balanced \u2014 their sum is equal to 0.\n\nUnfortunately, due to minor technical glitches, the round is declared semi-rated. It means that all rating changes must be divided by two.\n\nThere are two conditions though: \n\n  * For each participant i, their modified rating change b_i must be integer, and as close to (a_i)/(2) as possible. It means that either b_i = \u230a (a_i)/(2) \u230b or b_i = \u2308 (a_i)/(2) \u2309. In particular, if a_i is even, b_i = (a_i)/(2). Here \u230a x \u230b denotes rounding down to the largest integer not greater than x, and \u2308 x \u2309 denotes rounding up to the smallest integer not smaller than x. \n  * The modified rating changes must be perfectly balanced \u2014 their sum must be equal to 0. \n\n\n\nCan you help with that?\n\nInput\n\nThe first line contains a single integer n (2 \u2264 n \u2264 13 845), denoting the number of participants.\n\nEach of the next n lines contains a single integer a_i (-336 \u2264 a_i \u2264 1164), denoting the rating change of the i-th participant.\n\nThe sum of all a_i is equal to 0.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> a_i", "<T_1>->a_1"], "constraints": ["2<=n<=13845", "-336<=a_i<=1164"]}}
{"name": "1176_C. Lose it!", "description": "You are given an array a consisting of n integers. Each a_i is one of the six following numbers: 4, 8, 15, 16, 23, 42.\n\nYour task is to remove the minimum number of elements to make this array good.\n\nAn array of length k is called good if k is divisible by 6 and it is possible to split it into k/6 subsequences 4, 8, 15, 16, 23, 42.\n\nExamples of good arrays:\n\n  * [4, 8, 15, 16, 23, 42] (the whole array is a required sequence); \n  * [4, 8, 4, 15, 16, 8, 23, 15, 16, 42, 23, 42] (the first sequence is formed from first, second, fourth, fifth, seventh and tenth elements and the second one is formed from remaining elements); \n  * [] (the empty array is good). \n\n\n\nExamples of bad arrays: \n\n  * [4, 8, 15, 16, 42, 23] (the order of elements should be exactly 4, 8, 15, 16, 23, 42); \n  * [4, 8, 15, 16, 23, 42, 4] (the length of the array is not divisible by 6); \n  * [4, 8, 15, 16, 23, 42, 4, 8, 15, 16, 23, 23] (the first sequence can be formed from first six elements but the remaining array cannot form the required sequence). \n\nInput\n\nThe first line of the input contains one integer n (1 \u2264 n \u2264 5 \u22c5 10^5) \u2014 the number of elements in a.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (each a_i is one of the following numbers: 4, 8, 15, 16, 23, 42), where a_i is the i-th element of a.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1", "a_i->4|8|15|16|23|42"], "constraints": ["1<=n<=5*10^5"]}}
{"name": "p03836 AtCoder Beginner Contest 051 - Back and Forth", "description": "Dolphin resides in two-dimensional Cartesian plane, with the positive x-axis pointing right and the positive y-axis pointing up.\nCurrently, he is located at the point (sx,sy). In each second, he can move up, down, left or right by a distance of 1.\nHere, both the x- and y-coordinates before and after each movement must be integers.\nHe will first visit the point (tx,ty) where sx < tx and sy < ty, then go back to the point (sx,sy), then visit the point (tx,ty) again, and lastly go back to the point (sx,sy).\nHere, during the whole travel, he is not allowed to pass through the same point more than once, except the points (sx,sy) and (tx,ty).\nUnder this condition, find a shortest path for him.\n\nConstraints\n\n* -1000 \u2264 sx < tx \u2264 1000\n* -1000 \u2264 sy < ty \u2264 1000\n* sx,sy,tx and ty are integers.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nsx sy tx ty", "grammar": {"productions": ["<S>->sx <s> sy <s> tx <s> ty"], "constraints": ["-1000<=sx<=1000", "-1000<tx<=1000", "-1000<=sy<=1000", "-1000<ty<=1000"]}}
{"name": "p02537 ACL Beginner Contest - Flat Subsequence", "description": "You are given a sequence A_1, A_2, ..., A_N and an integer K.\n\nPrint the maximum possible length of a sequence B that satisfies the following conditions:\n\n* B is a (not necessarily continuous) subsequence of A.\n* For each pair of adjacents elements of B, the absolute difference of the elements is at most K.\n\nConstraints\n\n* 1 \\leq N \\leq 300,000\n* 0 \\leq A_i \\leq 300,000\n* 0 \\leq K \\leq 300,000\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nA_1\nA_2\n:\nA_N", "grammar": {"productions": ["<S>->[N] <s> K <n> <T_N>", "<T_i>-><T_i-1> <n> A_i", "<T_1>->A_1"], "constraints": ["1<=N<=300000", "0<=A_i<=300000", "0<=K<=300000"]}}
{"name": "456_A. Laptops", "description": "One day Dima and Alex had an argument about the price and quality of laptops. Dima thinks that the more expensive a laptop is, the better it is. Alex disagrees. Alex thinks that there are two laptops, such that the price of the first laptop is less (strictly smaller) than the price of the second laptop but the quality of the first laptop is higher (strictly greater) than the quality of the second laptop.\n\nPlease, check the guess of Alex. You are given descriptions of n laptops. Determine whether two described above laptops exist.\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 10^5) \u2014 the number of laptops.\n\nNext n lines contain two integers each, ai and bi (1 \u2264 ai, bi \u2264 n), where ai is the price of the i-th laptop, and bi is the number that represents the quality of the i-th laptop (the larger the number is, the higher is the quality).\n\nAll ai are distinct. All bi are distinct.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> a_i <s> b_i", "<T_1>->a_i <s> b_i"], "constraints": ["1<=n<=10^5", "1<=a_i,b_i<=n"]}}
{"name": "p02691 AtCoder Beginner Contest 166 - This Message Will Self-Destruct in 5s", "description": "You are the top spy of AtCoder Kingdom. To prevent the stolen secret from being handed to AlDebaran Kingdom, you have sneaked into the party where the transaction happens.\n\nThere are N attendees in the party, and they are given attendee numbers from 1 through N. The height of Attendee i is A_i.\n\nAccording to an examination beforehand, you know that a pair of attendees satisfying the condition below will make the transaction.\n\n* The absolute difference of their attendee numbers is equal to the sum of their heights.\n\n\n\nThere are \\frac{N(N-1)}{2} ways to choose two from the N attendees and make a pair. Among them, how many satisfy the condition above?\n\nP.S.: We cannot let you know the secret.\n\nConstraints\n\n* All values in input are integers.\n* 2 \\leq N \\leq 2 \\times 10^5\n* 1 \\leq A_i \\leq 10^9\\ (1 \\leq i \\leq N)\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 A_2 \\dots A_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["2<=N<=2*10^5", "1<=A_i<=10^9"]}}
{"name": "p03558 AtCoder Beginner Contest 077 - Small Multiple", "description": "Find the smallest possible sum of the digits in the decimal notation of a positive multiple of K.\n\nConstraints\n\n* 2 \\leq K \\leq 10^5\n* K is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nK", "grammar": {"productions": ["<S>->K"], "constraints": ["2<=K<=10^5"]}}
{"name": "461_A. Appleman and Toastman", "description": "Appleman and Toastman play a game. Initially Appleman gives one group of n numbers to the Toastman, then they start to complete the following tasks:\n\n  * Each time Toastman gets a group of numbers, he sums up all the numbers and adds this sum to the score. Then he gives the group to the Appleman. \n  * Each time Appleman gets a group consisting of a single number, he throws this group out. Each time Appleman gets a group consisting of more than one number, he splits the group into two non-empty groups (he can do it in any way) and gives each of them to Toastman. \n\n\n\nAfter guys complete all the tasks they look at the score value. What is the maximum possible value of score they can get?\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 3\u00b710^5). The second line contains n integers a1, a2, ..., an (1 \u2264 ai \u2264 10^6) \u2014 the initial group that is given to Toastman.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=N<=3*10^5", "1<=a_i<=10^6"]}}
{"name": "898_A. Rounding", "description": "Vasya has a non-negative integer n. He wants to round it to nearest integer, which ends up with 0. If n already ends up with 0, Vasya considers it already rounded.\n\nFor example, if n = 4722 answer is 4720. If n = 5 Vasya can round it to 0 or to 10. Both ways are correct.\n\nFor given n find out to which integer will Vasya round it.\n\nInput\n\nThe first line contains single integer n (0 \u2264 n \u2264 10^9) \u2014 number that Vasya has.", "grammar": {"productions": ["<S>->n"], "constraints": ["0<=n<=1000000000"]}}
{"name": "659_A. Round House", "description": "Vasya lives in a round building, whose entrances are numbered sequentially by integers from 1 to n. Entrance n and entrance 1 are adjacent.\n\nToday Vasya got bored and decided to take a walk in the yard. Vasya lives in entrance a and he decided that during his walk he will move around the house b entrances in the direction of increasing numbers (in this order entrance n should be followed by entrance 1). The negative value of b corresponds to moving |b| entrances in the order of decreasing numbers (in this order entrance 1 is followed by entrance n). If b = 0, then Vasya prefers to walk beside his entrance.\n\n<image> Illustration for n = 6, a = 2, b = - 5.\n\nHelp Vasya to determine the number of the entrance, near which he will be at the end of his walk.\n\nInput\n\nThe single line of the input contains three space-separated integers n, a and b (1 \u2264 n \u2264 100, 1 \u2264 a \u2264 n, - 100 \u2264 b \u2264 100) \u2014 the number of entrances at Vasya's place, the number of his entrance and the length of his walk, respectively.", "grammar": {"productions": ["<S>->n <s> a <s> b"], "constraints": ["1<=n<=100", "1<=a<=n", "-100<=b<=100"]}}
{"name": "p02662 AtCoder Beginner Contest 169 - Knapsack for All Subsets", "description": "Given are a sequence of N positive integers A_1, A_2, \\ldots, A_N and another positive integer S.\nFor a non-empty subset T of the set \\\\{1, 2, \\ldots , N \\\\}, let us define f(T) as follows:\n\n\n* f(T) is the number of different non-empty subsets \\\\{x_1, x_2, \\ldots , x_k \\\\} of T such that A_{x_1}+A_{x_2}+\\cdots +A_{x_k} = S.\n\n\n\nFind the sum of f(T) over all 2^N-1 subsets T of \\\\{1, 2, \\ldots , N \\\\}. Since the sum can be enormous, print it modulo 998244353.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 3000\n* 1 \\leq S \\leq 3000\n* 1 \\leq A_i \\leq 3000\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN S\nA_1 A_2 ... A_N", "grammar": {"productions": ["<S>->[N] <s> S <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["1<=N<=3000", "1<=S<=3000", "1<=A_i<=3000"]}}
{"name": "519_C. A and B and Team Training", "description": "A and B are preparing themselves for programming contests.\n\nAn important part of preparing for a competition is sharing programming knowledge from the experienced members to those who are just beginning to deal with the contests. Therefore, during the next team training A decided to make teams so that newbies are solving problems together with experienced participants.\n\nA believes that the optimal team of three people should consist of one experienced participant and two newbies. Thus, each experienced participant can share the experience with a large number of people.\n\nHowever, B believes that the optimal team should have two experienced members plus one newbie. Thus, each newbie can gain more knowledge and experience.\n\nAs a result, A and B have decided that all the teams during the training session should belong to one of the two types described above. Furthermore, they agree that the total number of teams should be as much as possible.\n\nThere are n experienced members and m newbies on the training session. Can you calculate what maximum number of teams can be formed?\n\nInput\n\nThe first line contains two integers n and m (0 \u2264 n, m \u2264 5\u00b710^5) \u2014 the number of experienced participants and newbies that are present at the training session.", "grammar": {"productions": ["<S>->n <s> m"], "constraints": ["0<=n<=5*10^5", "0<=m<=5*10^5"]}}
{"name": "p03242 AtCoder Beginner Contest 111 - AtCoder Beginner Contest 999", "description": "Cat Snuke is learning to write characters. Today, he practiced writing digits `1` and `9`, but he did it the other way around.\n\nYou are given a three-digit integer n written by Snuke. Print the integer obtained by replacing each digit `1` with `9` and each digit `9` with `1` in n.\n\nConstraints\n\n* 111 \\leq n \\leq 999\n* n is an integer consisting of digits `1` and `9`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nn", "grammar": {"productions": ["<S>->n"], "constraints": ["111<=n<=999"]}}
{"name": "p03838 AtCoder Grand Contest 008 - Simple Calculator", "description": "Snuke has a calculator. It has a display and two buttons.\n\nInitially, the display shows an integer x. Snuke wants to change this value into another integer y, by pressing the following two buttons some number of times in arbitrary order:\n\n* Button A: When pressed, the value on the display is incremented by 1.\n* Button B: When pressed, the sign of the value on the display is reversed.\n\n\n\nFind the minimum number of times Snuke needs to press the buttons to achieve his objective. It can be shown that the objective is always achievable regardless of the values of the integers x and y.\n\nConstraints\n\n* x and y are integers.\n* |x|, |y| \u2264 10^9\n* x and y are different.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nx y", "grammar": {"productions": ["<S>->x <s> y"], "constraints": ["-10^9<=x,y<=10^9"]}}
{"name": "p02633 AtCoder Grand Contest 046 - Takahashikun  The Strider", "description": "Takahashi is standing on a two-dimensional plane, facing north. Find the minimum positive integer K such that Takahashi will be at the starting position again after he does the following action K times:\n\n* Go one meter in the direction he is facing. Then, turn X degrees counter-clockwise.\n\nConstraints\n\n* 1 \\leq X \\leq 179\n* X is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX", "grammar": {"productions": ["<S>->X"], "constraints": ["1<=X<=179"]}}
{"name": "1331_D. Again?", "description": "Input\n\nThe only line of the input contains a 7-digit hexadecimal number. The first \"digit\" of the number is letter A, the rest of the \"digits\" are decimal digits 0-9.", "grammar": {"productions": ["<S>->A [0-9]{6}"], "constraints": []}}
{"name": "931_A. Friends Meeting", "description": "Two friends are on the coordinate axis Ox in points with integer coordinates. One of them is in the point x1 = a, another one is in the point x2 = b. \n\nEach of the friends can move by one along the line in any direction unlimited number of times. When a friend moves, the tiredness of a friend changes according to the following rules: the first move increases the tiredness by 1, the second move increases the tiredness by 2, the third \u2014 by 3 and so on. For example, if a friend moves first to the left, then to the right (returning to the same point), and then again to the left his tiredness becomes equal to 1 + 2 + 3 = 6.\n\nThe friends want to meet in a integer point. Determine the minimum total tiredness they should gain, if they meet in the same point.\n\nInput\n\nThe first line contains a single integer a (1 \u2264 a \u2264 1000) \u2014 the initial position of the first friend. \n\nThe second line contains a single integer b (1 \u2264 b \u2264 1000) \u2014 the initial position of the second friend.\n\nIt is guaranteed that a \u2260 b.", "grammar": {"productions": ["<S>->a <n> b"], "constraints": ["1<=a<=1000", "1<=b<=1000", "a!=b"]}}
{"name": "p03837 AtCoder Beginner Contest 051 - Candidates of No Shortest Paths", "description": "You are given an undirected connected weighted graph with N vertices and M edges that contains neither self-loops nor double edges.\nThe i-th (1\u2264i\u2264M) edge connects vertex a_i and vertex b_i with a distance of c_i.\nHere, a self-loop is an edge where a_i = b_i (1\u2264i\u2264M), and double edges are two edges where (a_i,b_i)=(a_j,b_j) or (a_i,b_i)=(b_j,a_j) (1\u2264i<j\u2264M).\nA connected graph is a graph where there is a path between every pair of different vertices.\nFind the number of the edges that are not contained in any shortest path between any pair of different vertices.\n\nConstraints\n\n* 2\u2264N\u2264100\n* N-1\u2264M\u2264min(N(N-1)/2,1000)\n* 1\u2264a_i,b_i\u2264N\n* 1\u2264c_i\u22641000\n* c_i is an integer.\n* The given graph contains neither self-loops nor double edges.\n* The given graph is connected.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN M\na_1 b_1 c_1\na_2 b_2 c_2\n:\na_M b_M c_M", "grammar": {"productions": ["<S>->N <s> [M] <n> <T_M>", "<T_i>-><T_i-1> <n> a_i <s> b_i <s> c_i", "<T_1>->a_1 <s> b_1 <s> c_1"], "constraints": ["2<=N<=100", "N-1<=M<=min(N(N-1)/2,1000)", "1<=a_i<=N", "1<=b_i<=N", "1<=c_i<=1000"]}}
{"name": "1342_C. Yet Another Counting Problem", "description": "You are given two integers a and b, and q queries. The i-th query consists of two numbers l_i and r_i, and the answer to it is the number of integers x such that l_i \u2264 x \u2264 r_i, and ((x mod a) mod b) \u2260 ((x mod b) mod a). Calculate the answer for each query.\n\nRecall that y mod z is the remainder of the division of y by z. For example, 5 mod 3 = 2, 7 mod 8 = 7, 9 mod 4 = 1, 9 mod 9 = 0.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then the test cases follow.\n\nThe first line of each test case contains three integers a, b and q (1 \u2264 a, b \u2264 200; 1 \u2264 q \u2264 500).\n\nThen q lines follow, each containing two integers l_i and r_i (1 \u2264 l_i \u2264 r_i \u2264 10^{18}) for the corresponding query.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> a <s> b <s> [q] <n> <L_q>", "<T_1>->a <s> b <s> [q] <n> <L_q>", "<L_i>-><L_i-1> <n> l_i <s> r_i", "<L_1>->l_1 <s> r_1"], "constraints": ["1<=t<=100", "1<=a,b<=200", "1<=q<=500", "1<=l_i<=r_i<=10^18"]}}
{"name": "831_B. Keyboard Layouts", "description": "There are two popular keyboard layouts in Berland, they differ only in letters positions. All the other keys are the same. In Berland they use alphabet with 26 letters which coincides with English alphabet.\n\nYou are given two strings consisting of 26 distinct letters each: all keys of the first and the second layouts in the same order. \n\nYou are also given some text consisting of small and capital English letters and digits. It is known that it was typed in the first layout, but the writer intended to type it in the second layout. Print the text if the same keys were pressed in the second layout.\n\nSince all keys but letters are the same in both layouts, the capitalization of the letters should remain the same, as well as all other characters.\n\nInput\n\nThe first line contains a string of length 26 consisting of distinct lowercase English letters. This is the first layout.\n\nThe second line contains a string of length 26 consisting of distinct lowercase English letters. This is the second layout.\n\nThe third line contains a non-empty string s consisting of lowercase and uppercase English letters and digits. This is the text typed in the first layout. The length of s does not exceed 1000.", "grammar": {"productions": ["<S>->[a-z]{26} <n> [a-z]{26} <n> [a-zA-Z0-9]{1,1000}"], "constraints": []}}
{"name": "p02709 AtCoder Beginner Contest 163 - Active Infants", "description": "There are N children standing in a line from left to right. The activeness of the i-th child from the left is A_i.\n\nYou can rearrange these children just one time in any order you like.\n\nWhen a child who originally occupies the x-th position from the left in the line moves to the y-th position from the left, that child earns A_x \\times |x-y| happiness points.\n\nFind the maximum total happiness points the children can earn.\n\nConstraints\n\n* 2 \\leq N \\leq 2000\n* 1 \\leq A_i \\leq 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 A_2 ... A_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["2<=N<=2000", "1<=A_i<=10^9"]}}
{"name": "1245_A. Good ol' Numbers Coloring", "description": "Consider the set of all nonnegative integers: {0, 1, 2, ...}. Given two integers a and b (1 \u2264 a, b \u2264 10^4). We paint all the numbers in increasing number first we paint 0, then we paint 1, then 2 and so on.\n\nEach number is painted white or black. We paint a number i according to the following rules: \n\n  * if i = 0, it is colored white; \n  * if i \u2265 a and i - a is colored white, i is also colored white; \n  * if i \u2265 b and i - b is colored white, i is also colored white; \n  * if i is still not colored white, it is colored black. \n\n\n\nIn this way, each nonnegative integer gets one of two colors.\n\nFor example, if a=3, b=5, then the colors of the numbers (in the order from 0) are: white (0), black (1), black (2), white (3), black (4), white (5), white (6), black (7), white (8), white (9), ...\n\nNote that: \n\n  * It is possible that there are infinitely many nonnegative integers colored black. For example, if a = 10 and b = 10, then only 0, 10, 20, 30 and any other nonnegative integers that end in 0 when written in base 10 are white. The other integers are colored black. \n  * It is also possible that there are only finitely many nonnegative integers colored black. For example, when a = 1 and b = 10, then there is no nonnegative integer colored black at all. \n\n\n\nYour task is to determine whether or not the number of nonnegative integers colored black is infinite.\n\nIf there are infinitely many nonnegative integers colored black, simply print a line containing \"Infinite\" (without the quotes). Otherwise, print \"Finite\" (without the quotes).\n\nInput\n\nThe first line of input contains a single integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases in the input. Then t lines follow, each line contains two space-separated integers a and b (1 \u2264 a, b \u2264 10^4).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> a <s> b", "<T_1>->a <s> b"], "constraints": ["1<=a<=10^4", "1<=b<=10^4", "1<=t<=100"]}}
{"name": "1047_B. Cover Points", "description": "There are n points on the plane, (x_1,y_1), (x_2,y_2), \u2026, (x_n,y_n).\n\nYou need to place an isosceles triangle with two sides on the coordinate axis to cover all points (a point is covered if it lies inside the triangle or on the side of the triangle). Calculate the minimum length of the shorter side of the triangle.\n\nInput\n\nFirst line contains one integer n (1 \u2264 n \u2264 10^5).\n\nEach of the next n lines contains two integers x_i and y_i (1 \u2264 x_i,y_i \u2264 10^9).", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> x_i <s> y_i", "<T_1>->x_1 <s> y_1"], "constraints": ["1<=n<=10^5", "1<=x_i<=10^9", "1<=y_i<=10^9"]}}
{"name": "p02856 DISCO Presents Discovery Channel Code Contest 2020 Qual - Digit Sum Replace", "description": "N programmers are going to participate in the preliminary stage of DDCC 20XX. Due to the size of the venue, however, at most 9 contestants can participate in the finals.\n\nThe preliminary stage consists of several rounds, which will take place as follows:\n\n* All the N contestants will participate in the first round.\n* When X contestants participate in some round, the number of contestants advancing to the next round will be decided as follows:\n* The organizer will choose two consecutive digits in the decimal notation of X, and replace them with the sum of these digits. The number resulted will be the number of contestants advancing to the next round.\nFor example, when X = 2378, the number of contestants advancing to the next round will be 578 (if 2 and 3 are chosen), 2108 (if 3 and 7 are chosen), or 2315 (if 7 and 8 are chosen).\nWhen X = 100, the number of contestants advancing to the next round will be 10, no matter which two digits are chosen.\n* The preliminary stage ends when 9 or fewer contestants remain.\n\n\n\nRingo, the chief organizer, wants to hold as many rounds as possible. Find the maximum possible number of rounds in the preliminary stage.\n\nSince the number of contestants, N, can be enormous, it is given to you as two integer sequences d_1, \\ldots, d_M and c_1, \\ldots, c_M, which means the following: the decimal notation of N consists of c_1 + c_2 + \\ldots + c_M digits, whose first c_1 digits are all d_1, the following c_2 digits are all d_2, \\ldots, and the last c_M digits are all d_M.\n\nConstraints\n\n* 1 \\leq M \\leq 200000\n* 0 \\leq d_i \\leq 9\n* d_1 \\neq 0\n* d_i \\neq d_{i+1}\n* c_i \\geq 1\n* 2 \\leq c_1 + \\ldots + c_M \\leq 10^{15}\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nM\nd_1 c_1\nd_2 c_2\n:\nd_M c_M", "grammar": {"productions": ["<S>->[M] <n> <T_M>", "<T_i>-><T_i-1> <n> d_i <s> c_i", "<T_1>->d_1 <s> c_1"], "constraints": ["1<=M<=200000", "0<=d_i<=9", "d_1!=0", "d_i!=d_i+1", "c_i>=1", "2<=c_1+c_2+...c_M<=10^15"]}}
{"name": "p02552 AtCoder Beginner Contest 178 - Not", "description": "Given is an integer x that is greater than or equal to 0, and less than or equal to 1. Output 1 if x is equal to 0, or 0 if x is equal to 1.\n\nConstraints\n\n* 0 \\leq x \\leq 1\n* x is an integer\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nx", "grammar": {"productions": ["<S>->x"], "constraints": ["0<=x<=1"]}}
{"name": "1151_A. Maxim and Biology", "description": "Today in the scientific lyceum of the Kingdom of Kremland, there was a biology lesson. The topic of the lesson was the genomes. Let's call the genome the string \"ACTG\".\n\nMaxim was very boring to sit in class, so the teacher came up with a task for him: on a given string s consisting of uppercase letters and length of at least 4, you need to find the minimum number of operations that you need to apply, so that the genome appears in it as a substring. For one operation, you can replace any letter in the string s with the next or previous in the alphabet. For example, for the letter \"D\" the previous one will be \"C\", and the next \u2014 \"E\". In this problem, we assume that for the letter \"A\", the previous one will be the letter \"Z\", and the next one will be \"B\", and for the letter \"Z\", the previous one is the letter \"Y\", and the next one is the letter \"A\".\n\nHelp Maxim solve the problem that the teacher gave him.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer n (4 \u2264 n \u2264 50) \u2014 the length of the string s.\n\nThe second line contains the string s, consisting of exactly n uppercase letters of the Latin alphabet.", "grammar": {"productions": ["<S>->[n] <n> [A-Z]{n}"], "constraints": ["4<=n<=50"]}}
{"name": "p02990 AtCoder Beginner Contest 132 - Blue and Red Balls", "description": "There are K blue balls and N-K red balls. The balls of the same color cannot be distinguished. Snuke and Takahashi are playing with these balls.\n\nFirst, Snuke will arrange the N balls in a row from left to right.\n\nThen, Takahashi will collect only the K blue balls. In one move, he can collect any number of consecutive blue balls. He will collect all the blue balls in the fewest moves possible.\n\nHow many ways are there for Snuke to arrange the N balls in a row so that Takahashi will need exactly i moves to collect all the blue balls? Compute this number modulo 10^9+7 for each i such that 1 \\leq i \\leq K.\n\nConstraints\n\n* 1 \\leq K \\leq N \\leq 2000\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K", "grammar": {"productions": ["<S>->N <s> K"], "constraints": ["1<=K<=N<=2000"]}}
{"name": "595_A. Vitaly and Night", "description": "One day Vitaly was going home late at night and wondering: how many people aren't sleeping at that moment? To estimate, Vitaly decided to look which windows are lit in the house he was passing by at that moment.\n\nVitaly sees a building of n floors and 2\u00b7m windows on each floor. On each floor there are m flats numbered from 1 to m, and two consecutive windows correspond to each flat. If we number the windows from 1 to 2\u00b7m from left to right, then the j-th flat of the i-th floor has windows 2\u00b7j - 1 and 2\u00b7j in the corresponding row of windows (as usual, floors are enumerated from the bottom). Vitaly thinks that people in the flat aren't sleeping at that moment if at least one of the windows corresponding to this flat has lights on.\n\nGiven the information about the windows of the given house, your task is to calculate the number of flats where, according to Vitaly, people aren't sleeping.\n\nInput\n\nThe first line of the input contains two integers n and m (1 \u2264 n, m \u2264 100) \u2014 the number of floors in the house and the number of flats on each floor respectively.\n\nNext n lines describe the floors from top to bottom and contain 2\u00b7m characters each. If the i-th window of the given floor has lights on, then the i-th character of this line is '1', otherwise it is '0'.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_n>", "<T_i>-><T_i-1> <n> <L_2m>", "<T_1>-><L_2m>", "<L_i>-><L_i-1> <s> [01]{1}", "<L_1>->[01]{1}"], "constraints": ["1<=n,m<=100"]}}
{"name": "p02919 AtCoder Beginner Contest 140 - Second Sum", "description": "Given is a permutation P of \\\\{1, 2, \\ldots, N\\\\}.\n\nFor a pair (L, R) (1 \\le L \\lt R \\le N), let X_{L, R} be the second largest value among P_L, P_{L+1}, \\ldots, P_R.\n\nFind \\displaystyle \\sum_{L=1}^{N-1} \\sum_{R=L+1}^{N} X_{L,R}.\n\nConstraints\n\n* 2 \\le N \\le 10^5\n* 1 \\le P_i \\le N\n* P_i \\neq P_j  (i \\neq j)\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nP_1 P_2 \\ldots P_N", "grammar": {"productions": ["<S>->[N] <n> <L_N>", "<L_i>-><L_i-1> <s> P_i", "<L_1>->P_1"], "constraints": ["2<=N<=10^5", "1<=P_i<=N"]}}
{"name": "258_A. Little Elephant and Bits", "description": "The Little Elephant has an integer a, written in the binary notation. He wants to write this number on a piece of paper.\n\nTo make sure that the number a fits on the piece of paper, the Little Elephant ought to delete exactly one any digit from number a in the binary record. At that a new number appears. It consists of the remaining binary digits, written in the corresponding order (possible, with leading zeroes).\n\nThe Little Elephant wants the number he is going to write on the paper to be as large as possible. Help him find the maximum number that he can obtain after deleting exactly one binary digit and print it in the binary notation.\n\nInput\n\nThe single line contains integer a, written in the binary notation without leading zeroes. This number contains more than 1 and at most 10^5 digits.", "grammar": {"productions": ["<S>->[01]{1,10^5}"], "constraints": []}}
{"name": "155_A. I_love_%username%", "description": "Vasya adores sport programming. He can't write programs but he loves to watch the contests' progress. Vasya even has a favorite coder and Vasya pays special attention to him.\n\nOne day Vasya decided to collect the results of all contests where his favorite coder participated and track the progress of his coolness. For each contest where this coder participated, he wrote out a single non-negative number \u2014 the number of points his favorite coder earned in the contest. Vasya wrote out the points for the contest in the order, in which the contests run (naturally, no two contests ran simultaneously).\n\nVasya considers a coder's performance in a contest amazing in two situations: he can break either his best or his worst performance record. First, it is amazing if during the contest the coder earns strictly more points that he earned on each past contest. Second, it is amazing if during the contest the coder earns strictly less points that he earned on each past contest. A coder's first contest isn't considered amazing. Now he wants to count the number of amazing performances the coder had throughout his whole history of participating in contests. But the list of earned points turned out long and Vasya can't code... That's why he asks you to help him.\n\nInput\n\nThe first line contains the single integer n (1 \u2264 n \u2264 1000) \u2014 the number of contests where the coder participated.\n\nThe next line contains n space-separated non-negative integer numbers \u2014 they are the points which the coder has earned. The points are given in the chronological order. All points do not exceed 10000.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> p", "<T_1>->p"], "constraints": ["1<=n<=1000", "0<=p<=10000"]}}
{"name": "p03078 AtCoder Beginner Contest 123 - Cake 123", "description": "The Patisserie AtCoder sells cakes with number-shaped candles. There are X, Y and Z kinds of cakes with 1-shaped, 2-shaped and 3-shaped candles, respectively. Each cake has an integer value called deliciousness, as follows:\n\n* The deliciousness of the cakes with 1-shaped candles are A_1, A_2, ..., A_X.\n* The deliciousness of the cakes with 2-shaped candles are B_1, B_2, ..., B_Y.\n* The deliciousness of the cakes with 3-shaped candles are C_1, C_2, ..., C_Z.\n\n\n\nTakahashi decides to buy three cakes, one for each of the three shapes of the candles, to celebrate ABC 123.\nThere are X \\times Y \\times Z such ways to choose three cakes.\nWe will arrange these X \\times Y \\times Z ways in descending order of the sum of the deliciousness of the cakes.\nPrint the sums of the deliciousness of the cakes for the first, second, ..., K-th ways in this list.\n\nConstraints\n\n* 1 \\leq X \\leq 1 \\ 000\n* 1 \\leq Y \\leq 1 \\ 000\n* 1 \\leq Z \\leq 1 \\ 000\n* 1 \\leq K \\leq \\min(3 \\ 000, X \\times Y \\times Z)\n* 1 \\leq A_i \\leq 10 \\ 000 \\ 000 \\ 000\n* 1 \\leq B_i \\leq 10 \\ 000 \\ 000 \\ 000\n* 1 \\leq C_i \\leq 10 \\ 000 \\ 000 \\ 000\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX Y Z K\nA_1 \\ A_2 \\ A_3 \\ ... \\ A_X\nB_1 \\ B_2 \\ B_3 \\ ... \\ B_Y\nC_1 \\ C_2 \\ C_3 \\ ... \\ C_Z", "grammar": {"productions": ["<S>->X <s> Y <s> Z <s> K <n> <T_X> <n> <L_Y> <n> <Z_Z>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_i", "<L_i>-><L_i-1> <s> B_i", "<L_1>->B_1", "<Z_i>-><Z_i-1> <s> C_i", "<Z_1>->C_1"], "constraints": ["1<=X<=1000", "1<=Y<=1000", "1<=Z<=1000", "1<=K<=min(3000,X*Y*Z)", "1<=A_i<=10000000000", "1<=B_i<=10000000000", "1<=C_i<=10000000000"]}}
{"name": "318_A. Even Odds", "description": "Being a nonconformist, Volodya is displeased with the current state of things, particularly with the order of natural numbers (natural number is positive integer number). He is determined to rearrange them. But there are too many natural numbers, so Volodya decided to start with the first n. He writes down the following sequence of numbers: firstly all odd integers from 1 to n (in ascending order), then all even integers from 1 to n (also in ascending order). Help our hero to find out which number will stand at the position number k.\n\nInput\n\nThe only line of input contains integers n and k (1 \u2264 k \u2264 n \u2264 10^12).\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in C++. It is preferred to use the cin, cout streams or the %I64d specifier.", "grammar": {"productions": ["<S>->n <s> k"], "constraints": ["1<=k<=n<=10^12"]}}
{"name": "p02622 AtCoder Beginner Contest 172 - Minor Change", "description": "Given are strings S and T. Consider changing S to T by repeating the operation below. Find the minimum number of operations required to do so.\n\nOperation: Choose one character of S and replace it with a different character.\n\nConstraints\n\n* S and T have lengths between 1 and 2\\times 10^5 (inclusive).\n* S and T consists of lowercase English letters.\n* S and T have equal lengths.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS\nT", "grammar": {"productions": ["<S>->[a-z]{1,2*10^5} <n> [a-z]{1,2*10^5}"], "constraints": []}}
{"name": "1157_C1. Increasing Subsequence (easy version)", "description": "The only difference between problems C1 and C2 is that all values in input of problem C1 are distinct (this condition may be false for problem C2).\n\nYou are given a sequence a consisting of n integers. All these integers are distinct, each value from 1 to n appears in the sequence exactly once.\n\nYou are making a sequence of moves. During each move you must take either the leftmost element of the sequence or the rightmost element of the sequence, write it down and remove it from the sequence. Your task is to write down a strictly increasing sequence, and among all such sequences you should take the longest (the length of the sequence is the number of elements in it).\n\nFor example, for the sequence [2, 1, 5, 4, 3] the answer is 4 (you take 2 and the sequence becomes [1, 5, 4, 3], then you take the rightmost element 3 and the sequence becomes [1, 5, 4], then you take 4 and the sequence becomes [1, 5] and then you take 5 and the sequence becomes [1], the obtained increasing sequence is [2, 3, 4, 5]).\n\nInput\n\nThe first line of the input contains one integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in a.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 n), where a_i is the i-th element of a. All these integers are pairwise distinct.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=2*10^5", "1<=a_i<=n"]}}
{"name": "1294_C. Product of Three Numbers", "description": "You are given one integer number n. Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u22c5 b \u22c5 c = n or say that it is impossible to do it.\n\nIf there are several answers, you can print any.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next n lines describe test cases. The i-th test case is given on a new line as one integer n (2 \u2264 n \u2264 10^9).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n", "<T_1>->n"], "constraints": ["1<=t<=100", "2<=n<=10^9"]}}
{"name": "1144_C. Two Shuffled Sequences", "description": "Two integer sequences existed initially \u2014 one of them was strictly increasing, and the other one \u2014 strictly decreasing.\n\nStrictly increasing sequence is a sequence of integers [x_1 < x_2 < ... < x_k]. And strictly decreasing sequence is a sequence of integers [y_1 > y_2 > ... > y_l]. Note that the empty sequence and the sequence consisting of one element can be considered as increasing or decreasing.\n\nThey were merged into one sequence a. After that sequence a got shuffled. For example, some of the possible resulting sequences a for an increasing sequence [1, 3, 4] and a decreasing sequence [10, 4, 2] are sequences [1, 2, 3, 4, 4, 10] or [4, 2, 1, 10, 4, 3].\n\nThis shuffled sequence a is given in the input.\n\nYour task is to find any two suitable initial sequences. One of them should be strictly increasing and the other one \u2014 strictly decreasing. Note that the empty sequence and the sequence consisting of one element can be considered as increasing or decreasing.\n\nIf there is a contradiction in the input and it is impossible to split the given sequence a to increasing and decreasing sequences, print \"NO\".\n\nInput\n\nThe first line of the input contains one integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in a.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 2 \u22c5 10^5), where a_i is the i-th element of a.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=2*10^5", "0<=a_i<=2*10^5"]}}
{"name": "p02817 AtCoder Beginner Contest 149 - Strings", "description": "Given are two strings S and T consisting of lowercase English letters. Concatenate T and S in this order, without space in between, and print the resulting string.\n\nConstraints\n\n* S and T are strings consisting of lowercase English letters.\n* The lengths of S and T are between 1 and 100 (inclusive).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS T", "grammar": {"productions": ["<S>->[a-z]{1,100} <s> [a-z]{1,100}"], "constraints": []}}
{"name": "p03243 AtCoder Beginner Contest 111 - AtCoder Beginner Contest 111", "description": "Kurohashi has never participated in AtCoder Beginner Contest (ABC).\n\nThe next ABC to be held is ABC N (the N-th ABC ever held). Kurohashi wants to make his debut in some ABC x such that all the digits of x in base ten are the same.\n\nWhat is the earliest ABC where Kurohashi can make his debut?\n\nConstraints\n\n* 100 \\leq N \\leq 999\n* N is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["100<=N<=999"]}}
{"name": "1320_A. Journey Planning", "description": "Tanya wants to go on a journey across the cities of Berland. There are n cities situated along the main railroad line of Berland, and these cities are numbered from 1 to n. \n\nTanya plans her journey as follows. First of all, she will choose some city c_1 to start her journey. She will visit it, and after that go to some other city c_2 > c_1, then to some other city c_3 > c_2, and so on, until she chooses to end her journey in some city c_k > c_{k - 1}. So, the sequence of visited cities [c_1, c_2, ..., c_k] should be strictly increasing.\n\nThere are some additional constraints on the sequence of cities Tanya visits. Each city i has a beauty value b_i associated with it. If there is only one city in Tanya's journey, these beauty values imply no additional constraints. But if there are multiple cities in the sequence, then for any pair of adjacent cities c_i and c_{i + 1}, the condition c_{i + 1} - c_i = b_{c_{i + 1}} - b_{c_i} must hold.\n\nFor example, if n = 8 and b = [3, 4, 4, 6, 6, 7, 8, 9], there are several three possible ways to plan a journey:\n\n  * c = [1, 2, 4]; \n  * c = [3, 5, 6, 8]; \n  * c = [7] (a journey consisting of one city is also valid). \n\n\n\nThere are some additional ways to plan a journey that are not listed above.\n\nTanya wants her journey to be as beautiful as possible. The beauty value of the whole journey is the sum of beauty values over all visited cities. Can you help her to choose the optimal plan, that is, to maximize the beauty value of the journey?\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of cities in Berland.\n\nThe second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 4 \u22c5 10^5), where b_i is the beauty value of the i-th city.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> b_i", "<T_1>->b_1"], "constraints": ["1<=n<=2*10^5", "1<=b_i<=4*10^5"]}}
{"name": "266_B. Queue at the School", "description": "During the break the schoolchildren, boys and girls, formed a queue of n people in the canteen. Initially the children stood in the order they entered the canteen. However, after a while the boys started feeling awkward for standing in front of the girls in the queue and they started letting the girls move forward each second. \n\nLet's describe the process more precisely. Let's say that the positions in the queue are sequentially numbered by integers from 1 to n, at that the person in the position number 1 is served first. Then, if at time x a boy stands on the i-th position and a girl stands on the (i + 1)-th position, then at time x + 1 the i-th position will have a girl and the (i + 1)-th position will have a boy. The time is given in seconds.\n\nYou've got the initial position of the children, at the initial moment of time. Determine the way the queue is going to look after t seconds.\n\nInput\n\nThe first line contains two integers n and t (1 \u2264 n, t \u2264 50), which represent the number of children in the queue and the time after which the queue will transform into the arrangement you need to find. \n\nThe next line contains string s, which represents the schoolchildren's initial arrangement. If the i-th position in the queue contains a boy, then the i-th character of string s equals \"B\", otherwise the i-th character equals \"G\".", "grammar": {"productions": ["<S>->[N] <s> T <n> [BG]{N}"], "constraints": ["1<=N,T<=50"]}}
{"name": "1196_B. Odd Sum Segments", "description": "You are given an array a consisting of n integers a_1, a_2, ..., a_n. You want to split it into exactly k non-empty non-intersecting subsegments such that each subsegment has odd sum (i. e. for each subsegment, the sum of all elements that belong to this subsegment is odd). It is impossible to rearrange (shuffle) the elements of a given array. Each of the n elements of the array a must belong to exactly one of the k subsegments.\n\nLet's see some examples of dividing the array of length 5 into 3 subsegments (not necessarily with odd sums): [1, 2, 3, 4, 5] is the initial array, then all possible ways to divide it into 3 non-empty non-intersecting subsegments are described below:\n\n  * [1], [2], [3, 4, 5]; \n  * [1], [2, 3], [4, 5]; \n  * [1], [2, 3, 4], [5]; \n  * [1, 2], [3], [4, 5]; \n  * [1, 2], [3, 4], [5]; \n  * [1, 2, 3], [4], [5]. \n\n\n\nOf course, it can be impossible to divide the initial array into exactly k subsegments in such a way that each of them will have odd sum of elements. In this case print \"NO\". Otherwise, print \"YES\" and any possible division of the array. See the output format for the detailed explanation.\n\nYou have to answer q independent queries.\n\nInput\n\nThe first line contains one integer q (1 \u2264 q \u2264 2 \u22c5 10^5) \u2014 the number of queries. Then q queries follow.\n\nThe first line of the query contains two integers n and k (1 \u2264 k \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array and the number of subsegments, respectively.\n\nThe second line of the query contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9), where a_i is the i-th element of a.\n\nIt is guaranteed that the sum of n over all queries does not exceed 2 \u22c5 10^5 (\u2211 n \u2264 2 \u22c5 10^5).", "grammar": {"productions": ["<S>->[q] <n> <T_q>", "<T_i>-><T_i-1> <n> [n] <s> k <n> <L_n>", "<T_1>->[n] <s> k <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=q<=2*10^5", "1<=k<=n<=2*10^5", "1<=a_i<=10^9"]}}
{"name": "1307_B. Cow and Friend", "description": "Bessie has way too many friends because she is everyone's favorite cow! Her new friend Rabbit is trying to hop over so they can play! \n\nMore specifically, he wants to get from (0,0) to (x,0) by making multiple hops. He is only willing to hop from one point to another point on the 2D plane if the Euclidean distance between the endpoints of a hop is one of its n favorite numbers: a_1, a_2, \u2026, a_n. What is the minimum number of hops Rabbit needs to get from (0,0) to (x,0)? Rabbit may land on points with non-integer coordinates. It can be proved that Rabbit can always reach his destination.\n\nRecall that the Euclidean distance between points (x_i, y_i) and (x_j, y_j) is \u221a{(x_i-x_j)^2+(y_i-y_j)^2}.\n\nFor example, if Rabbit has favorite numbers 1 and 3 he could hop from (0,0) to (4,0) in two hops as shown below. Note that there also exists other valid ways to hop to (4,0) in 2 hops (e.g. (0,0) \u2192 (2,-\u221a{5}) \u2192 (4,0)).\n\n<image> Here is a graphic for the first example. Both hops have distance 3, one of Rabbit's favorite numbers.\n\nIn other words, each time Rabbit chooses some number a_i and hops with distance equal to a_i in any direction he wants. The same number can be used multiple times.\n\nInput\n\nThe input consists of multiple test cases. The first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Next 2t lines contain test cases \u2014 two lines per test case.\n\nThe first line of each test case contains two integers n and x (1 \u2264 n \u2264 10^5, 1 \u2264 x \u2264 10^9) \u2014 the number of favorite numbers and the distance Rabbit wants to travel, respectively.\n\nThe second line of each test case contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^9) \u2014 Rabbit's favorite numbers. It is guaranteed that the favorite numbers are distinct.\n\nIt is guaranteed that the sum of n over all the test cases will not exceed 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <s> x <n> <L_n>", "<T_1>->[n] <s> x <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=1000", "1<=n<=10^5", "1<=x<=10^9", "1<=a_i<=10^9"]}}
{"name": "1365_C. Rotation Matching", "description": "After the mysterious disappearance of Ashish, his two favourite disciples Ishika and Hriday, were each left with one half of a secret message. These messages can each be represented by a permutation of size n. Let's call them a and b.\n\nNote that a permutation of n elements is a sequence of numbers a_1, a_2, \u2026, a_n, in which every number from 1 to n appears exactly once. \n\nThe message can be decoded by an arrangement of sequence a and b, such that the number of matching pairs of elements between them is maximum. A pair of elements a_i and b_j is said to match if: \n\n  * i = j, that is, they are at the same index. \n  * a_i = b_j \n\n\n\nHis two disciples are allowed to perform the following operation any number of times: \n\n  * choose a number k and cyclically shift one of the permutations to the left or right k times. \n\n\n\nA single cyclic shift to the left on any permutation c is an operation that sets c_1:=c_2, c_2:=c_3, \u2026, c_n:=c_1 simultaneously. Likewise, a single cyclic shift to the right on any permutation c is an operation that sets c_1:=c_n, c_2:=c_1, \u2026, c_n:=c_{n-1} simultaneously.\n\nHelp Ishika and Hriday find the maximum number of pairs of elements that match after performing the operation any (possibly zero) number of times.\n\nInput\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the size of the arrays.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 n) \u2014 the elements of the first permutation.\n\nThe third line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 n) \u2014 the elements of the second permutation.", "grammar": {"productions": ["<S>->[n] <n> <T_n> <n> <L_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1", "<L_i>-><L_i-1> <s> b_i", "<L_1>->b_1"], "constraints": ["1<=n<=2*10^5", "1<=a_i<=n", "1<=b_i<=n"]}}
{"name": "796_A. Buying A House", "description": "Zane the wizard had never loved anyone before, until he fell in love with a girl, whose name remains unknown to us.\n\n<image>\n\nThe girl lives in house m of a village. There are n houses in that village, lining in a straight line from left to right: house 1, house 2, ..., house n. The village is also well-structured: house i and house i + 1 (1 \u2264 i < n) are exactly 10 meters away. In this village, some houses are occupied, and some are not. Indeed, unoccupied houses can be purchased.\n\nYou will be given n integers a1, a2, ..., an that denote the availability and the prices of the houses. If house i is occupied, and therefore cannot be bought, then ai equals 0. Otherwise, house i can be bought, and ai represents the money required to buy it, in dollars.\n\nAs Zane has only k dollars to spare, it becomes a challenge for him to choose the house to purchase, so that he could live as near as possible to his crush. Help Zane determine the minimum distance from his crush's house to some house he can afford, to help him succeed in his love.\n\nInput\n\nThe first line contains three integers n, m, and k (2 \u2264 n \u2264 100, 1 \u2264 m \u2264 n, 1 \u2264 k \u2264 100) \u2014 the number of houses in the village, the house where the girl lives, and the amount of money Zane has (in dollars), respectively.\n\nThe second line contains n integers a1, a2, ..., an (0 \u2264 ai \u2264 100) \u2014 denoting the availability and the prices of the houses.\n\nIt is guaranteed that am = 0 and that it is possible to purchase some house with no more than k dollars.", "grammar": {"productions": ["<S>->[n] <s> m <s> k <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["2<=n<=100", "1<=m<=n", "1<=k<=100", "0<=a_i<=100"]}}
{"name": "p02924 AtCoder Beginner Contest 139 - ModSum", "description": "For an integer N, we will choose a permutation \\\\{P_1, P_2, ..., P_N\\\\} of \\\\{1, 2, ..., N\\\\}.\n\nThen, for each i=1,2,...,N, let M_i be the remainder when i is divided by P_i.\n\nFind the maximum possible value of M_1 + M_2 + \\cdots + M_N.\n\nConstraints\n\n* N is an integer satisfying 1 \\leq N \\leq 10^9.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["1<=N<=10^9"]}}
{"name": "p03074 AtCoder Beginner Contest 124 - Handstand", "description": "N people are arranged in a row from left to right.\n\nYou are given a string S of length N consisting of `0` and `1`, and a positive integer K.\n\nThe i-th person from the left is standing on feet if the i-th character of S is `0`, and standing on hands if that character is `1`.\n\nYou will give the following direction at most K times (possibly zero):\n\nDirection: Choose integers l and r satisfying 1 \\leq l \\leq r \\leq N, and flip the l-th, (l+1)-th, ..., and r-th persons. That is, for each i = l, l+1, ..., r, the i-th person from the left now stands on hands if he/she was standing on feet, and stands on feet if he/she was standing on hands.\n\nFind the maximum possible number of consecutive people standing on hands after at most K directions.\n\nConstraints\n\n* N is an integer satisfying 1 \\leq N \\leq 10^5.\n* K is an integer satisfying 1 \\leq K \\leq 10^5.\n* The length of the string S is N.\n* Each character of the string S is `0` or `1`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nS", "grammar": {"productions": ["<S>->[N] <s> K <n> [01]{N}"], "constraints": ["1<=N<=10^5", "1<=K<=10^5"]}}
{"name": "922_A. Cloning Toys", "description": "Imp likes his plush toy a lot.\n\n<image>\n\nRecently, he found a machine that can clone plush toys. Imp knows that if he applies the machine to an original toy, he additionally gets one more original toy and one copy, and if he applies the machine to a copied toy, he gets two additional copies.\n\nInitially, Imp has only one original toy. He wants to know if it is possible to use machine to get exactly x copied toys and y original toys? He can't throw toys away, and he can't apply the machine to a copy if he doesn't currently have any copies.\n\nInput\n\nThe only line contains two integers x and y (0 \u2264 x, y \u2264 10^9) \u2014 the number of copies and the number of original toys Imp wants to get (including the initial one).", "grammar": {"productions": ["<S>->x <s> y"], "constraints": ["0<=x<=10^9", "0<=y<=10^9"]}}
{"name": "p03962 AtCoder Beginner Contest 046 - AtCoDeer and Paint Cans", "description": "AtCoDeer the deer recently bought three paint cans. The color of the one he bought two days ago is a, the color of the one he bought yesterday is b, and the color of the one he bought today is c. Here, the color of each paint can is represented by an integer between 1 and 100, inclusive.\n\nSince he is forgetful, he might have bought more than one paint can in the same color. Count the number of different kinds of colors of these paint cans and tell him.\n\nConstraints\n\n* 1\u2266a,b,c\u2266100\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\na b c", "grammar": {"productions": ["<S>->a <s> b <s> c"], "constraints": ["1<=a<=100", "1<=b<=100", "1<=c<=100"]}}
{"name": "p02621 AtCoder Beginner Contest 172 - Calc", "description": "Given an integer a as input, print the value a + a^2 + a^3.\n\nConstraints\n\n* 1 \\leq a \\leq 10\n* a is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\na", "grammar": {"productions": ["<S>->a"], "constraints": ["1<=a<=10"]}}
{"name": "p03096 AtCoder Grand Contest 031 - Reversi", "description": "There are N stones arranged in a row. The i-th stone from the left is painted in the color C_i.\n\nSnuke will perform the following operation zero or more times:\n\n* Choose two stones painted in the same color. Repaint all the stones between them, with the color of the chosen stones.\n\n\n\nFind the number of possible final sequences of colors of the stones, modulo 10^9+7.\n\nConstraints\n\n* 1 \\leq N \\leq 2\\times 10^5\n* 1 \\leq C_i \\leq 2\\times 10^5(1\\leq i\\leq N)\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nC_1\n:\nC_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> C_i", "<T_1>->C_1"], "constraints": ["1<=N<=2*10^5", "1<=C_i<=2*10^5"]}}
{"name": "p02798 Keyence Programming Contest 2020 - Swap and Flip", "description": "We have N cards numbered 1, 2, ..., N. Card i (1 \\leq i \\leq N) has an integer A_i written in red ink on one side and an integer B_i written in blue ink on the other side. Initially, these cards are arranged from left to right in the order from Card 1 to Card N, with the red numbers facing up.\n\nDetermine whether it is possible to have a non-decreasing sequence facing up from left to right (that is, for each i (1 \\leq i \\leq N - 1), the integer facing up on the (i+1)-th card from the left is not less than the integer facing up on the i-th card from the left) by repeating the operation below. If the answer is yes, find the minimum number of operations required to achieve it.\n\n* Choose an integer i (1 \\leq i \\leq N - 1). Swap the i-th and (i+1)-th cards from the left, then flip these two cards.\n\nConstraints\n\n* 1 \\leq N \\leq 18\n* 1 \\leq A_i, B_i \\leq 50 (1 \\leq i \\leq N)\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 A_2 ... A_N\nB_1 B_2 ... B_N", "grammar": {"productions": ["<S>->[n] <n> <T_n> <n> <L_n>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1", "<L_i>-><L_i-1> <s> B_i", "<L_1>->B_1"], "constraints": ["1<=n<=18", "1<=A_i<=50", "1<=B_i<=50", "1<=i<=N"]}}
{"name": "1351_B. Square?", "description": "Vasya claims that he had a paper square. He cut it into two rectangular parts using one vertical or horizontal cut. Then Vasya informed you the dimensions of these two rectangular parts. You need to check whether Vasya originally had a square. In other words, check if it is possible to make a square using two given rectangles.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases in the input. Then t test cases follow.\n\nEach test case is given in two lines.\n\nThe first line contains two integers a_1 and b_1 (1 \u2264 a_1, b_1 \u2264 100) \u2014 the dimensions of the first one obtained after cutting rectangle. The sizes are given in random order (that is, it is not known which of the numbers is the width, and which of the numbers is the length).\n\nThe second line contains two integers a_2 and b_2 (1 \u2264 a_2, b_2 \u2264 100) \u2014 the dimensions of the second obtained after cutting rectangle. The sizes are given in random order (that is, it is not known which of the numbers is the width, and which of the numbers is the length).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> a1 <s> b1 <n> a2 <s> b2", "<T_1>->a1 <s> b1 <n> a2 <s> b2"], "constraints": ["1<=t<=10^4", "1<=a1,b1<=100", "1<=a2,b2<=100"]}}
{"name": "p03244 AtCoder Beginner Contest 111 - /\\/\\/\\/", "description": "A sequence a_1,a_2,... ,a_n is said to be /\\/\\/\\/ when the following conditions are satisfied:\n\n* For each i = 1,2,..., n-2, a_i = a_{i+2}.\n* Exactly two different numbers appear in the sequence.\n\n\n\nYou are given a sequence v_1,v_2,...,v_n whose length is even. We would like to make this sequence /\\/\\/\\/ by replacing some of its elements. Find the minimum number of elements that needs to be replaced.\n\nConstraints\n\n* 2 \\leq n \\leq 10^5\n* n is even.\n* 1 \\leq v_i \\leq 10^5\n* v_i is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nn\nv_1 v_2 ... v_n", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> V_i", "<T_1>->V_1"], "constraints": ["2<=N<=10^5", "1<=V_i<=10^5", "N is even"]}}
{"name": "82_A. Double Cola", "description": "Sheldon, Leonard, Penny, Rajesh and Howard are in the queue for a \"Double Cola\" drink vending machine; there are no other people in the queue. The first one in the queue (Sheldon) buys a can, drinks it and doubles! The resulting two Sheldons go to the end of the queue. Then the next in the queue (Leonard) buys a can, drinks it and gets to the end of the queue as two Leonards, and so on. This process continues ad infinitum.\n\nFor example, Penny drinks the third can of cola and the queue will look like this: Rajesh, Howard, Sheldon, Sheldon, Leonard, Leonard, Penny, Penny.\n\nWrite a program that will print the name of a man who will drink the n-th can.\n\nNote that in the very beginning the queue looks like that: Sheldon, Leonard, Penny, Rajesh, Howard. The first person is Sheldon.\n\nInput\n\nThe input data consist of a single integer n (1 \u2264 n \u2264 10^9).\n\nIt is guaranteed that the pretests check the spelling of all the five names, that is, that they contain all the five possible answers.", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=10^9"]}}
{"name": "987_A. Infinity Gauntlet", "description": "You took a peek on Thanos wearing Infinity Gauntlet. In the Gauntlet there is a place for six Infinity Gems:\n\n  * the Power Gem of purple color, \n  * the Time Gem of green color, \n  * the Space Gem of blue color, \n  * the Soul Gem of orange color, \n  * the Reality Gem of red color, \n  * the Mind Gem of yellow color. \n\n\n\nUsing colors of Gems you saw in the Gauntlet determine the names of absent Gems.\n\nInput\n\nIn the first line of input there is one integer n (0 \u2264 n \u2264 6) \u2014 the number of Gems in Infinity Gauntlet.\n\nIn next n lines there are colors of Gems you saw. Words used for colors are: purple, green, blue, orange, red, yellow. It is guaranteed that all the colors are distinct. All colors are given in lowercase English letters.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> s_i", "<T_1>->s_1", "s_i->purple|green|blue|orange|red|yellow"], "constraints": ["0<=n<=6", "s_i!=s_j"]}}
{"name": "1251_A. Broken Keyboard", "description": "Recently Polycarp noticed that some of the buttons of his keyboard are malfunctioning. For simplicity, we assume that Polycarp's keyboard contains 26 buttons (one for each letter of the Latin alphabet). Each button is either working fine or malfunctioning. \n\nTo check which buttons need replacement, Polycarp pressed some buttons in sequence, and a string s appeared on the screen. When Polycarp presses a button with character c, one of the following events happened:\n\n  * if the button was working correctly, a character c appeared at the end of the string Polycarp was typing; \n  * if the button was malfunctioning, two characters c appeared at the end of the string. \n\n\n\nFor example, suppose the buttons corresponding to characters a and c are working correctly, and the button corresponding to b is malfunctioning. If Polycarp presses the buttons in the order a, b, a, c, a, b, a, then the string he is typing changes as follows: a \u2192 abb \u2192 abba \u2192 abbac \u2192 abbaca \u2192 abbacabb \u2192 abbacabba.\n\nYou are given a string s which appeared on the screen after Polycarp pressed some buttons. Help Polycarp to determine which buttons are working correctly for sure (that is, this string could not appear on the screen if any of these buttons was malfunctioning).\n\nYou may assume that the buttons don't start malfunctioning when Polycarp types the string: each button either works correctly throughout the whole process, or malfunctions throughout the whole process.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases in the input.\n\nThen the test cases follow. Each test case is represented by one line containing a string s consisting of no less than 1 and no more than 500 lowercase Latin letters.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [a-z]{1,500}", "<T_1>->[a-z]{1,500}"], "constraints": ["1<=t<=100"]}}
{"name": "49_A. Sleuth", "description": "Vasya plays the sleuth with his friends. The rules of the game are as follows: those who play for the first time, that is Vasya is the sleuth, he should investigate a \"crime\" and find out what is happening. He can ask any questions whatsoever that can be answered with \"Yes\" or \"No\". All the rest agree beforehand to answer the questions like that: if the question\u2019s last letter is a vowel, they answer \"Yes\" and if the last letter is a consonant, they answer \"No\". Of course, the sleuth knows nothing about it and his task is to understand that.\n\nUnfortunately, Vasya is not very smart. After 5 hours of endless stupid questions everybody except Vasya got bored. That\u2019s why Vasya\u2019s friends ask you to write a program that would give answers instead of them.\n\nThe English alphabet vowels are: A, E, I, O, U, Y\n\nThe English alphabet consonants are: B, C, D, F, G, H, J, K, L, M, N, P, Q, R, S, T, V, W, X, Z\n\nInput\n\nThe single line contains a question represented by a non-empty line consisting of large and small Latin letters, spaces and a question mark. The line length does not exceed 100. It is guaranteed that the question mark occurs exactly once in the line \u2014 as the last symbol and that the line contains at least one letter.", "grammar": {"productions": ["<S>->[a-zA-Z?]{1,100}"], "constraints": []}}
{"name": "37_A. Towers", "description": "Little Vasya has received a young builder\u2019s kit. The kit consists of several wooden bars, the lengths of all of them are known. The bars can be put one on the top of the other if their lengths are the same.\n\nVasya wants to construct the minimal number of towers from the bars. Help Vasya to use the bars in the best way possible.\n\nInput\n\nThe first line contains an integer N (1 \u2264 N \u2264 1000) \u2014 the number of bars at Vasya\u2019s disposal. The second line contains N space-separated integers li \u2014 the lengths of the bars. All the lengths are natural numbers not exceeding 1000.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> l_i", "<T_1>->l_1"], "constraints": ["1<=N<=1000", "1<=l_i<=1000"]}}
{"name": "1303_B. National Project", "description": "Your company was appointed to lay new asphalt on the highway of length n. You know that every day you can either repair one unit of the highway (lay new asphalt over one unit of the highway) or skip repairing.\n\nSkipping the repair is necessary because of the climate. The climate in your region is periodical: there are g days when the weather is good and if you lay new asphalt these days it becomes high-quality pavement; after that, the weather during the next b days is bad, and if you lay new asphalt these days it becomes low-quality pavement; again g good days, b bad days and so on.\n\nYou can be sure that you start repairing at the start of a good season, in other words, days 1, 2, ..., g are good.\n\nYou don't really care about the quality of the highway, you just want to make sure that at least half of the highway will have high-quality pavement. For example, if the n = 5 then at least 3 units of the highway should have high quality; if n = 4 then at least 2 units should have high quality.\n\nWhat is the minimum number of days is needed to finish the repair of the whole highway?\n\nInput\n\nThe first line contains a single integer T (1 \u2264 T \u2264 10^4) \u2014 the number of test cases.\n\nNext T lines contain test cases \u2014 one per line. Each line contains three integers n, g and b (1 \u2264 n, g, b \u2264 10^9) \u2014 the length of the highway and the number of good and bad days respectively.", "grammar": {"productions": ["<S>->[T] <n> <T_T>", "<T_i>-><T_i-1> <n> n <s> g <s> b", "<T_1>->n <s> g <s> b"], "constraints": ["1<=T<=10^4", "1<=n<=10^9", "1<=g<=10^9", "1<=b<=10^9"]}}
{"name": "1370_C. Number Game", "description": "Ashishgup and FastestFinger play a game. \n\nThey start with a number n and play in turns. In each turn, a player can make any one of the following moves:\n\n  * Divide n by any of its odd divisors greater than 1. \n  * Subtract 1 from n if n is greater than 1. \n\n\n\nDivisors of a number include the number itself.\n\nThe player who is unable to make a move loses the game.\n\nAshishgup moves first. Determine the winner of the game if both of them play optimally.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. The description of the test cases follows.\n\nThe only line of each test case contains a single integer \u2014 n (1 \u2264 n \u2264 10^9).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n", "<T_1>->n"], "constraints": ["1<=t<=100", "1<=n<=10^9"]}}
{"name": "p02572 AtCoder Beginner Contest 177 - Sum of product of pairs", "description": "Given are N integers A_1,\\ldots,A_N.\n\nFind the sum of A_i \\times A_j over all pairs (i,j) such that 1\\leq i < j \\leq N, modulo (10^9+7).\n\nConstraints\n\n* 2 \\leq N \\leq 2\\times 10^5\n* 0 \\leq A_i \\leq 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 \\ldots A_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["2<=N<=2*10^5", "0<=A_i<=10^9"]}}
{"name": "1272_A. Three Friends", "description": "Three friends are going to meet each other. Initially, the first friend stays at the position x = a, the second friend stays at the position x = b and the third friend stays at the position x = c on the coordinate axis Ox.\n\nIn one minute each friend independently from other friends can change the position x by 1 to the left or by 1 to the right (i.e. set x := x - 1 or x := x + 1) or even don't change it.\n\nLet's introduce the total pairwise distance \u2014 the sum of distances between each pair of friends. Let a', b' and c' be the final positions of the first, the second and the third friend, correspondingly. Then the total pairwise distance is |a' - b'| + |a' - c'| + |b' - c'|, where |x| is the absolute value of x.\n\nFriends are interested in the minimum total pairwise distance they can reach if they will move optimally. Each friend will move no more than once. So, more formally, they want to know the minimum total pairwise distance they can reach after one minute.\n\nYou have to answer q independent test cases.\n\nInput\n\nThe first line of the input contains one integer q (1 \u2264 q \u2264 1000) \u2014 the number of test cases.\n\nThe next q lines describe test cases. The i-th test case is given as three integers a, b and c (1 \u2264 a, b, c \u2264 10^9) \u2014 initial positions of the first, second and third friend correspondingly. The positions of friends can be equal.", "grammar": {"productions": ["<S>->[q] <n> <T_q>", "<T_i>-><T_i-1> <n> a <s> b <s> c", "<T_1>->a <s> b <s> c"], "constraints": ["1<=q<=1000", "1<=a,b,c<=10^9"]}}
{"name": "832_A. Sasha and Sticks", "description": "It's one more school day now. Sasha doesn't like classes and is always bored at them. So, each day he invents some game and plays in it alone or with friends.\n\nToday he invented one simple game to play with Lena, with whom he shares a desk. The rules are simple. Sasha draws n sticks in a row. After that the players take turns crossing out exactly k sticks from left or right in each turn. Sasha moves first, because he is the inventor of the game. If there are less than k sticks on the paper before some turn, the game ends. Sasha wins if he makes strictly more moves than Lena. Sasha wants to know the result of the game before playing, you are to help him.\n\nInput\n\nThe first line contains two integers n and k (1 \u2264 n, k \u2264 10^18, k \u2264 n) \u2014 the number of sticks drawn by Sasha and the number k \u2014 the number of sticks to be crossed out on each turn.", "grammar": {"productions": ["<S>->n <s> k"], "constraints": ["1<=n<=10^18", "1<=k<=10^18", "k<=n"]}}
{"name": "1312_A. Two Regular Polygons", "description": "You are given two integers n and m (m < n). Consider a convex regular polygon of n vertices. Recall that a regular polygon is a polygon that is equiangular (all angles are equal in measure) and equilateral (all sides have the same length).\n\n<image> Examples of convex regular polygons \n\nYour task is to say if it is possible to build another convex regular polygon with m vertices such that its center coincides with the center of the initial polygon and each of its vertices is some vertex of the initial polygon.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next t lines describe test cases. Each test case is given as two space-separated integers n and m (3 \u2264 m < n \u2264 100) \u2014 the number of vertices in the initial polygon and the number of vertices in the polygon you want to build.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n <s> m", "<T_1>->n <s> m"], "constraints": ["1<=t<=10^4", "3<=m<n<=100"]}}
{"name": "p04030 AtCoder Beginner Contest 043 - Unhappy Hacking (ABC Edit)", "description": "Sig has built his own keyboard. Designed for ultimate simplicity, this keyboard only has 3 keys on it: the `0` key, the `1` key and the backspace key.\n\nTo begin with, he is using a plain text editor with this keyboard. This editor always displays one string (possibly empty). Just after the editor is launched, this string is empty. When each key on the keyboard is pressed, the following changes occur to the string:\n\n* The `0` key: a letter `0` will be inserted to the right of the string.\n* The `1` key: a letter `1` will be inserted to the right of the string.\n* The backspace key: if the string is empty, nothing happens. Otherwise, the rightmost letter of the string is deleted.\n\n\n\nSig has launched the editor, and pressed these keys several times. You are given a string s, which is a record of his keystrokes in order. In this string, the letter `0` stands for the `0` key, the letter `1` stands for the `1` key and the letter `B` stands for the backspace key. What string is displayed in the editor now?\n\nConstraints\n\n* 1 \u2266 |s| \u2266 10 (|s| denotes the length of s)\n* s consists of the letters `0`, `1` and `B`.\n* The correct answer is not an empty string.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\ns", "grammar": {"productions": ["<S>->[01B]{1,10}"], "constraints": []}}
{"name": "p03274 AtCoder Beginner Contest 107 - Candles", "description": "There are N candles placed on a number line. The i-th candle from the left is placed on coordinate x_i. Here, x_1 < x_2 < ... < x_N holds.\n\nInitially, no candles are burning. Snuke decides to light K of the N candles.\n\nNow, he is at coordinate 0. He can move left and right along the line with speed 1. He can also light a candle when he is at the same position as the candle, in negligible time.\n\nFind the minimum time required to light K candles.\n\nConstraints\n\n* 1 \\leq N \\leq 10^5\n* 1 \\leq K \\leq N\n* x_i is an integer.\n* |x_i| \\leq 10^8\n* x_1 < x_2 < ... < x_N\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nx_1 x_2 ... x_N", "grammar": {"productions": ["<S>->[N] <s> K <n> <T_N>", "<T_i>-><T_i-1> <s> x_i", "<T_1>->x_1"], "constraints": ["1<=N<=10^5", "1<=K<=N", "-10^8<=x_i<=10^8", "x_i<=x_i+1"]}}
{"name": "467_A. George and Accommodation", "description": "George has recently entered the BSUCP (Berland State University for Cool Programmers). George has a friend Alex who has also entered the university. Now they are moving into a dormitory. \n\nGeorge and Alex want to live in the same room. The dormitory has n rooms in total. At the moment the i-th room has pi people living in it and the room can accommodate qi people in total (pi \u2264 qi). Your task is to count how many rooms has free place for both George and Alex.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 100) \u2014 the number of rooms.\n\nThe i-th of the next n lines contains two integers pi and qi (0 \u2264 pi \u2264 qi \u2264 100) \u2014 the number of people who already live in the i-th room and the room's capacity.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> P_i <s> Q_i", "<T_1>->P_1 <s> Q_1"], "constraints": ["1<=N<=100", "0<=P_i<=Q_i<=100"]}}
{"name": "1200_A. Hotelier", "description": "Amugae has a hotel consisting of 10 rooms. The rooms are numbered from 0 to 9 from left to right.\n\nThe hotel has two entrances \u2014 one from the left end, and another from the right end. When a customer arrives to the hotel through the left entrance, they are assigned to an empty room closest to the left entrance. Similarly, when a customer arrives at the hotel through the right entrance, they are assigned to an empty room closest to the right entrance.\n\nOne day, Amugae lost the room assignment list. Thankfully Amugae's memory is perfect, and he remembers all of the customers: when a customer arrived, from which entrance, and when they left the hotel. Initially the hotel was empty. Write a program that recovers the room assignment list from Amugae's memory.\n\nInput\n\nThe first line consists of an integer n (1 \u2264 n \u2264 10^5), the number of events in Amugae's memory.\n\nThe second line consists of a string of length n describing the events in chronological order. Each character represents: \n\n  * 'L': A customer arrives from the left entrance. \n  * 'R': A customer arrives from the right entrance. \n  * '0', '1', ..., '9': The customer in room x (0, 1, ..., 9 respectively) leaves. \n\n\n\nIt is guaranteed that there is at least one empty room when a customer arrives, and there is a customer in the room x when x (0, 1, ..., 9) is given. Also, all the rooms are initially empty.", "grammar": {"productions": ["<S>->[n] <n> [LR0-9]{n}"], "constraints": ["0<=n<=10^15"]}}
{"name": "231_A. Team", "description": "One day three best friends Petya, Vasya and Tonya decided to form a team and take part in programming contests. Participants are usually offered several problems during programming contests. Long before the start the friends decided that they will implement a problem if at least two of them are sure about the solution. Otherwise, the friends won't write the problem's solution.\n\nThis contest offers n problems to the participants. For each problem we know, which friend is sure about the solution. Help the friends find the number of problems for which they will write a solution.\n\nInput\n\nThe first input line contains a single integer n (1 \u2264 n \u2264 1000) \u2014 the number of problems in the contest. Then n lines contain three integers each, each integer is either 0 or 1. If the first number in the line equals 1, then Petya is sure about the problem's solution, otherwise he isn't sure. The second number shows Vasya's view on the solution, the third number shows Tonya's view. The numbers on the lines are separated by spaces.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> d <s> d <s> d", "<T_1>->d <s> d <s> d", "d->0|1"], "constraints": ["1<=N<=1000"]}}
{"name": "894_A. QAQ", "description": "\"QAQ\" is a word to denote an expression of crying. Imagine \"Q\" as eyes with tears and \"A\" as a mouth.\n\nNow Diamond has given Bort a string consisting of only uppercase English letters of length n. There is a great number of \"QAQ\" in the string (Diamond is so cute!).\n\n<image> illustration by \u732b\u5c4b https://twitter.com/nekoyaliu\n\nBort wants to know how many subsequences \"QAQ\" are in the string Diamond has given. Note that the letters \"QAQ\" don't have to be consecutive, but the order of letters should be exact.\n\nInput\n\nThe only line contains a string of length n (1 \u2264 n \u2264 100). It's guaranteed that the string only contains uppercase English letters.", "grammar": {"productions": ["<S>->[A-Z]{1,100}"], "constraints": []}}
{"name": "p03805 AtCoder Beginner Contest 054 - One-stroke Path", "description": "You are given an undirected unweighted graph with N vertices and M edges that contains neither self-loops nor double edges.\nHere, a self-loop is an edge where a_i = b_i (1\u2264i\u2264M), and double edges are two edges where (a_i,b_i)=(a_j,b_j) or (a_i,b_i)=(b_j,a_j) (1\u2264i<j\u2264M).\nHow many different paths start from vertex 1 and visit all the vertices exactly once?\nHere, the endpoints of a path are considered visited.\n\nFor example, let us assume that the following undirected graph shown in Figure 1 is given.\n\n<image>\n\nFigure 1: an example of an undirected graph\n\nThe following path shown in Figure 2 satisfies the condition.\n\n<image>\n\nFigure 2: an example of a path that satisfies the condition\n\nHowever, the following path shown in Figure 3 does not satisfy the condition, because it does not visit all the vertices.\n\n<image>\n\nFigure 3: an example of a path that does not satisfy the condition\n\nNeither the following path shown in Figure 4, because it does not start from vertex 1.\n\n<image>\n\nFigure 4: another example of a path that does not satisfy the condition\n\nConstraints\n\n* 2\u2266N\u22668\n* 0\u2266M\u2266N(N-1)/2\n* 1\u2266a_i<b_i\u2266N\n* The given graph contains neither self-loops nor double edges.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN M\na_1 b_1\na_2 b_2\n:\na_M b_M", "grammar": {"productions": ["<S>->N <s> [M] <n> <T_M>", "<T_i>-><T_i-1> <n> a_i <s> b_i", "<T_1>->a_1 <s> b_1"], "constraints": ["2<=N<=8", "0<=M<=N(N-1)/2", "1<=a_i<b_i<=N"]}}
{"name": "p04000 AtCoder Beginner Contest 045 - Snuke's Coloring", "description": "We have a grid with H rows and W columns. At first, all cells were painted white.\n\nSnuke painted N of these cells. The i-th ( 1 \\leq i \\leq N ) cell he painted is the cell at the a_i-th row and b_i-th column.\n\nCompute the following:\n\n* For each integer j ( 0 \\leq j \\leq 9 ), how many subrectangles of size 3\u00d73 of the grid contains exactly j black cells, after Snuke painted N cells?\n\nConstraints\n\n* 3 \\leq H \\leq 10^9\n* 3 \\leq W \\leq 10^9\n* 0 \\leq N \\leq min(10^5,H\u00d7W)\n* 1 \\leq a_i \\leq H (1 \\leq i \\leq N)\n* 1 \\leq b_i \\leq W (1 \\leq i \\leq N)\n* (a_i, b_i) \\neq (a_j, b_j) (i \\neq j)\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nH W N\na_1 b_1\n:\na_N b_N", "grammar": {"productions": ["<S>->H <s> W <s> [N] <n> <T_N>", "<T_i>-><T_i-1> <n> a_i <s> b_i", "<T_1>->a_1 <s> b_1", "<T_0>->ε"], "constraints": ["3<=H<=10^9", "3<=W<=10^9", "1<=a_i<=H", "1<=b_i<=W", "(a_i, b_i) != (a_j, b_j)", "i!=j", "0<=N<=min(10^5,(H*W))"]}}
{"name": "1433_E. Two Round Dances", "description": "One day, n people (n is an even number) met on a plaza and made two round dances, each round dance consists of exactly n/2 people. Your task is to find the number of ways n people can make two round dances if each round dance consists of exactly n/2 people. Each person should belong to exactly one of these two round dances.\n\nRound dance is a dance circle consisting of 1 or more people. Two round dances are indistinguishable (equal) if one can be transformed to another by choosing the first participant. For example, round dances [1, 3, 4, 2], [4, 2, 1, 3] and [2, 1, 3, 4] are indistinguishable.\n\nFor example, if n=2 then the number of ways is 1: one round dance consists of the first person and the second one of the second person.\n\nFor example, if n=4 then the number of ways is 3. Possible options:\n\n  * one round dance \u2014 [1,2], another \u2014 [3,4]; \n  * one round dance \u2014 [2,4], another \u2014 [3,1]; \n  * one round dance \u2014 [4,1], another \u2014 [3,2]. \n\n\n\nYour task is to find the number of ways n people can make two round dances if each round dance consists of exactly n/2 people.\n\nInput\n\nThe input contains one integer n (2 \u2264 n \u2264 20), n is an even number.", "grammar": {"productions": ["<S>->n"], "constraints": ["2<=n<=20"]}}
{"name": "p02983 AtCoder Beginner Contest 133 - Remainder Minimization 2019", "description": "You are given two non-negative integers L and R. We will choose two integers i and j such that L \\leq i < j \\leq R. Find the minimum possible value of (i \\times j) \\mbox{ mod } 2019.\n\nConstraints\n\n* All values in input are integers.\n* 0 \\leq L < R \\leq 2 \\times 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nL R", "grammar": {"productions": ["<S>->L <s> R"], "constraints": ["0<=L<2*10^9", "L<R<=2*10^9"]}}
{"name": "1256_B. Minimize the Permutation", "description": "You are given a permutation of length n. Recall that the permutation is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [2, 3, 1, 5, 4] is a permutation, but [1, 2, 2] is not a permutation (2 appears twice in the array) and [1, 3, 4] is also not a permutation (n=3 but there is 4 in the array).\n\nYou can perform at most n-1 operations with the given permutation (it is possible that you don't perform any operations at all). The i-th operation allows you to swap elements of the given permutation on positions i and i+1. Each operation can be performed at most once. The operations can be performed in arbitrary order.\n\nYour task is to find the lexicographically minimum possible permutation obtained by performing some of the given operations in some order.\n\nYou can see the definition of the lexicographical order in the notes section.\n\nYou have to answer q independent test cases.\n\nFor example, let's consider the permutation [5, 4, 1, 3, 2]. The minimum possible permutation we can obtain is [1, 5, 2, 4, 3] and we can do it in the following way:\n\n  1. perform the second operation (swap the second and the third elements) and obtain the permutation [5, 1, 4, 3, 2]; \n  2. perform the fourth operation (swap the fourth and the fifth elements) and obtain the permutation [5, 1, 4, 2, 3]; \n  3. perform the third operation (swap the third and the fourth elements) and obtain the permutation [5, 1, 2, 4, 3]. \n  4. perform the first operation (swap the first and the second elements) and obtain the permutation [1, 5, 2, 4, 3]; \n\n\n\nAnother example is [1, 2, 4, 3]. The minimum possible permutation we can obtain is [1, 2, 3, 4] by performing the third operation (swap the third and the fourth elements).\n\nInput\n\nThe first line of the input contains one integer q (1 \u2264 q \u2264 100) \u2014 the number of test cases. Then q test cases follow.\n\nThe first line of the test case contains one integer n (1 \u2264 n \u2264 100) \u2014 the number of elements in the permutation.\n\nThe second line of the test case contains n distinct integers from 1 to n \u2014 the given permutation.", "grammar": {"productions": ["<S>->[q] <n> <T_q>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> h_i", "<L_1>->h_1"], "constraints": ["1<=q<=100", "1<=n<=100", "1<=h_i<=n"]}}
{"name": "1443_B. Saving the City", "description": "Bertown is a city with n buildings in a straight line.\n\nThe city's security service discovered that some buildings were mined. A map was compiled, which is a string of length n, where the i-th character is \"1\" if there is a mine under the building number i and \"0\" otherwise.\n\nBertown's best sapper knows how to activate mines so that the buildings above them are not damaged. When a mine under the building numbered x is activated, it explodes and activates two adjacent mines under the buildings numbered x-1 and x+1 (if there were no mines under the building, then nothing happens). Thus, it is enough to activate any one mine on a continuous segment of mines to activate all the mines of this segment. For manual activation of one mine, the sapper takes a coins. He can repeat this operation as many times as you want.\n\nAlso, a sapper can place a mine under a building if it wasn't there. For such an operation, he takes b coins. He can also repeat this operation as many times as you want.\n\nThe sapper can carry out operations in any order.\n\nYou want to blow up all the mines in the city to make it safe. Find the minimum number of coins that the sapper will have to pay so that after his actions there are no mines left in the city.\n\nInput\n\nThe first line contains one positive integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case begins with a line containing two integers a and b (1 \u2264 a, b \u2264 1000) \u2014 the cost of activating and placing one mine, respectively.\n\nThe next line contains a map of mines in the city \u2014 a string consisting of zeros and ones.\n\nThe sum of the string lengths for all test cases does not exceed 10^5.", "grammar": {"productions": ["<S>->[n] <n> <T_n> <n> [m] <n> <L_m>", "<T_i>-><T_i-1> <s> v_i", "<T_1>->v_1", "<L_i>-><L_i-1> <n> type <s> l <s> r", "<L_1>->type <s> l <s> r"], "constraints": ["1<=n<=10^5", "1<=v_i<=10^9", "1<=m<=10^5", "1<=l<=r<=n", "1<=type<=2"]}}
{"name": "1195_B. Sport Mafia", "description": "Each evening after the dinner the SIS's students gather together to play the game of Sport Mafia. \n\nFor the tournament, Alya puts candies into the box, which will serve as a prize for a winner. To do that, she performs n actions. The first action performed is to put a single candy into the box. For each of the remaining moves she can choose from two options:\n\n  * the first option, in case the box contains at least one candy, is to take exactly one candy out and eat it. This way the number of candies in the box decreased by 1; \n  * the second option is to put candies in the box. In this case, Alya will put 1 more candy, than she put in the previous time. \n\n\n\nThus, if the box is empty, then it can only use the second option.\n\nFor example, one possible sequence of Alya's actions look as follows:\n\n  * put one candy into the box; \n  * put two candies into the box; \n  * eat one candy from the box; \n  * eat one candy from the box; \n  * put three candies into the box; \n  * eat one candy from the box; \n  * put four candies into the box; \n  * eat one candy from the box; \n  * put five candies into the box; \n\n\n\nThis way she will perform 9 actions, the number of candies at the end will be 11, while Alya will eat 4 candies in total.\n\nYou know the total number of actions n and the number of candies at the end k. You need to find the total number of sweets Alya ate. That is the number of moves of the first option. It's guaranteed, that for the given n and k the answer always exists.\n\nPlease note, that during an action of the first option, Alya takes out and eats exactly one candy.\n\nInput\n\nThe first line contains two integers n and k (1 \u2264 n \u2264 10^9; 0 \u2264 k \u2264 10^9) \u2014 the total number of moves and the number of candies in the box at the end. \n\nIt's guaranteed, that for the given n and k the answer exists.", "grammar": {"productions": ["<S>->n <s> k"], "constraints": ["1<=n<=10^9", "0<=k<=10^9"]}}
{"name": "742_A. Arpa\u2019s hard exam and Mehrdad\u2019s naive cheat", "description": "There exists an island called Arpa\u2019s land, some beautiful girls live there, as ugly ones do.\n\nMehrdad wants to become minister of Arpa\u2019s land. Arpa has prepared an exam. Exam has only one question, given n, print the last digit of 1378n. \n\n<image>\n\nMehrdad has become quite confused and wants you to help him. Please help, although it's a naive cheat.\n\nInput\n\nThe single line of input contains one integer n (0 \u2264 n \u2264 10^9).", "grammar": {"productions": ["<S>->n"], "constraints": ["0<=n<=10^9"]}}
{"name": "p03407 AtCoder Beginner Contest 091 - Two Coins", "description": "An elementary school student Takahashi has come to a variety store.\n\nHe has two coins, A-yen and B-yen coins (yen is the currency of Japan), and wants to buy a toy that costs C yen. Can he buy it?\n\nNote that he lives in Takahashi Kingdom, and may have coins that do not exist in Japan.\n\nConstraints\n\n* All input values are integers.\n* 1 \\leq A, B \\leq 500\n* 1 \\leq C \\leq 1000\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B C", "grammar": {"productions": ["<S>->A <s> B <s> C"], "constraints": ["1<=A<=500", "1<=B<=500", "1<=C<=1000"]}}
{"name": "p02789 AtCoder Beginner Contest 152 - AC or WA", "description": "Takahashi is participating in a programming contest, AXC001. He has just submitted his code to Problem A.\nThe problem has N test cases, all of which must be passed to get an AC verdict.\nTakahashi's submission has passed M cases out of the N test cases.\nDetermine whether Takahashi's submission gets an AC.\n\nConstraints\n\n* 1 \\leq N \\leq 100\n* 0 \\leq M \\leq N\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M", "grammar": {"productions": ["<S>->N <s> M"], "constraints": ["1<=N<=100", "0<=M<=N"]}}
{"name": "486_A. Calculating Function", "description": "For a positive integer n let's define a function f:\n\nf(n) = - 1 + 2 - 3 + .. + ( - 1)nn\n\nYour task is to calculate f(n) for a given integer n.\n\nInput\n\nThe single line contains the positive integer n (1 \u2264 n \u2264 10^15).", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=10^15"]}}
{"name": "1272_B. Snow Walking Robot", "description": "Recently you have bought a snow walking robot and brought it home. Suppose your home is a cell (0, 0) on an infinite grid.\n\nYou also have the sequence of instructions of this robot. It is written as the string s consisting of characters 'L', 'R', 'U' and 'D'. If the robot is in the cell (x, y) right now, he can move to one of the adjacent cells (depending on the current instruction).\n\n  * If the current instruction is 'L', then the robot can move to the left to (x - 1, y); \n  * if the current instruction is 'R', then the robot can move to the right to (x + 1, y); \n  * if the current instruction is 'U', then the robot can move to the top to (x, y + 1); \n  * if the current instruction is 'D', then the robot can move to the bottom to (x, y - 1). \n\n\n\nYou've noticed the warning on the last page of the manual: if the robot visits some cell (except (0, 0)) twice then it breaks.\n\nSo the sequence of instructions is valid if the robot starts in the cell (0, 0), performs the given instructions, visits no cell other than (0, 0) two or more times and ends the path in the cell (0, 0). Also cell (0, 0) should be visited at most two times: at the beginning and at the end (if the path is empty then it is visited only once). For example, the following sequences of instructions are considered valid: \"UD\", \"RL\", \"UUURULLDDDDLDDRRUU\", and the following are considered invalid: \"U\" (the endpoint is not (0, 0)) and \"UUDD\" (the cell (0, 1) is visited twice).\n\nThe initial sequence of instructions, however, might be not valid. You don't want your robot to break so you decided to reprogram it in the following way: you will remove some (possibly, all or none) instructions from the initial sequence of instructions, then rearrange the remaining instructions as you wish and turn on your robot to move. \n\nYour task is to remove as few instructions from the initial sequence as possible and rearrange the remaining ones so that the sequence is valid. Report the valid sequence of the maximum length you can obtain.\n\nNote that you can choose any order of remaining instructions (you don't need to minimize the number of swaps or any other similar metric).\n\nYou have to answer q independent test cases.\n\nInput\n\nThe first line of the input contains one integer q (1 \u2264 q \u2264 2 \u22c5 10^4) \u2014 the number of test cases.\n\nThe next q lines contain test cases. The i-th test case is given as the string s consisting of at least 1 and no more than 10^5 characters 'L', 'R', 'U' and 'D' \u2014 the initial sequence of instructions.\n\nIt is guaranteed that the sum of |s| (where |s| is the length of s) does not exceed 10^5 over all test cases (\u2211 |s| \u2264 10^5).", "grammar": {"productions": ["<S>->[q] <n> <T_q>", "<T_i>-><T_i-1> <n> [LRUD]{1,10^5}", "<T_1>->[LRUD]{1,10^5}"], "constraints": ["1<=q<=2*10^4"]}}
{"name": "p02807 Dwango Programming Contest 6th - Fusing Slimes", "description": "There are N slimes standing on a number line. The i-th slime from the left is at position x_i.\n\nIt is guaruanteed that 1 \\leq x_1 < x_2 < \\ldots < x_N \\leq 10^{9}.\n\nNiwango will perform N-1 operations. The i-th operation consists of the following procedures:\n\n* Choose an integer k between 1 and N-i (inclusive) with equal probability.\n* Move the k-th slime from the left, to the position of the neighboring slime to the right.\n* Fuse the two slimes at the same position into one slime.\n\n\n\nFind the total distance traveled by the slimes multiplied by (N-1)! (we can show that this value is an integer), modulo (10^{9}+7). If a slime is born by a fuse and that slime moves, we count it as just one slime.\n\nConstraints\n\n* 2 \\leq N \\leq 10^{5}\n* 1 \\leq x_1 < x_2 < \\ldots < x_N \\leq 10^{9}\n* x_i is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nx_1 x_2 \\ldots x_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> x_i", "<T_1>->x_1"], "constraints": ["1<=N<=10^5", "1<=x_i<=10^9"]}}
{"name": "755_A. PolandBall and Hypothesis", "description": "PolandBall is a young, clever Ball. He is interested in prime numbers. He has stated a following hypothesis: \"There exists such a positive integer n that for each positive integer m number n\u00b7m + 1 is a prime number\".\n\nUnfortunately, PolandBall is not experienced yet and doesn't know that his hypothesis is incorrect. Could you prove it wrong? Write a program that finds a counterexample for any n.\n\nInput\n\nThe only number in the input is n (1 \u2264 n \u2264 1000) \u2014 number from the PolandBall's hypothesis.", "grammar": {"productions": ["<S>->N"], "constraints": ["1<=N<=1000"]}}
{"name": "1111_A. Superhero Transformation", "description": "We all know that a superhero can transform to certain other superheroes. But not all Superheroes can transform to any other superhero. A superhero with name s can transform to another superhero with name t if s can be made equal to t by changing any vowel in s to any other vowel and any consonant in s to any other consonant. Multiple changes can be made.\n\nIn this problem, we consider the letters 'a', 'e', 'i', 'o' and 'u' to be vowels and all the other letters to be consonants.\n\nGiven the names of two superheroes, determine if the superhero with name s can be transformed to the Superhero with name t.\n\nInput\n\nThe first line contains the string s having length between 1 and 1000, inclusive.\n\nThe second line contains the string t having length between 1 and 1000, inclusive.\n\nBoth strings s and t are guaranteed to be different and consist of lowercase English letters only.", "grammar": {"productions": ["<S>->[a-z]{1,1000} <n> [a-z]{1,1000}"], "constraints": []}}
{"name": "p03631 AtCoder Beginner Contest 070 - Palindromic Number", "description": "You are given a three-digit positive integer N.\nDetermine whether N is a palindromic number.\nHere, a palindromic number is an integer that reads the same backward as forward in decimal notation.\n\nConstraints\n\n* 100\u2264N\u2264999\n* N is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["100<=N<=999"]}}
{"name": "p02790 AtCoder Beginner Contest 152 - Comparing Strings", "description": "Given are 1-digit positive integers a and b. Consider these two strings: the concatenation of b copies of the digit a, and the concatenation of a copies of the digit b. Which of these is lexicographically smaller?\n\nConstraints\n\n* 1 \\leq a \\leq 9\n* 1 \\leq b \\leq 9\n* a and b are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\na b", "grammar": {"productions": ["<S>->a <s> b"], "constraints": ["1<=a<=9", "1<=b<=9"]}}
{"name": "1405_B. Array Cancellation", "description": "You're given an array a of n integers, such that a_1 + a_2 + \u22c5\u22c5\u22c5 + a_n = 0.\n\nIn one operation, you can choose two different indices i and j (1 \u2264 i, j \u2264 n), decrement a_i by one and increment a_j by one. If i < j this operation is free, otherwise it costs one coin.\n\nHow many coins do you have to spend in order to make all elements equal to 0?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 5000). Description of the test cases follows.\n\nThe first line of each test case contains an integer n (1 \u2264 n \u2264 10^5) \u2014 the number of elements.\n\nThe next line contains n integers a_1, \u2026, a_n (-10^9 \u2264 a_i \u2264 10^9). It is given that \u2211_{i=1}^n a_i = 0.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=5000", "1<=n<=10^5", "-10^9 <=a_i<=10^9"]}}
{"name": "p02784 AtCoder Beginner Contest 153 - Common Raccoon vs Monster", "description": "Raccoon is fighting with a monster.\n\nThe health of the monster is H.\n\nRaccoon can use N kinds of special moves. Using the i-th move decreases the monster's health by A_i. There is no other way to decrease the monster's health.\n\nRaccoon wins when the monster's health becomes 0 or below.\n\nIf Raccoon can win without using the same move twice or more, print `Yes`; otherwise, print `No`.\n\nConstraints\n\n* 1 \\leq H \\leq 10^9\n* 1 \\leq N \\leq 10^5\n* 1 \\leq A_i \\leq 10^4\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nH N\nA_1 A_2 ... A_N", "grammar": {"productions": ["<S>->H <s> [N] <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["1<=H<=10^9", "1<=N<=10^5", "1<=A_i<=10^4"]}}
{"name": "1209_A. Paint the Numbers", "description": "You are given a sequence of integers a_1, a_2, ..., a_n. You need to paint elements in colors, so that: \n\n  * If we consider any color, all elements of this color must be divisible by the minimal element of this color. \n  * The number of used colors must be minimized. \n\n\n\nFor example, it's fine to paint elements [40, 10, 60] in a single color, because they are all divisible by 10. You can use any color an arbitrary amount of times (in particular, it is allowed to use a color only once). The elements painted in one color do not need to be consecutive.\n\nFor example, if a=[6, 2, 3, 4, 12] then two colors are required: let's paint 6, 3 and 12 in the first color (6, 3 and 12 are divisible by 3) and paint 2 and 4 in the second color (2 and 4 are divisible by 2). For example, if a=[10, 7, 15] then 3 colors are required (we can simply paint each element in an unique color).\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 100), where n is the length of the given sequence.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 100). These numbers can contain duplicates.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=100", "1<=a_i<=100"]}}
{"name": "1389_C. Good String", "description": "Let's call left cyclic shift of some string t_1 t_2 t_3 ... t_{n - 1} t_n as string t_2 t_3 ... t_{n - 1} t_n t_1.\n\nAnalogically, let's call right cyclic shift of string t as string t_n t_1 t_2 t_3 ... t_{n - 1}.\n\nLet's say string t is good if its left cyclic shift is equal to its right cyclic shift.\n\nYou are given string s which consists of digits 0\u20139.\n\nWhat is the minimum number of characters you need to erase from s to make it good?\n\nInput\n\nThe first line contains single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nNext t lines contains test cases \u2014 one per line. The first and only line of each test case contains string s (2 \u2264 |s| \u2264 2 \u22c5 10^5). Each character s_i is digit 0\u20139.\n\nIt's guaranteed that the total length of strings doesn't exceed 2 \u22c5 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [0-9]{2,2*10^5}", "<T_1>->[0-9]{2,2*10^5}"], "constraints": ["1<=t<=1000"]}}
{"name": "p02583 AtCoder Beginner Contest 175 - Making Triangle", "description": "We have sticks numbered 1, \\cdots, N. The length of Stick i (1 \\leq i \\leq N) is L_i.\n\nIn how many ways can we choose three of the sticks with different lengths that can form a triangle?\n\nThat is, find the number of triples of integers (i, j, k) (1 \\leq i < j < k \\leq N) that satisfy both of the following conditions:\n\n* L_i, L_j, and L_k are all different.\n* There exists a triangle whose sides have lengths L_i, L_j, and L_k.\n\nConstraints\n\n* 1 \\leq N \\leq 100\n* 1 \\leq L_i \\leq 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nL_1 L_2 \\cdots L_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> L_i", "<T_1>->L_1"], "constraints": ["1<=N<=100", "1<=L_i<=10^9"]}}
{"name": "1374_A. Required Remainder", "description": "You are given three integers x, y and n. Your task is to find the maximum integer k such that 0 \u2264 k \u2264 n that k mod x = y, where mod is modulo operation. Many programming languages use percent operator % to implement it.\n\nIn other words, with given x, y and n you need to find the maximum possible integer from 0 to n that has the remainder y modulo x.\n\nYou have to answer t independent test cases. It is guaranteed that such k exists for each test case.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 5 \u22c5 10^4) \u2014 the number of test cases. The next t lines contain test cases.\n\nThe only line of the test case contains three integers x, y and n (2 \u2264 x \u2264 10^9;~ 0 \u2264 y < x;~ y \u2264 n \u2264 10^9).\n\nIt can be shown that such k always exists under the given constraints.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> x <s> y <s> n", "<T_1>->x <s> y <s> n"], "constraints": ["1<=t<=5*10^4", "2<=x<=10^9", "0<=y<=x", "y<=n<=10^9"]}}
{"name": "110_A. Nearly Lucky Number", "description": "Petya loves lucky numbers. We all know that lucky numbers are the positive integers whose decimal representations contain only the lucky digits 4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not.\n\nUnfortunately, not all numbers are lucky. Petya calls a number nearly lucky if the number of lucky digits in it is a lucky number. He wonders whether number n is a nearly lucky number.\n\nInput\n\nThe only line contains an integer n (1 \u2264 n \u2264 10^18).\n\nPlease do not use the %lld specificator to read or write 64-bit numbers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specificator.", "grammar": {"productions": ["<S>->N"], "constraints": ["1<=N<=10^18"]}}
{"name": "1312_C. Adding Powers", "description": "Suppose you are performing the following algorithm. There is an array v_1, v_2, ..., v_n filled with zeroes at start. The following operation is applied to the array several times \u2014 at i-th step (0-indexed) you can: \n\n  * either choose position pos (1 \u2264 pos \u2264 n) and increase v_{pos} by k^i; \n  * or not choose any position and skip this step. \n\n\n\nYou can choose how the algorithm would behave on each step and when to stop it. The question is: can you make array v equal to the given array a (v_j = a_j for each j) after some step?\n\nInput\n\nThe first line contains one integer T (1 \u2264 T \u2264 1000) \u2014 the number of test cases. Next 2T lines contain test cases \u2014 two lines per test case.\n\nThe first line of each test case contains two integers n and k (1 \u2264 n \u2264 30, 2 \u2264 k \u2264 100) \u2014 the size of arrays v and a and value k used in the algorithm.\n\nThe second line contains n integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{16}) \u2014 the array you'd like to achieve.", "grammar": {"productions": ["<S>->[T] <n> <T_T>", "<T_i>-><T_i-1> <n> [n] <s> k <n> <L_n>", "<T_1>->[n] <s> k <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=T<=1000", "1<=n<=30", "2<=k<=100", "0<=a_i<=10^16"]}}
{"name": "p02641 AtCoder Beginner Contest 170 - Forbidden List", "description": "Given are an integer X and an integer sequence of length N: p_1, \\ldots, p_N.\n\nAmong the integers not contained in the sequence p_1, \\ldots, p_N (not necessarily positive), find the integer nearest to X, that is, find the integer whose absolute difference with X is the minimum. If there are multiple such integers, report the smallest such integer.\n\nConstraints\n\n* 1 \\leq X \\leq 100\n* 0 \\leq N \\leq 100\n* 1 \\leq p_i \\leq 100\n* p_1, \\ldots, p_N are all distinct.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX N\np_1 ... p_N", "grammar": {"productions": ["<S>->X <s> [N] <n> <T_N>", "<T_i>-><T_i-1> <s> p_i", "<T_1>->p_1", "<T_0>->\u03b5"], "constraints": ["1<=X<=100", "0<=N<=100", "1<=p_i<=100", "p_i!=p_j"]}}
{"name": "1199_B. Water Lily", "description": "While sailing on a boat, Inessa noticed a beautiful water lily flower above the lake's surface. She came closer and it turned out that the lily was exactly H centimeters above the water surface. Inessa grabbed the flower and sailed the distance of L centimeters. Exactly at this point the flower touched the water surface.\n\n<image>\n\nSuppose that the lily grows at some point A on the lake bottom, and its stem is always a straight segment with one endpoint at point A. Also suppose that initially the flower was exactly above the point A, i.e. its stem was vertical. Can you determine the depth of the lake at point A?\n\nInput\n\nThe only line contains two integers H and L (1 \u2264 H < L \u2264 10^{6}).", "grammar": {"productions": ["<S>->H <s> L"], "constraints": ["1<=H<L<=10^6"]}}
{"name": "580_C. Kefa and Park", "description": "Kefa decided to celebrate his first big salary by going to the restaurant. \n\nHe lives by an unusual park. The park is a rooted tree consisting of n vertices with the root at vertex 1. Vertex 1 also contains Kefa's house. Unfortunaely for our hero, the park also contains cats. Kefa has already found out what are the vertices with cats in them.\n\nThe leaf vertices of the park contain restaurants. Kefa wants to choose a restaurant where he will go, but unfortunately he is very afraid of cats, so there is no way he will go to the restaurant if the path from the restaurant to his house contains more than m consecutive vertices with cats. \n\nYour task is to help Kefa count the number of restaurants where he can go.\n\nInput\n\nThe first line contains two integers, n and m (2 \u2264 n \u2264 10^5, 1 \u2264 m \u2264 n) \u2014 the number of vertices of the tree and the maximum number of consecutive vertices with cats that is still ok for Kefa.\n\nThe second line contains n integers a1, a2, ..., an, where each ai either equals to 0 (then vertex i has no cat), or equals to 1 (then vertex i has a cat).\n\nNext n - 1 lines contains the edges of the tree in the format \"xi yi\" (without the quotes) (1 \u2264 xi, yi \u2264 n, xi \u2260 yi), where xi and yi are the vertices of the tree, connected by an edge. \n\nIt is guaranteed that the given set of edges specifies a tree.", "grammar": {"productions": ["<S>->[n] <s> m <n> <T_n> <n> <L_n-1>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1", "<L_i>-><L_i-1> <n> x_i <s> y_i", "<L_1>->x_1 <s> y_1", "a_i->0|1"], "constraints": ["2<=n<=10^5", "1<=m<=n", "1<=x_i<=n", "1<=y_i<=n", "x_i!=y_i"]}}
{"name": "p02722 AtCoder Beginner Contest 161 - Division or Subtraction", "description": "Given is a positive integer N.\n\nWe will choose an integer K between 2 and N (inclusive), then we will repeat the operation below until N becomes less than K.\n\n* Operation: if K divides N, replace N with N/K; otherwise, replace N with N-K.\n\n\n\nIn how many choices of K will N become 1 in the end?\n\nConstraints\n\n* 2 \\leq N \\leq 10^{12}\n* N is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["2<=N<=10^12"]}}
{"name": "1305_A. Kuroni and the Gifts", "description": "Kuroni has n daughters. As gifts for them, he bought n necklaces and n bracelets:\n\n  * the i-th necklace has a brightness a_i, where all the a_i are pairwise distinct (i.e. all a_i are different), \n  * the i-th bracelet has a brightness b_i, where all the b_i are pairwise distinct (i.e. all b_i are different). \n\n\n\nKuroni wants to give exactly one necklace and exactly one bracelet to each of his daughters. To make sure that all of them look unique, the total brightnesses of the gifts given to each daughter should be pairwise distinct. Formally, if the i-th daughter receives a necklace with brightness x_i and a bracelet with brightness y_i, then the sums x_i + y_i should be pairwise distinct. Help Kuroni to distribute the gifts.\n\nFor example, if the brightnesses are a = [1, 7, 5] and b = [6, 1, 2], then we may distribute the gifts as follows:\n\n  * Give the third necklace and the first bracelet to the first daughter, for a total brightness of a_3 + b_1 = 11.\n  * Give the first necklace and the third bracelet to the second daughter, for a total brightness of a_1 + b_3 = 3.\n  * Give the second necklace and the second bracelet to the third daughter, for a total brightness of a_2 + b_2 = 8. \n\n\n\nHere is an example of an invalid distribution: \n\n  * Give the first necklace and the first bracelet to the first daughter, for a total brightness of a_1 + b_1 = 7.\n  * Give the second necklace and the second bracelet to the second daughter, for a total brightness of a_2 + b_2 = 8.\n  * Give the third necklace and the third bracelet to the third daughter, for a total brightness of a_3 + b_3 = 7. \n\n\n\nThis distribution is invalid, as the total brightnesses of the gifts received by the first and the third daughter are the same. Don't make them this upset!\n\nInput\n\nThe input consists of multiple test cases. The first line contains an integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 100) \u2014 the number of daughters, necklaces and bracelets.\n\nThe second line of each test case contains n distinct integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 1000) \u2014 the brightnesses of the necklaces.\n\nThe third line of each test case contains n distinct integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 1000) \u2014 the brightnesses of the bracelets.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n> <n> <Z_n>", "<T_1>->[n] <n> <L_n> <n> <Z_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1", "<Z_i>-><Z_i-1> <s> b_i", "<Z_1>->b_1"], "constraints": ["1<=t<=100", "1<=n<=100", "1<=a_i<=1000", "1<=b_i<=1000"]}}
{"name": "1149_A. Prefix Sum Primes", "description": "We're giving away nice huge bags containing number tiles! A bag we want to present to you contains n tiles. Each of them has a single number written on it \u2014 either 1 or 2.\n\nHowever, there is one condition you must fulfill in order to receive the prize. You will need to put all the tiles from the bag in a sequence, in any order you wish. We will then compute the sums of all prefixes in the sequence, and then count how many of these sums are prime numbers. If you want to keep the prize, you will need to maximize the number of primes you get.\n\nCan you win the prize? Hurry up, the bags are waiting!\n\nInput\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 200 000) \u2014 the number of number tiles in the bag. The following line contains n space-separated integers a_1, a_2, ..., a_n (a_i \u2208 \\{1, 2\\}) \u2014 the values written on the tiles.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1", "a_i->1|2"], "constraints": ["1<=n<=2000000"]}}
{"name": "p02707 AtCoder Beginner Contest 163 - management", "description": "A company has N members, who are assigned ID numbers 1, ..., N.\n\nEvery member, except the member numbered 1, has exactly one immediate boss with a smaller ID number.\n\nWhen a person X is the immediate boss of a person Y, the person Y is said to be an immediate subordinate of the person X.\n\nYou are given the information that the immediate boss of the member numbered i is the member numbered A_i. For each member, find how many immediate subordinates it has.\n\nConstraints\n\n* 2 \\leq N \\leq 2 \\times 10^5\n* 1 \\leq A_i < i\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_2 ... A_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_2>->A_2"], "constraints": ["2<=N<=2*10^5", "1<=A_i<i"]}}
{"name": "p03565 AtCoder Beginner Contest 076 - Dubious Document 2", "description": "E869120 found a chest which is likely to contain treasure.\nHowever, the chest is locked. In order to open it, he needs to enter a string S consisting of lowercase English letters.\nHe also found a string S', which turns out to be the string S with some of its letters (possibly all or none) replaced with `?`.\n\nOne more thing he found is a sheet of paper with the following facts written on it:\n\n* Condition 1: The string S contains a string T as a contiguous substring.\n* Condition 2: S is the lexicographically smallest string among the ones that satisfy Condition 1.\n\n\n\nPrint the string S.\nIf such a string does not exist, print `UNRESTORABLE`.\n\nConstraints\n\n* 1 \\leq |S'|, |T| \\leq 50\n* S' consists of lowercase English letters and `?`.\n* T consists of lowercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS\nT'", "grammar": {"productions": ["<S>->S <n> T", "S->[a-z?]{1,50}", "T->[a-z]{1,50}"], "constraints": []}}
{"name": "p02934 AtCoder Beginner Contest 138 - Resistors in Parallel", "description": "Given is a sequence of N integers A_1, \\ldots, A_N.\n\nFind the (multiplicative) inverse of the sum of the inverses of these numbers, \\frac{1}{\\frac{1}{A_1} + \\ldots + \\frac{1}{A_N}}.\n\nConstraints\n\n* 1 \\leq N \\leq 100\n* 1 \\leq A_i \\leq 1000\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 A_2 \\ldots A_N", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["1<=n<=100", "1<=A_i<=1000"]}}
